========================================================================
Set Map (Key)
========================================================================
primitive Int;
extends mutates fun set(self: map<K, V>, key: K, val: V);

contract A {
    init() {
        let fizz: map<Int, Int> = emptyMap();

        fizz.set(<caret>)
    }
}
------------------------------------------------------------------------
key: K
fun set(self: map<K, V>, key: K, val: V)

========================================================================
Set Map (Value)
========================================================================
primitive Int;
extends mutates fun set(self: map<K, V>, key: K, val: V);

contract A {
    init() {
        let fizz: map<Int, Int> = emptyMap();

        fizz.set(42, <caret>)
    }
}
------------------------------------------------------------------------
val: V
fun set(self: map<K, V>, key: K, val: V)

========================================================================
Get value from Map
========================================================================
primitive Int;
extends fun get(self: map<K, V>, key: K): V?;
contract A {
    init() {
        let fizz: map<Int, Int> = emptyMap();

        fizz.get(<caret>);
    }
}
------------------------------------------------------------------------
key: K
fun get(self: map<K, V>, key: K)

========================================================================
Replace value map by key (caret on key)
========================================================================
primitive Int;
extends mutates fun replace(self: map<K, V>, key: K, val: V): Bool;
contract A {
    init() {
        let fizz: map<Int, Int> = emptyMap();

        fizz.replace(<caret>)
    }
}
------------------------------------------------------------------------
key: K
fun replace(self: map<K, V>, key: K, val: V)

========================================================================
Replace value map by key (caret on value)
========================================================================
primitive Int;
extends mutates fun replace(self: map<K, V>, key: K, val: V): Bool;
contract A {
    init() {
        let fizz: map<Int, Int> = emptyMap();

        fizz.replace(42, <caret>)
    }
}
------------------------------------------------------------------------
val: V
fun replace(self: map<K, V>, key: K, val: V)
