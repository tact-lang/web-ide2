========================================================================
Function documentation
========================================================================
fun <caret>test1() {}
extends fun <caret>test2() {}

@name(__foo)
native <caret>test3();

native <caret>test4();
------------------------------------------------------------------------
```tact
fun test1()
```
```tact
extends fun test2()
```
```tact
@name(__foo)
native test3()
```
```tact
native test4()
```

========================================================================
Function documentation with parameters
========================================================================
primitive String;
primitive Int;

fun <caret>test(name: String, age: Int) {}
------------------------------------------------------------------------
```tact
fun test(name: String, age: Int)
```

========================================================================
Function documentation with parameter and return type
========================================================================
primitive String;
primitive Int;

fun <caret>test(name: String): String {}
------------------------------------------------------------------------
```tact
fun test(name: String): String
```

========================================================================
Asm function documentation
========================================================================
asm fun <caret>test() { ONE TWO THREE }
asm(self other) fun <caret>test() { b{00} PUSHSLICE }
------------------------------------------------------------------------
```tact
asm fun test() { ONE TWO THREE }
```
Gas: `~36`
```tact
asm(self other) fun test() { b{00} PUSHSLICE }
```
Gas: `22`

========================================================================
Asm function documentation with one line body
========================================================================
asm fun <caret>test() { ONE }
------------------------------------------------------------------------
```tact
asm fun test() { ONE }
```
Gas: `18`

========================================================================
Asm function documentation with multiline body
========================================================================
asm fun <caret>test() {
    ONE
}
------------------------------------------------------------------------
```tact
asm fun test()
```
Gas: `18`

========================================================================
Function documentation with /// doc comment with one line
========================================================================
/// This is one line comment
fun <caret>test() {
    test();
}
------------------------------------------------------------------------
```tact
fun test()
```
This is one line comment

========================================================================
Function documentation with // comment with one line
========================================================================
// This is one line comment
fun <caret>test() {
    test();
}
------------------------------------------------------------------------
```tact
fun test()
```
This is one line comment

========================================================================
Function documentation with complex /// doc comment
========================================================================
/// Calculates and returns the so-called _original_ forward fee in nanoToncoins `Int` for an outgoing message
/// based on the `fwdFee` obtained from the incoming message. If both the source and the destination addresses
/// are in the basechain, then specify `isMasterchain` as `false`. Otherwise, specify `true`.
///
/// This function is useful when the outgoing message depends heavily on the structure of the incoming message,
/// so much so that you cannot fully predict the fee using `getForwardFee()` alone. Even if you could, calculating
/// the exact fee with nanoToncoin-level precision can be very expensive, so the approximate value given by this
/// function is often good enough.
///
/// Attempts to specify a negative value of `fwdFee` throw an exception with exit code 5: `Integer out of expected range`.
///
/// ```tact
/// fun example() {
///     let fwdFee: Int = context().readForwardFee();
///     let origFee: Int = getOriginalFwdFee(fee, false);
/// }
/// ```
///
/// See:
/// * https://docs.tact-lang.org/ref/core-advanced#getoriginalfwdfee
/// * https://docs.tact-lang.org/ref/core-advanced#getforwardfee
/// * https://docs.tact-lang.org/ref/core-advanced#contextreadforwardfee
///
asm fun <caret>getOriginalFwdFee(fwdFee: Int, isMasterchain: Bool): Int { GETORIGINALFWDFEE }
------------------------------------------------------------------------
```tact
asm fun getOriginalFwdFee(fwdFee: Int, isMasterchain: Bool): Int { GETORIGINALFWDFEE }
```
Gas: `~0`

Calculates and returns the so-called _original_ forward fee in nanoToncoins `Int` for an outgoing message based on the `fwdFee` obtained from the incoming message. If both the source and the destination addresses are in the basechain, then specify `isMasterchain` as `false`. Otherwise, specify `true`.

 This function is useful when the outgoing message depends heavily on the structure of the incoming message, so much so that you cannot fully predict the fee using `getForwardFee()` alone. Even if you could, calculating the exact fee with nanoToncoin-level precision can be very expensive, so the approximate value given by this function is often good enough.

 Attempts to specify a negative value of `fwdFee` throw an exception with exit code 5: `Integer out of expected range`.


```tact
fun example() {
    let fwdFee: Int = context().readForwardFee();
    let origFee: Int = getOriginalFwdFee(fee, false);
}
```
 See:


* https://docs.tact-lang.org/ref/core-advanced#getoriginalfwdfee

* https://docs.tact-lang.org/ref/core-advanced#getforwardfee

* https://docs.tact-lang.org/ref/core-advanced#contextreadforwardfee

========================================================================
Function documentation with list
========================================================================
/// Some interesting list
/// - Point 1
///   with other line
/// - Point 2
fun <caret>foo(): Int {}
------------------------------------------------------------------------
```tact
fun foo(): Int
```
Some interesting list
- Point 1
  with other line
- Point 2

========================================================================
Function documentation with T? type
========================================================================
fun <caret>foo(): Int? {}
------------------------------------------------------------------------
```tact
fun foo(): Int?
```
