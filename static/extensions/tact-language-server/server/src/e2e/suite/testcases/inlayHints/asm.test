========================================================================
Simple assembly function with inline body
========================================================================
primitive Int;

asm fun foo() { 10 PUSHINT }
------------------------------------------------------------------------
primitive Int;

asm fun foo() { 10 PUSHINT/* : 18 */ }

========================================================================
Simple assembly function with inline body without spaces
========================================================================
primitive Int;

asm fun foo() {10 PUSHINT}
------------------------------------------------------------------------
primitive Int;

asm fun foo() {10 PUSHINT/* : 18 */}

========================================================================
Simple assembly function with multiline body
========================================================================
primitive Int;

asm fun foo() {
    10 PUSHINT
}
------------------------------------------------------------------------
primitive Int;

asm fun foo() {/*   18 gas */
    10 PUSHINT/* : 18 */
}

========================================================================
Assembly function with PUSHCONT
========================================================================
primitive Int;

asm fun foo() {
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        NULL  // push a single null
        SWAP  // place Builder on top
    }> PUSHCONT
}
------------------------------------------------------------------------
primitive Int;

asm fun foo() {/*   80 gas */
    <{/* : 54 */
        DROP2/* : 18 */ // drop `data` and `code`, since either of those is null
        NULL/* : 18 */  // push a single null
        SWAP/* : 18 */  // place Builder on top
    }> PUSHCONT/* : 26 */
}

========================================================================
Assembly function with unknown instruction
========================================================================
primitive Int;

asm fun foo() { 10 PUSHINT2 }
------------------------------------------------------------------------
primitive Int;

asm fun foo() { 10 PUSHINT2/* : no data */ }

========================================================================
Big assembly function with PUSHCONT
========================================================================
asm fun send(params: SendParameters) {
    // Instructions are grouped, and the stack states they produce as a group are shown right after.
    // In the end, our message Cell should have the following TL-B structure:
    // message$_ {X:Type}
    //   info:CommonMsgInfoRelaxed
    //   init:(Maybe (Either StateInit ^StateInit))
    //   body:(Either X ^X)
    // = MessageRelaxed X;

    // Group 1: Rearrangements
    3 4 BLKSWAP
    s2 XCHG0
    // → Stack state
    // s0: `params.bounce`
    // s1: `params.to`
    // s2: `params.value`
    // s3: `params.data`
    // s4: `params.code`
    // s5: `params.body`
    // s6: `params.mode`
    // For brevity, the "params" prefix will be omitted from now on.

    // Group 2: Storing the `bounce`, `to` and `value` into a Builder
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 3: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 4: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        NULL  // push a single null
        SWAP  // place Builder on top
    }> PUSHCONT

    // Group 4: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        NEWC               // start composing StateInit
        b{00} STSLICECONST // split_depth and special
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
        ENDC               // end composing StateInit
        SWAP               // place Builder on top
        b{1} STSLICECONST  // an extra bit for storing StateInit as ref
    }> PUSHCONT

    // Group 4: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 5: Finalizing the message
    STDICT // store StateInit
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 6: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
}
------------------------------------------------------------------------
asm fun send(params: SendParameters) {/*   ~2274 gas */
    // Instructions are grouped, and the stack states they produce as a group are shown right after.
    // In the end, our message Cell should have the following TL-B structure:
    // message$_ {X:Type}
    //   info:CommonMsgInfoRelaxed
    //   init:(Maybe (Either StateInit ^StateInit))
    //   body:(Either X ^X)
    // = MessageRelaxed X;

    // Group 1: Rearrangements
    3 4 BLKSWAP/* : 26 */
    s2 XCHG0/* : 18 */
    // → Stack state
    // s0: `params.bounce`
    // s1: `params.to`
    // s2: `params.value`
    // s3: `params.data`
    // s4: `params.code`
    // s5: `params.body`
    // s6: `params.mode`
    // For brevity, the "params" prefix will be omitted from now on.

    // Group 2: Storing the `bounce`, `to` and `value` into a Builder
    NEWC/* : 18 */
    b{01} STSLICECONST/* : 24 */  // store tag = $0 and ihr_disabled = true
    1 STI/* : 26 */               // store `bounce`
    b{000} STSLICECONST/* : 24 */ // store bounced = false and src = addr_none
    STSLICE/* : 18 */             // store `to`
    SWAP/* : 18 */
    STGRAMS/* : 26 */             // store `value`
    105 PUSHINT/* : 26 */         // 1 + 4 + 4 + 64 + 32
    STZEROES/* : 26 */            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 3: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0/* : 18 */
    DUP2/* : 18 */
    ISNULL/* : 18 */
    SWAP/* : 18 */
    ISNULL/* : 18 */
    MUL/* : 18 */ // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 4: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{/* : 54 */
        DROP2/* : 18 */ // drop `data` and `code`, since either of those is null
        NULL/* : 18 */  // push a single null
        SWAP/* : 18 */  // place Builder on top
    }> PUSHCONT/* : 26 */

    // Group 4: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{/* : 678 */
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        NEWC/* : 18 */               // start composing StateInit
        b{00} STSLICECONST/* : 24 */ // split_depth and special
        STDICT/* : 26 */             // store code
        STDICT/* : 26 */             // store data
        b{0} STSLICECONST/* : 24 */  // store library
        ENDC/* : 518 */               // end composing StateInit
        SWAP/* : 18 */               // place Builder on top
        b{1} STSLICECONST/* : 24 */  // an extra bit for storing StateInit as ref
    }> PUSHCONT/* : 26 */

    // Group 4: IFELSE that does the branching shown above
    IFELSE/* : 18 */
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 5: Finalizing the message
    STDICT/* : 26 */ // store StateInit
    STDICT/* : 26 */ // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC/* : 518 */
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 6: Sending the message, with `mode` on top
    SWAP/* : 18 */
    SENDRAWMSG/* : 526 */ // https://github.com/tact-lang/tact/issues/1558
}
