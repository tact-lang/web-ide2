========================================================================
Simple Contract
========================================================================
primitive Int;

contract A {

}
------------------------------------------------------------------------
[3, 4]
primitive Int;

contract A {...

}

========================================================================
Contract with receiver
========================================================================
primitive Int;

contract A {
    receive("Test") {
        let a: Int = 32;
    }
}
------------------------------------------------------------------------
[3, 6], [4, 5]
primitive Int;

contract A {...
    receive("Test") {...
        let a: Int = 32;
    }
}

========================================================================
Contract with external
========================================================================
contract Name {
    external("external") {
        // some code
    }
}
------------------------------------------------------------------------
[1, 4], [2, 3]
contract Name {...
    external("external") {...
        // some code
    }
}

========================================================================
Contract with bounced and filled body
========================================================================
contract A {
    bounced(msg: Int) {
        while (true) {
            let start = false;
        }
    }
}
------------------------------------------------------------------------
[1, 6], [2, 5], [3, 4]
contract A {...
    bounced(msg: Int) {...
        while (true) {...
            let start = false;
        }
    }
}

========================================================================
Contract with nested blocks
========================================================================
contract Nested {
    fun calculate() {
        {
            let x = 10;
            {
                let y = x * 2;
                log(y);
            }
        }
    }
}
------------------------------------------------------------------------
[1, 10], [2, 9], [3, 8], [5, 7]
contract Nested {...
    fun calculate() {...
        {...
            let x = 10;
            {...
                let y = x * 2;
                log(y);
            }
        }
    }
}

========================================================================
Contract with message handlers
========================================================================
contract Wallet {
    receive("Deposit") {
        balance += msg.amount;
    }

    receive("Withdraw") {
        if (balance >= msg.amount) {
            send(msg.amount);
            balance -= msg.amount;
        }
    }
}
------------------------------------------------------------------------
[1, 11], [2, 3], [6, 10], [7, 9]
contract Wallet {...
    receive("Deposit") {...
        balance += msg.amount;
    }

    receive("Withdraw") {...
        if (balance >= msg.amount) {...
            send(msg.amount);
            balance -= msg.amount;
        }
    }
}

========================================================================
Contract with if-else
========================================================================
contract Counter {
    fun increment() {
        if (value < 10) {
            value += 1;
        } else {
            value = 0;
        }
    }
}
------------------------------------------------------------------------
[1, 8], [2, 7], [3, 4], [5, 6]
contract Counter {...
    fun increment() {...
        if (value < 10) {...
            value += 1;
        } else {...
            value = 0;
        }
    }
}

========================================================================
Contract with empty init
========================================================================
contract A {
    init() {

    }
}
------------------------------------------------------------------------
[1, 4], [2, 3]
contract A {...
    init() {...

    }
}
