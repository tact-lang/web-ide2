========================================================================
Message field type with Tl-B
========================================================================
primitive Int;

message Point {
    x: Int as coins;
//! ^ Int as coins
    y: Int;
}
------------------------------------------------------------------------
ok

========================================================================
Message field type with Tl-B 2
========================================================================
primitive Int;

message Point {
    x: Int as coins;
    y: Slice as remaining;
//! ^ Slice as remaining
}
------------------------------------------------------------------------
type inference error at line 5:4: expected Slice as remaining, got unknown

========================================================================
Message field map type with Tl-B
========================================================================
primitive Int;

message Point {
    x: Int as coins;
    y: map<Int as uint8, Int>;
//! ^ map<Int as uint8, Int>
}
------------------------------------------------------------------------
ok

========================================================================
Message field map type with Tl-B 2
========================================================================
primitive Int;

message Point {
    x: Int as coins;
    y: map<Int as uint8, Int as uint16>;
//! ^ map<Int as uint8, Int as uint16>
}
------------------------------------------------------------------------
ok

========================================================================
Message field map type with Tl-B 3
========================================================================
primitive Int;

message Point {
    x: Int as coins;
    y: map<Int, Int as uint16>;
//! ^ map<Int, Int as uint16>
}
------------------------------------------------------------------------
ok
