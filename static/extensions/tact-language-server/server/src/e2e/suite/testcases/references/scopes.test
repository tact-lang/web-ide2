========================================================================
Let statement scope
========================================================================
fun test() {
    let <caret>value = 1;
    value + 2;
}
------------------------------------------------------------------------
References: [2:4]
Scope: LocalSearchScope:
{
    let value = 1;
    value + 2;
}

========================================================================
Foreach key scope
========================================================================
fun test() {
    foreach (<caret>key, value in map) {
        key + value;
    }
}
------------------------------------------------------------------------
References: [2:8]
Scope: LocalSearchScope:
{
        key + value;
    }

========================================================================
Foreach value scope
========================================================================
fun test() {
    foreach (key, <caret>value in map) {
        key + value;
    }
}
------------------------------------------------------------------------
References: [2:14]
Scope: LocalSearchScope:
{
        key + value;
    }

========================================================================
Catch clause scope
========================================================================
fun test() {
    try {
        something()
    } catch (<caret>err) {
        err.message;
    }
}
------------------------------------------------------------------------
References: [4:8]
Scope: LocalSearchScope:
{
        err.message;
    }

========================================================================
Function parameter scope
========================================================================
fun test(<caret>param: Int) {
    param + 1;
}
------------------------------------------------------------------------
References: [1:4]
Scope: LocalSearchScope:
{
    param + 1;
}

========================================================================
Receive function parameter scope
========================================================================
contract Test {
    receive(<caret>msg: String) {
        dump(msg);
    }
}
------------------------------------------------------------------------
References: [2:13]
Scope: LocalSearchScope:
receive(msg: String) {
        dump(msg);
    }

========================================================================
Storage variable scope
========================================================================
contract Test {
    <caret>value: Int;

    fun increment() {
        self.value = self.value + 1;
    }
}
------------------------------------------------------------------------
References: [4:13, 4:26]
Scope: LocalSearchScope:
contract Test {
    value: Int;

    fun increment() {
        self.value = self.value + 1;
    }
}

========================================================================
Storage constant scope
========================================================================
contract Test {
    const <caret>MAX: Int = 100;

    fun check(v: Int) {
        return v <= self.MAX;
    }
}
------------------------------------------------------------------------
References: [4:25]
Scope: LocalSearchScope:
contract Test {
    const MAX: Int = 100;

    fun check(v: Int) {
        return v <= self.MAX;
    }
}

========================================================================
Storage function scope
========================================================================
contract Test {
    fun <caret>increment() {
        self.value = self.value + 1;
    }

    fun foo() {
        self.increment();
    }
}
------------------------------------------------------------------------
References: [6:13]
Scope: LocalSearchScope:
contract Test {
    fun increment() {
        self.value = self.value + 1;
    }

    fun foo() {
        self.increment();
    }
}

========================================================================
Global function scope
========================================================================
fun <caret>add(a: Int, b: Int): Int {
    return a + b;
}

fun test() {
    add(1, 2);
    add(3, 4);
}
------------------------------------------------------------------------
References: [5:4, 6:4]
Scope: GlobalSearchScope

========================================================================
Global constant scope
========================================================================
const <caret>MAX_VALUE: Int = 1000;

fun test() {
    let x = MAX_VALUE;
    if (x < MAX_VALUE) {
        return MAX_VALUE;
    }
}
------------------------------------------------------------------------
References: [3:12, 4:12, 5:15]
Scope: GlobalSearchScope

========================================================================
Contract scope
========================================================================
contract <caret>Test {
    value: Int;
}

contract Child with Test {
    override fun get(): Test {
        return Test{value: 0};
    }
}
------------------------------------------------------------------------
References: [4:20, 5:24, 6:15]
Scope: GlobalSearchScope

========================================================================
Trait scope
========================================================================
trait <caret>TestTrait {
    fun increment();
}

contract Test with TestTrait {
    override fun increment() {
        // implementation
    }
}
------------------------------------------------------------------------
References: [4:19]
Scope: GlobalSearchScope

========================================================================
Primitive scope
========================================================================
primitive <caret>Int;

fun test(x: Int): Int {
    let y: Int = x;
    return Int.max(x, y);
}
------------------------------------------------------------------------
References: [2:12, 2:18, 3:11, 4:11]
Scope: GlobalSearchScope

========================================================================
Struct scope
========================================================================
struct <caret>Point {
    x: Int;
    y: Int;
}

fun makePoint(): Point {
    return Point{x: 0, y: 0};
}
------------------------------------------------------------------------
References: [5:17, 6:11]
Scope: GlobalSearchScope

========================================================================
Message scope
========================================================================
message <caret>Add {
    amount: Int;
}

contract Counter {
    receive(msg: Add) {
        self.handle(msg as Add);
    }
}
------------------------------------------------------------------------
References: [5:17, 6:27]
Scope: GlobalSearchScope

========================================================================
Field scope
========================================================================
struct Point {
    <caret>x: Int;
    y: Int;
}

fun test(p: Point) {
    let x = p.x;
    p.x = x + 1;
}
------------------------------------------------------------------------
References: [6:14, 7:6]
Scope: GlobalSearchScope

========================================================================
Self in contract
========================================================================
contract <caret>Foo {
    value: Int = 10;

    fun foo(): Int {
        return self.value;
    }
}
------------------------------------------------------------------------
References: [4:15]
Scope: GlobalSearchScope

========================================================================
Self in trait
========================================================================
trait <caret>Foo {
    value: Int = 10;

    fun foo(): Int {
        return self.value;
    }
}
------------------------------------------------------------------------
References: [4:15]
Scope: GlobalSearchScope

========================================================================
Asm functions
========================================================================
asm(param2 param1) fun foo(<caret>param1: Int, param2: String) {}
------------------------------------------------------------------------
References: [0:11]
Scope: LocalSearchScope:
asm(param2 param1) fun foo(param1: Int, param2: String) {}
