========================================================================
Type aware completion for boolean in assign
========================================================================
primitive Bool;
primitive Int;

fun bar(): Bool { return true; }
fun foo(): Int { return 0; }

fun test() {
    let value = true;
    value = <caret>
}
------------------------------------------------------------------------
13 false
13 true
13 null
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
5  value   Bool
2  bar(): Bool
2  foo(): Int
2  test()

========================================================================
Type aware completion for boolean in struct init
========================================================================
primitive Bool;
primitive Int;

fun bar(): Bool { return true; }
fun foo(): Int { return 0; }

struct Some {
    value: Bool;
}

fun test() {
    Some{ value: <caret> };
}
------------------------------------------------------------------------
13 false
13 true
13 null
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
2  bar(): Bool
2  foo(): Int
2  test()
21 Some{}

========================================================================
Type aware completion for Option in assign
========================================================================
primitive Bool;
primitive Int;

fun bar(): Int? { return null; }
fun foo(): Int { return 0; }
fun zoo(): Bool { return true; }

fun test() {
    let someValue = 10;
    let someBool = false;
    let value: Int? = null;
    value = <caret>
}
------------------------------------------------------------------------
5  someValue   Int
5  value   Int?
13 null
2  bar(): Int?
2  foo(): Int
5  someBool   Bool
13 false
13 true
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
2  test()
2  zoo(): Bool

========================================================================
Type aware completion for Option in var declaration
========================================================================
primitive Bool;
primitive Int;

fun bar(): Int? { return null; }
fun foo(): Int { return 0; }
fun zoo(): Bool { return true; }

fun test() {
    let someValue = 10;
    let someBool = false;
    let value: Int? = <caret>;
}
------------------------------------------------------------------------
5  someValue   Int
13 null
2  bar(): Int?
2  foo(): Int
5  someBool   Bool
13 false
13 true
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
2  test()
2  zoo(): Bool

========================================================================
Type aware completion for Option in var declaration without typehint
========================================================================
primitive Bool;
primitive Int;

fun bar(): Int? { return null; }
fun foo(): Int { return 0; }
fun zoo(): Bool { return true; }

fun test() {
    let someValue = 10;
    let someBool = false;
    let value = <caret>;
}
------------------------------------------------------------------------
13 false
13 null
13 true
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
5  someBool   Bool
5  someValue   Int
2  bar(): Int?
2  foo(): Int
2  test()
2  zoo(): Bool

========================================================================
Type aware completion for struct in var declaration
========================================================================
primitive Bool;
primitive Int;

struct MyStruct { value: Int; }

fun bar(): MyStruct? { return null; }
fun foo(): MyStruct { return MyStruct{}; }
fun zoo(): Bool { return true; }

fun test() {
    let someValue = 10;
    let someBool = false;
    let someStruct = MyStruct{};
    let value: MyStruct = <caret>;
}
------------------------------------------------------------------------
13 false
13 null
13 true
13 codeOf Contract   Cell
13 initOf Contract(params)   StateInit
5  someStruct   MyStruct
2  bar(): MyStruct?
2  foo(): MyStruct
21 MyStruct{}
5  someBool   Bool
5  someValue   Int
2  test()
2  zoo(): Bool
