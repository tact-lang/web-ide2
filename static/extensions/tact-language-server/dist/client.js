/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@tact-lang/opcode/dist/ast/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/ast/helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createBlock = createBlock;
exports.createInstruction = createInstruction;
function createBlock(instructions, hash, offset, length) {
    return {
        type: "block",
        instructions,
        hash,
        offset,
        length,
        cell: false,
    };
}
function createInstruction(opcode, args, offset, length, hash) {
    return {
        type: "instruction",
        opcode,
        arguments: args,
        offset,
        length,
        hash,
    };
}
//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/decompiler/disasm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/decompiler/disasm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.disassemble = disassemble;
exports.disassembleAndProcess = disassembleAndProcess;
exports.disassembleRoot = disassembleRoot;
exports.disassembleRawRoot = disassembleRawRoot;
const core_1 = __webpack_require__(/*! @ton/core */ "./node_modules/@ton/core/dist/index.js");
const subcell_1 = __webpack_require__(/*! ../utils/subcell */ "./node_modules/@tact-lang/opcode/dist/utils/subcell.js");
const operand_loader_1 = __webpack_require__(/*! ./operand-loader */ "./node_modules/@tact-lang/opcode/dist/decompiler/operand-loader.js");
const helpers_1 = __webpack_require__(/*! ../ast/helpers */ "./node_modules/@tact-lang/opcode/dist/ast/helpers.js");
const helpers_2 = __webpack_require__(/*! ../spec/helpers */ "./node_modules/@tact-lang/opcode/dist/spec/helpers.js");
const errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/@tact-lang/opcode/dist/decompiler/errors.js");
/**
 * Disassembles a cell into a list of instructions.
 */
function disassemble(args) {
    const bitsOffset = args.offset?.bits ?? 0;
    const refsOffset = args.offset?.refs ?? 0;
    const bitsLimit = args.limit?.bits ?? args.source.bits.length - bitsOffset;
    const refsLimit = args.limit?.refs ?? args.source.refs.length - refsOffset;
    // Process only a slice of the source cell to support partial disassembly
    const slice = (0, subcell_1.subslice)({
        cell: args.source,
        offsetBits: bitsOffset,
        offsetRefs: refsOffset,
        bits: bitsLimit,
        refs: refsLimit,
    });
    const instructions = [];
    const hash = args.source.hash().toString("hex");
    while (slice.remainingBits > 0) {
        const opcodeOffset = slice.offsetBits;
        const opcode = (0, operand_loader_1.decodeInstruction)(args.source, slice);
        const opcodeLength = slice.offsetBits - opcodeOffset;
        instructions.push({
            op: opcode,
            hash,
            offset: opcodeOffset,
            length: opcodeLength,
        });
    }
    // Since every cell can contain references to other cells, we need to disassemble them recursively.
    while (slice.remainingRefs > 0) {
        const source = slice.loadRef();
        instructions.push(...disassemble({ source }));
    }
    return instructions;
}
/**
 * Disassembles a cell into a list of instructions with the help of `disassembly` function
 * and processes them to correctly handle references, calls and operands.
 *
 * This function is a core function of the decompiler.
 */
function disassembleAndProcess(args) {
    const opcodes = disassemble(args);
    const hash = args.source.hash().toString("hex");
    const offset = args.offset?.bits ?? 0;
    const instructions = opcodes.map(op => processInstruction(op, args));
    if (instructions.length === 0) {
        return (0, helpers_1.createBlock)([], hash, offset, 0);
    }
    const lastInstruction = instructions.at(-1);
    if (lastInstruction === undefined)
        throw new Error("unreachable");
    return (0, helpers_1.createBlock)(instructions, hash, offset, lastInstruction.offset + lastInstruction.length);
}
/**
 * Processes an instruction to correctly handle references, calls and operands.
 */
function processInstruction(op, args) {
    const opcode = op.op;
    const opcodeName = opcode.definition.mnemonic;
    switch (opcodeName) {
        case "CALLREF": {
            return processCallRef(op, args);
        }
        case "CALLDICT":
        case "CALLDICT_LONG":
        case "JMPDICT": {
            return processCallDict(op);
        }
    }
    return processDefaultInstruction(op, args);
}
/**
 * Processes a `CALLREF` instruction.
 *
 * Decompiler has two modes for decompilation.
 *
 * In bitcode `CALLREF` means that the code of the function
 * placed in the operand of this instruction.
 *
 * In some cases we want to extract the code of the function
 * to another standalone function to make the result more readable.
 */
function processCallRef(op, args) {
    const opcode = op.op;
    const operand = opcode.operands.find(it => it.definition.name === "c");
    if (!operand || operand.type !== "ref") {
        throw new errors_1.OperandError(opcode.definition.mnemonic, "c", "Cell", {
            operands: opcode.operands,
        });
    }
    // onCellReference is set when we want to extract the code of the function
    if (args.onCellReference) {
        args.onCellReference(operand.value);
        return (0, helpers_1.createInstruction)(
        // actually INLINECALLDICT is Fift opcode, not TVM,
        // but we use it to get same behavior when compiling the resulting
        // Fift asm file back to the TVM code
        PSEUDO_INLINECALLDICT, [
            {
                type: "reference",
                hash: operand.value.hash().toString("hex"),
            },
        ], op.offset, op.length, op.hash);
    }
    const block = disassembleAndProcess({
        source: operand.value,
        offset: {
            bits: 0,
            refs: 0,
        },
        onCellReference: args.onCellReference,
    });
    return (0, helpers_1.createInstruction)(opcode, [{ ...block, cell: true }], op.offset, op.length, op.hash);
}
/**
 * Processes a `CALLDICT`, `CALLDICT_LONG` or `JMPDICT` instruction.
 */
function processCallDict(op) {
    const opcode = op.op;
    const operand = opcode.operands.find(it => it.definition.name === "n");
    if (!operand || operand.type !== "numeric") {
        throw new errors_1.OperandError(opcode.definition.mnemonic, "n", "numeric", {
            operands: opcode.operands,
        });
    }
    return (0, helpers_1.createInstruction)(opcode, [
        {
            type: "method_reference",
            methodId: operand.value,
        },
    ], op.offset, op.length, op.hash);
}
/**
 * Processes all other instructions.
 *
 * In other instructions we need to process all its operands if any.
 */
function processDefaultInstruction(op, args) {
    const opcode = op.op;
    const operands = opcode.operands.map((operand) => {
        switch (operand.type) {
            case "numeric": {
                return processNumericOperand(operand);
            }
            case "bigint": {
                return {
                    type: "scalar",
                    value: operand.value,
                };
            }
            case "ref":
            case "subslice": {
                return processRefOrSliceOperand(opcode, operand, args);
            }
            default: {
                throw new errors_1.UnknownOperandTypeError(operand, {
                    instruction: opcode.definition.mnemonic,
                });
            }
        }
    });
    return (0, helpers_1.createInstruction)(opcode, operands, op.offset, op.length, op.hash);
}
/**
 * Processes a numeric operand.
 *
 * Numeric operand can be actually be a stack entry, control register or just a scalar.
 */
function processNumericOperand(operand) {
    const displayHints = operand.definition.display_hints;
    // some instructions have hints with value that should be added to the operand
    // for example for `PUSHPOW2` it's 1
    const addHint = displayHints.find((hint) => hint.type === "add");
    const add = addHint?.value ?? 0;
    const displayNumber = (0, helpers_2.getDisplayNumber)(operand, add, displayHints);
    if ((0, helpers_2.hasHint)(displayHints, "stack")) {
        return {
            type: "stack_entry",
            value: displayNumber,
        };
    }
    if ((0, helpers_2.hasHint)(displayHints, "register")) {
        return {
            type: "control_register",
            value: displayNumber,
        };
    }
    return {
        type: "scalar",
        value: displayNumber,
    };
}
/**
 * Processes a reference or slice operand.
 */
function processRefOrSliceOperand(opcode, operand, args) {
    const displayHints = operand.definition.display_hints;
    const opcodeName = opcode.definition.mnemonic;
    if ((0, helpers_2.hasHint)(displayHints, "continuation") ||
        opcodeName === "PUSHCONT" ||
        opcodeName === "PUSHCONT_SHORT") {
        if (operand.type === "ref") {
            const block = disassembleAndProcess({
                source: operand.value,
                offset: {
                    bits: 0,
                    refs: 0,
                },
                onCellReference: args.onCellReference,
            });
            return {
                ...block,
                cell: true,
            };
        }
        return disassembleAndProcess({
            source: operand.source,
            offset: {
                bits: operand.offsetBits,
                refs: operand.offsetRefs,
            },
            limit: {
                bits: operand.limitBits,
                refs: operand.limitRefs,
            },
            onCellReference: args.onCellReference,
        });
    }
    return {
        type: "scalar",
        value: operand.value.toString(),
    };
}
function findDictOpcode(opcodes) {
    return opcodes.find(it => it.op.definition.mnemonic === "DICTPUSHCONST");
}
function findRootMethods(opcodes) {
    const methods = [];
    if (opcodes[2]?.op.definition.mnemonic === "PUSHCONT") {
        const cont = opcodes[2].op.operands.at(0);
        if (!cont || cont.type !== "subslice") {
            return methods;
        }
        const recvInternal = disassembleRawRoot(cont.value);
        methods.push({
            type: "method",
            hash: recvInternal.hash,
            offset: recvInternal.offset,
            body: recvInternal,
            id: 0,
        });
    }
    if (opcodes[6]?.op.definition.mnemonic === "PUSHCONT") {
        const cont = opcodes[6].op.operands.at(0);
        if (!cont || cont.type !== "subslice") {
            return methods;
        }
        const recvExternal = disassembleRawRoot(cont.value);
        methods.push({
            type: "method",
            hash: recvExternal.hash,
            offset: recvExternal.offset,
            body: recvExternal,
            id: -1,
        });
    }
    return methods;
}
/**
 * Disassembles the root cell into a list of instructions.
 *
 * Use this function if you want to disassemble the whole BoC file with dictionary unpacked.
 */
function disassembleRoot(cell, options) {
    const opcodes = disassemble({ source: cell });
    const args = {
        source: cell,
        offset: { bits: 0, refs: 9 },
        onCellReference: undefined,
    };
    const rootMethods = findRootMethods(opcodes);
    const dictOpcode = findDictOpcode(opcodes);
    if (!dictOpcode) {
        // Likely some non-Tact/FunC produced BoC
        return {
            type: "program",
            topLevelInstructions: opcodes.map(op => processInstruction(op, args)),
            procedures: [],
            methods: rootMethods,
            withRefs: options.computeRefs,
        };
    }
    const { procedures, methods } = deserializeDict(dictOpcode.op.operands, options.computeRefs);
    return {
        type: "program",
        topLevelInstructions: opcodes.map(op => processInstruction(op, args)),
        procedures,
        methods: [...rootMethods, ...methods],
        withRefs: options.computeRefs,
    };
}
/**
 * Disassembles a cell without any additional unpacking of the dictionary.
 */
function disassembleRawRoot(cell) {
    return disassembleAndProcess({
        source: cell,
        onCellReference: undefined,
    });
}
/**
 * Deserializes a dictionary from the dictionary opcode to list
 * of procedures and methods.
 */
function deserializeDict(operands, computeRefs) {
    const dictKeyLen = operands.find(operand => operand.definition.name === "n");
    const dictCell = operands.find(operand => operand.definition.name === "d");
    if (!dictKeyLen || !dictCell || dictKeyLen.type !== "numeric" || dictCell.type !== "ref") {
        throw new Error("Cannot find valid operands for Cell and length");
    }
    function createCodeCell() {
        return {
            serialize: (_src, _builder) => {
                throw new Error("Not implemented");
            },
            parse: (src) => {
                const cloned = src.clone(true);
                const offset = src.offsetBits;
                return { offset, cell: cloned.asCell() };
            },
        };
    }
    const countEntries = dictKeyLen.value;
    const dict = core_1.Dictionary.loadDirect(core_1.Dictionary.Keys.Int(countEntries), createCodeCell(), dictCell.value);
    const registeredCells = new Map();
    const procedures = [];
    function extractReferencedCell(cell) {
        const callHash = cell.hash().toString("hex");
        const prevCell = registeredCells.get(callHash);
        if (prevCell !== undefined) {
            return prevCell;
        }
        const name = "?fun_ref_" + callHash.substring(0, 16);
        registeredCells.set(callHash, name);
        const block = disassembleAndProcess({
            source: cell,
            onCellReference: extractReferencedCell,
        });
        procedures.push({
            type: "procedure",
            hash: callHash,
            body: block,
        });
        return name;
    }
    const methods = [...dict].map(([key, value]) => {
        return {
            type: "method",
            id: key,
            body: disassembleAndProcess({
                source: value.cell,
                offset: { bits: value.offset, refs: 0 },
                onCellReference: computeRefs ? extractReferencedCell : undefined,
            }),
            hash: value.cell.hash().toString("hex"),
            offset: value.offset,
        };
    });
    return {
        procedures,
        methods,
    };
}
const PSEUDO_INLINECALLDICT = {
    definition: {
        mnemonic: "INLINECALLDICT",
        doc: {
            fift: "",
            opcode: "",
            gas: "",
            category: "",
            stack: "",
            description: "",
            fift_examples: [],
        },
        bytecode: {
            operands: [],
            tlb: "",
            prefix: "",
        },
        control_flow: {
            branches: [],
            nobranch: true,
        },
        value_flow: {
            inputs: {
                stack: [],
                registers: [],
            },
            outputs: {
                stack: [],
                registers: [],
            },
        },
        since_version: 0,
    },
    operands: [],
};
//# sourceMappingURL=disasm.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/decompiler/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/decompiler/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnknownOperandTypeError = exports.OperandError = exports.DisassemblerError = void 0;
class DisassemblerError extends Error {
    constructor(message, details) {
        const detailsStr = details
            ? "\nDetails:\n" +
                Object.entries(details)
                    .map(([key, value]) => `  ${key}: ${JSON.stringify(value, null, 2)}`)
                    .join("\n")
            : "";
        super(message + detailsStr);
        this.name = "DisassemblerError";
    }
}
exports.DisassemblerError = DisassemblerError;
class OperandError extends DisassemblerError {
    constructor(opcode, operandName, expectedType, details) {
        super(`Cannot find ${expectedType} operand "${operandName}" for "${opcode}"`, {
            opcode,
            operandName,
            expectedType,
            ...details,
        });
        this.name = "OperandError";
    }
}
exports.OperandError = OperandError;
class UnknownOperandTypeError extends DisassemblerError {
    constructor(operand, details) {
        super(`Unknown operand type: ${operand.type}`, {
            type: operand.type,
            ...details,
        });
        this.name = "UnknownOperandTypeError";
    }
}
exports.UnknownOperandTypeError = UnknownOperandTypeError;
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/decompiler/operand-loader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/decompiler/operand-loader.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decodeInstruction = decodeInstruction;
exports.parseInstructions = parseInstructions;
const core_1 = __webpack_require__(/*! @ton/core */ "./node_modules/@ton/core/dist/index.js");
const binutils_1 = __webpack_require__(/*! ../utils/binutils */ "./node_modules/@tact-lang/opcode/dist/utils/binutils.js");
const prefix_matcher_1 = __webpack_require__(/*! ../utils/prefix-matcher */ "./node_modules/@tact-lang/opcode/dist/utils/prefix-matcher.js");
const errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/@tact-lang/opcode/dist/decompiler/errors.js");
const tricks_1 = __webpack_require__(/*! ../utils/tricks */ "./node_modules/@tact-lang/opcode/dist/utils/tricks.js");
const prefixMatcher = new prefix_matcher_1.PrefixMatcher();
function decodeInstruction(source, slice) {
    const definition = prefixMatcher.loadPrefix(slice);
    const operands = parseInstructions(source, slice, definition);
    return {
        definition,
        operands,
    };
}
function parseInstructions(source, slice, instruction) {
    const operands = [];
    for (const operand of instruction.bytecode.operands) {
        try {
            operands.push(parseInstruction(source, operand, slice));
        }
        catch (error) {
            throw new errors_1.DisassemblerError(`Bad operand ${operand.name} for instruction ${instruction.mnemonic}`, {
                cause: error,
            });
        }
    }
    return operands;
}
function parseInstruction(source, operand, slice) {
    const type = operand.type;
    if (type === "uint") {
        const raw = slice.clone().loadBits(operand.size);
        return {
            type: "numeric",
            definition: operand,
            bitcode: raw,
            value: slice.loadUint(operand.size),
        };
    }
    if (type === "int") {
        const raw = slice.clone().loadBits(operand.size);
        return {
            type: "numeric",
            definition: operand,
            bitcode: raw,
            value: slice.loadInt(operand.size),
        };
    }
    if (type === "ref") {
        const raw = slice.clone().loadRef();
        return { type: "ref", definition: operand, bitcode: raw.bits, value: slice.loadRef() };
    }
    if (type === "pushint_long") {
        const cloned = slice.clone();
        const prefix = slice.loadUint(5);
        const length = 8 * prefix + 19;
        const raw = cloned.loadBits(5 + length);
        return {
            type: "bigint",
            definition: operand,
            bitcode: raw,
            value: slice.loadIntBig(length),
        };
    }
    // Handle remaining subslice type
    const refLength = (operand.refs_add ?? 0) +
        (operand.refs_length_var_size ? slice.loadUint(operand.refs_length_var_size) : 0);
    const bitLength = operand.bits_padding +
        (operand.bits_length_var_size ? slice.loadUint(operand.bits_length_var_size) * 8 : 0);
    const offsetBits = slice.offsetBits;
    const offsetRefs = slice.offsetRefs;
    const loadedBits = slice.loadBits(bitLength);
    const bits = operand.completion_tag ? (0, binutils_1.removeCompletionTag)(loadedBits) : loadedBits;
    const builder = new core_1.Builder();
    builder.storeBits(bits);
    (0, tricks_1.repeat)(refLength, () => builder.storeRef(slice.loadRef()));
    return {
        type: "subslice",
        definition: operand,
        value: builder.endCell(),
        source: source,
        offsetBits,
        offsetRefs,
        limitBits: bitLength,
        limitRefs: refLength,
    };
}
//# sourceMappingURL=operand-loader.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dictionary = exports.Cell = exports.debugSymbols = exports.AssemblyWriter = exports.disassembleAndProcess = exports.disassembleRawRoot = exports.disassembleRoot = exports.disassemble = void 0;
var disasm_1 = __webpack_require__(/*! ./decompiler/disasm */ "./node_modules/@tact-lang/opcode/dist/decompiler/disasm.js");
Object.defineProperty(exports, "disassemble", ({ enumerable: true, get: function () { return disasm_1.disassemble; } }));
Object.defineProperty(exports, "disassembleRoot", ({ enumerable: true, get: function () { return disasm_1.disassembleRoot; } }));
Object.defineProperty(exports, "disassembleRawRoot", ({ enumerable: true, get: function () { return disasm_1.disassembleRawRoot; } }));
Object.defineProperty(exports, "disassembleAndProcess", ({ enumerable: true, get: function () { return disasm_1.disassembleAndProcess; } }));
var assembly_writer_1 = __webpack_require__(/*! ./printer/assembly-writer */ "./node_modules/@tact-lang/opcode/dist/printer/assembly-writer.js");
Object.defineProperty(exports, "AssemblyWriter", ({ enumerable: true, get: function () { return assembly_writer_1.AssemblyWriter; } }));
var known_methods_1 = __webpack_require__(/*! ./utils/known-methods */ "./node_modules/@tact-lang/opcode/dist/utils/known-methods.js");
Object.defineProperty(exports, "debugSymbols", ({ enumerable: true, get: function () { return known_methods_1.debugSymbols; } }));
var core_1 = __webpack_require__(/*! @ton/core */ "./node_modules/@ton/core/dist/index.js");
Object.defineProperty(exports, "Cell", ({ enumerable: true, get: function () { return core_1.Cell; } }));
Object.defineProperty(exports, "Dictionary", ({ enumerable: true, get: function () { return core_1.Dictionary; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/printer/assembly-writer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/printer/assembly-writer.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssemblyWriter = void 0;
const base_writer_1 = __webpack_require__(/*! ./base-writer */ "./node_modules/@tact-lang/opcode/dist/printer/base-writer.js");
const cp0_json_1 = __importDefault(__webpack_require__(/*! ../spec/cp0.json */ "./node_modules/@tact-lang/opcode/dist/spec/cp0.json"));
const known_methods_1 = __webpack_require__(/*! ../utils/known-methods */ "./node_modules/@tact-lang/opcode/dist/utils/known-methods.js");
const OPCODE_RENAMES = new Map([
    ["PUSHINT_4", "PUSHINT"],
    ["PUSHINT_8", "PUSHINT"],
    ["PUSHINT_16", "PUSHINT"],
    ["PUSHINT_LONG", "PUSHINT"],
    ["PUSHCONT_SHORT", "PUSHCONT"],
    ["THROW_SHORT", "THROW"],
    ["THROWIFNOT_SHORT", "THROWIFNOT"],
    ["THROWIF_SHORT", "THROWIF"],
    ["CALLDICT_LONG", "CALLDICT"],
    ["LSHIFTDIVMODR_VAR", "LSHIFTDIVMODR"],
    ["LSHIFT_VAR", "LSHIFT"],
    ["RSHIFTR_VAR", "RSHIFTR"],
    ["RSHIFT_VAR", "RSHIFT"],
    ["MULRSHIFTC_VAR", "MULRSHIFTC"],
    ["MULRSHIFTR_VAR", "MULRSHIFTR"],
    ["MULRSHIFT_VAR", "MULRSHIFT"],
    ["QMULRSHIFT_VAR", "QMULRSHIFT"],
    ["PUSHSLICE_LONG", "PUSHSLICE"],
    ["LSHIFTDIVR", "LSHIFT#DIVR"],
    ["LSHIFTDIVMODR", "LSHIFT#DIVMODR"],
    ["RSHIFTRMOD", "RSHIFTR#MOD"],
    ["QLSHIFTDIVMODR", "QLSHIFT#DIVMODR"],
    ["MULRSHIFTRMOD", "MULRSHIFTR#MOD"],
    ["LSHIFT", "LSHIFT#"],
    ["RSHIFT", "RSHIFT#"],
    ["MULRSHIFTR", "MULRSHIFTR#"],
    ["MULRSHIFTC", "MULRSHIFTC#"],
    ["MULMODPOW2", "MULMODPOW2#"],
]);
class AssemblyWriter {
    writer = new base_writer_1.BaseWriter();
    knownGlobals = new Map();
    knownMethods = new Map();
    knownProcedures = new Map();
    cp0 = cp0_json_1.default;
    options;
    constructor(options) {
        const actualDebugSymbols = options.debugSymbols ?? known_methods_1.debugSymbols;
        actualDebugSymbols.globals.forEach(glob => {
            this.knownGlobals.set(glob.index, glob.name);
        });
        actualDebugSymbols.procedures.forEach(proc => {
            this.knownMethods.set(proc.methodId, proc.name);
            this.knownProcedures.set(proc.cellHash, proc.name);
        });
        this.options = options;
    }
    resolveGlobalName(index) {
        return this.knownGlobals.get(index) ?? `${index}`;
    }
    resolveMethodName(methodId) {
        return this.knownMethods.get(methodId) ?? `?fun_${methodId}`;
    }
    resolveProcedureName(hash) {
        return this.knownProcedures.get(hash) ?? `?fun_ref_${hash.substring(0, 16)}`;
    }
    writeProgramNode(node) {
        const withoutHeader = this.options.withoutHeader ?? true;
        if (!withoutHeader) {
            this.writer.writeLine(`// Decompiled by tvm-dec`);
            if (node.withRefs) {
                this.writer.writeLine(`// NOTE: This TVM assembly code was decompiled with the same code cells`);
                this.writer.writeLine(`// extracted into dictionary procedures for better readability.`);
                this.writer.writeLine(`// If you want to compile this code back, decompile without refs first (computeRefs: false)`);
            }
        }
        this.writer.writeLine(`"Asm.fif" include`);
        if (node.procedures.length === 0 && node.methods.length === 0) {
            this.writer.writeLine("<{");
            this.writer.indent(() => {
                node.topLevelInstructions.forEach(instruction => {
                    this.writeInstructionNode(instruction);
                });
            });
            this.writer.write("}>c");
            return;
        }
        this.writer.writeLine("PROGRAM{");
        this.writer.indent(() => {
            const methods = [...node.methods].sort((a, b) => a.id - b.id);
            const procedures = [...node.procedures].sort((a, b) => a.hash.localeCompare(b.hash));
            methods.forEach(method => {
                if (method.id === 0) {
                    this.writer.writeLine(`DECLPROC ${this.resolveMethodName(method.id)}`);
                    return;
                }
                this.writer.writeLine(`${method.id} DECLMETHOD ${this.resolveMethodName(method.id)}`);
            });
            procedures.forEach(procedure => {
                this.writer.writeLine(`DECLPROC ${this.resolveProcedureName(procedure.hash)}`);
            });
            methods.forEach(method => {
                this.writeMethodNode(method);
            });
            procedures.forEach(procedure => {
                this.writeNode(procedure);
            });
        });
        this.writer.writeLine("}END>c");
    }
    writeMethodNode(node) {
        const methodName = this.resolveMethodName(node.id);
        this.writer.write(`${methodName} PROC:`);
        this.writeBlockNode(node.body, false);
        this.writer.newLine();
    }
    writeProcedureNode(node) {
        const procedureName = this.resolveProcedureName(node.hash);
        this.writer.write(`${procedureName} PROCREF:`);
        this.writeBlockNode(node.body, false);
        this.writer.newLine();
    }
    writeBlockNode(node, top) {
        if (top) {
            this.writer.writeLine(`"Asm.fif" include`);
        }
        this.writer.writeLine("<{");
        this.writer.indent(() => {
            for (const instruction of node.instructions) {
                this.writeInstructionNode(instruction);
            }
        });
        if (node.cell || top) {
            this.writer.write("}>c");
        }
        else {
            this.writer.write("}>");
        }
    }
    maybeSpecificWrite(node) {
        const opcode = node.opcode.definition.mnemonic;
        const firstArg = node.arguments[0]?.value;
        const secondArg = node.arguments[1]?.value;
        if (firstArg === undefined)
            return null;
        const originalInstruction = this.cp0.instructions.find(i => i.mnemonic === opcode);
        if (!originalInstruction)
            return null;
        const matchingAlias = this.cp0.aliases.find(alias => {
            if (alias.alias_of !== opcode) {
                return false;
            }
            if (alias.mnemonic === "DUMP") {
                // skip DUMP here for now, we cannot compile back with it
                return false;
            }
            const operands = alias.operands;
            for (const [key, value] of Object.entries(operands)) {
                const argIndex = originalInstruction.bytecode.operands.findIndex(op => op.name === key);
                if (argIndex === -1)
                    return false;
                const actualArgument = node.arguments[argIndex];
                if (actualArgument.type !== "scalar" &&
                    actualArgument.type !== "stack_entry" &&
                    actualArgument.type !== "control_register") {
                    return false;
                }
                const actualValue = actualArgument.value;
                if (actualValue !== value) {
                    return false;
                }
            }
            return true;
        });
        const useAliases = this.options.useAliases ?? true;
        if (matchingAlias && useAliases) {
            return matchingAlias.mnemonic;
        }
        if (opcode === "SETCP") {
            return `SETCP${firstArg.toString()}`;
        }
        if (opcode === "XCHG_0I") {
            return `s0 s${firstArg.toString()} XCHG`;
        }
        if (opcode === "XCHG_1I") {
            return `s1 s${firstArg.toString()} XCHG`;
        }
        if (opcode === "XCHG_0I_LONG") {
            return `s0 ${firstArg.toString()} s() XCHG`;
        }
        if (opcode === "POP_LONG") {
            return `${firstArg.toString()} s() POP`;
        }
        if (opcode === "XCHG_IJ" && secondArg !== undefined) {
            return `s${firstArg.toString()} s${secondArg.toString()} XCHG`;
        }
        if (opcode === "ADDCONST") {
            if (firstArg === 1) {
                return "INC";
            }
            if (firstArg === -1) {
                return "DEC";
            }
        }
        if (opcode === "MULCONST") {
            if (firstArg === -1) {
                return "NEGATE";
            }
        }
        if (originalInstruction.bytecode.operands.length === 1 &&
            originalInstruction.doc.fift.endsWith("#")) {
            return `${firstArg.toString()} ${opcode}#`;
        }
        if (opcode === "CALLXARGS_VAR") {
            return `${firstArg.toString()} -1 CALLXARGS`;
        }
        if (opcode === "PUSH_LONG") {
            return `${firstArg.toString()} s() PUSH`;
        }
        if (opcode === "PUSHREF" && firstArg.toString().startsWith("x")) {
            return `<b x${firstArg.toString().slice(1)} s, b> PUSHREF`;
        }
        if (opcode === "PUSHREFSLICE" && firstArg.toString().startsWith("x")) {
            return `<b x${firstArg.toString().slice(1)} s, b> PUSHREFSLICE`;
        }
        if (originalInstruction.bytecode.operands.length === 1 &&
            originalInstruction.doc.fift.includes("#") &&
            !originalInstruction.doc.fift.includes(" ")) {
            return `${firstArg.toString()} ${originalInstruction.doc.fift}`;
        }
        // Debug
        if (opcode === "DEBUG") {
            if (firstArg === 0x00) {
                return "DUMPSTK";
            }
            if (firstArg === 0x14) {
                return "STRDUMP";
            }
            if (secondArg !== undefined &&
                typeof firstArg === "number" &&
                typeof secondArg === "number") {
                // "fift": "{i*16+j} DEBUG",
                return `${firstArg * 16 + secondArg} DEBUG`;
            }
        }
        if (opcode === "DEBUGSTR") {
            const cell = firstArg;
            const buffer = Buffer.from(cell.slice(2, -1), "hex");
            return `"${buffer.toString()}" DEBUGSTR`;
        }
        return null;
    }
    writeInstructionNode(node) {
        const specific = this.maybeSpecificWrite(node);
        if (specific !== null) {
            this.writer.write(specific);
            this.writeBinaryRepresentationIfNeeded(node);
            this.writer.writeLine("");
            return;
        }
        node.arguments.forEach(arg => {
            switch (arg.type) {
                case "stack_entry": {
                    if (arg.value < 0) {
                        this.writer.write(`s(${arg.value}) `);
                        break;
                    }
                    this.writer.write(`s${arg.value} `);
                    break;
                }
                case "control_register": {
                    if (arg.value < 0) {
                        this.writer.write(`c(${arg.value}) `);
                        break;
                    }
                    this.writer.write(`c${arg.value} `);
                    break;
                }
                case "scalar": {
                    this.writer.write(`${arg.value.toString()} `);
                    break;
                }
                case "reference": {
                    this.writer.write(`${this.resolveProcedureName(arg.hash)} `);
                    break;
                }
                case "global_variable": {
                    this.writer.write(`${this.resolveGlobalName(arg.value)} `);
                    break;
                }
                case "method_reference": {
                    this.writer.write(`${this.resolveMethodName(arg.methodId)} `);
                    break;
                }
                case "block": {
                    this.writeBlockNode(arg, false);
                    this.writer.write(" ");
                    break;
                }
            }
        });
        this.writer.write(OPCODE_RENAMES.get(node.opcode.definition.mnemonic) ?? node.opcode.definition.mnemonic);
        this.writeBinaryRepresentationIfNeeded(node);
        this.writer.writeLine("");
    }
    writeBinaryRepresentationIfNeeded(node) {
        if (!this.options.outputBitcodeAfterInstruction)
            return;
        // Example output
        // CTOS                                          // 0xD0
        // 4 LDU                                         // 0xD3 03
        // s0 s1 XCHG                                    // 0x0 1
        // 1 PUSHINT                                     // 0x7 1
        // AND                                           // 0xB0
        // NEGATE                                        // 0xA3
        const space = " ".repeat(Math.max(1, 50 - this.writer.lineLength()));
        this.writer.write(`${space}// 0x` + node.opcode.definition.bytecode.prefix);
        node.opcode.operands.forEach(arg => {
            this.writer.write(" ");
            switch (arg.type) {
                case "numeric":
                case "ref":
                case "bigint": {
                    this.writer.write(arg.bitcode.toString());
                    break;
                }
                case "subslice": {
                    this.writer.write(arg.value.bits.toString());
                    break;
                }
            }
        });
    }
    writeNode(node, top = false) {
        switch (node.type) {
            case "program": {
                this.writeProgramNode(node);
                break;
            }
            case "method": {
                this.writeMethodNode(node);
                break;
            }
            case "procedure": {
                this.writeProcedureNode(node);
                break;
            }
            case "block": {
                this.writeBlockNode(node, top);
                break;
            }
            case "instruction": {
                this.writeInstructionNode(node);
                break;
            }
        }
    }
    output() {
        return this.writer.end();
    }
    static write(node, options) {
        const writer = new AssemblyWriter(options);
        writer.writeNode(node, true);
        return writer.output();
    }
}
exports.AssemblyWriter = AssemblyWriter;
//# sourceMappingURL=assembly-writer.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/printer/base-writer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/printer/base-writer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseWriter = void 0;
class BaseWriter {
    lines = [];
    indentLevel = 0;
    currentLine = "";
    indent(handler) {
        this.indentLevel++;
        try {
            handler();
        }
        finally {
            this.indentLevel--;
        }
    }
    write(src) {
        this.currentLine += src;
    }
    newLine() {
        this.lines.push(" ".repeat(this.indentLevel * 2) + this.currentLine);
        this.currentLine = "";
    }
    writeLine(src) {
        this.lines.push(" ".repeat(this.indentLevel * 2) + this.currentLine + src);
        this.currentLine = "";
    }
    end() {
        if (this.currentLine !== "") {
            this.newLine();
        }
        return this.lines.join("\n");
    }
    lineLength() {
        return this.currentLine.length + this.indentLevel * 2;
    }
}
exports.BaseWriter = BaseWriter;
//# sourceMappingURL=base-writer.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/spec/helpers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/spec/helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasHint = hasHint;
exports.getDisplayNumber = getDisplayNumber;
function hasHint(displayHints, name) {
    return displayHints.some(hint => hint.type === name);
}
function getDisplayNumber(operand, add, displayHints) {
    const displayNumber = operand.value + add;
    if (hasHint(displayHints, "pushint4")) {
        return displayNumber > 10 ? displayNumber - 16 : displayNumber;
    }
    if (hasHint(displayHints, "optional_nargs")) {
        return displayNumber === 15 ? -1 : displayNumber;
    }
    if (hasHint(displayHints, "plduz")) {
        return 32 * (displayNumber + 1);
    }
    return displayNumber;
}
//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/utils/binutils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/utils/binutils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.removeCompletionTag = exports.prefixToBin = void 0;
const core_1 = __webpack_require__(/*! @ton/core */ "./node_modules/@ton/core/dist/index.js");
const node_buffer_1 = __webpack_require__(/*! node:buffer */ "node:buffer");
const prefixToBin = (prefix) => {
    const completionTag = prefix.endsWith("_");
    if (completionTag) {
        prefix = prefix.slice(0, -1);
    }
    const padLength = prefix.length % 2;
    const paddedHex = prefix.padEnd(prefix.length + padLength, "0");
    const buffer = node_buffer_1.Buffer.from(paddedHex, "hex");
    const bits = new core_1.BitString(buffer, 0, buffer.byteLength * 8 - padLength * 4);
    if (completionTag) {
        return (0, exports.removeCompletionTag)(bits);
    }
    return bits;
};
exports.prefixToBin = prefixToBin;
const removeCompletionTag = (bits) => {
    const lastSetBitIndex = Array.from({ length: bits.length }).findIndex((_, i) => bits.at(bits.length - 1 - i));
    if (lastSetBitIndex === -1) {
        throw new Error("no completion tag");
    }
    return bits.substring(0, bits.length - lastSetBitIndex - 1);
};
exports.removeCompletionTag = removeCompletionTag;
//# sourceMappingURL=binutils.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/utils/known-methods.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/utils/known-methods.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debugSymbols = void 0;
exports.debugSymbols = {
    globals: [],
    procedures: [
        { methodId: 0, name: "recv_internal", cellHash: "" },
        { methodId: -1, name: "recv_external", cellHash: "" },
        { methodId: -2, name: "run_ticktock", cellHash: "" },
        { methodId: 66_763, name: "get_full_domain", cellHash: "" },
        { methodId: 68_445, name: "get_nft_content", cellHash: "" },
        { methodId: 69_506, name: "get_telemint_token_name", cellHash: "" },
        { methodId: 72_748, name: "get_sale_data", cellHash: "" },
        { methodId: 76_407, name: "is_plugin_installed", cellHash: "" },
        { methodId: 78_748, name: "get_public_key", cellHash: "" },
        { methodId: 80_293, name: "get_owner", cellHash: "" },
        { methodId: 80_697, name: "get_auction_info", cellHash: "" },
        { methodId: 81_467, name: "get_subwallet_id", cellHash: "" },
        { methodId: 82_320, name: "get_version", cellHash: "" },
        { methodId: 83_229, name: "owner", cellHash: "" },
        { methodId: 85_143, name: "seqno", cellHash: "" },
        { methodId: 85_719, name: "royalty_params", cellHash: "" },
        { methodId: 90_228, name: "get_editor", cellHash: "" },
        { methodId: 91_689, name: "get_marketplace_address", cellHash: "" },
        { methodId: 92_067, name: "get_nft_address_by_index", cellHash: "" },
        { methodId: 93_270, name: "get_reveal_data", cellHash: "" },
        { methodId: 97_026, name: "get_wallet_data", cellHash: "" },
        { methodId: 102_351, name: "get_nft_data", cellHash: "" },
        { methodId: 102_491, name: "get_collection_data", cellHash: "" },
        { methodId: 103_289, name: "get_wallet_address", cellHash: "" },
        { methodId: 106_029, name: "get_jetton_data", cellHash: "" },
        { methodId: 107_279, name: "get_offer_data", cellHash: "" },
        { methodId: 107_653, name: "get_plugin_list", cellHash: "" },
        { methodId: 110_449, name: "get_is_closed", cellHash: "" },
        { methodId: 113_617, name: "supported_interfaces", cellHash: "" },
        { methodId: 115_390, name: "lazy_deployment_completed", cellHash: "" },
        { methodId: 116_695, name: "get_reveal_mode", cellHash: "" },
        { methodId: 118_054, name: "get_username", cellHash: "" },
        { methodId: 121_275, name: "get_abi_ipfs", cellHash: "" },
        { methodId: 122_498, name: "get_telemint_auction_state", cellHash: "" },
        { methodId: 123_660, name: "dnsresolve", cellHash: "" },
        { methodId: 128_411, name: "get_royalty_params", cellHash: "" },
        { methodId: 129_619, name: "get_telemint_auction_config", cellHash: "" },
    ],
    constants: [],
};
//# sourceMappingURL=known-methods.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/utils/prefix-matcher.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/utils/prefix-matcher.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrefixMatcher = void 0;
const binutils_1 = __webpack_require__(/*! ./binutils */ "./node_modules/@tact-lang/opcode/dist/utils/binutils.js");
const cp0_json_1 = __importDefault(__webpack_require__(/*! ../spec/cp0.json */ "./node_modules/@tact-lang/opcode/dist/spec/cp0.json"));
class PrefixMatcher {
    instructions;
    longestPrefixLength;
    constructor() {
        const cp0 = cp0_json_1.default;
        this.instructions = new Map(cp0.instructions.map(inst => [
            (0, binutils_1.prefixToBin)(inst.bytecode.prefix).toString(), // normalize prefixes such as CFC0_ to CFC_
            inst,
        ]));
        this.longestPrefixLength = Math.max(...cp0.instructions.map(inst => (0, binutils_1.prefixToBin)(inst.bytecode.prefix).length));
    }
    loadPrefix(slice) {
        for (let bits = 1; bits <= this.longestPrefixLength; bits++) {
            if (slice.remainingBits < bits) {
                throw new Error(`Prefix not found, slice was: ${slice.toString()}`);
            }
            const prefix = slice.preloadBits(bits);
            const instruction = this.instructions.get(prefix.toString());
            if (instruction === undefined)
                continue;
            const rangeCheck = instruction.bytecode.operands_range_check;
            if (rangeCheck !== undefined) {
                if (slice.remainingBits < prefix.length + rangeCheck.length)
                    continue;
                const operands = slice.clone().skip(prefix.length).loadUint(rangeCheck.length);
                if (operands < rangeCheck.from || operands > rangeCheck.to)
                    continue;
            }
            slice.skip(bits);
            return instruction;
        }
        throw new Error(`Prefix not found, slice was: ${slice.toString()}`);
    }
}
exports.PrefixMatcher = PrefixMatcher;
//# sourceMappingURL=prefix-matcher.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/utils/subcell.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/utils/subcell.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.subslice = subslice;
const core_1 = __webpack_require__(/*! @ton/core */ "./node_modules/@ton/core/dist/index.js");
const tricks_1 = __webpack_require__(/*! ./tricks */ "./node_modules/@tact-lang/opcode/dist/utils/tricks.js");
function subslice(args) {
    const s = args.cell.beginParse();
    const b = (0, core_1.beginCell)();
    // Copy bits and refs
    b.storeBits(s.loadBits(args.bits + args.offsetBits));
    (0, tricks_1.repeat)(args.refs + args.offsetRefs, () => b.storeRef(s.loadRef()));
    const s2 = b.endCell().beginParse();
    // Skip bits and refs
    s2.skip(args.offsetBits);
    (0, tricks_1.repeat)(args.offsetRefs, () => s2.loadRef());
    return s2;
}
//# sourceMappingURL=subcell.js.map

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/utils/tricks.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/utils/tricks.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.repeat = void 0;
const repeat = (length, callback) => {
    for (let i = 0; i < length; i++) {
        callback();
    }
};
exports.repeat = repeat;
//# sourceMappingURL=tricks.js.map

/***/ }),

/***/ "./node_modules/@ton/core/dist/address/ADNLAddress.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/ADNLAddress.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ADNLAddress = void 0;
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
const base32_1 = __webpack_require__(/*! ../utils/base32 */ "./node_modules/@ton/core/dist/utils/base32.js");
const crc16_1 = __webpack_require__(/*! ../utils/crc16 */ "./node_modules/@ton/core/dist/utils/crc16.js");
class ADNLAddress {
    static parseFriendly(src) {
        if (src.length !== 55) {
            throw Error('Invalid address');
        }
        // Decoding
        src = 'f' + src;
        let decoded = (0, base32_1.base32Decode)(src);
        if (decoded[0] !== 0x2d) {
            throw Error('Invalid address');
        }
        let gotHash = decoded.slice(33);
        let hash = (0, crc16_1.crc16)(decoded.slice(0, 33));
        if (!hash.equals(gotHash)) {
            throw Error('Invalid address');
        }
        return new ADNLAddress(decoded.slice(1, 33));
    }
    static parseRaw(src) {
        const data = Buffer.from(src, 'base64');
        return new ADNLAddress(data);
    }
    constructor(address) {
        this.toRaw = () => {
            return this.address.toString('hex').toUpperCase();
        };
        this.toString = () => {
            let data = Buffer.concat([Buffer.from([0x2D]), this.address]);
            let hash = (0, crc16_1.crc16)(data);
            data = Buffer.concat([data, hash]);
            return (0, base32_1.base32Encode)(data).slice(1);
        };
        this[_a] = () => this.toString();
        if (address.length !== 32) {
            throw Error('Invalid address');
        }
        this.address = address;
    }
    equals(b) {
        return this.address.equals(b.address);
    }
}
exports.ADNLAddress = ADNLAddress;
_a = symbol_inspect_1.default;


/***/ }),

/***/ "./node_modules/@ton/core/dist/address/Address.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/Address.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.address = exports.Address = void 0;
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
const crc16_1 = __webpack_require__(/*! ../utils/crc16 */ "./node_modules/@ton/core/dist/utils/crc16.js");
const bounceable_tag = 0x11;
const non_bounceable_tag = 0x51;
const test_flag = 0x80;
function parseFriendlyAddress(src) {
    if (typeof src === 'string' && !Address.isFriendly(src)) {
        throw new Error('Unknown address type');
    }
    const data = Buffer.isBuffer(src) ? src : Buffer.from(src, 'base64');
    // 1byte tag + 1byte workchain + 32 bytes hash + 2 byte crc
    if (data.length !== 36) {
        throw new Error('Unknown address type: byte length is not equal to 36');
    }
    // Prepare data
    const addr = data.subarray(0, 34);
    const crc = data.subarray(34, 36);
    const calcedCrc = (0, crc16_1.crc16)(addr);
    if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {
        throw new Error('Invalid checksum: ' + src);
    }
    // Parse tag
    let tag = addr[0];
    let isTestOnly = false;
    let isBounceable = false;
    if (tag & test_flag) {
        isTestOnly = true;
        tag = tag ^ test_flag;
    }
    if ((tag !== bounceable_tag) && (tag !== non_bounceable_tag))
        throw "Unknown address tag";
    isBounceable = tag === bounceable_tag;
    let workchain = null;
    if (addr[1] === 0xff) { // TODO we should read signed integer here
        workchain = -1;
    }
    else {
        workchain = addr[1];
    }
    const hashPart = addr.subarray(2, 34);
    return { isTestOnly, isBounceable, workchain, hashPart };
}
class Address {
    static isAddress(src) {
        return src instanceof Address;
    }
    static isFriendly(source) {
        // Check length
        if (source.length !== 48) {
            return false;
        }
        // Check if address is valid base64
        if (!/[A-Za-z0-9+/_-]+/.test(source)) {
            return false;
        }
        return true;
    }
    static isRaw(source) {
        // Check if has delimiter
        if (source.indexOf(':') === -1) {
            return false;
        }
        let [wc, hash] = source.split(':');
        // wc is not valid
        if (!Number.isInteger(parseFloat(wc))) {
            return false;
        }
        // hash is not valid
        if (!/[a-f0-9]+/.test(hash.toLowerCase())) {
            return false;
        }
        // has is not correct
        if (hash.length !== 64) {
            return false;
        }
        return true;
    }
    static normalize(source) {
        if (typeof source === 'string') {
            return Address.parse(source).toString();
        }
        else {
            return source.toString();
        }
    }
    static parse(source) {
        if (Address.isFriendly(source)) {
            return this.parseFriendly(source).address;
        }
        else if (Address.isRaw(source)) {
            return this.parseRaw(source);
        }
        else {
            throw new Error('Unknown address type: ' + source);
        }
    }
    static parseRaw(source) {
        let workChain = parseInt(source.split(":")[0]);
        let hash = Buffer.from(source.split(":")[1], 'hex');
        return new Address(workChain, hash);
    }
    static parseFriendly(source) {
        if (Buffer.isBuffer(source)) {
            let r = parseFriendlyAddress(source);
            return {
                isBounceable: r.isBounceable,
                isTestOnly: r.isTestOnly,
                address: new Address(r.workchain, r.hashPart)
            };
        }
        else {
            let addr = source.replace(/\-/g, '+').replace(/_/g, '\/'); // Convert from url-friendly to true base64
            let r = parseFriendlyAddress(addr);
            return {
                isBounceable: r.isBounceable,
                isTestOnly: r.isTestOnly,
                address: new Address(r.workchain, r.hashPart)
            };
        }
    }
    constructor(workChain, hash) {
        this.toRawString = () => {
            return this.workChain + ':' + this.hash.toString('hex');
        };
        this.toRaw = () => {
            const addressWithChecksum = Buffer.alloc(36);
            addressWithChecksum.set(this.hash);
            addressWithChecksum.set([this.workChain, this.workChain, this.workChain, this.workChain], 32);
            return addressWithChecksum;
        };
        this.toStringBuffer = (args) => {
            let testOnly = (args && args.testOnly !== undefined) ? args.testOnly : false;
            let bounceable = (args && args.bounceable !== undefined) ? args.bounceable : true;
            let tag = bounceable ? bounceable_tag : non_bounceable_tag;
            if (testOnly) {
                tag |= test_flag;
            }
            const addr = Buffer.alloc(34);
            addr[0] = tag;
            addr[1] = this.workChain;
            addr.set(this.hash, 2);
            const addressWithChecksum = Buffer.alloc(36);
            addressWithChecksum.set(addr);
            addressWithChecksum.set((0, crc16_1.crc16)(addr), 34);
            return addressWithChecksum;
        };
        this.toString = (args) => {
            let urlSafe = (args && args.urlSafe !== undefined) ? args.urlSafe : true;
            let buffer = this.toStringBuffer(args);
            if (urlSafe) {
                return buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_');
            }
            else {
                return buffer.toString('base64');
            }
        };
        this[_a] = () => this.toString();
        if (hash.length !== 32) {
            throw new Error('Invalid address hash length: ' + hash.length);
        }
        this.workChain = workChain;
        this.hash = hash;
        Object.freeze(this);
    }
    equals(src) {
        if (src.workChain !== this.workChain) {
            return false;
        }
        return src.hash.equals(this.hash);
    }
}
exports.Address = Address;
_a = symbol_inspect_1.default;
function address(src) {
    return Address.parse(src);
}
exports.address = address;


/***/ }),

/***/ "./node_modules/@ton/core/dist/address/ExternalAddress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/ExternalAddress.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExternalAddress = void 0;
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
class ExternalAddress {
    static isAddress(src) {
        return src instanceof ExternalAddress;
    }
    constructor(value, bits) {
        this[_a] = () => this.toString();
        this.value = value;
        this.bits = bits;
    }
    toString() {
        return `External<${this.bits}:${this.value}>`;
    }
}
exports.ExternalAddress = ExternalAddress;
_a = symbol_inspect_1.default;


/***/ }),

/***/ "./node_modules/@ton/core/dist/address/contractAddress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/address/contractAddress.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contractAddress = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const StateInit_1 = __webpack_require__(/*! ../types/StateInit */ "./node_modules/@ton/core/dist/types/StateInit.js");
const Address_1 = __webpack_require__(/*! ./Address */ "./node_modules/@ton/core/dist/address/Address.js");
function contractAddress(workchain, init) {
    let hash = (0, Builder_1.beginCell)()
        .store((0, StateInit_1.storeStateInit)(init))
        .endCell()
        .hash();
    return new Address_1.Address(workchain, hash);
}
exports.contractAddress = contractAddress;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/BitBuilder.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitBuilder.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BitBuilder = void 0;
const Address_1 = __webpack_require__(/*! ../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const ExternalAddress_1 = __webpack_require__(/*! ../address/ExternalAddress */ "./node_modules/@ton/core/dist/address/ExternalAddress.js");
const BitString_1 = __webpack_require__(/*! ./BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
/**
 * Class for building bit strings
 */
class BitBuilder {
    constructor(size = 1023) {
        this._buffer = Buffer.alloc(Math.ceil(size / 8));
        this._length = 0;
    }
    /**
     * Current number of bits written
     */
    get length() {
        return this._length;
    }
    /**
     * Write a single bit
     * @param value bit to write, true or positive number for 1, false or zero or negative for 0
     */
    writeBit(value) {
        // Check overflow
        let n = this._length;
        if (n > this._buffer.length * 8) {
            throw new Error("BitBuilder overflow");
        }
        // Set bit
        if ((typeof value === 'boolean' && value === true) || (typeof value === 'number' && value > 0)) {
            this._buffer[(n / 8) | 0] |= 1 << (7 - (n % 8));
        }
        // Advance
        this._length++;
    }
    /**
     * Copy bits from BitString
     * @param src source bits
     */
    writeBits(src) {
        for (let i = 0; i < src.length; i++) {
            this.writeBit(src.at(i));
        }
    }
    /**
     * Write bits from buffer
     * @param src source buffer
     */
    writeBuffer(src) {
        // Special case for aligned offsets
        if (this._length % 8 === 0) {
            if (this._length + src.length * 8 > this._buffer.length * 8) {
                throw new Error("BitBuilder overflow");
            }
            src.copy(this._buffer, this._length / 8);
            this._length += src.length * 8;
        }
        else {
            for (let i = 0; i < src.length; i++) {
                this.writeUint(src[i], 8);
            }
        }
    }
    /**
     * Write uint value
     * @param value value as bigint or number
     * @param bits number of bits to write
     */
    writeUint(value, bits) {
        if (bits < 0 || !Number.isSafeInteger(bits)) {
            throw Error(`invalid bit length. Got ${bits}`);
        }
        const v = BigInt(value);
        if (bits === 0) {
            if (v !== 0n) {
                throw Error(`value is not zero for ${bits} bits. Got ${value}`);
            }
            else {
                return;
            }
        }
        const vBits = (1n << BigInt(bits));
        if (v < 0 || v >= vBits) {
            throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);
        }
        if (this._length + bits > this._buffer.length * 8) {
            throw new Error("BitBuilder overflow");
        }
        const tillByte = 8 - (this._length % 8);
        if (tillByte > 0) {
            const bidx = Math.floor(this._length / 8);
            if (bits < tillByte) {
                const wb = Number(v);
                this._buffer[bidx] |= wb << (tillByte - bits);
                this._length += bits;
            }
            else {
                const wb = Number(v >> BigInt(bits - tillByte));
                this._buffer[bidx] |= wb;
                this._length += tillByte;
            }
        }
        bits -= tillByte;
        while (bits > 0) {
            if (bits >= 8) {
                this._buffer[this._length / 8] = Number((v >> BigInt(bits - 8)) & 0xffn);
                this._length += 8;
                bits -= 8;
            }
            else {
                this._buffer[this._length / 8] = Number((v << BigInt(8 - bits)) & 0xffn);
                this._length += bits;
                bits = 0;
            }
        }
    }
    /**
     * Write int value
     * @param value value as bigint or number
     * @param bits number of bits to write
     */
    writeInt(value, bits) {
        let v = BigInt(value);
        if (bits < 0 || !Number.isSafeInteger(bits)) {
            throw Error(`invalid bit length. Got ${bits}`);
        }
        // Corner case for zero bits
        if (bits === 0) {
            if (value !== 0n) {
                throw Error(`value is not zero for ${bits} bits. Got ${value}`);
            }
            else {
                return;
            }
        }
        // Corner case for one bit
        if (bits === 1) {
            if (value !== -1n && value !== 0n) {
                throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);
            }
            else {
                this.writeBit(value === -1n);
                return;
            }
        }
        // Check input
        let vBits = 1n << (BigInt(bits) - 1n);
        if (v < -vBits || v >= vBits) {
            throw Error(`value is out of range for ${bits} bits. Got ${value}`);
        }
        // Write sign
        if (v < 0) {
            this.writeBit(true);
            v = vBits + v;
        }
        else {
            this.writeBit(false);
        }
        // Write value
        this.writeUint(v, bits - 1);
    }
    /**
     * Wrtie var uint value, used for serializing coins
     * @param value value to write as bigint or number
     * @param bits header bits to write size
     */
    writeVarUint(value, bits) {
        let v = BigInt(value);
        if (bits < 0 || !Number.isSafeInteger(bits)) {
            throw Error(`invalid bit length. Got ${bits}`);
        }
        if (v < 0) {
            throw Error(`value is negative. Got ${value}`);
        }
        // Corner case for zero
        if (v === 0n) {
            // Write zero size
            this.writeUint(0, bits);
            return;
        }
        // Calculate size
        const sizeBytes = Math.ceil((v.toString(2).length) / 8); // Fastest way in most environments
        const sizeBits = sizeBytes * 8;
        // Write size
        this.writeUint(sizeBytes, bits);
        // Write number
        this.writeUint(v, sizeBits);
    }
    /**
     * Wrtie var int value, used for serializing coins
     * @param value value to write as bigint or number
     * @param bits header bits to write size
     */
    writeVarInt(value, bits) {
        let v = BigInt(value);
        if (bits < 0 || !Number.isSafeInteger(bits)) {
            throw Error(`invalid bit length. Got ${bits}`);
        }
        // Corner case for zero
        if (v === 0n) {
            // Write zero size
            this.writeUint(0, bits);
            return;
        }
        // Calculate size
        let v2 = v > 0 ? v : -v;
        const sizeBytes = Math.ceil((v2.toString(2).length + 1) / 8); // Fastest way in most environments
        const sizeBits = sizeBytes * 8;
        // Write size
        this.writeUint(sizeBytes, bits);
        // Write number
        this.writeInt(v, sizeBits);
    }
    /**
     * Write coins in var uint format
     * @param amount amount to write
     */
    writeCoins(amount) {
        this.writeVarUint(amount, 4);
    }
    /**
     * Write address
     * @param address write address or address external
     */
    writeAddress(address) {
        // Is empty address
        if (address === null || address === undefined) {
            this.writeUint(0, 2); // Empty address
            return;
        }
        // Is Internal Address
        if (Address_1.Address.isAddress(address)) {
            this.writeUint(2, 2); // Internal address
            this.writeUint(0, 1); // No anycast
            this.writeInt(address.workChain, 8);
            this.writeBuffer(address.hash);
            return;
        }
        // Is External Address
        if (ExternalAddress_1.ExternalAddress.isAddress(address)) {
            this.writeUint(1, 2); // External address
            this.writeUint(address.bits, 9);
            this.writeUint(address.value, address.bits);
            return;
        }
        // Invalid address
        throw Error(`Invalid address. Got ${address}`);
    }
    /**
     * Build BitString
     * @returns result bit string
     */
    build() {
        return new BitString_1.BitString(this._buffer, 0, this._length);
    }
    /**
     * Build into Buffer
     * @returns result buffer
     */
    buffer() {
        if (this._length % 8 !== 0) {
            throw new Error("BitBuilder buffer is not byte aligned");
        }
        return this._buffer.subarray(0, this._length / 8);
    }
}
exports.BitBuilder = BitBuilder;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/BitReader.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitReader.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BitReader = void 0;
const Address_1 = __webpack_require__(/*! ../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const ExternalAddress_1 = __webpack_require__(/*! ../address/ExternalAddress */ "./node_modules/@ton/core/dist/address/ExternalAddress.js");
/**
 * Class for reading bit strings
 */
class BitReader {
    constructor(bits, offset = 0) {
        this._checkpoints = [];
        this._bits = bits;
        this._offset = offset;
    }
    /**
     * Offset in source bit string
     */
    get offset() {
        return this._offset;
    }
    /**
     * Number of bits remaining
     */
    get remaining() {
        return this._bits.length - this._offset;
    }
    /**
     * Skip bits
     * @param bits number of bits to skip
     */
    skip(bits) {
        if (bits < 0 || this._offset + bits > this._bits.length) {
            throw new Error(`Index ${this._offset + bits} is out of bounds`);
        }
        this._offset += bits;
    }
    /**
     * Reset to the beginning or latest checkpoint
     */
    reset() {
        if (this._checkpoints.length > 0) {
            this._offset = this._checkpoints.pop();
        }
        else {
            this._offset = 0;
        }
    }
    /**
     * Save checkpoint
     */
    save() {
        this._checkpoints.push(this._offset);
    }
    /**
     * Load a single bit
     * @returns true if the bit is set, false otherwise
     */
    loadBit() {
        let r = this._bits.at(this._offset);
        this._offset++;
        return r;
    }
    /**
     * Preload bit
     * @returns true if the bit is set, false otherwise
     */
    preloadBit() {
        return this._bits.at(this._offset);
    }
    /**
     * Load bit string
     * @param bits number of bits to read
     * @returns new bitstring
     */
    loadBits(bits) {
        let r = this._bits.substring(this._offset, bits);
        this._offset += bits;
        return r;
    }
    /**
     * Preload bit string
     * @param bits number of bits to read
     * @returns new bitstring
     */
    preloadBits(bits) {
        return this._bits.substring(this._offset, bits);
    }
    /**
     * Load buffer
     * @param bytes number of bytes
     * @returns new buffer
     */
    loadBuffer(bytes) {
        let buf = this._preloadBuffer(bytes, this._offset);
        this._offset += bytes * 8;
        return buf;
    }
    /**
     * Preload buffer
     * @param bytes number of bytes
     * @returns new buffer
     */
    preloadBuffer(bytes) {
        return this._preloadBuffer(bytes, this._offset);
    }
    /**
     * Load uint value
     * @param bits uint bits
     * @returns read value as number
     */
    loadUint(bits) {
        return this._toSafeInteger(this.loadUintBig(bits), 'loadUintBig');
    }
    /**
     * Load uint value as bigint
     * @param bits uint bits
     * @returns read value as bigint
     */
    loadUintBig(bits) {
        let loaded = this.preloadUintBig(bits);
        this._offset += bits;
        return loaded;
    }
    /**
     * Preload uint value
     * @param bits uint bits
     * @returns read value as number
     */
    preloadUint(bits) {
        return this._toSafeInteger(this._preloadUint(bits, this._offset), 'preloadUintBig');
    }
    /**
     * Preload uint value as bigint
     * @param bits uint bits
     * @returns read value as bigint
     */
    preloadUintBig(bits) {
        return this._preloadUint(bits, this._offset);
    }
    /**
     * Load int value
     * @param bits int bits
     * @returns read value as bigint
     */
    loadInt(bits) {
        let res = this._preloadInt(bits, this._offset);
        this._offset += bits;
        return this._toSafeInteger(res, 'loadUintBig');
    }
    /**
     * Load int value as bigint
     * @param bits int bits
     * @returns read value as bigint
     */
    loadIntBig(bits) {
        let res = this._preloadInt(bits, this._offset);
        this._offset += bits;
        return res;
    }
    /**
     * Preload int value
     * @param bits int bits
     * @returns read value as bigint
     */
    preloadInt(bits) {
        return this._toSafeInteger(this._preloadInt(bits, this._offset), 'preloadIntBig');
    }
    /**
     * Preload int value
     * @param bits int bits
     * @returns read value as bigint
     */
    preloadIntBig(bits) {
        return this._preloadInt(bits, this._offset);
    }
    /**
     * Load varuint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    loadVarUint(bits) {
        let size = Number(this.loadUint(bits));
        return this._toSafeInteger(this.loadUintBig(size * 8), 'loadVarUintBig');
    }
    /**
     * Load varuint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    loadVarUintBig(bits) {
        let size = Number(this.loadUint(bits));
        return this.loadUintBig(size * 8);
    }
    /**
     * Preload varuint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    preloadVarUint(bits) {
        let size = Number(this._preloadUint(bits, this._offset));
        return this._toSafeInteger(this._preloadUint(size * 8, this._offset + bits), 'preloadVarUintBig');
    }
    /**
     * Preload varuint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    preloadVarUintBig(bits) {
        let size = Number(this._preloadUint(bits, this._offset));
        return this._preloadUint(size * 8, this._offset + bits);
    }
    /**
     * Load varint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    loadVarInt(bits) {
        let size = Number(this.loadUint(bits));
        return this._toSafeInteger(this.loadIntBig(size * 8), 'loadVarIntBig');
    }
    /**
     * Load varint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    loadVarIntBig(bits) {
        let size = Number(this.loadUint(bits));
        return this.loadIntBig(size * 8);
    }
    /**
     * Preload varint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    preloadVarInt(bits) {
        let size = Number(this._preloadUint(bits, this._offset));
        return this._toSafeInteger(this._preloadInt(size * 8, this._offset + bits), 'preloadVarIntBig');
    }
    /**
     * Preload varint value
     * @param bits number of bits to read the size
     * @returns read value as bigint
     */
    preloadVarIntBig(bits) {
        let size = Number(this._preloadUint(bits, this._offset));
        return this._preloadInt(size * 8, this._offset + bits);
    }
    /**
     * Load coins value
     * @returns read value as bigint
     */
    loadCoins() {
        return this.loadVarUintBig(4);
    }
    /**
     * Preload coins value
     * @returns read value as bigint
     */
    preloadCoins() {
        return this.preloadVarUintBig(4);
    }
    /**
     * Load Address
     * @returns Address
     */
    loadAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type === 2) {
            return this._loadInternalAddress();
        }
        else {
            throw new Error("Invalid address: " + type);
        }
    }
    /**
     * Load internal address
     * @returns Address or null
     */
    loadMaybeAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type === 0) {
            this._offset += 2;
            return null;
        }
        else if (type === 2) {
            return this._loadInternalAddress();
        }
        else {
            throw new Error("Invalid address");
        }
    }
    /**
     * Load external address
     * @returns ExternalAddress
     */
    loadExternalAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type === 1) {
            return this._loadExternalAddress();
        }
        else {
            throw new Error("Invalid address");
        }
    }
    /**
     * Load external address
     * @returns ExternalAddress or null
     */
    loadMaybeExternalAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type === 0) {
            this._offset += 2;
            return null;
        }
        else if (type === 1) {
            return this._loadExternalAddress();
        }
        else {
            throw new Error("Invalid address");
        }
    }
    /**
     * Read address of any type
     * @returns Address or ExternalAddress or null
     */
    loadAddressAny() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type === 0) {
            this._offset += 2;
            return null;
        }
        else if (type === 2) {
            return this._loadInternalAddress();
        }
        else if (type === 1) {
            return this._loadExternalAddress();
        }
        else if (type === 3) {
            throw Error('Unsupported');
        }
        else {
            throw Error('Unreachable');
        }
    }
    /**
     * Load bit string that was padded to make it byte alligned. Used in BOC serialization
     * @param bytes number of bytes to read
     */
    loadPaddedBits(bits) {
        // Check that number of bits is byte alligned
        if (bits % 8 !== 0) {
            throw new Error("Invalid number of bits");
        }
        // Skip padding
        let length = bits;
        while (true) {
            if (this._bits.at(this._offset + length - 1)) {
                length--;
                break;
            }
            else {
                length--;
            }
        }
        // Read substring
        let r = this._bits.substring(this._offset, length);
        this._offset += bits;
        return r;
    }
    /**
     * Clone BitReader
     */
    clone() {
        return new BitReader(this._bits, this._offset);
    }
    /**
     * Preload int from specific offset
     * @param bits bits to preload
     * @param offset offset to start from
     * @returns read value as bigint
     */
    _preloadInt(bits, offset) {
        if (bits == 0) {
            return 0n;
        }
        let sign = this._bits.at(offset);
        let res = 0n;
        for (let i = 0; i < bits - 1; i++) {
            if (this._bits.at(offset + 1 + i)) {
                res += 1n << BigInt(bits - i - 1 - 1);
            }
        }
        if (sign) {
            res = res - (1n << BigInt(bits - 1));
        }
        return res;
    }
    /**
     * Preload uint from specific offset
     * @param bits bits to preload
     * @param offset offset to start from
     * @returns read value as bigint
     */
    _preloadUint(bits, offset) {
        if (bits == 0) {
            return 0n;
        }
        let res = 0n;
        for (let i = 0; i < bits; i++) {
            if (this._bits.at(offset + i)) {
                res += 1n << BigInt(bits - i - 1);
            }
        }
        return res;
    }
    _preloadBuffer(bytes, offset) {
        // Try to load fast
        let fastBuffer = this._bits.subbuffer(offset, bytes * 8);
        if (fastBuffer) {
            return fastBuffer;
        }
        // Load slow
        let buf = Buffer.alloc(bytes);
        for (let i = 0; i < bytes; i++) {
            buf[i] = Number(this._preloadUint(8, offset + i * 8));
        }
        return buf;
    }
    _loadInternalAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type !== 2) {
            throw Error('Invalid address');
        }
        // No Anycast supported
        if (this._preloadUint(1, this._offset + 2) !== 0n) {
            throw Error('Invalid address');
        }
        // Read address
        let wc = Number(this._preloadInt(8, this._offset + 3));
        let hash = this._preloadBuffer(32, this._offset + 11);
        // Update offset
        this._offset += 267;
        return new Address_1.Address(wc, hash);
    }
    _loadExternalAddress() {
        let type = Number(this._preloadUint(2, this._offset));
        if (type !== 1) {
            throw Error('Invalid address');
        }
        // Load length
        let bits = Number(this._preloadUint(9, this._offset + 2));
        // Load address
        let value = this._preloadUint(bits, this._offset + 11);
        // Update offset
        this._offset += 11 + bits;
        return new ExternalAddress_1.ExternalAddress(value, bits);
    }
    _toSafeInteger(src, alt) {
        if (BigInt(Number.MAX_SAFE_INTEGER) < src || src < BigInt(Number.MIN_SAFE_INTEGER)) {
            throw new TypeError(`${src} is out of safe integer range. Use ${alt} instead`);
        }
        return Number(src);
    }
}
exports.BitReader = BitReader;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/BitString.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/BitString.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BitString = void 0;
const paddedBits_1 = __webpack_require__(/*! ./utils/paddedBits */ "./node_modules/@ton/core/dist/boc/utils/paddedBits.js");
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
/**
 * BitString is a class that represents a bitstring in a buffer with a specified offset and length
 */
class BitString {
    /**
     * Checks if supplied object is BitString
     * @param src is unknow object
     * @returns true if object is BitString and false otherwise
     **/
    static isBitString(src) {
        return src instanceof BitString;
    }
    /**
     * Constructing BitString from a buffer
     * @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified
     * @param offset offset in bits from the start of the buffer
     * @param length length of the bitstring in bits
     */
    constructor(data, offset, length) {
        this[_a] = () => this.toString();
        // Check bounds
        if (length < 0) {
            throw new Error(`Length ${length} is out of bounds`);
        }
        this._length = length;
        this._data = data;
        this._offset = offset;
    }
    /**
     * Returns the length of the bitstring
     */
    get length() {
        return this._length;
    }
    /**
     * Returns the bit at the specified index
     * @param index index of the bit
     * @throws Error if index is out of bounds
     * @returns true if the bit is set, false otherwise
     */
    at(index) {
        // Check bounds
        if (index >= this._length) {
            throw new Error(`Index ${index} > ${this._length} is out of bounds`);
        }
        if (index < 0) {
            throw new Error(`Index ${index} < 0 is out of bounds`);
        }
        // Calculcate offsets
        let byteIndex = (this._offset + index) >> 3;
        let bitIndex = 7 - ((this._offset + index) % 8); // NOTE: We are using big endian
        // Return the bit
        return (this._data[byteIndex] & (1 << bitIndex)) !== 0;
    }
    /**
     * Get a subscring of the bitstring
     * @param offset
     * @param length
     * @returns
     */
    substring(offset, length) {
        // Check offset
        if (offset > this._length) {
            throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);
        }
        if (offset < 0) {
            throw new Error(`Offset(${offset}) < 0 is out of bounds`);
        }
        // Corner case of empty string
        if (length === 0) {
            return BitString.EMPTY;
        }
        if (offset + length > this._length) {
            throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);
        }
        // Create substring
        return new BitString(this._data, this._offset + offset, length);
    }
    /**
     * Try to get a buffer from the bitstring without allocations
     * @param offset offset in bits
     * @param length length in bits
     * @returns buffer if the bitstring is aligned to bytes, null otherwise
     */
    subbuffer(offset, length) {
        // Check offset
        if (offset > this._length) {
            throw new Error(`Offset ${offset} is out of bounds`);
        }
        if (offset < 0) {
            throw new Error(`Offset ${offset} is out of bounds`);
        }
        if (offset + length > this._length) {
            throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);
        }
        // Check alignment
        if (length % 8 !== 0) {
            return null;
        }
        if ((this._offset + offset) % 8 !== 0) {
            return null;
        }
        // Create substring
        let start = ((this._offset + offset) >> 3);
        let end = start + (length >> 3);
        return this._data.subarray(start, end);
    }
    /**
     * Checks for equality
     * @param b other bitstring
     * @returns true if the bitstrings are equal, false otherwise
     */
    equals(b) {
        if (this._length !== b._length) {
            return false;
        }
        for (let i = 0; i < this._length; i++) {
            if (this.at(i) !== b.at(i)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Format to canonical string
     * @returns formatted bits as a string
     */
    toString() {
        const padded = (0, paddedBits_1.bitsToPaddedBuffer)(this);
        if (this._length % 4 === 0) {
            const s = padded.subarray(0, Math.ceil(this._length / 8)).toString('hex').toUpperCase();
            if (this._length % 8 === 0) {
                return s;
            }
            else {
                return s.substring(0, s.length - 1);
            }
        }
        else {
            const hex = padded.toString('hex').toUpperCase();
            if (this._length % 8 <= 4) {
                return hex.substring(0, hex.length - 1) + '_';
            }
            else {
                return hex + '_';
            }
        }
    }
}
exports.BitString = BitString;
_a = symbol_inspect_1.default;
BitString.EMPTY = new BitString(Buffer.alloc(0), 0, 0);


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/Builder.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Builder.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Builder = exports.beginCell = void 0;
const BitBuilder_1 = __webpack_require__(/*! ./BitBuilder */ "./node_modules/@ton/core/dist/boc/BitBuilder.js");
const Cell_1 = __webpack_require__(/*! ./Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
const strings_1 = __webpack_require__(/*! ./utils/strings */ "./node_modules/@ton/core/dist/boc/utils/strings.js");
/**
 * Start building a cell
 * @returns a new builder
 */
function beginCell() {
    return new Builder();
}
exports.beginCell = beginCell;
/**
 * Builder for Cells
 */
class Builder {
    constructor() {
        this._bits = new BitBuilder_1.BitBuilder();
        this._refs = [];
    }
    /**
     * Bits written so far
     */
    get bits() {
        return this._bits.length;
    }
    /**
     * References written so far
     */
    get refs() {
        return this._refs.length;
    }
    /**
     * Available bits
     */
    get availableBits() {
        return 1023 - this.bits;
    }
    /**
     * Available references
     */
    get availableRefs() {
        return 4 - this.refs;
    }
    /**
     * Write a single bit
     * @param value bit to write, true or positive number for 1, false or zero or negative for 0
     * @returns this builder
     */
    storeBit(value) {
        this._bits.writeBit(value);
        return this;
    }
    /**
     * Write bits from BitString
     * @param src source bits
     * @returns this builder
     */
    storeBits(src) {
        this._bits.writeBits(src);
        return this;
    }
    /**
     * Store Buffer
     * @param src source buffer
     * @param bytes optional number of bytes to write
     * @returns this builder
     */
    storeBuffer(src, bytes) {
        if (bytes !== undefined && bytes !== null) {
            if (src.length !== bytes) {
                throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);
            }
        }
        this._bits.writeBuffer(src);
        return this;
    }
    /**
     * Store Maybe Buffer
     * @param src source buffer or null
     * @param bytes optional number of bytes to write
     * @returns this builder
     */
    storeMaybeBuffer(src, bytes) {
        if (src !== null) {
            this.storeBit(1);
            this.storeBuffer(src, bytes);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store uint value
     * @param value value as bigint or number
     * @param bits number of bits to write
     * @returns this builder
     */
    storeUint(value, bits) {
        this._bits.writeUint(value, bits);
        return this;
    }
    /**
     * Store maybe uint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write
     * @returns this builder
     */
    storeMaybeUint(value, bits) {
        if (value !== null && value !== undefined) {
            this.storeBit(1);
            this.storeUint(value, bits);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store int value
     * @param value value as bigint or number
     * @param bits number of bits to write
     * @returns this builder
     */
    storeInt(value, bits) {
        this._bits.writeInt(value, bits);
        return this;
    }
    /**
     * Store maybe int value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write
     * @returns this builder
     */
    storeMaybeInt(value, bits) {
        if (value !== null && value !== undefined) {
            this.storeBit(1);
            this.storeInt(value, bits);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store varuint value
     * @param value value as bigint or number
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeVarUint(value, bits) {
        this._bits.writeVarUint(value, bits);
        return this;
    }
    /**
     * Store maybe varuint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeMaybeVarUint(value, bits) {
        if (value !== null && value !== undefined) {
            this.storeBit(1);
            this.storeVarUint(value, bits);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store varint value
     * @param value value as bigint or number
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeVarInt(value, bits) {
        this._bits.writeVarInt(value, bits);
        return this;
    }
    /**
     * Store maybe varint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeMaybeVarInt(value, bits) {
        if (value !== null && value !== undefined) {
            this.storeBit(1);
            this.storeVarInt(value, bits);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store coins value
     * @param amount amount of coins
     * @returns this builder
     */
    storeCoins(amount) {
        this._bits.writeCoins(amount);
        return this;
    }
    /**
     * Store maybe coins value
     * @param amount amount of coins, null or undefined
     * @returns this builder
     */
    storeMaybeCoins(amount) {
        if (amount !== null && amount !== undefined) {
            this.storeBit(1);
            this.storeCoins(amount);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store address
     * @param addres address to store
     * @returns this builder
     */
    storeAddress(address) {
        this._bits.writeAddress(address);
        return this;
    }
    /**
     * Store reference
     * @param cell cell or builder to store
     * @returns this builder
     */
    storeRef(cell) {
        // Check refs
        if (this._refs.length >= 4) {
            throw new Error("Too many references");
        }
        // Store reference
        if (cell instanceof Cell_1.Cell) {
            this._refs.push(cell);
        }
        else if (cell instanceof Builder) {
            this._refs.push(cell.endCell());
        }
        else {
            throw new Error("Invalid argument");
        }
        return this;
    }
    /**
     * Store reference if not null
     * @param cell cell or builder to store
     * @returns this builder
     */
    storeMaybeRef(cell) {
        if (cell) {
            this.storeBit(1);
            this.storeRef(cell);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store slice it in this builder
     * @param src source slice
     */
    storeSlice(src) {
        let c = src.clone();
        if (c.remainingBits > 0) {
            this.storeBits(c.loadBits(c.remainingBits));
        }
        while (c.remainingRefs > 0) {
            this.storeRef(c.loadRef());
        }
        return this;
    }
    /**
     * Store slice in this builder if not null
     * @param src source slice
     */
    storeMaybeSlice(src) {
        if (src) {
            this.storeBit(1);
            this.storeSlice(src);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store builder
     * @param src builder to store
     * @returns this builder
     */
    storeBuilder(src) {
        return this.storeSlice(src.endCell().beginParse());
    }
    /**
     * Store builder if not null
     * @param src builder to store
     * @returns this builder
     */
    storeMaybeBuilder(src) {
        if (src) {
            this.storeBit(1);
            this.storeBuilder(src);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store writer or builder
     * @param writer writer or builder to store
     * @returns this builder
     */
    storeWritable(writer) {
        if (typeof writer === 'object') {
            writer.writeTo(this);
        }
        else {
            writer(this);
        }
        return this;
    }
    /**
     * Store writer or builder if not null
     * @param writer writer or builder to store
     * @returns this builder
     */
    storeMaybeWritable(writer) {
        if (writer) {
            this.storeBit(1);
            this.storeWritable(writer);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store object in this builder
     * @param writer Writable or writer functuin
     */
    store(writer) {
        this.storeWritable(writer);
        return this;
    }
    /**
     * Store string tail
     * @param src source string
     * @returns this builder
     */
    storeStringTail(src) {
        (0, strings_1.writeString)(src, this);
        return this;
    }
    /**
     * Store string tail
     * @param src source string
     * @returns this builder
     */
    storeMaybeStringTail(src) {
        if (src !== null && src !== undefined) {
            this.storeBit(1);
            (0, strings_1.writeString)(src, this);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store string tail in ref
     * @param src source string
     * @returns this builder
     */
    storeStringRefTail(src) {
        this.storeRef(beginCell()
            .storeStringTail(src));
        return this;
    }
    /**
     * Store maybe string tail in ref
     * @param src source string
     * @returns this builder
     */
    storeMaybeStringRefTail(src) {
        if (src !== null && src !== undefined) {
            this.storeBit(1);
            this.storeStringRefTail(src);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store dictionary in this builder
     * @param dict dictionary to store
     * @returns this builder
     */
    storeDict(dict, key, value) {
        if (dict) {
            dict.store(this, key, value);
        }
        else {
            this.storeBit(0);
        }
        return this;
    }
    /**
     * Store dictionary in this builder directly
     * @param dict dictionary to store
     * @returns this builder
     */
    storeDictDirect(dict, key, value) {
        dict.storeDirect(this, key, value);
        return this;
    }
    /**
     * Complete cell
     * @param opts options
     * @returns cell
     */
    endCell(opts) {
        return new Cell_1.Cell({
            bits: this._bits.build(),
            refs: this._refs,
            exotic: opts?.exotic
        });
    }
    /**
     * Convert to cell
     * @returns cell
     */
    asCell() {
        return this.endCell();
    }
    /**
     * Convert to slice
     * @returns slice
     */
    asSlice() {
        return this.endCell().beginParse();
    }
}
exports.Builder = Builder;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/Cell.js":
/*!*************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Cell.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Cell = void 0;
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
const BitString_1 = __webpack_require__(/*! ./BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
const CellType_1 = __webpack_require__(/*! ./CellType */ "./node_modules/@ton/core/dist/boc/CellType.js");
const Slice_1 = __webpack_require__(/*! ./Slice */ "./node_modules/@ton/core/dist/boc/Slice.js");
const resolveExotic_1 = __webpack_require__(/*! ./cell/resolveExotic */ "./node_modules/@ton/core/dist/boc/cell/resolveExotic.js");
const wonderCalculator_1 = __webpack_require__(/*! ./cell/wonderCalculator */ "./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js");
const serialization_1 = __webpack_require__(/*! ./cell/serialization */ "./node_modules/@ton/core/dist/boc/cell/serialization.js");
const BitReader_1 = __webpack_require__(/*! ./BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
const Builder_1 = __webpack_require__(/*! ./Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
/**
 * Cell as described in TVM spec
 */
class Cell {
    /**
     * Deserialize cells from BOC
     * @param src source buffer
     * @returns array of cells
     */
    static fromBoc(src) {
        return (0, serialization_1.deserializeBoc)(src);
    }
    /**
     * Helper function that deserializes a single cell from BOC in base64
     * @param src source string
     */
    static fromBase64(src) {
        let parsed = Cell.fromBoc(Buffer.from(src, 'base64'));
        if (parsed.length !== 1) {
            throw new Error("Deserialized more than one cell");
        }
        return parsed[0];
    }
    /**
     * Helper function that deserializes a single cell from BOC in hex
     * @param src source string
     */
    static fromHex(src) {
        let parsed = Cell.fromBoc(Buffer.from(src, 'hex'));
        if (parsed.length !== 1) {
            throw new Error("Deserialized more than one cell");
        }
        return parsed[0];
    }
    constructor(opts) {
        // Level and depth information
        this._hashes = [];
        this._depths = [];
        /**
         * Beging cell parsing
         * @returns a new slice
         */
        this.beginParse = (allowExotic = false) => {
            if (this.isExotic && !allowExotic) {
                throw new Error("Exotic cells cannot be parsed");
            }
            return new Slice_1.Slice(new BitReader_1.BitReader(this.bits), this.refs);
        };
        /**
         * Get cell hash
         * @param level level
         * @returns cell hash
         */
        this.hash = (level = 3) => {
            return this._hashes[Math.min(this._hashes.length - 1, level)];
        };
        /**
         * Get cell depth
         * @param level level
         * @returns cell depth
         */
        this.depth = (level = 3) => {
            return this._depths[Math.min(this._depths.length - 1, level)];
        };
        /**
         * Get cell level
         * @returns cell level
         */
        this.level = () => {
            return this.mask.level;
        };
        /**
         * Checks cell to be euqal to another cell
         * @param other other cell
         * @returns true if cells are equal
         */
        this.equals = (other) => {
            return this.hash().equals(other.hash());
        };
        this[_a] = () => this.toString();
        // Resolve bits
        let bits = BitString_1.BitString.EMPTY;
        if (opts && opts.bits) {
            bits = opts.bits;
        }
        // Resolve refs
        let refs = [];
        if (opts && opts.refs) {
            refs = [...opts.refs];
        }
        // Resolve type
        let hashes;
        let depths;
        let mask;
        let type = CellType_1.CellType.Ordinary;
        if (opts && opts.exotic) {
            // Resolve exotic cell
            let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs);
            // Perform wonders
            let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs);
            // Copy results
            mask = wonders.mask;
            depths = wonders.depths;
            hashes = wonders.hashes;
            type = resolved.type;
        }
        else {
            // Check correctness
            if (refs.length > 4) {
                throw new Error("Invalid number of references");
            }
            if (bits.length > 1023) {
                throw new Error(`Bits overflow: ${bits.length} > 1023`);
            }
            // Perform wonders
            let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_1.CellType.Ordinary, bits, refs);
            // Copy results
            mask = wonders.mask;
            depths = wonders.depths;
            hashes = wonders.hashes;
            type = CellType_1.CellType.Ordinary;
        }
        // Set fields
        this.type = type;
        this.bits = bits;
        this.refs = refs;
        this.mask = mask;
        this._depths = depths;
        this._hashes = hashes;
        Object.freeze(this);
        Object.freeze(this.refs);
        Object.freeze(this.bits);
        Object.freeze(this.mask);
        Object.freeze(this._depths);
        Object.freeze(this._hashes);
    }
    /**
     * Check if cell is exotic
     */
    get isExotic() {
        return this.type !== CellType_1.CellType.Ordinary;
    }
    /**
     * Serializes cell to BOC
     * @param opts options
     */
    toBoc(opts) {
        let idx = (opts && opts.idx !== null && opts.idx !== undefined) ? opts.idx : false;
        let crc32 = (opts && opts.crc32 !== null && opts.crc32 !== undefined) ? opts.crc32 : true;
        return (0, serialization_1.serializeBoc)(this, { idx, crc32 });
    }
    /**
     * Format cell to string
     * @param indent indentation
     * @returns string representation
     */
    toString(indent) {
        let id = indent || '';
        let t = 'x';
        if (this.isExotic) {
            if (this.type === CellType_1.CellType.MerkleProof) {
                t = 'p';
            }
            else if (this.type === CellType_1.CellType.MerkleUpdate) {
                t = 'u';
            }
            else if (this.type === CellType_1.CellType.PrunedBranch) {
                t = 'p';
            }
        }
        let s = id + (this.isExotic ? t : 'x') + '{' + this.bits.toString() + '}';
        for (let k in this.refs) {
            const i = this.refs[k];
            s += '\n' + i.toString(id + ' ');
        }
        return s;
    }
    /**
     * Covnert cell to slice
     * @returns slice
     */
    asSlice() {
        return this.beginParse();
    }
    /**
     * Convert cell to a builder that has this cell stored
     * @returns builder
     */
    asBuilder() {
        return (0, Builder_1.beginCell)().storeSlice(this.asSlice());
    }
}
exports.Cell = Cell;
_a = symbol_inspect_1.default;
Cell.EMPTY = new Cell();


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/CellType.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/CellType.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CellType = void 0;
var CellType;
(function (CellType) {
    CellType[CellType["Ordinary"] = -1] = "Ordinary";
    CellType[CellType["PrunedBranch"] = 1] = "PrunedBranch";
    CellType[CellType["Library"] = 2] = "Library";
    CellType[CellType["MerkleProof"] = 3] = "MerkleProof";
    CellType[CellType["MerkleUpdate"] = 4] = "MerkleUpdate";
})(CellType || (exports.CellType = CellType = {}));


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/Slice.js":
/*!**************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/Slice.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Slice = void 0;
const symbol_inspect_1 = __importDefault(__webpack_require__(/*! symbol.inspect */ "./node_modules/symbol.inspect/index.js"));
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
const Builder_1 = __webpack_require__(/*! ./Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const strings_1 = __webpack_require__(/*! ./utils/strings */ "./node_modules/@ton/core/dist/boc/utils/strings.js");
/**
 * Slice is a class that allows to read cell data
 */
class Slice {
    constructor(reader, refs) {
        this[_a] = () => this.toString();
        this._reader = reader.clone();
        this._refs = [...refs];
        this._refsOffset = 0;
    }
    /**
     * Get remaining bits
     */
    get remainingBits() {
        return this._reader.remaining;
    }
    /**
     * Get offset bits
     */
    get offsetBits() {
        return this._reader.offset;
    }
    /**
     * Get remaining refs
     */
    get remainingRefs() {
        return this._refs.length - this._refsOffset;
    }
    /**
     * Get offset refs
     */
    get offsetRefs() {
        return this._refsOffset;
    }
    /**
     * Skip bits
     * @param bits
     */
    skip(bits) {
        this._reader.skip(bits);
        return this;
    }
    /**
     * Load a single bit
     * @returns true or false depending on the bit value
     */
    loadBit() {
        return this._reader.loadBit();
    }
    /**
     * Preload a signle bit
     * @returns true or false depending on the bit value
     */
    preloadBit() {
        return this._reader.preloadBit();
    }
    /**
     * Load a boolean
     * @returns true or false depending on the bit value
     */
    loadBoolean() {
        return this.loadBit();
    }
    /**
     * Load maybe boolean
     * @returns true or false depending on the bit value or null
     */
    loadMaybeBoolean() {
        if (this.loadBit()) {
            return this.loadBoolean();
        }
        else {
            return null;
        }
    }
    /**
     * Load bits as a new BitString
     * @param bits number of bits to read
     * @returns new BitString
     */
    loadBits(bits) {
        return this._reader.loadBits(bits);
    }
    /**
     * Preload bits as a new BitString
     * @param bits number of bits to read
     * @returns new BitString
     */
    preloadBits(bits) {
        return this._reader.preloadBits(bits);
    }
    /**
     * Load uint
     * @param bits number of bits to read
     * @returns uint value
     */
    loadUint(bits) {
        return this._reader.loadUint(bits);
    }
    /**
     * Load uint
     * @param bits number of bits to read
     * @returns uint value
     */
    loadUintBig(bits) {
        return this._reader.loadUintBig(bits);
    }
    /**
     * Preload uint
     * @param bits number of bits to read
     * @returns uint value
     */
    preloadUint(bits) {
        return this._reader.preloadUint(bits);
    }
    /**
     * Preload uint
     * @param bits number of bits to read
     * @returns uint value
     */
    preloadUintBig(bits) {
        return this._reader.preloadUintBig(bits);
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeUint(bits) {
        if (this.loadBit()) {
            return this.loadUint(bits);
        }
        else {
            return null;
        }
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeUintBig(bits) {
        if (this.loadBit()) {
            return this.loadUintBig(bits);
        }
        else {
            return null;
        }
    }
    /**
     * Load int
     * @param bits number of bits to read
     * @returns int value
     */
    loadInt(bits) {
        return this._reader.loadInt(bits);
    }
    /**
     * Load int
     * @param bits number of bits to read
     * @returns int value
     */
    loadIntBig(bits) {
        return this._reader.loadIntBig(bits);
    }
    /**
     * Preload int
     * @param bits number of bits to read
     * @returns int value
     */
    preloadInt(bits) {
        return this._reader.preloadInt(bits);
    }
    /**
     * Preload int
     * @param bits number of bits to read
     * @returns int value
     */
    preloadIntBig(bits) {
        return this._reader.preloadIntBig(bits);
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeInt(bits) {
        if (this.loadBit()) {
            return this.loadInt(bits);
        }
        else {
            return null;
        }
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeIntBig(bits) {
        if (this.loadBit()) {
            return this.loadIntBig(bits);
        }
        else {
            return null;
        }
    }
    /**
     * Load varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    loadVarUint(bits) {
        return this._reader.loadVarUint(bits);
    }
    /**
     * Load varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    loadVarUintBig(bits) {
        return this._reader.loadVarUintBig(bits);
    }
    /**
     * Preload varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    preloadVarUint(bits) {
        return this._reader.preloadVarUint(bits);
    }
    /**
     * Preload varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    preloadVarUintBig(bits) {
        return this._reader.preloadVarUintBig(bits);
    }
    /**
     * Load varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    loadVarInt(bits) {
        return this._reader.loadVarInt(bits);
    }
    /**
     * Load varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    loadVarIntBig(bits) {
        return this._reader.loadVarIntBig(bits);
    }
    /**
     * Preload varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    preloadVarInt(bits) {
        return this._reader.preloadVarInt(bits);
    }
    /**
     * Preload varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    preloadVarIntBig(bits) {
        return this._reader.preloadVarIntBig(bits);
    }
    /**
     * Load coins
     * @returns coins value
     */
    loadCoins() {
        return this._reader.loadCoins();
    }
    /**
     * Preload coins
     * @returns coins value
     */
    preloadCoins() {
        return this._reader.preloadCoins();
    }
    /**
     * Load maybe coins
     * @returns coins value or null
     */
    loadMaybeCoins() {
        if (this._reader.loadBit()) {
            return this._reader.loadCoins();
        }
        else {
            return null;
        }
    }
    /**
     * Load internal Address
     * @returns Address
     */
    loadAddress() {
        return this._reader.loadAddress();
    }
    /**
     * Load optional internal Address
     * @returns Address or null
     */
    loadMaybeAddress() {
        return this._reader.loadMaybeAddress();
    }
    /**
     * Load external address
     * @returns ExternalAddress
     */
    loadExternalAddress() {
        return this._reader.loadExternalAddress();
    }
    /**
     * Load optional external address
     * @returns ExternalAddress or null
     */
    loadMaybeExternalAddress() {
        return this._reader.loadMaybeExternalAddress();
    }
    /**
     * Load address
     * @returns Address, ExternalAddress or null
     */
    loadAddressAny() {
        return this._reader.loadAddressAny();
    }
    /**
     * Load reference
     * @returns Cell
     */
    loadRef() {
        if (this._refsOffset >= this._refs.length) {
            throw new Error("No more references");
        }
        return this._refs[this._refsOffset++];
    }
    /**
     * Preload reference
     * @returns Cell
     */
    preloadRef() {
        if (this._refsOffset >= this._refs.length) {
            throw new Error("No more references");
        }
        return this._refs[this._refsOffset];
    }
    /**
     * Load optional reference
     * @returns Cell or null
     */
    loadMaybeRef() {
        if (this.loadBit()) {
            return this.loadRef();
        }
        else {
            return null;
        }
    }
    /**
     * Preload optional reference
     * @returns Cell or null
     */
    preloadMaybeRef() {
        if (this.preloadBit()) {
            return this.preloadRef();
        }
        else {
            return null;
        }
    }
    /**
     * Load byte buffer
     * @param bytes number of bytes to load
     * @returns Buffer
     */
    loadBuffer(bytes) {
        return this._reader.loadBuffer(bytes);
    }
    /**
     * Load byte buffer
     * @param bytes number of bytes to load
     * @returns Buffer
     */
    preloadBuffer(bytes) {
        return this._reader.preloadBuffer(bytes);
    }
    /**
     * Load string tail
     */
    loadStringTail() {
        return (0, strings_1.readString)(this);
    }
    /**
     * Load maybe string tail
     * @returns string or null
     */
    loadMaybeStringTail() {
        if (this.loadBit()) {
            return (0, strings_1.readString)(this);
        }
        else {
            return null;
        }
    }
    /**
     * Load string tail from ref
     * @returns string
     */
    loadStringRefTail() {
        return (0, strings_1.readString)(this.loadRef().beginParse());
    }
    /**
     * Load maybe string tail from ref
     * @returns string or null
     */
    loadMaybeStringRefTail() {
        const ref = this.loadMaybeRef();
        if (ref) {
            return (0, strings_1.readString)(ref.beginParse());
        }
        else {
            return null;
        }
    }
    /**
     * Loads dictionary
     * @param key key description
     * @param value value description
     * @returns Dictionary<K, V>
     */
    loadDict(key, value) {
        return Dictionary_1.Dictionary.load(key, value, this);
    }
    /**
     * Loads dictionary directly from current slice
     * @param key key description
     * @param value value description
     * @returns Dictionary<K, V>
     */
    loadDictDirect(key, value) {
        return Dictionary_1.Dictionary.loadDirect(key, value, this);
    }
    /**
     * Checks if slice is empty
     */
    endParse() {
        if (this.remainingBits > 0 || this.remainingRefs > 0) {
            throw new Error("Slice is not empty");
        }
    }
    /**
     * Convert slice to cell
     */
    asCell() {
        return (0, Builder_1.beginCell)().storeSlice(this).endCell();
    }
    /**
     *
     * @returns
     */
    asBuilder() {
        return (0, Builder_1.beginCell)().storeSlice(this);
    }
    /**
     * Clone slice
     * @returns cloned slice
     */
    clone(fromStart = false) {
        if (fromStart) {
            let reader = this._reader.clone();
            reader.reset();
            return new Slice(reader, this._refs);
        }
        else {
            let res = new Slice(this._reader, this._refs);
            res._refsOffset = this._refsOffset;
            return res;
        }
    }
    /**
     * Print slice as string by converting it to cell
     * @returns string
     */
    toString() {
        return this.asCell().toString();
    }
}
exports.Slice = Slice;
_a = symbol_inspect_1.default;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/LevelMask.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/LevelMask.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LevelMask = void 0;
class LevelMask {
    constructor(mask = 0) {
        this._mask = 0;
        this._mask = mask;
        this._hashIndex = countSetBits(this._mask);
        this._hashCount = this._hashIndex + 1;
    }
    get value() {
        return this._mask;
    }
    get level() {
        return 32 - Math.clz32(this._mask);
    }
    get hashIndex() {
        return this._hashIndex;
    }
    get hashCount() {
        return this._hashCount;
    }
    apply(level) {
        return new LevelMask(this._mask & ((1 << level) - 1));
    }
    isSignificant(level) {
        let res = level === 0 || (this._mask >> (level - 1)) % 2 !== 0;
        return res;
        // bool res = level == 0 | | ( (mask_ >> (level -1)) % 2 != 0);
    }
}
exports.LevelMask = LevelMask;
function countSetBits(n) {
    n = n - ((n >> 1) & 0x55555555);
    n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
}


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/descriptor.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/descriptor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRepr = exports.getBitsDescriptor = exports.getRefsDescriptor = void 0;
const CellType_1 = __webpack_require__(/*! ../CellType */ "./node_modules/@ton/core/dist/boc/CellType.js");
const paddedBits_1 = __webpack_require__(/*! ../utils/paddedBits */ "./node_modules/@ton/core/dist/boc/utils/paddedBits.js");
function getRefsDescriptor(refs, levelMask, type) {
    return refs.length + (type !== CellType_1.CellType.Ordinary ? 1 : 0) * 8 + levelMask * 32;
}
exports.getRefsDescriptor = getRefsDescriptor;
function getBitsDescriptor(bits) {
    let len = bits.length;
    return Math.ceil(len / 8) + Math.floor(len / 8);
}
exports.getBitsDescriptor = getBitsDescriptor;
function getRepr(originalBits, bits, refs, level, levelMask, type) {
    // Allocate
    const bitsLen = Math.ceil(bits.length / 8);
    const repr = Buffer.alloc(2 + bitsLen + (2 + 32) * refs.length);
    // Write descriptors
    let reprCursor = 0;
    repr[reprCursor++] = getRefsDescriptor(refs, levelMask, type);
    repr[reprCursor++] = getBitsDescriptor(originalBits);
    // Write bits
    (0, paddedBits_1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);
    reprCursor += bitsLen;
    // Write refs
    for (const c of refs) {
        let childDepth;
        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
            childDepth = c.depth(level + 1);
        }
        else {
            childDepth = c.depth(level);
        }
        repr[reprCursor++] = Math.floor(childDepth / 256);
        repr[reprCursor++] = childDepth % 256;
    }
    for (const c of refs) {
        let childHash;
        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
            childHash = c.hash(level + 1);
        }
        else {
            childHash = c.hash(level);
        }
        childHash.copy(repr, reprCursor);
        reprCursor += 32;
    }
    // Result
    return repr;
}
exports.getRepr = getRepr;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exoticLibrary = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
function exoticLibrary(bits, refs) {
    const reader = new BitReader_1.BitReader(bits);
    // type + hash
    const size = 8 + 256;
    if (bits.length !== size) {
        throw new Error(`Library cell must have exactly (8 + 256) bits, got "${bits.length}"`);
    }
    // Check type
    let type = reader.loadUint(8);
    if (type !== 2) {
        throw new Error(`Library cell must have type 2, got "${type}"`);
    }
    return {};
}
exports.exoticLibrary = exoticLibrary;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertToMerkleProof = exports.exoticMerkleProof = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
const Builder_1 = __webpack_require__(/*! ../Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
function exoticMerkleProof(bits, refs) {
    const reader = new BitReader_1.BitReader(bits);
    // type + hash + depth
    const size = 8 + 256 + 16;
    if (bits.length !== size) {
        throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got "${bits.length}"`);
    }
    if (refs.length !== 1) {
        throw new Error(`Merkle Proof cell must have exactly 1 ref, got "${refs.length}"`);
    }
    // Check type
    let type = reader.loadUint(8);
    if (type !== 3) {
        throw new Error(`Merkle Proof cell must have type 3, got "${type}"`);
    }
    // Check data
    const proofHash = reader.loadBuffer(32);
    const proofDepth = reader.loadUint(16);
    const refHash = refs[0].hash(0);
    const refDepth = refs[0].depth(0);
    if (proofDepth !== refDepth) {
        throw new Error(`Merkle Proof cell ref depth must be exactly "${proofDepth}", got "${refDepth}"`);
    }
    if (!proofHash.equals(refHash)) {
        throw new Error(`Merkle Proof cell ref hash must be exactly "${proofHash.toString('hex')}", got "${refHash.toString('hex')}"`);
    }
    return {
        proofDepth,
        proofHash
    };
}
exports.exoticMerkleProof = exoticMerkleProof;
function convertToMerkleProof(c) {
    return (0, Builder_1.beginCell)()
        .storeUint(3, 8)
        .storeBuffer(c.hash(0))
        .storeUint(c.depth(0), 16)
        .storeRef(c)
        .endCell({ exotic: true });
}
exports.convertToMerkleProof = convertToMerkleProof;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exoticMerkleUpdate = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
function exoticMerkleUpdate(bits, refs) {
    const reader = new BitReader_1.BitReader(bits);
    // type + hash + hash + depth + depth
    const size = 8 + (2 * (256 + 16));
    if (bits.length !== size) {
        throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got "${bits.length}"`);
    }
    if (refs.length !== 2) {
        throw new Error(`Merkle Update cell must have exactly 2 refs, got "${refs.length}"`);
    }
    let type = reader.loadUint(8);
    if (type !== 4) {
        throw new Error(`Merkle Update cell type must be exactly 4, got "${type}"`);
    }
    const proofHash1 = reader.loadBuffer(32);
    const proofHash2 = reader.loadBuffer(32);
    const proofDepth1 = reader.loadUint(16);
    const proofDepth2 = reader.loadUint(16);
    if (proofDepth1 !== refs[0].depth(0)) {
        throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth1}", got "${refs[0].depth(0)}"`);
    }
    if (!proofHash1.equals(refs[0].hash(0))) {
        throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash1.toString('hex')}", got "${refs[0].hash(0).toString('hex')}"`);
    }
    if (proofDepth2 !== refs[1].depth(0)) {
        throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth2}", got "${refs[1].depth(0)}"`);
    }
    if (!proofHash2.equals(refs[1].hash(0))) {
        throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash2.toString('hex')}", got "${refs[1].hash(0).toString('hex')}"`);
    }
    return {
        proofDepth1,
        proofDepth2,
        proofHash1,
        proofHash2
    };
}
exports.exoticMerkleUpdate = exoticMerkleUpdate;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/exoticPruned.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/exoticPruned.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exoticPruned = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
const LevelMask_1 = __webpack_require__(/*! ./LevelMask */ "./node_modules/@ton/core/dist/boc/cell/LevelMask.js");
function exoticPruned(bits, refs) {
    let reader = new BitReader_1.BitReader(bits);
    // Check type
    let type = reader.loadUint(8);
    if (type !== 1) {
        throw new Error(`Pruned branch cell must have type 1, got "${type}"`);
    }
    // Check refs
    if (refs.length !== 0) {
        throw new Error(`Pruned Branch cell can't has refs, got "${refs.length}"`);
    }
    // Resolve cell
    let mask;
    if (bits.length === 280) {
        // Special case for config proof
        // This test proof is generated in the moment of voting for a slashing
        // it seems that tools generate it incorrectly and therefore doesn't have mask in it
        // so we need to hardcode it equal to 1
        mask = new LevelMask_1.LevelMask(1);
    }
    else {
        // Check level
        mask = new LevelMask_1.LevelMask(reader.loadUint(8));
        if (mask.level < 1 || mask.level > 3) {
            throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got "${mask.level}/${mask.value}"`);
        }
        // Read pruned
        const size = 8 + 8 + (mask.apply(mask.level - 1).hashCount * (256 /* Hash */ + 16 /* Depth */));
        if (bits.length !== size) {
            throw new Error(`Pruned branch cell must have exactly ${size} bits, got "${bits.length}"`);
        }
    }
    // Read pruned
    let pruned = [];
    let hashes = [];
    let depths = [];
    for (let i = 0; i < mask.level; i++) {
        hashes.push(reader.loadBuffer(32));
    }
    for (let i = 0; i < mask.level; i++) {
        depths.push(reader.loadUint(16));
    }
    for (let i = 0; i < mask.level; i++) {
        pruned.push({
            depth: depths[i],
            hash: hashes[i]
        });
    }
    return {
        mask: mask.value,
        pruned
    };
}
exports.exoticPruned = exoticPruned;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/resolveExotic.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/resolveExotic.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveExotic = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
const CellType_1 = __webpack_require__(/*! ../CellType */ "./node_modules/@ton/core/dist/boc/CellType.js");
const exoticLibrary_1 = __webpack_require__(/*! ./exoticLibrary */ "./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js");
const exoticMerkleProof_1 = __webpack_require__(/*! ./exoticMerkleProof */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js");
const exoticMerkleUpdate_1 = __webpack_require__(/*! ./exoticMerkleUpdate */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js");
const exoticPruned_1 = __webpack_require__(/*! ./exoticPruned */ "./node_modules/@ton/core/dist/boc/cell/exoticPruned.js");
const LevelMask_1 = __webpack_require__(/*! ./LevelMask */ "./node_modules/@ton/core/dist/boc/cell/LevelMask.js");
function resolvePruned(bits, refs) {
    // Parse pruned cell
    let pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);
    // Calculate parameters
    let depths = [];
    let hashes = [];
    let mask = new LevelMask_1.LevelMask(pruned.mask);
    for (let i = 0; i < pruned.pruned.length; i++) {
        depths.push(pruned.pruned[i].depth);
        hashes.push(pruned.pruned[i].hash);
    }
    return {
        type: CellType_1.CellType.PrunedBranch,
        depths,
        hashes,
        mask
    };
}
function resolveLibrary(bits, refs) {
    // Parse library cell
    let pruned = (0, exoticLibrary_1.exoticLibrary)(bits, refs);
    // Calculate parameters
    let depths = [];
    let hashes = [];
    let mask = new LevelMask_1.LevelMask();
    return {
        type: CellType_1.CellType.Library,
        depths,
        hashes,
        mask
    };
}
function resolveMerkleProof(bits, refs) {
    // Parse merkle proof cell
    let merkleProof = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);
    // Calculate parameters
    let depths = [];
    let hashes = [];
    let mask = new LevelMask_1.LevelMask(refs[0].level() >> 1);
    return {
        type: CellType_1.CellType.MerkleProof,
        depths,
        hashes,
        mask
    };
}
function resolveMerkleUpdate(bits, refs) {
    // Parse merkle proof cell
    let merkleUpdate = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);
    // Calculate parameters
    let depths = [];
    let hashes = [];
    let mask = new LevelMask_1.LevelMask((refs[0].level() | refs[1].level()) >> 1);
    return {
        type: CellType_1.CellType.MerkleUpdate,
        depths,
        hashes,
        mask
    };
}
function resolveExotic(bits, refs) {
    let reader = new BitReader_1.BitReader(bits);
    let type = reader.preloadUint(8);
    if (type === 1) {
        return resolvePruned(bits, refs);
    }
    if (type === 2) {
        return resolveLibrary(bits, refs);
    }
    if (type === 3) {
        return resolveMerkleProof(bits, refs);
    }
    if (type === 4) {
        return resolveMerkleUpdate(bits, refs);
    }
    throw Error('Invalid exotic cell type: ' + type);
}
exports.resolveExotic = resolveExotic;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/serialization.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/serialization.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.serializeBoc = exports.deserializeBoc = exports.parseBoc = void 0;
const BitReader_1 = __webpack_require__(/*! ../BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
const BitString_1 = __webpack_require__(/*! ../BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
const Cell_1 = __webpack_require__(/*! ../Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
const topologicalSort_1 = __webpack_require__(/*! ./utils/topologicalSort */ "./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js");
const bitsForNumber_1 = __webpack_require__(/*! ../../utils/bitsForNumber */ "./node_modules/@ton/core/dist/utils/bitsForNumber.js");
const BitBuilder_1 = __webpack_require__(/*! ../BitBuilder */ "./node_modules/@ton/core/dist/boc/BitBuilder.js");
const descriptor_1 = __webpack_require__(/*! ./descriptor */ "./node_modules/@ton/core/dist/boc/cell/descriptor.js");
const paddedBits_1 = __webpack_require__(/*! ../utils/paddedBits */ "./node_modules/@ton/core/dist/boc/utils/paddedBits.js");
const crc32c_1 = __webpack_require__(/*! ../../utils/crc32c */ "./node_modules/@ton/core/dist/utils/crc32c.js");
function getHashesCount(levelMask) {
    return getHashesCountFromMask(levelMask & 7);
}
function getHashesCountFromMask(mask) {
    let n = 0;
    for (let i = 0; i < 3; i++) {
        n += (mask & 1);
        mask = mask >> 1;
    }
    return n + 1; // 1 repr + up to 3 higher hashes
}
function readCell(reader, sizeBytes) {
    // D1
    const d1 = reader.loadUint(8);
    const refsCount = d1 % 8;
    const exotic = !!(d1 & 8);
    // D2
    const d2 = reader.loadUint(8);
    const dataBytesize = Math.ceil(d2 / 2);
    const paddingAdded = !!(d2 % 2);
    const levelMask = d1 >> 5;
    const hasHashes = (d1 & 16) != 0;
    const hash_bytes = 32;
    const hashesSize = hasHashes ? getHashesCount(levelMask) * hash_bytes : 0;
    const depthSize = hasHashes ? getHashesCount(levelMask) * 2 : 0;
    reader.skip(hashesSize * 8);
    reader.skip(depthSize * 8);
    // Bits
    let bits = BitString_1.BitString.EMPTY;
    if (dataBytesize > 0) {
        if (paddingAdded) {
            bits = reader.loadPaddedBits(dataBytesize * 8);
        }
        else {
            bits = reader.loadBits(dataBytesize * 8);
        }
    }
    // Refs
    let refs = [];
    for (let i = 0; i < refsCount; i++) {
        refs.push(reader.loadUint(sizeBytes * 8));
    }
    // Result
    return {
        bits,
        refs,
        exotic
    };
}
function calcCellSize(cell, sizeBytes) {
    return 2 /* D1+D2 */ + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;
}
function parseBoc(src) {
    let reader = new BitReader_1.BitReader(new BitString_1.BitString(src, 0, src.length * 8));
    let magic = reader.loadUint(32);
    if (magic === 0x68ff65f3) {
        let size = reader.loadUint(8);
        let offBytes = reader.loadUint(8);
        let cells = reader.loadUint(size * 8);
        let roots = reader.loadUint(size * 8); // Must be 1
        let absent = reader.loadUint(size * 8);
        let totalCellSize = reader.loadUint(offBytes * 8);
        let index = reader.loadBuffer(cells * offBytes);
        let cellData = reader.loadBuffer(totalCellSize);
        return {
            size,
            offBytes,
            cells,
            roots,
            absent,
            totalCellSize,
            index,
            cellData,
            root: [0]
        };
    }
    else if (magic === 0xacc3a728) {
        let size = reader.loadUint(8);
        let offBytes = reader.loadUint(8);
        let cells = reader.loadUint(size * 8);
        let roots = reader.loadUint(size * 8); // Must be 1
        let absent = reader.loadUint(size * 8);
        let totalCellSize = reader.loadUint(offBytes * 8);
        let index = reader.loadBuffer(cells * offBytes);
        let cellData = reader.loadBuffer(totalCellSize);
        let crc32 = reader.loadBuffer(4);
        if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {
            throw Error('Invalid CRC32C');
        }
        return {
            size,
            offBytes,
            cells,
            roots,
            absent,
            totalCellSize,
            index,
            cellData,
            root: [0]
        };
    }
    else if (magic === 0xb5ee9c72) {
        let hasIdx = reader.loadUint(1);
        let hasCrc32c = reader.loadUint(1);
        let hasCacheBits = reader.loadUint(1);
        let flags = reader.loadUint(2); // Must be 0
        let size = reader.loadUint(3);
        let offBytes = reader.loadUint(8);
        let cells = reader.loadUint(size * 8);
        let roots = reader.loadUint(size * 8);
        let absent = reader.loadUint(size * 8);
        let totalCellSize = reader.loadUint(offBytes * 8);
        let root = [];
        for (let i = 0; i < roots; i++) {
            root.push(reader.loadUint(size * 8));
        }
        let index = null;
        if (hasIdx) {
            index = reader.loadBuffer(cells * offBytes);
        }
        let cellData = reader.loadBuffer(totalCellSize);
        if (hasCrc32c) {
            let crc32 = reader.loadBuffer(4);
            if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {
                throw Error('Invalid CRC32C');
            }
        }
        return {
            size,
            offBytes,
            cells,
            roots,
            absent,
            totalCellSize,
            index,
            cellData,
            root
        };
    }
    else {
        throw Error('Invalid magic');
    }
}
exports.parseBoc = parseBoc;
function deserializeBoc(src) {
    //
    // Parse BOC
    //
    let boc = parseBoc(src);
    let reader = new BitReader_1.BitReader(new BitString_1.BitString(boc.cellData, 0, boc.cellData.length * 8));
    //
    // Load cells
    //
    let cells = [];
    for (let i = 0; i < boc.cells; i++) {
        let cll = readCell(reader, boc.size);
        cells.push({ ...cll, result: null });
    }
    //
    // Build cells
    //
    for (let i = cells.length - 1; i >= 0; i--) {
        if (cells[i].result) {
            throw Error('Impossible');
        }
        let refs = [];
        for (let r of cells[i].refs) {
            if (!cells[r].result) {
                throw Error('Invalid BOC file');
            }
            refs.push(cells[r].result);
        }
        cells[i].result = new Cell_1.Cell({ bits: cells[i].bits, refs, exotic: cells[i].exotic });
    }
    //
    // Load roots
    //
    let roots = [];
    for (let i = 0; i < boc.root.length; i++) {
        roots.push(cells[boc.root[i]].result);
    }
    //
    // Return
    //
    return roots;
}
exports.deserializeBoc = deserializeBoc;
function writeCellToBuilder(cell, refs, sizeBytes, to) {
    let d1 = (0, descriptor_1.getRefsDescriptor)(cell.refs, cell.mask.value, cell.type);
    let d2 = (0, descriptor_1.getBitsDescriptor)(cell.bits);
    to.writeUint(d1, 8);
    to.writeUint(d2, 8);
    to.writeBuffer((0, paddedBits_1.bitsToPaddedBuffer)(cell.bits));
    for (let r of refs) {
        to.writeUint(r, sizeBytes * 8);
    }
}
function serializeBoc(root, opts) {
    // Sort cells
    let allCells = (0, topologicalSort_1.topologicalSort)(root);
    // Calculcate parameters
    let cellsNum = allCells.length;
    let has_idx = opts.idx;
    let has_crc32c = opts.crc32;
    let has_cache_bits = false;
    let flags = 0;
    let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, 'uint') / 8), 1);
    let totalCellSize = 0;
    let index = [];
    for (let c of allCells) {
        let sz = calcCellSize(c.cell, sizeBytes);
        totalCellSize += sz;
        index.push(totalCellSize);
    }
    let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, 'uint') / 8), 1);
    let totalSize = (4 + // magic
        1 + // flags and s_bytes
        1 + // offset_bytes
        3 * sizeBytes + // cells_num, roots, complete
        offsetBytes + // full_size
        1 * sizeBytes + // root_idx
        (has_idx ? cellsNum * offsetBytes : 0) +
        totalCellSize +
        (has_crc32c ? 4 : 0)) * 8;
    // Serialize
    let builder = new BitBuilder_1.BitBuilder(totalSize);
    builder.writeUint(0xb5ee9c72, 32); // Magic
    builder.writeBit(has_idx); // Has index
    builder.writeBit(has_crc32c); // Has crc32c
    builder.writeBit(has_cache_bits); // Has cache bits
    builder.writeUint(flags, 2); // Flags
    builder.writeUint(sizeBytes, 3); // Size bytes
    builder.writeUint(offsetBytes, 8); // Offset bytes
    builder.writeUint(cellsNum, sizeBytes * 8); // Cells num
    builder.writeUint(1, sizeBytes * 8); // Roots num
    builder.writeUint(0, sizeBytes * 8); // Absent num
    builder.writeUint(totalCellSize, offsetBytes * 8); // Total cell size
    builder.writeUint(0, sizeBytes * 8); // Root id == 0
    if (has_idx) { // Index
        for (let i = 0; i < cellsNum; i++) {
            builder.writeUint(index[i], offsetBytes * 8);
        }
    }
    for (let i = 0; i < cellsNum; i++) { // Cells
        writeCellToBuilder(allCells[i].cell, allCells[i].refs, sizeBytes, builder);
    }
    if (has_crc32c) {
        let crc32 = (0, crc32c_1.crc32c)(builder.buffer()); // builder.buffer() is fast since it doesn't allocate new memory
        builder.writeBuffer(crc32);
    }
    // Sanity Check
    let res = builder.buffer();
    if (res.length !== totalSize / 8) {
        throw Error('Internal error');
    }
    return res;
}
exports.serializeBoc = serializeBoc;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.topologicalSort = void 0;
function topologicalSort(src) {
    let pending = [src];
    let allCells = new Map();
    let notPermCells = new Set();
    let sorted = [];
    while (pending.length > 0) {
        const cells = [...pending];
        pending = [];
        for (let cell of cells) {
            const hash = cell.hash().toString('hex');
            if (allCells.has(hash)) {
                continue;
            }
            notPermCells.add(hash);
            allCells.set(hash, { cell: cell, refs: cell.refs.map((v) => v.hash().toString('hex')) });
            for (let r of cell.refs) {
                pending.push(r);
            }
        }
    }
    let tempMark = new Set();
    function visit(hash) {
        if (!notPermCells.has(hash)) {
            return;
        }
        if (tempMark.has(hash)) {
            throw Error('Not a DAG');
        }
        tempMark.add(hash);
        let refs = allCells.get(hash).refs;
        for (let ci = refs.length - 1; ci >= 0; ci--) {
            visit(refs[ci]);
        }
        sorted.push(hash);
        tempMark.delete(hash);
        notPermCells.delete(hash);
    }
    while (notPermCells.size > 0) {
        const id = Array.from(notPermCells)[0];
        visit(id);
    }
    let indexes = new Map();
    for (let i = 0; i < sorted.length; i++) {
        indexes.set(sorted[sorted.length - i - 1], i);
    }
    let result = [];
    for (let i = sorted.length - 1; i >= 0; i--) {
        let ent = sorted[i];
        const rrr = allCells.get(ent);
        result.push({ cell: rrr.cell, refs: rrr.refs.map((v) => indexes.get(v)) });
    }
    return result;
}
exports.topologicalSort = topologicalSort;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/cell/wonderCalculator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wonderCalculator = void 0;
const BitString_1 = __webpack_require__(/*! ../BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
const CellType_1 = __webpack_require__(/*! ../CellType */ "./node_modules/@ton/core/dist/boc/CellType.js");
const LevelMask_1 = __webpack_require__(/*! ./LevelMask */ "./node_modules/@ton/core/dist/boc/cell/LevelMask.js");
const exoticPruned_1 = __webpack_require__(/*! ./exoticPruned */ "./node_modules/@ton/core/dist/boc/cell/exoticPruned.js");
const exoticMerkleProof_1 = __webpack_require__(/*! ./exoticMerkleProof */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js");
const descriptor_1 = __webpack_require__(/*! ./descriptor */ "./node_modules/@ton/core/dist/boc/cell/descriptor.js");
const crypto_1 = __webpack_require__(/*! @ton/crypto */ "./node_modules/@ton/crypto/dist/index.js");
const exoticMerkleUpdate_1 = __webpack_require__(/*! ./exoticMerkleUpdate */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js");
const exoticLibrary_1 = __webpack_require__(/*! ./exoticLibrary */ "./node_modules/@ton/core/dist/boc/cell/exoticLibrary.js");
//
// This function replicates unknown logic of resolving cell data
// https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214
//
function wonderCalculator(type, bits, refs) {
    //
    // Resolving level mask
    //
    let levelMask;
    let pruned = null;
    if (type === CellType_1.CellType.Ordinary) {
        let mask = 0;
        for (let r of refs) {
            mask = mask | r.mask.value;
        }
        levelMask = new LevelMask_1.LevelMask(mask);
    }
    else if (type === CellType_1.CellType.PrunedBranch) {
        // Parse pruned
        pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);
        // Load level
        levelMask = new LevelMask_1.LevelMask(pruned.mask);
    }
    else if (type === CellType_1.CellType.MerkleProof) {
        // Parse proof
        let loaded = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);
        // Load level
        levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);
    }
    else if (type === CellType_1.CellType.MerkleUpdate) {
        // Parse update
        let loaded = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);
        // Load level
        levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);
    }
    else if (type === CellType_1.CellType.Library) {
        // Parse library
        let loaded = (0, exoticLibrary_1.exoticLibrary)(bits, refs);
        // Load level
        levelMask = new LevelMask_1.LevelMask();
    }
    else {
        throw new Error("Unsupported exotic type");
    }
    //
    // Calculate hashes and depths
    // NOTE: https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214
    //
    let depths = [];
    let hashes = [];
    let hashCount = type === CellType_1.CellType.PrunedBranch ? 1 : levelMask.hashCount;
    let totalHashCount = levelMask.hashCount;
    let hashIOffset = totalHashCount - hashCount;
    for (let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++) {
        if (!levelMask.isSignificant(levelI)) {
            continue;
        }
        if (hashI < hashIOffset) {
            hashI++;
            continue;
        }
        //
        // Bits
        //
        let currentBits;
        if (hashI === hashIOffset) {
            if (!(levelI === 0 || type === CellType_1.CellType.PrunedBranch)) {
                throw Error('Invalid');
            }
            currentBits = bits;
        }
        else {
            if (!(levelI !== 0 && type !== CellType_1.CellType.PrunedBranch)) {
                throw Error('Invalid: ' + levelI + ', ' + type);
            }
            currentBits = new BitString_1.BitString(hashes[hashI - hashIOffset - 1], 0, 256);
        }
        //
        // Depth
        //
        let currentDepth = 0;
        for (let c of refs) {
            let childDepth;
            if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {
                childDepth = c.depth(levelI + 1);
            }
            else {
                childDepth = c.depth(levelI);
            }
            currentDepth = Math.max(currentDepth, childDepth);
        }
        if (refs.length > 0) {
            currentDepth++;
        }
        //
        // Hash
        //
        let repr = (0, descriptor_1.getRepr)(bits, currentBits, refs, levelI, levelMask.apply(levelI).value, type);
        let hash = (0, crypto_1.sha256_sync)(repr);
        //
        // Persist next
        //
        let destI = hashI - hashIOffset;
        depths[destI] = currentDepth;
        hashes[destI] = hash;
        //
        // Next
        //
        hashI++;
    }
    //
    // Calculate hash and depth for all levels
    //
    let resolvedHashes = [];
    let resolvedDepths = [];
    if (pruned) {
        for (let i = 0; i < 4; i++) {
            const { hashIndex } = levelMask.apply(i);
            const { hashIndex: thisHashIndex } = levelMask;
            if (hashIndex !== thisHashIndex) {
                resolvedHashes.push(pruned.pruned[hashIndex].hash);
                resolvedDepths.push(pruned.pruned[hashIndex].depth);
            }
            else {
                resolvedHashes.push(hashes[0]);
                resolvedDepths.push(depths[0]);
            }
        }
    }
    else {
        for (let i = 0; i < 4; i++) {
            resolvedHashes.push(hashes[levelMask.apply(i).hashIndex]);
            resolvedDepths.push(depths[levelMask.apply(i).hashIndex]);
        }
    }
    //
    // Result
    //
    return {
        mask: levelMask,
        hashes: resolvedHashes,
        depths: resolvedDepths
    };
}
exports.wonderCalculator = wonderCalculator;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/utils/paddedBits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/utils/paddedBits.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.paddedBufferToBits = exports.bitsToPaddedBuffer = void 0;
const BitBuilder_1 = __webpack_require__(/*! ../BitBuilder */ "./node_modules/@ton/core/dist/boc/BitBuilder.js");
const BitString_1 = __webpack_require__(/*! ../BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
function bitsToPaddedBuffer(bits) {
    // Create builder
    let builder = new BitBuilder_1.BitBuilder(Math.ceil(bits.length / 8) * 8);
    builder.writeBits(bits);
    // Apply padding
    let padding = Math.ceil(bits.length / 8) * 8 - bits.length;
    for (let i = 0; i < padding; i++) {
        if (i === 0) {
            builder.writeBit(1);
        }
        else {
            builder.writeBit(0);
        }
    }
    return builder.buffer();
}
exports.bitsToPaddedBuffer = bitsToPaddedBuffer;
function paddedBufferToBits(buff) {
    let bitLen = 0;
    // Finding rightmost non-zero byte in the buffer
    for (let i = buff.length - 1; i >= 0; i--) {
        if (buff[i] !== 0) {
            const testByte = buff[i];
            // Looking for a rightmost set padding bit
            let bitPos = testByte & -testByte;
            if ((bitPos & 1) == 0) {
                // It's power of 2 (only one bit set)
                bitPos = Math.log2(bitPos) + 1;
            }
            if (i > 0) {
                // If we are dealing with more than 1 byte buffer
                bitLen = i << 3; //Number of full bytes * 8
            }
            bitLen += 8 - bitPos;
            break;
        }
    }
    return new BitString_1.BitString(buff, 0, bitLen);
}
exports.paddedBufferToBits = paddedBufferToBits;


/***/ }),

/***/ "./node_modules/@ton/core/dist/boc/utils/strings.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/boc/utils/strings.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.writeString = exports.stringToCell = exports.readString = void 0;
const Builder_1 = __webpack_require__(/*! ../Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
function readBuffer(slice) {
    // Check consistency
    if (slice.remainingBits % 8 !== 0) {
        throw new Error(`Invalid string length: ${slice.remainingBits}`);
    }
    if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) {
        throw new Error(`invalid number of refs: ${slice.remainingRefs}`);
    }
    // Read string
    let res;
    if (slice.remainingBits === 0) {
        res = Buffer.alloc(0);
    }
    else {
        res = slice.loadBuffer(slice.remainingBits / 8);
    }
    // Read tail
    if (slice.remainingRefs === 1) {
        res = Buffer.concat([res, readBuffer(slice.loadRef().beginParse())]);
    }
    return res;
}
function readString(slice) {
    return readBuffer(slice).toString();
}
exports.readString = readString;
function writeBuffer(src, builder) {
    if (src.length > 0) {
        let bytes = Math.floor(builder.availableBits / 8);
        if (src.length > bytes) {
            let a = src.subarray(0, bytes);
            let t = src.subarray(bytes);
            builder = builder.storeBuffer(a);
            let bb = (0, Builder_1.beginCell)();
            writeBuffer(t, bb);
            builder = builder.storeRef(bb.endCell());
        }
        else {
            builder = builder.storeBuffer(src);
        }
    }
}
function stringToCell(src) {
    let builder = (0, Builder_1.beginCell)();
    writeBuffer(Buffer.from(src), builder);
    return builder.endCell();
}
exports.stringToCell = stringToCell;
function writeString(src, builder) {
    writeBuffer(Buffer.from(src), builder);
}
exports.writeString = writeString;


/***/ }),

/***/ "./node_modules/@ton/core/dist/contract/ComputeError.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/contract/ComputeError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComputeError = void 0;
class ComputeError extends Error {
    constructor(message, exitCode, opts) {
        super(message);
        this.exitCode = exitCode;
        this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;
        this.logs = opts && opts.logs ? opts.logs : null;
        Object.setPrototypeOf(this, ComputeError.prototype);
    }
}
exports.ComputeError = ComputeError;


/***/ }),

/***/ "./node_modules/@ton/core/dist/contract/openContract.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ton/core/dist/contract/openContract.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.openContract = void 0;
const Address_1 = __webpack_require__(/*! ../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const Cell_1 = __webpack_require__(/*! ../boc/Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
function openContract(src, factory) {
    // Resolve parameters
    let address;
    let init = null;
    if (!Address_1.Address.isAddress(src.address)) {
        throw Error('Invalid address');
    }
    address = src.address;
    if (src.init) {
        if (!(src.init.code instanceof Cell_1.Cell)) {
            throw Error('Invalid init.code');
        }
        if (!(src.init.data instanceof Cell_1.Cell)) {
            throw Error('Invalid init.data');
        }
        init = src.init;
    }
    // Create executor
    let executor = factory({ address, init });
    // Create proxy
    return new Proxy(src, {
        get(target, prop) {
            const value = target[prop];
            if (typeof prop === 'string' && (prop.startsWith('get') || prop.startsWith('send') || prop.startsWith('is'))) {
                if (typeof value === 'function') {
                    return (...args) => value.apply(target, [executor, ...args]);
                }
            }
            return value;
        }
    });
}
exports.openContract = openContract;


/***/ }),

/***/ "./node_modules/@ton/core/dist/crypto/safeSign.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/crypto/safeSign.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeSignVerify = exports.safeSign = void 0;
const crypto_1 = __webpack_require__(/*! @ton/crypto */ "./node_modules/@ton/crypto/dist/index.js");
const MIN_SEED_LENGTH = 8;
const MAX_SEED_LENGTH = 64;
function createSafeSignHash(cell, seed) {
    let seedData = Buffer.from(seed);
    if (seedData.length > MAX_SEED_LENGTH) {
        throw Error('Seed can\t be longer than 64 bytes');
    }
    if (seedData.length < MIN_SEED_LENGTH) {
        throw Error('Seed must be at least 8 bytes');
    }
    return (0, crypto_1.sha256_sync)(Buffer.concat([Buffer.from([0xff, 0xff]), seedData, cell.hash()]));
}
function safeSign(cell, secretKey, seed = 'ton-safe-sign-magic') {
    return (0, crypto_1.sign)(createSafeSignHash(cell, seed), secretKey);
}
exports.safeSign = safeSign;
function safeSignVerify(cell, signature, publicKey, seed = 'ton-safe-sign-magic') {
    return (0, crypto_1.signVerify)(createSafeSignHash(cell, seed), signature, publicKey);
}
exports.safeSignVerify = safeSignVerify;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/Dictionary.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/Dictionary.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dictionary = void 0;
const Address_1 = __webpack_require__(/*! ../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const Cell_1 = __webpack_require__(/*! ../boc/Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
const BitString_1 = __webpack_require__(/*! ../boc/BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
const generateMerkleProof_1 = __webpack_require__(/*! ./generateMerkleProof */ "./node_modules/@ton/core/dist/dict/generateMerkleProof.js");
const generateMerkleUpdate_1 = __webpack_require__(/*! ./generateMerkleUpdate */ "./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js");
const parseDict_1 = __webpack_require__(/*! ./parseDict */ "./node_modules/@ton/core/dist/dict/parseDict.js");
const serializeDict_1 = __webpack_require__(/*! ./serializeDict */ "./node_modules/@ton/core/dist/dict/serializeDict.js");
const internalKeySerializer_1 = __webpack_require__(/*! ./utils/internalKeySerializer */ "./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js");
class Dictionary {
    /**
     * Create an empty map
     * @param key key type
     * @param value value type
     * @returns Dictionary<K, V>
     */
    static empty(key, value) {
        if (key && value) {
            return new Dictionary(new Map(), key, value);
        }
        else {
            return new Dictionary(new Map(), null, null);
        }
    }
    /**
     * Load dictionary from slice
     * @param key key description
     * @param value value description
     * @param src slice
     * @returns Dictionary<K, V>
     */
    static load(key, value, sc) {
        let slice;
        if (sc instanceof Cell_1.Cell) {
            if (sc.isExotic) {
                return Dictionary.empty(key, value);
            }
            slice = sc.beginParse();
        }
        else {
            slice = sc;
        }
        let cell = slice.loadMaybeRef();
        if (cell && !cell.isExotic) {
            return Dictionary.loadDirect(key, value, cell.beginParse());
        }
        else {
            return Dictionary.empty(key, value);
        }
    }
    /**
     * Low level method for rare dictionaries from system contracts.
     * Loads dictionary from slice directly without going to the ref.
     *
     * @param key key description
     * @param value value description
     * @param sc slice
     * @returns Dictionary<K, V>
     */
    static loadDirect(key, value, sc) {
        if (!sc) {
            return Dictionary.empty(key, value);
        }
        let slice;
        if (sc instanceof Cell_1.Cell) {
            slice = sc.beginParse();
        }
        else {
            slice = sc;
        }
        let values = (0, parseDict_1.parseDict)(slice, key.bits, value.parse);
        let prepare = new Map();
        for (let [k, v] of values) {
            prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key.parse(k)), v);
        }
        return new Dictionary(prepare, key, value);
    }
    constructor(values, key, value) {
        this._key = key;
        this._value = value;
        this._map = values;
    }
    get size() {
        return this._map.size;
    }
    get(key) {
        return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key));
    }
    has(key) {
        return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key));
    }
    set(key, value) {
        this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key), value);
        return this;
    }
    delete(key) {
        const k = (0, internalKeySerializer_1.serializeInternalKey)(key);
        return this._map.delete(k);
    }
    clear() {
        this._map.clear();
    }
    *[Symbol.iterator]() {
        for (const [k, v] of this._map) {
            const key = (0, internalKeySerializer_1.deserializeInternalKey)(k);
            yield [key, v];
        }
    }
    keys() {
        return Array.from(this._map.keys()).map((v) => (0, internalKeySerializer_1.deserializeInternalKey)(v));
    }
    values() {
        return Array.from(this._map.values());
    }
    store(builder, key, value) {
        if (this._map.size === 0) {
            builder.storeBit(0);
        }
        else {
            // Resolve serializer
            let resolvedKey = this._key;
            if (key !== null && key !== undefined) {
                resolvedKey = key;
            }
            let resolvedValue = this._value;
            if (value !== null && value !== undefined) {
                resolvedValue = value;
            }
            if (!resolvedKey) {
                throw Error('Key serializer is not defined');
            }
            if (!resolvedValue) {
                throw Error('Value serializer is not defined');
            }
            // Prepare map
            let prepared = new Map();
            for (const [k, v] of this._map) {
                prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
            }
            // Store
            builder.storeBit(1);
            let dd = (0, Builder_1.beginCell)();
            (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd);
            builder.storeRef(dd.endCell());
        }
    }
    storeDirect(builder, key, value) {
        if (this._map.size === 0) {
            throw Error('Cannot store empty dictionary directly');
        }
        // Resolve serializer
        let resolvedKey = this._key;
        if (key !== null && key !== undefined) {
            resolvedKey = key;
        }
        let resolvedValue = this._value;
        if (value !== null && value !== undefined) {
            resolvedValue = value;
        }
        if (!resolvedKey) {
            throw Error('Key serializer is not defined');
        }
        if (!resolvedValue) {
            throw Error('Value serializer is not defined');
        }
        // Prepare map
        let prepared = new Map();
        for (const [k, v] of this._map) {
            prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
        }
        // Store
        (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder);
    }
    /**
     * Generate merkle proof for multiple keys in the dictionary
     * @param keys an array of the keys
     * @returns generated merkle proof cell
     */
    generateMerkleProof(keys) {
        return (0, generateMerkleProof_1.generateMerkleProof)(this, keys, this._key);
    }
    /**
     * Low level method for generating pruned dictionary directly.
     * The result can be used as a part of a bigger merkle proof
     * @param keys an array of the keys
     * @returns cell that contains the pruned dictionary
     */
    generateMerkleProofDirect(keys) {
        return (0, generateMerkleProof_1.generateMerkleProofDirect)(this, keys, this._key);
    }
    generateMerkleUpdate(key, newValue) {
        return (0, generateMerkleUpdate_1.generateMerkleUpdate)(this, key, this._key, newValue);
    }
}
exports.Dictionary = Dictionary;
Dictionary.Keys = {
    /**
     * Standard address key
     * @returns DictionaryKey<Address>
     */
    Address: () => {
        return createAddressKey();
    },
    /**
     * Create standard big integer key
     * @param bits number of bits
     * @returns DictionaryKey<bigint>
     */
    BigInt: (bits) => {
        return createBigIntKey(bits);
    },
    /**
     * Create integer key
     * @param bits bits of integer
     * @returns DictionaryKey<number>
     */
    Int: (bits) => {
        return createIntKey(bits);
    },
    /**
     * Create standard unsigned big integer key
     * @param bits number of bits
     * @returns DictionaryKey<bigint>
     */
    BigUint: (bits) => {
        return createBigUintKey(bits);
    },
    /**
     * Create standard unsigned integer key
     * @param bits number of bits
     * @returns DictionaryKey<number>
     */
    Uint: (bits) => {
        return createUintKey(bits);
    },
    /**
     * Create standard buffer key
     * @param bytes number of bytes of a buffer
     * @returns DictionaryKey<Buffer>
     */
    Buffer: (bytes) => {
        return createBufferKey(bytes);
    },
    /**
     * Create BitString key
     * @param bits key length
     * @returns DictionaryKey<BitString>
     * Point is that Buffer has to be 8 bit aligned,
     * while key is TVM dictionary doesn't have to be
     * aligned at all.
     */
    BitString: (bits) => {
        return createBitStringKey(bits);
    }
};
Dictionary.Values = {
    /**
     * Create standard integer value
     * @returns DictionaryValue<bigint>
     */
    BigInt: (bits) => {
        return createBigIntValue(bits);
    },
    /**
     * Create standard integer value
     * @returns DictionaryValue<number>
     */
    Int: (bits) => {
        return createIntValue(bits);
    },
    /**
     * Create big var int
     * @param bits nubmer of header bits
     * @returns DictionaryValue<bigint>
     */
    BigVarInt: (bits) => {
        return createBigVarIntValue(bits);
    },
    /**
     * Create standard unsigned integer value
     * @param bits number of bits
     * @returns DictionaryValue<bigint>
     */
    BigUint: (bits) => {
        return createBigUintValue(bits);
    },
    /**
     * Create standard unsigned integer value
     * @param bits number of bits
     * @returns DictionaryValue<bigint>
     */
    Uint: (bits) => {
        return createUintValue(bits);
    },
    /**
     * Create big var int
     * @param bits nubmer of header bits
     * @returns DictionaryValue<bigint>
     */
    BigVarUint: (bits) => {
        return createBigVarUintValue(bits);
    },
    /**
     * Create standard boolean value
     * @returns DictionaryValue<boolean>
     */
    Bool: () => {
        return createBooleanValue();
    },
    /**
     * Create standard address value
     * @returns DictionaryValue<Address>
     */
    Address: () => {
        return createAddressValue();
    },
    /**
     * Create standard cell value
     * @returns DictionaryValue<Cell>
     */
    Cell: () => {
        return createCellValue();
    },
    /**
     * Create Builder value
     * @param bytes number of bytes of a buffer
     * @returns DictionaryValue<Builder>
     */
    Buffer: (bytes) => {
        return createBufferValue(bytes);
    },
    /**
     * Create BitString value
     * @param requested bit length
     * @returns DictionaryValue<BitString>
     * Point is that Buffer is not applicable
     * when length is not 8 bit alligned.
     */
    BitString: (bits) => {
        return createBitStringValue(bits);
    },
    /**
     * Create dictionary value
     * @param key
     * @param value
     */
    Dictionary: (key, value) => {
        return createDictionaryValue(key, value);
    }
};
//
// Keys and Values
//
function createAddressKey() {
    return {
        bits: 267,
        serialize: (src) => {
            if (!Address_1.Address.isAddress(src)) {
                throw Error('Key is not an address');
            }
            return (0, Builder_1.beginCell)().storeAddress(src).endCell().beginParse().preloadUintBig(267);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, 267).endCell().beginParse().loadAddress();
        }
    };
}
function createBigIntKey(bits) {
    return {
        bits,
        serialize: (src) => {
            if (typeof src !== 'bigint') {
                throw Error('Key is not a bigint');
            }
            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadIntBig(bits);
        }
    };
}
function createIntKey(bits) {
    return {
        bits: bits,
        serialize: (src) => {
            if (typeof src !== 'number') {
                throw Error('Key is not a number');
            }
            if (!Number.isSafeInteger(src)) {
                throw Error('Key is not a safe integer: ' + src);
            }
            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadInt(bits);
        }
    };
}
function createBigUintKey(bits) {
    return {
        bits,
        serialize: (src) => {
            if (typeof src !== 'bigint') {
                throw Error('Key is not a bigint');
            }
            if (src < 0) {
                throw Error('Key is negative: ' + src);
            }
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
        }
    };
}
function createUintKey(bits) {
    return {
        bits,
        serialize: (src) => {
            if (typeof src !== 'number') {
                throw Error('Key is not a number');
            }
            if (!Number.isSafeInteger(src)) {
                throw Error('Key is not a safe integer: ' + src);
            }
            if (src < 0) {
                throw Error('Key is negative: ' + src);
            }
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
        },
        parse: (src) => {
            return Number((0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUint(bits));
        }
    };
}
function createBufferKey(bytes) {
    return {
        bits: bytes * 8,
        serialize: (src) => {
            if (!Buffer.isBuffer(src)) {
                throw Error('Key is not a buffer');
            }
            return (0, Builder_1.beginCell)().storeBuffer(src).endCell().beginParse().loadUintBig(bytes * 8);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, bytes * 8).endCell().beginParse().loadBuffer(bytes);
        }
    };
}
function createBitStringKey(bits) {
    return {
        bits,
        serialize: (src) => {
            if (!BitString_1.BitString.isBitString(src))
                throw Error('Key is not a BitString');
            return (0, Builder_1.beginCell)().storeBits(src).endCell().beginParse().loadUintBig(bits);
        },
        parse: (src) => {
            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadBits(bits);
        }
    };
}
function createIntValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeInt(src, bits);
        },
        parse: (src) => {
            let value = src.loadInt(bits);
            src.endParse();
            return value;
        }
    };
}
function createBigIntValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeInt(src, bits);
        },
        parse: (src) => {
            let value = src.loadIntBig(bits);
            src.endParse();
            return value;
        }
    };
}
function createBigVarIntValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeVarInt(src, bits);
        },
        parse: (src) => {
            let value = src.loadVarIntBig(bits);
            src.endParse();
            return value;
        }
    };
}
function createBigVarUintValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeVarUint(src, bits);
        },
        parse: (src) => {
            let value = src.loadVarUintBig(bits);
            src.endParse();
            return value;
        }
    };
}
function createUintValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeUint(src, bits);
        },
        parse: (src) => {
            let value = src.loadUint(bits);
            src.endParse();
            return value;
        }
    };
}
function createBigUintValue(bits) {
    return {
        serialize: (src, buidler) => {
            buidler.storeUint(src, bits);
        },
        parse: (src) => {
            let value = src.loadUintBig(bits);
            src.endParse();
            return value;
        }
    };
}
function createBooleanValue() {
    return {
        serialize: (src, buidler) => {
            buidler.storeBit(src);
        },
        parse: (src) => {
            let value = src.loadBit();
            src.endParse();
            return value;
        }
    };
}
function createAddressValue() {
    return {
        serialize: (src, buidler) => {
            buidler.storeAddress(src);
        },
        parse: (src) => {
            let addr = src.loadAddress();
            src.endParse();
            return addr;
        }
    };
}
function createCellValue() {
    return {
        serialize: (src, buidler) => {
            buidler.storeRef(src);
        },
        parse: (src) => {
            let value = src.loadRef();
            src.endParse();
            return value;
        }
    };
}
function createDictionaryValue(key, value) {
    return {
        serialize: (src, buidler) => {
            src.store(buidler);
        },
        parse: (src) => {
            let dict = Dictionary.load(key, value, src);
            src.endParse();
            return dict;
        }
    };
}
function createBufferValue(size) {
    return {
        serialize: (src, buidler) => {
            if (src.length !== size) {
                throw Error('Invalid buffer size');
            }
            buidler.storeBuffer(src);
        },
        parse: (src) => {
            let value = src.loadBuffer(size);
            src.endParse();
            return value;
        }
    };
}
function createBitStringValue(bits) {
    return {
        serialize: (src, builder) => {
            if (src.length !== bits) {
                throw Error('Invalid BitString size');
            }
            builder.storeBits(src);
        },
        parse: (src) => {
            let value = src.loadBits(bits);
            src.endParse();
            return value;
        }
    };
}


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/generateMerkleProof.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/generateMerkleProof.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateMerkleProof = exports.generateMerkleProofDirect = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const readUnaryLength_1 = __webpack_require__(/*! ./utils/readUnaryLength */ "./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js");
const exoticMerkleProof_1 = __webpack_require__(/*! ../boc/cell/exoticMerkleProof */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js");
function convertToPrunedBranch(c) {
    return (0, Builder_1.beginCell)()
        .storeUint(1, 8)
        .storeUint(1, 8)
        .storeBuffer(c.hash(0))
        .storeUint(c.depth(0), 16)
        .endCell({ exotic: true });
}
function doGenerateMerkleProof(prefix, slice, n, keys) {
    // Reading label
    const originalCell = slice.asCell();
    if (keys.length == 0) {
        // no keys to prove, prune the whole subdict
        return convertToPrunedBranch(originalCell);
    }
    let lb0 = slice.loadBit() ? 1 : 0;
    let prefixLength = 0;
    let pp = prefix;
    if (lb0 === 0) {
        // Short label detected
        // Read
        prefixLength = (0, readUnaryLength_1.readUnaryLength)(slice);
        // Read prefix
        for (let i = 0; i < prefixLength; i++) {
            pp += slice.loadBit() ? '1' : '0';
        }
    }
    else {
        let lb1 = slice.loadBit() ? 1 : 0;
        if (lb1 === 0) {
            // Long label detected
            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
            for (let i = 0; i < prefixLength; i++) {
                pp += slice.loadBit() ? '1' : '0';
            }
        }
        else {
            // Same label detected
            let bit = slice.loadBit() ? '1' : '0';
            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
            for (let i = 0; i < prefixLength; i++) {
                pp += bit;
            }
        }
    }
    if (n - prefixLength === 0) {
        return originalCell;
    }
    else {
        let sl = originalCell.beginParse();
        let left = sl.loadRef();
        let right = sl.loadRef();
        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'
        if (!left.isExotic) {
            const leftKeys = keys.filter((key) => {
                return pp + '0' === key.slice(0, pp.length + 1);
            });
            left = doGenerateMerkleProof(pp + '0', left.beginParse(), n - prefixLength - 1, leftKeys);
        }
        if (!right.isExotic) {
            const rightKeys = keys.filter((key) => {
                return pp + '1' === key.slice(0, pp.length + 1);
            });
            right = doGenerateMerkleProof(pp + '1', right.beginParse(), n - prefixLength - 1, rightKeys);
        }
        return (0, Builder_1.beginCell)()
            .storeSlice(sl)
            .storeRef(left)
            .storeRef(right)
            .endCell();
    }
}
function generateMerkleProofDirect(dict, keys, keyObject) {
    keys.forEach((key) => {
        if (!dict.has(key)) {
            throw new Error(`Trying to generate merkle proof for a missing key "${key}"`);
        }
    });
    const s = (0, Builder_1.beginCell)().storeDictDirect(dict).asSlice();
    return doGenerateMerkleProof('', s, keyObject.bits, keys.map((key) => keyObject.serialize(key).toString(2).padStart(keyObject.bits, '0')));
}
exports.generateMerkleProofDirect = generateMerkleProofDirect;
function generateMerkleProof(dict, keys, keyObject) {
    return (0, exoticMerkleProof_1.convertToMerkleProof)(generateMerkleProofDirect(dict, keys, keyObject));
}
exports.generateMerkleProof = generateMerkleProof;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateMerkleUpdate = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const generateMerkleProof_1 = __webpack_require__(/*! ./generateMerkleProof */ "./node_modules/@ton/core/dist/dict/generateMerkleProof.js");
function convertToMerkleUpdate(c1, c2) {
    return (0, Builder_1.beginCell)()
        .storeUint(4, 8)
        .storeBuffer(c1.hash(0))
        .storeBuffer(c2.hash(0))
        .storeUint(c1.depth(0), 16)
        .storeUint(c2.depth(0), 16)
        .storeRef(c1)
        .storeRef(c2)
        .endCell({ exotic: true });
}
function generateMerkleUpdate(dict, key, keyObject, newValue) {
    const oldProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, [key], keyObject).refs[0];
    dict.set(key, newValue);
    const newProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, [key], keyObject).refs[0];
    return convertToMerkleUpdate(oldProof, newProof);
}
exports.generateMerkleUpdate = generateMerkleUpdate;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/parseDict.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/parseDict.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseDict = void 0;
function readUnaryLength(slice) {
    let res = 0;
    while (slice.loadBit()) {
        res++;
    }
    return res;
}
function doParse(prefix, slice, n, res, extractor) {
    // Reading label
    let lb0 = slice.loadBit() ? 1 : 0;
    let prefixLength = 0;
    let pp = prefix;
    if (lb0 === 0) {
        // Short label detected
        // Read 
        prefixLength = readUnaryLength(slice);
        // Read prefix
        for (let i = 0; i < prefixLength; i++) {
            pp += slice.loadBit() ? '1' : '0';
        }
    }
    else {
        let lb1 = slice.loadBit() ? 1 : 0;
        if (lb1 === 0) {
            // Long label detected
            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
            for (let i = 0; i < prefixLength; i++) {
                pp += slice.loadBit() ? '1' : '0';
            }
        }
        else {
            // Same label detected
            let bit = slice.loadBit() ? '1' : '0';
            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));
            for (let i = 0; i < prefixLength; i++) {
                pp += bit;
            }
        }
    }
    if (n - prefixLength === 0) {
        res.set(BigInt('0b' + pp), extractor(slice));
    }
    else {
        let left = slice.loadRef();
        let right = slice.loadRef();
        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'
        if (!left.isExotic) {
            doParse(pp + '0', left.beginParse(), n - prefixLength - 1, res, extractor);
        }
        if (!right.isExotic) {
            doParse(pp + '1', right.beginParse(), n - prefixLength - 1, res, extractor);
        }
    }
}
function parseDict(sc, keySize, extractor) {
    let res = new Map();
    if (sc) {
        doParse('', sc, keySize, res, extractor);
    }
    return res;
}
exports.parseDict = parseDict;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/serializeDict.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/serializeDict.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.serializeDict = exports.detectLabelType = exports.writeLabelSame = exports.writeLabelLong = exports.writeLabelShort = exports.buildTree = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const findCommonPrefix_1 = __webpack_require__(/*! ./utils/findCommonPrefix */ "./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js");
//
// Tree Build
//
function pad(src, size) {
    while (src.length < size) {
        src = '0' + src;
    }
    return src;
}
function removePrefixMap(src, length) {
    if (length === 0) {
        return src;
    }
    else {
        let res = new Map();
        for (let k of src.keys()) {
            let d = src.get(k);
            res.set(k.slice(length), d);
        }
        return res;
    }
}
function forkMap(src, prefixLen) {
    if (src.size === 0) {
        throw Error('Internal inconsistency');
    }
    let left = new Map();
    let right = new Map();
    for (let [k, d] of src.entries()) {
        if (k[prefixLen] === '0') {
            left.set(k, d);
        }
        else {
            right.set(k, d);
        }
    }
    if (left.size === 0) {
        throw Error('Internal inconsistency. Left emtpy.');
    }
    if (right.size === 0) {
        throw Error('Internal inconsistency. Right emtpy.');
    }
    return { left, right };
}
function buildNode(src, prefixLen) {
    if (src.size === 0) {
        throw Error('Internal inconsistency');
    }
    if (src.size === 1) {
        return { type: 'leaf', value: Array.from(src.values())[0] };
    }
    let { left, right } = forkMap(src, prefixLen);
    return {
        type: 'fork',
        left: buildEdge(left, prefixLen + 1),
        right: buildEdge(right, prefixLen + 1)
    };
}
function buildEdge(src, prefixLen = 0) {
    if (src.size === 0) {
        throw Error('Internal inconsistency');
    }
    const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src.keys()), prefixLen);
    return { label, node: buildNode(src, label.length + prefixLen) };
}
function buildTree(src, keyLength) {
    // Convert map keys
    let converted = new Map();
    for (let k of Array.from(src.keys())) {
        const padded = pad(k.toString(2), keyLength);
        converted.set(padded, src.get(k));
    }
    // Calculate root label
    return buildEdge(converted);
}
exports.buildTree = buildTree;
//
// Serialization
//
function writeLabelShort(src, to) {
    // Header
    to.storeBit(0);
    // Unary length
    for (let i = 0; i < src.length; i++) {
        to.storeBit(1);
    }
    to.storeBit(0);
    // Value
    if (src.length > 0) {
        to.storeUint(BigInt('0b' + src), src.length);
    }
    return to;
}
exports.writeLabelShort = writeLabelShort;
function labelShortLength(src) {
    return 1 + src.length + 1 + src.length;
}
function writeLabelLong(src, keyLength, to) {
    // Header
    to.storeBit(1);
    to.storeBit(0);
    // Length
    let length = Math.ceil(Math.log2(keyLength + 1));
    to.storeUint(src.length, length);
    // Value
    if (src.length > 0) {
        to.storeUint(BigInt('0b' + src), src.length);
    }
    return to;
}
exports.writeLabelLong = writeLabelLong;
function labelLongLength(src, keyLength) {
    return 1 + 1 + Math.ceil(Math.log2(keyLength + 1)) + src.length;
}
function writeLabelSame(value, length, keyLength, to) {
    // Header
    to.storeBit(1);
    to.storeBit(1);
    // Value
    to.storeBit(value);
    // Length
    let lenLen = Math.ceil(Math.log2(keyLength + 1));
    to.storeUint(length, lenLen);
}
exports.writeLabelSame = writeLabelSame;
function labelSameLength(keyLength) {
    return 1 + 1 + 1 + Math.ceil(Math.log2(keyLength + 1));
}
function isSame(src) {
    if (src.length === 0 || src.length === 1) {
        return true;
    }
    for (let i = 1; i < src.length; i++) {
        if (src[i] !== src[0]) {
            return false;
        }
    }
    return true;
}
function detectLabelType(src, keyLength) {
    let kind = 'short';
    let kindLength = labelShortLength(src);
    let longLength = labelLongLength(src, keyLength);
    if (longLength < kindLength) {
        kindLength = longLength;
        kind = 'long';
    }
    if (isSame(src)) {
        let sameLength = labelSameLength(keyLength);
        if (sameLength < kindLength) {
            kindLength = sameLength;
            kind = 'same';
        }
    }
    return kind;
}
exports.detectLabelType = detectLabelType;
function writeLabel(src, keyLength, to) {
    let type = detectLabelType(src, keyLength);
    if (type === 'short') {
        writeLabelShort(src, to);
    }
    else if (type === 'long') {
        writeLabelLong(src, keyLength, to);
    }
    else if (type === 'same') {
        writeLabelSame(src[0] === '1', src.length, keyLength, to);
    }
}
function writeNode(src, keyLength, serializer, to) {
    if (src.type === 'leaf') {
        serializer(src.value, to);
    }
    if (src.type === 'fork') {
        const leftCell = (0, Builder_1.beginCell)();
        const rightCell = (0, Builder_1.beginCell)();
        writeEdge(src.left, keyLength - 1, serializer, leftCell);
        writeEdge(src.right, keyLength - 1, serializer, rightCell);
        to.storeRef(leftCell);
        to.storeRef(rightCell);
    }
}
function writeEdge(src, keyLength, serializer, to) {
    writeLabel(src.label, keyLength, to);
    writeNode(src.node, keyLength - src.label.length, serializer, to);
}
function serializeDict(src, keyLength, serializer, to) {
    const tree = buildTree(src, keyLength);
    writeEdge(tree, keyLength, serializer, to);
}
exports.serializeDict = serializeDict;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findCommonPrefix = void 0;
function findCommonPrefix(src, startPos = 0) {
    // Corner cases
    if (src.length === 0) {
        return '';
    }
    let r = src[0].slice(startPos);
    for (let i = 1; i < src.length; i++) {
        const s = src[i];
        while (s.indexOf(r, startPos) !== startPos) {
            r = r.substring(0, r.length - 1);
            if (r === '') {
                return r;
            }
        }
    }
    return r;
}
exports.findCommonPrefix = findCommonPrefix;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deserializeInternalKey = exports.serializeInternalKey = void 0;
const Address_1 = __webpack_require__(/*! ../../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const BitString_1 = __webpack_require__(/*! ../../boc/BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
const paddedBits_1 = __webpack_require__(/*! ../../boc/utils/paddedBits */ "./node_modules/@ton/core/dist/boc/utils/paddedBits.js");
function serializeInternalKey(value) {
    if (typeof value === 'number') {
        if (!Number.isSafeInteger(value)) {
            throw Error('Invalid key type: not a safe integer: ' + value);
        }
        return 'n:' + value.toString(10);
    }
    else if (typeof value === 'bigint') {
        return 'b:' + value.toString(10);
    }
    else if (Address_1.Address.isAddress(value)) {
        return 'a:' + value.toString();
    }
    else if (Buffer.isBuffer(value)) {
        return 'f:' + value.toString('hex');
    }
    else if (BitString_1.BitString.isBitString(value)) {
        return 'B:' + value.toString();
    }
    else {
        throw Error('Invalid key type');
    }
}
exports.serializeInternalKey = serializeInternalKey;
function deserializeInternalKey(value) {
    let k = value.slice(0, 2);
    let v = value.slice(2);
    if (k === 'n:') {
        return parseInt(v, 10);
    }
    else if (k === 'b:') {
        return BigInt(v);
    }
    else if (k === 'a:') {
        return Address_1.Address.parse(v);
    }
    else if (k === 'f:') {
        return Buffer.from(v, 'hex');
    }
    else if (k === 'B:') {
        const lastDash = v.slice(-1) == "_";
        const isPadded = lastDash || v.length % 2 != 0;
        if (isPadded) {
            let charLen = lastDash ? v.length - 1 : v.length;
            const padded = v.substr(0, charLen) + "0"; //Padding
            if ((!lastDash) && ((charLen & 1) !== 0)) {
                // Four bit nibmle without padding
                return new BitString_1.BitString(Buffer.from(padded, 'hex'), 0, charLen << 2);
            }
            else {
                return (0, paddedBits_1.paddedBufferToBits)(Buffer.from(padded, 'hex'));
            }
        }
        else {
            return new BitString_1.BitString(Buffer.from(v, 'hex'), 0, v.length << 2);
        }
    }
    throw Error('Invalid key type: ' + k);
}
exports.deserializeInternalKey = deserializeInternalKey;


/***/ }),

/***/ "./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/dict/utils/readUnaryLength.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readUnaryLength = void 0;
function readUnaryLength(slice) {
    let res = 0;
    while (slice.loadBit()) {
        res++;
    }
    return res;
}
exports.readUnaryLength = readUnaryLength;


/***/ }),

/***/ "./node_modules/@ton/core/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@ton/core/dist/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeSignVerify = exports.safeSign = exports.getMethodId = exports.base32Encode = exports.base32Decode = exports.crc32c = exports.crc16 = exports.fromNano = exports.toNano = exports.ComputeError = exports.openContract = exports.TupleBuilder = exports.TupleReader = exports.serializeTuple = exports.parseTuple = exports.generateMerkleUpdate = exports.generateMerkleProofDirect = exports.generateMerkleProof = exports.exoticPruned = exports.exoticMerkleUpdate = exports.convertToMerkleProof = exports.exoticMerkleProof = exports.Dictionary = exports.Cell = exports.CellType = exports.Slice = exports.beginCell = exports.Builder = exports.BitBuilder = exports.BitReader = exports.BitString = exports.contractAddress = exports.ADNLAddress = exports.ExternalAddress = exports.address = exports.Address = void 0;
// Address
var Address_1 = __webpack_require__(/*! ./address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
Object.defineProperty(exports, "Address", ({ enumerable: true, get: function () { return Address_1.Address; } }));
Object.defineProperty(exports, "address", ({ enumerable: true, get: function () { return Address_1.address; } }));
var ExternalAddress_1 = __webpack_require__(/*! ./address/ExternalAddress */ "./node_modules/@ton/core/dist/address/ExternalAddress.js");
Object.defineProperty(exports, "ExternalAddress", ({ enumerable: true, get: function () { return ExternalAddress_1.ExternalAddress; } }));
var ADNLAddress_1 = __webpack_require__(/*! ./address/ADNLAddress */ "./node_modules/@ton/core/dist/address/ADNLAddress.js");
Object.defineProperty(exports, "ADNLAddress", ({ enumerable: true, get: function () { return ADNLAddress_1.ADNLAddress; } }));
var contractAddress_1 = __webpack_require__(/*! ./address/contractAddress */ "./node_modules/@ton/core/dist/address/contractAddress.js");
Object.defineProperty(exports, "contractAddress", ({ enumerable: true, get: function () { return contractAddress_1.contractAddress; } }));
// BitString
var BitString_1 = __webpack_require__(/*! ./boc/BitString */ "./node_modules/@ton/core/dist/boc/BitString.js");
Object.defineProperty(exports, "BitString", ({ enumerable: true, get: function () { return BitString_1.BitString; } }));
var BitReader_1 = __webpack_require__(/*! ./boc/BitReader */ "./node_modules/@ton/core/dist/boc/BitReader.js");
Object.defineProperty(exports, "BitReader", ({ enumerable: true, get: function () { return BitReader_1.BitReader; } }));
var BitBuilder_1 = __webpack_require__(/*! ./boc/BitBuilder */ "./node_modules/@ton/core/dist/boc/BitBuilder.js");
Object.defineProperty(exports, "BitBuilder", ({ enumerable: true, get: function () { return BitBuilder_1.BitBuilder; } }));
// Cell
var Builder_1 = __webpack_require__(/*! ./boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
Object.defineProperty(exports, "Builder", ({ enumerable: true, get: function () { return Builder_1.Builder; } }));
Object.defineProperty(exports, "beginCell", ({ enumerable: true, get: function () { return Builder_1.beginCell; } }));
var Slice_1 = __webpack_require__(/*! ./boc/Slice */ "./node_modules/@ton/core/dist/boc/Slice.js");
Object.defineProperty(exports, "Slice", ({ enumerable: true, get: function () { return Slice_1.Slice; } }));
var CellType_1 = __webpack_require__(/*! ./boc/CellType */ "./node_modules/@ton/core/dist/boc/CellType.js");
Object.defineProperty(exports, "CellType", ({ enumerable: true, get: function () { return CellType_1.CellType; } }));
var Cell_1 = __webpack_require__(/*! ./boc/Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
Object.defineProperty(exports, "Cell", ({ enumerable: true, get: function () { return Cell_1.Cell; } }));
// Dict
var Dictionary_1 = __webpack_require__(/*! ./dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
Object.defineProperty(exports, "Dictionary", ({ enumerable: true, get: function () { return Dictionary_1.Dictionary; } }));
// Exotics
var exoticMerkleProof_1 = __webpack_require__(/*! ./boc/cell/exoticMerkleProof */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js");
Object.defineProperty(exports, "exoticMerkleProof", ({ enumerable: true, get: function () { return exoticMerkleProof_1.exoticMerkleProof; } }));
Object.defineProperty(exports, "convertToMerkleProof", ({ enumerable: true, get: function () { return exoticMerkleProof_1.convertToMerkleProof; } }));
var exoticMerkleUpdate_1 = __webpack_require__(/*! ./boc/cell/exoticMerkleUpdate */ "./node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js");
Object.defineProperty(exports, "exoticMerkleUpdate", ({ enumerable: true, get: function () { return exoticMerkleUpdate_1.exoticMerkleUpdate; } }));
var exoticPruned_1 = __webpack_require__(/*! ./boc/cell/exoticPruned */ "./node_modules/@ton/core/dist/boc/cell/exoticPruned.js");
Object.defineProperty(exports, "exoticPruned", ({ enumerable: true, get: function () { return exoticPruned_1.exoticPruned; } }));
// Merkle trees
var generateMerkleProof_1 = __webpack_require__(/*! ./dict/generateMerkleProof */ "./node_modules/@ton/core/dist/dict/generateMerkleProof.js");
Object.defineProperty(exports, "generateMerkleProof", ({ enumerable: true, get: function () { return generateMerkleProof_1.generateMerkleProof; } }));
Object.defineProperty(exports, "generateMerkleProofDirect", ({ enumerable: true, get: function () { return generateMerkleProof_1.generateMerkleProofDirect; } }));
var generateMerkleUpdate_1 = __webpack_require__(/*! ./dict/generateMerkleUpdate */ "./node_modules/@ton/core/dist/dict/generateMerkleUpdate.js");
Object.defineProperty(exports, "generateMerkleUpdate", ({ enumerable: true, get: function () { return generateMerkleUpdate_1.generateMerkleUpdate; } }));
var tuple_1 = __webpack_require__(/*! ./tuple/tuple */ "./node_modules/@ton/core/dist/tuple/tuple.js");
Object.defineProperty(exports, "parseTuple", ({ enumerable: true, get: function () { return tuple_1.parseTuple; } }));
Object.defineProperty(exports, "serializeTuple", ({ enumerable: true, get: function () { return tuple_1.serializeTuple; } }));
var reader_1 = __webpack_require__(/*! ./tuple/reader */ "./node_modules/@ton/core/dist/tuple/reader.js");
Object.defineProperty(exports, "TupleReader", ({ enumerable: true, get: function () { return reader_1.TupleReader; } }));
var builder_1 = __webpack_require__(/*! ./tuple/builder */ "./node_modules/@ton/core/dist/tuple/builder.js");
Object.defineProperty(exports, "TupleBuilder", ({ enumerable: true, get: function () { return builder_1.TupleBuilder; } }));
// Types
__exportStar(__webpack_require__(/*! ./types/_export */ "./node_modules/@ton/core/dist/types/_export.js"), exports);
var openContract_1 = __webpack_require__(/*! ./contract/openContract */ "./node_modules/@ton/core/dist/contract/openContract.js");
Object.defineProperty(exports, "openContract", ({ enumerable: true, get: function () { return openContract_1.openContract; } }));
var ComputeError_1 = __webpack_require__(/*! ./contract/ComputeError */ "./node_modules/@ton/core/dist/contract/ComputeError.js");
Object.defineProperty(exports, "ComputeError", ({ enumerable: true, get: function () { return ComputeError_1.ComputeError; } }));
// Utility
var convert_1 = __webpack_require__(/*! ./utils/convert */ "./node_modules/@ton/core/dist/utils/convert.js");
Object.defineProperty(exports, "toNano", ({ enumerable: true, get: function () { return convert_1.toNano; } }));
Object.defineProperty(exports, "fromNano", ({ enumerable: true, get: function () { return convert_1.fromNano; } }));
var crc16_1 = __webpack_require__(/*! ./utils/crc16 */ "./node_modules/@ton/core/dist/utils/crc16.js");
Object.defineProperty(exports, "crc16", ({ enumerable: true, get: function () { return crc16_1.crc16; } }));
var crc32c_1 = __webpack_require__(/*! ./utils/crc32c */ "./node_modules/@ton/core/dist/utils/crc32c.js");
Object.defineProperty(exports, "crc32c", ({ enumerable: true, get: function () { return crc32c_1.crc32c; } }));
var base32_1 = __webpack_require__(/*! ./utils/base32 */ "./node_modules/@ton/core/dist/utils/base32.js");
Object.defineProperty(exports, "base32Decode", ({ enumerable: true, get: function () { return base32_1.base32Decode; } }));
Object.defineProperty(exports, "base32Encode", ({ enumerable: true, get: function () { return base32_1.base32Encode; } }));
var getMethodId_1 = __webpack_require__(/*! ./utils/getMethodId */ "./node_modules/@ton/core/dist/utils/getMethodId.js");
Object.defineProperty(exports, "getMethodId", ({ enumerable: true, get: function () { return getMethodId_1.getMethodId; } }));
// Crypto
var safeSign_1 = __webpack_require__(/*! ./crypto/safeSign */ "./node_modules/@ton/core/dist/crypto/safeSign.js");
Object.defineProperty(exports, "safeSign", ({ enumerable: true, get: function () { return safeSign_1.safeSign; } }));
Object.defineProperty(exports, "safeSignVerify", ({ enumerable: true, get: function () { return safeSign_1.safeSignVerify; } }));


/***/ }),

/***/ "./node_modules/@ton/core/dist/tuple/builder.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/builder.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TupleBuilder = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const Cell_1 = __webpack_require__(/*! ../boc/Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
const Slice_1 = __webpack_require__(/*! ../boc/Slice */ "./node_modules/@ton/core/dist/boc/Slice.js");
class TupleBuilder {
    constructor() {
        this._tuple = [];
    }
    writeNumber(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'int', value: BigInt(v) });
        }
    }
    writeBoolean(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'int', value: v ? -1n : 0n });
        }
    }
    writeBuffer(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeBuffer(v).endCell() });
        }
    }
    writeString(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeStringTail(v).endCell() });
        }
    }
    writeCell(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            if (v instanceof Cell_1.Cell) {
                this._tuple.push({ type: 'cell', cell: v });
            }
            else if (v instanceof Slice_1.Slice) {
                this._tuple.push({ type: 'cell', cell: v.asCell() });
            }
        }
    }
    writeSlice(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            if (v instanceof Cell_1.Cell) {
                this._tuple.push({ type: 'slice', cell: v });
            }
            else if (v instanceof Slice_1.Slice) {
                this._tuple.push({ type: 'slice', cell: v.asCell() });
            }
        }
    }
    writeBuilder(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            if (v instanceof Cell_1.Cell) {
                this._tuple.push({ type: 'builder', cell: v });
            }
            else if (v instanceof Slice_1.Slice) {
                this._tuple.push({ type: 'builder', cell: v.asCell() });
            }
        }
    }
    writeTuple(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'tuple', items: v });
        }
    }
    writeAddress(v) {
        if (v === null || v === undefined) {
            this._tuple.push({ type: 'null' });
        }
        else {
            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeAddress(v).endCell() });
        }
    }
    build() {
        return [...this._tuple];
    }
}
exports.TupleBuilder = TupleBuilder;


/***/ }),

/***/ "./node_modules/@ton/core/dist/tuple/reader.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/reader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TupleReader = void 0;
class TupleReader {
    constructor(items) {
        this.items = [...items];
    }
    get remaining() {
        return this.items.length;
    }
    peek() {
        if (this.items.length === 0) {
            throw Error('EOF');
        }
        return this.items[0];
    }
    pop() {
        if (this.items.length === 0) {
            throw Error('EOF');
        }
        let res = this.items[0];
        this.items.splice(0, 1);
        return res;
    }
    skip(num = 1) {
        for (let i = 0; i < num; i++) {
            this.pop();
        }
        return this;
    }
    readBigNumber() {
        let popped = this.pop();
        if (popped.type !== 'int') {
            throw Error('Not a number');
        }
        return popped.value;
    }
    readBigNumberOpt() {
        let popped = this.pop();
        if (popped.type === 'null') {
            return null;
        }
        if (popped.type !== 'int') {
            throw Error('Not a number');
        }
        return popped.value;
    }
    readNumber() {
        return Number(this.readBigNumber());
    }
    readNumberOpt() {
        let r = this.readBigNumberOpt();
        if (r !== null) {
            return Number(r);
        }
        else {
            return null;
        }
    }
    readBoolean() {
        let res = this.readNumber();
        return res === 0 ? false : true;
    }
    readBooleanOpt() {
        let res = this.readNumberOpt();
        if (res !== null) {
            return res === 0 ? false : true;
        }
        else {
            return null;
        }
    }
    readAddress() {
        let r = this.readCell().beginParse().loadAddress();
        if (r !== null) {
            return r;
        }
        else {
            throw Error('Not an address');
        }
    }
    readAddressOpt() {
        let r = this.readCellOpt();
        if (r !== null) {
            return r.beginParse().loadMaybeAddress();
        }
        else {
            return null;
        }
    }
    readCell() {
        let popped = this.pop();
        if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {
            throw Error('Not a cell: ' + popped.type);
        }
        return popped.cell;
    }
    readCellOpt() {
        let popped = this.pop();
        if (popped.type === 'null') {
            return null;
        }
        if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {
            throw Error('Not a cell');
        }
        return popped.cell;
    }
    readTuple() {
        let popped = this.pop();
        if (popped.type !== 'tuple') {
            throw Error('Not a tuple');
        }
        return new TupleReader(popped.items);
    }
    readTupleOpt() {
        let popped = this.pop();
        if (popped.type === 'null') {
            return null;
        }
        if (popped.type !== 'tuple') {
            throw Error('Not a tuple');
        }
        return new TupleReader(popped.items);
    }
    static readLispList(reader) {
        const result = [];
        let tail = reader;
        while (tail !== null) {
            var head = tail.pop();
            if (tail.items.length === 0 || (tail.items[0].type !== 'tuple' && tail.items[0].type !== 'null')) {
                throw Error('Lisp list consists only from (any, tuple) elements and ends with null');
            }
            tail = tail.readTupleOpt();
            result.push(head);
        }
        return result;
    }
    readLispListDirect() {
        if (this.items.length === 1 && this.items[0].type === 'null') {
            return [];
        }
        return TupleReader.readLispList(this);
    }
    readLispList() {
        return TupleReader.readLispList(this.readTupleOpt());
    }
    readBuffer() {
        let s = this.readCell().beginParse();
        if (s.remainingRefs !== 0) {
            throw Error('Not a buffer');
        }
        if (s.remainingBits % 8 !== 0) {
            throw Error('Not a buffer');
        }
        return s.loadBuffer(s.remainingBits / 8);
    }
    readBufferOpt() {
        let r = this.readCellOpt();
        if (r !== null) {
            let s = r.beginParse();
            if (s.remainingRefs !== 0 || s.remainingBits % 8 !== 0) {
                throw Error('Not a buffer');
            }
            return s.loadBuffer(s.remainingBits / 8);
        }
        else {
            return null;
        }
    }
    readString() {
        let s = this.readCell().beginParse();
        return s.loadStringTail();
    }
    readStringOpt() {
        let r = this.readCellOpt();
        if (r !== null) {
            let s = r.beginParse();
            return s.loadStringTail();
        }
        else {
            return null;
        }
    }
}
exports.TupleReader = TupleReader;


/***/ }),

/***/ "./node_modules/@ton/core/dist/tuple/tuple.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/tuple/tuple.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseTuple = exports.serializeTuple = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const INT64_MIN = BigInt('-9223372036854775808');
const INT64_MAX = BigInt('9223372036854775807');
// vm_stk_null#00 = VmStackValue;
// vm_stk_tinyint#01 value:int64 = VmStackValue;
// vm_stk_int#0201_ value:int257 = VmStackValue;
// vm_stk_nan#02ff = VmStackValue;
// vm_stk_cell#03 cell:^Cell = VmStackValue;
//_ cell:^Cell st_bits:(## 10) end_bits:(## 10) { st_bits <= end_bits }
//   st_ref:(#<= 4) end_ref:(#<= 4) { st_ref <= end_ref } = VmCellSlice;
// vm_stk_slice#04 _:VmCellSlice = VmStackValue;
// vm_stk_builder#05 cell:^Cell = VmStackValue;
// vm_stk_cont#06 cont:VmCont = VmStackValue;
// vm_tupref_nil$_ = VmTupleRef 0;
// vm_tupref_single$_ entry:^VmStackValue = VmTupleRef 1;
// vm_tupref_any$_ {n:#} ref:^(VmTuple (n + 2)) = VmTupleRef (n + 2);
// vm_tuple_nil$_ = VmTuple 0;
// vm_tuple_tcons$_ {n:#} head:(VmTupleRef n) tail:^VmStackValue = VmTuple (n + 1);
// vm_stk_tuple#07 len:(## 16) data:(VmTuple len) = VmStackValue;
function serializeTupleItem(src, builder) {
    if (src.type === 'null') {
        builder.storeUint(0x00, 8);
    }
    else if (src.type === 'int') {
        if (src.value <= INT64_MAX && src.value >= INT64_MIN) {
            builder.storeUint(0x01, 8);
            builder.storeInt(src.value, 64);
        }
        else {
            builder.storeUint(0x0100, 15);
            builder.storeInt(src.value, 257);
        }
    }
    else if (src.type === 'nan') {
        builder.storeInt(0x02ff, 16);
    }
    else if (src.type === 'cell') {
        builder.storeUint(0x03, 8);
        builder.storeRef(src.cell);
    }
    else if (src.type === 'slice') {
        builder.storeUint(0x04, 8);
        builder.storeUint(0, 10);
        builder.storeUint(src.cell.bits.length, 10);
        builder.storeUint(0, 3);
        builder.storeUint(src.cell.refs.length, 3);
        builder.storeRef(src.cell);
    }
    else if (src.type === 'builder') {
        builder.storeUint(0x05, 8);
        builder.storeRef(src.cell);
    }
    else if (src.type === 'tuple') {
        let head = null;
        let tail = null;
        for (let i = 0; i < src.items.length; i++) {
            // Swap
            let s = head;
            head = tail;
            tail = s;
            if (i > 1) {
                head = (0, Builder_1.beginCell)()
                    .storeRef(tail)
                    .storeRef(head)
                    .endCell();
            }
            let bc = (0, Builder_1.beginCell)();
            serializeTupleItem(src.items[i], bc);
            tail = bc.endCell();
        }
        builder.storeUint(0x07, 8);
        builder.storeUint(src.items.length, 16);
        if (head) {
            builder.storeRef(head);
        }
        if (tail) {
            builder.storeRef(tail);
        }
    }
    else {
        throw Error('Invalid value');
    }
}
function parseStackItem(cs) {
    let kind = cs.loadUint(8);
    if (kind === 0) {
        return { type: 'null' };
    }
    else if (kind === 1) {
        return { type: 'int', value: cs.loadIntBig(64) };
    }
    else if (kind === 2) {
        if (cs.loadUint(7) === 0) {
            return { type: 'int', value: cs.loadIntBig(257) };
        }
        else {
            cs.loadBit(); // must eq 1
            return { type: 'nan' };
        }
    }
    else if (kind === 3) {
        return { type: 'cell', cell: cs.loadRef() };
    }
    else if (kind === 4) {
        let startBits = cs.loadUint(10);
        let endBits = cs.loadUint(10);
        let startRefs = cs.loadUint(3);
        let endRefs = cs.loadUint(3);
        // Copy to new cell
        let rs = cs.loadRef().beginParse();
        rs.skip(startBits);
        let dt = rs.loadBits(endBits - startBits);
        let builder = (0, Builder_1.beginCell)()
            .storeBits(dt);
        // Copy refs if exist
        if (startRefs < endRefs) {
            for (let i = 0; i < startRefs; i++) {
                rs.loadRef();
            }
            for (let i = 0; i < endRefs - startRefs; i++) {
                builder.storeRef(rs.loadRef());
            }
        }
        return { type: 'slice', cell: builder.endCell() };
    }
    else if (kind === 5) {
        return { type: 'builder', cell: cs.loadRef() };
    }
    else if (kind === 7) {
        let length = cs.loadUint(16);
        let items = [];
        if (length > 1) {
            let head = cs.loadRef().beginParse();
            let tail = cs.loadRef().beginParse();
            items.unshift(parseStackItem(tail));
            for (let i = 0; i < length - 2; i++) {
                let ohead = head;
                head = ohead.loadRef().beginParse();
                tail = ohead.loadRef().beginParse();
                items.unshift(parseStackItem(tail));
            }
            items.unshift(parseStackItem(head));
        }
        else if (length === 1) {
            items.push(parseStackItem(cs.loadRef().beginParse()));
        }
        return { type: 'tuple', items };
    }
    else {
        throw Error('Unsupported stack item');
    }
}
//
// Stack parsing
// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L783
//
// vm_stack#_ depth:(## 24) stack:(VmStackList depth) = VmStack;
// vm_stk_cons#_ {n:#} rest:^(VmStackList n) tos:VmStackValue = VmStackList (n + 1);
// vm_stk_nil#_ = VmStackList 0;
//
function serializeTupleTail(src, builder) {
    if (src.length > 0) {
        // rest:^(VmStackList n)
        let tail = (0, Builder_1.beginCell)();
        serializeTupleTail(src.slice(0, src.length - 1), tail);
        builder.storeRef(tail.endCell());
        // tos
        serializeTupleItem(src[src.length - 1], builder);
    }
}
function serializeTuple(src) {
    let builder = (0, Builder_1.beginCell)();
    builder.storeUint(src.length, 24);
    let r = [...src];
    serializeTupleTail(r, builder);
    return builder.endCell();
}
exports.serializeTuple = serializeTuple;
function parseTuple(src) {
    let res = [];
    let cs = src.beginParse();
    let size = cs.loadUint(24);
    for (let i = 0; i < size; i++) {
        let next = cs.loadRef();
        res.unshift(parseStackItem(cs));
        cs = next.beginParse();
    }
    return res;
}
exports.parseTuple = parseTuple;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/Account.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Account.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeAccount = exports.loadAccount = void 0;
const AccountStorage_1 = __webpack_require__(/*! ./AccountStorage */ "./node_modules/@ton/core/dist/types/AccountStorage.js");
const StorageInto_1 = __webpack_require__(/*! ./StorageInto */ "./node_modules/@ton/core/dist/types/StorageInto.js");
function loadAccount(slice) {
    return {
        addr: slice.loadAddress(),
        storageStats: (0, StorageInto_1.loadStorageInfo)(slice),
        storage: (0, AccountStorage_1.loadAccountStorage)(slice)
    };
}
exports.loadAccount = loadAccount;
function storeAccount(src) {
    return (builder) => {
        builder.storeAddress(src.addr);
        builder.store((0, StorageInto_1.storeStorageInfo)(src.storageStats));
        builder.store((0, AccountStorage_1.storeAccountStorage)(src.storage));
    };
}
exports.storeAccount = storeAccount;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/AccountState.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountState.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeAccountState = exports.loadAccountState = void 0;
const StateInit_1 = __webpack_require__(/*! ./StateInit */ "./node_modules/@ton/core/dist/types/StateInit.js");
function loadAccountState(cs) {
    if (cs.loadBit()) {
        return { type: 'active', state: (0, StateInit_1.loadStateInit)(cs) };
    }
    else if (cs.loadBit()) {
        return { type: 'frozen', stateHash: cs.loadUintBig(256) };
    }
    else {
        return { type: 'uninit' };
    }
}
exports.loadAccountState = loadAccountState;
function storeAccountState(src) {
    return (builder) => {
        if (src.type === 'active') {
            builder.storeBit(true);
            builder.store((0, StateInit_1.storeStateInit)(src.state));
        }
        else if (src.type === 'frozen') {
            builder.storeBit(false);
            builder.storeBit(true);
            builder.storeUint(src.stateHash, 256);
        }
        else if (src.type === 'uninit') {
            builder.storeBit(false);
            builder.storeBit(false);
        }
    };
}
exports.storeAccountState = storeAccountState;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/AccountStatus.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStatus.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeAccountStatus = exports.loadAccountStatus = void 0;
/**
 * Load account state from slice
 * @param slice
 * @returns AccountState
 */
function loadAccountStatus(slice) {
    const status = slice.loadUint(2);
    if (status === 0x00) {
        return 'uninitialized';
    }
    if (status === 0x01) {
        return 'frozen';
    }
    if (status === 0x02) {
        return 'active';
    }
    if (status === 0x03) {
        return 'non-existing';
    }
    throw Error('Invalid data');
}
exports.loadAccountStatus = loadAccountStatus;
/**
 * Store account state to builder
 * @param src account state
 * @param builder buidler
 */
function storeAccountStatus(src) {
    return (builder) => {
        if (src === 'uninitialized') {
            builder.storeUint(0x00, 2);
        }
        else if (src === 'frozen') {
            builder.storeUint(0x01, 2);
        }
        else if (src === 'active') {
            builder.storeUint(0x02, 2);
        }
        else if (src === 'non-existing') {
            builder.storeUint(0x03, 2);
        }
        else {
            throw Error('Invalid data');
        }
        return builder;
    };
}
exports.storeAccountStatus = storeAccountStatus;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/AccountStatusChange.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStatusChange.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeAccountStatusChange = exports.loadAccountStatusChange = void 0;
function loadAccountStatusChange(slice) {
    if (!slice.loadBit()) {
        return 'unchanged';
    }
    if (slice.loadBit()) {
        return 'deleted';
    }
    else {
        return 'frozen';
    }
}
exports.loadAccountStatusChange = loadAccountStatusChange;
function storeAccountStatusChange(src) {
    return (builder) => {
        if (src == 'unchanged') {
            builder.storeBit(0);
        }
        else if (src === 'frozen') {
            builder.storeBit(1);
            builder.storeBit(0);
        }
        else if (src === 'deleted') {
            builder.storeBit(1);
            builder.storeBit(1);
        }
        else {
            throw Error('Invalid account status change');
        }
    };
}
exports.storeAccountStatusChange = storeAccountStatusChange;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/AccountStorage.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/AccountStorage.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeAccountStorage = exports.loadAccountStorage = void 0;
const AccountState_1 = __webpack_require__(/*! ./AccountState */ "./node_modules/@ton/core/dist/types/AccountState.js");
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadAccountStorage(slice) {
    return {
        lastTransLt: slice.loadUintBig(64),
        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice),
        state: (0, AccountState_1.loadAccountState)(slice)
    };
}
exports.loadAccountStorage = loadAccountStorage;
function storeAccountStorage(src) {
    return (builder) => {
        builder.storeUint(src.lastTransLt, 64);
        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));
        builder.store((0, AccountState_1.storeAccountState)(src.state));
    };
}
exports.storeAccountStorage = storeAccountStorage;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/CommonMessageInfo.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CommonMessageInfo.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = void 0;
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadCommonMessageInfo(slice) {
    // Internal message
    if (!slice.loadBit()) {
        const ihrDisabled = slice.loadBit();
        const bounce = slice.loadBit();
        const bounced = slice.loadBit();
        const src = slice.loadAddress();
        const dest = slice.loadAddress();
        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
        const ihrFee = slice.loadCoins();
        const forwardFee = slice.loadCoins();
        const createdLt = slice.loadUintBig(64);
        const createdAt = slice.loadUint(32);
        return {
            type: 'internal',
            ihrDisabled,
            bounce,
            bounced,
            src,
            dest,
            value,
            ihrFee,
            forwardFee,
            createdLt,
            createdAt,
        };
    }
    // External In mesage
    if (!slice.loadBit()) {
        const src = slice.loadMaybeExternalAddress();
        const dest = slice.loadAddress();
        const importFee = slice.loadCoins();
        return {
            type: 'external-in',
            src,
            dest,
            importFee,
        };
    }
    // External Out message
    const src = slice.loadAddress();
    const dest = slice.loadMaybeExternalAddress();
    const createdLt = slice.loadUintBig(64);
    const createdAt = slice.loadUint(32);
    return {
        type: 'external-out',
        src,
        dest,
        createdLt,
        createdAt,
    };
}
exports.loadCommonMessageInfo = loadCommonMessageInfo;
function storeCommonMessageInfo(source) {
    return (builder) => {
        if (source.type === 'internal') {
            builder.storeBit(0);
            builder.storeBit(source.ihrDisabled);
            builder.storeBit(source.bounce);
            builder.storeBit(source.bounced);
            builder.storeAddress(source.src);
            builder.storeAddress(source.dest);
            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));
            builder.storeCoins(source.ihrFee);
            builder.storeCoins(source.forwardFee);
            builder.storeUint(source.createdLt, 64);
            builder.storeUint(source.createdAt, 32);
        }
        else if (source.type === 'external-in') {
            builder.storeBit(1);
            builder.storeBit(0);
            builder.storeAddress(source.src);
            builder.storeAddress(source.dest);
            builder.storeCoins(source.importFee);
        }
        else if (source.type === 'external-out') {
            builder.storeBit(1);
            builder.storeBit(1);
            builder.storeAddress(source.src);
            builder.storeAddress(source.dest);
            builder.storeUint(source.createdLt, 64);
            builder.storeUint(source.createdAt, 32);
        }
        else {
            throw new Error('Unknown CommonMessageInfo type');
        }
    };
}
exports.storeCommonMessageInfo = storeCommonMessageInfo;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = void 0;
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadCommonMessageInfoRelaxed(slice) {
    // Internal message
    if (!slice.loadBit()) {
        const ihrDisabled = slice.loadBit();
        const bounce = slice.loadBit();
        const bounced = slice.loadBit();
        const src = slice.loadMaybeAddress();
        const dest = slice.loadAddress();
        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
        const ihrFee = slice.loadCoins();
        const forwardFee = slice.loadCoins();
        const createdLt = slice.loadUintBig(64);
        const createdAt = slice.loadUint(32);
        return {
            type: 'internal',
            ihrDisabled,
            bounce,
            bounced,
            src,
            dest,
            value,
            ihrFee,
            forwardFee,
            createdLt,
            createdAt,
        };
    }
    // External In mesage
    if (!slice.loadBit()) {
        throw Error('External In message is not possible for CommonMessageInfoRelaxed');
    }
    // External Out message
    const src = slice.loadMaybeAddress();
    const dest = slice.loadMaybeExternalAddress();
    const createdLt = slice.loadUintBig(64);
    const createdAt = slice.loadUint(32);
    return {
        type: 'external-out',
        src,
        dest,
        createdLt,
        createdAt,
    };
}
exports.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;
function storeCommonMessageInfoRelaxed(source) {
    return (builder) => {
        if (source.type === 'internal') {
            builder.storeBit(0);
            builder.storeBit(source.ihrDisabled);
            builder.storeBit(source.bounce);
            builder.storeBit(source.bounced);
            builder.storeAddress(source.src);
            builder.storeAddress(source.dest);
            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));
            builder.storeCoins(source.ihrFee);
            builder.storeCoins(source.forwardFee);
            builder.storeUint(source.createdLt, 64);
            builder.storeUint(source.createdAt, 32);
        }
        else if (source.type === 'external-out') {
            builder.storeBit(1);
            builder.storeBit(1);
            builder.storeAddress(source.src);
            builder.storeAddress(source.dest);
            builder.storeUint(source.createdLt, 64);
            builder.storeUint(source.createdAt, 32);
        }
        else {
            throw new Error('Unknown CommonMessageInfo type');
        }
    };
}
exports.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ComputeSkipReason.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ComputeSkipReason.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeComputeSkipReason = exports.loadComputeSkipReason = void 0;
function loadComputeSkipReason(slice) {
    let reason = slice.loadUint(2);
    if (reason === 0x00) {
        return 'no-state';
    }
    else if (reason === 0x01) {
        return 'bad-state';
    }
    else if (reason === 0x02) {
        return 'no-gas';
    }
    throw new Error(`Unknown ComputeSkipReason: ${reason}`);
}
exports.loadComputeSkipReason = loadComputeSkipReason;
function storeComputeSkipReason(src) {
    return (builder) => {
        if (src === 'no-state') {
            builder.storeUint(0x00, 2);
        }
        else if (src === 'bad-state') {
            builder.storeUint(0x01, 2);
        }
        else if (src === 'no-gas') {
            builder.storeUint(0x02, 2);
        }
        else {
            throw new Error(`Unknown ComputeSkipReason: ${src}`);
        }
    };
}
exports.storeComputeSkipReason = storeComputeSkipReason;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/CurrencyCollection.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/CurrencyCollection.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeCurrencyCollection = exports.loadCurrencyCollection = void 0;
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
;
function loadCurrencyCollection(slice) {
    const coins = slice.loadCoins();
    const other = slice.loadDict(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5 /* log2(32) */));
    if (other.size === 0) {
        return { coins };
    }
    else {
        return { other, coins };
    }
}
exports.loadCurrencyCollection = loadCurrencyCollection;
function storeCurrencyCollection(collection) {
    return (builder) => {
        builder.storeCoins(collection.coins);
        if (collection.other) {
            builder.storeDict(collection.other);
        }
        else {
            builder.storeBit(0);
        }
    };
}
exports.storeCurrencyCollection = storeCurrencyCollection;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/DepthBalanceInfo.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/DepthBalanceInfo.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = void 0;
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadDepthBalanceInfo(slice) {
    let splitDepth = slice.loadUint(5);
    return {
        splitDepth,
        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice)
    };
}
exports.loadDepthBalanceInfo = loadDepthBalanceInfo;
function storeDepthBalanceInfo(src) {
    return (builder) => {
        builder.storeUint(src.splitDepth, 5);
        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));
    };
}
exports.storeDepthBalanceInfo = storeDepthBalanceInfo;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ExtraCurrency.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ExtraCurrency.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.packExtraCurrencyCell = exports.packExtraCurrencyDict = exports.storeExtraCurrency = exports.loadMaybeExtraCurrency = exports.loadExtraCurrency = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
function loadExtraCurrency(data) {
    let ecDict = data instanceof Dictionary_1.Dictionary ? data : Dictionary_1.Dictionary.loadDirect(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5), data);
    let ecMap = {};
    for (let [k, v] of ecDict) {
        ecMap[k] = v;
    }
    return ecMap;
}
exports.loadExtraCurrency = loadExtraCurrency;
function loadMaybeExtraCurrency(data) {
    const ecData = data.loadMaybeRef();
    return ecData === null ? ecData : loadExtraCurrency(ecData);
}
exports.loadMaybeExtraCurrency = loadMaybeExtraCurrency;
function storeExtraCurrency(extracurrency) {
    return (builder) => {
        builder.storeDict(packExtraCurrencyDict(extracurrency));
    };
}
exports.storeExtraCurrency = storeExtraCurrency;
function packExtraCurrencyDict(extracurrency) {
    const resEc = Dictionary_1.Dictionary.empty(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5));
    Object.entries(extracurrency).map(([k, v]) => resEc.set(Number(k), v));
    return resEc;
}
exports.packExtraCurrencyDict = packExtraCurrencyDict;
function packExtraCurrencyCell(extracurrency) {
    return (0, Builder_1.beginCell)().storeDictDirect(packExtraCurrencyDict(extracurrency)).endCell();
}
exports.packExtraCurrencyCell = packExtraCurrencyCell;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/HashUpdate.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/HashUpdate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeHashUpdate = exports.loadHashUpdate = void 0;
function loadHashUpdate(slice) {
    if (slice.loadUint(8) !== 0x72) {
        throw Error('Invalid data');
    }
    const oldHash = slice.loadBuffer(32);
    const newHash = slice.loadBuffer(32);
    return { oldHash, newHash };
}
exports.loadHashUpdate = loadHashUpdate;
function storeHashUpdate(src) {
    return (builder) => {
        builder.storeUint(0x72, 8);
        builder.storeBuffer(src.oldHash);
        builder.storeBuffer(src.newHash);
    };
}
exports.storeHashUpdate = storeHashUpdate;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/LibRef.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/LibRef.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeLibRef = exports.loadLibRef = void 0;
function loadLibRef(slice) {
    const type = slice.loadUint(1);
    if (type === 0) {
        return {
            type: 'hash',
            libHash: slice.loadBuffer(32)
        };
    }
    else {
        return {
            type: 'ref',
            library: slice.loadRef()
        };
    }
}
exports.loadLibRef = loadLibRef;
function storeLibRef(src) {
    return (builder) => {
        if (src.type === 'hash') {
            builder.storeUint(0, 1);
            builder.storeBuffer(src.libHash);
        }
        else {
            builder.storeUint(1, 1);
            builder.storeRef(src.library);
        }
    };
}
exports.storeLibRef = storeLibRef;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/MasterchainStateExtra.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/MasterchainStateExtra.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadMasterchainStateExtra = void 0;
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadMasterchainStateExtra(cs) {
    // Check magic
    if (cs.loadUint(16) !== 0xcc26) {
        throw Error('Invalid data');
    }
    // Skip shard_hashes
    if (cs.loadBit()) {
        cs.loadRef();
    }
    // Read config
    let configAddress = cs.loadUintBig(256);
    let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);
    // Rad global balance
    const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);
    return {
        config,
        configAddress,
        globalBalance
    };
}
exports.loadMasterchainStateExtra = loadMasterchainStateExtra;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/Message.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Message.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const CommonMessageInfo_1 = __webpack_require__(/*! ./CommonMessageInfo */ "./node_modules/@ton/core/dist/types/CommonMessageInfo.js");
const StateInit_1 = __webpack_require__(/*! ./StateInit */ "./node_modules/@ton/core/dist/types/StateInit.js");
function loadMessage(slice) {
    const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);
    let init = null;
    if (slice.loadBit()) {
        if (!slice.loadBit()) {
            init = (0, StateInit_1.loadStateInit)(slice);
        }
        else {
            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());
        }
    }
    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
    return {
        info,
        init,
        body
    };
}
exports.loadMessage = loadMessage;
function storeMessage(message, opts) {
    return (builder) => {
        // Store CommonMsgInfo
        builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info));
        // Store init
        if (message.init) {
            builder.storeBit(true);
            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));
            // Check if need to store it in ref
            let needRef = false;
            if (opts && opts.forceRef) {
                needRef = true;
            }
            else {
                needRef = builder.availableBits - 2 /* At least two bits for ref flags */ < initCell.bits + message.body.bits.length;
            }
            // Persist init
            if (needRef) {
                builder.storeBit(true);
                builder.storeRef(initCell);
            }
            else {
                builder.storeBit(false);
                builder.storeBuilder(initCell);
            }
        }
        else {
            builder.storeBit(false);
        }
        // Store body
        let needRef = false;
        if (opts && opts.forceRef) {
            needRef = true;
        }
        else {
            needRef = builder.availableBits - 1 /* At least one bit for ref flag */ < message.body.bits.length ||
                builder.refs + message.body.refs.length > 4;
        }
        if (needRef) {
            builder.storeBit(true);
            builder.storeRef(message.body);
        }
        else {
            builder.storeBit(false);
            builder.storeBuilder(message.body.asBuilder());
        }
    };
}
exports.storeMessage = storeMessage;
exports.MessageValue = {
    serialize(src, builder) {
        builder.storeRef((0, Builder_1.beginCell)()
            .store(storeMessage(src)));
    },
    parse(slice) {
        return loadMessage(slice.loadRef().beginParse());
    }
};


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/MessageRelaxed.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/MessageRelaxed.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const CommonMessageInfoRelaxed_1 = __webpack_require__(/*! ./CommonMessageInfoRelaxed */ "./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js");
const StateInit_1 = __webpack_require__(/*! ./StateInit */ "./node_modules/@ton/core/dist/types/StateInit.js");
function loadMessageRelaxed(slice) {
    const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);
    let init = null;
    if (slice.loadBit()) {
        if (!slice.loadBit()) {
            init = (0, StateInit_1.loadStateInit)(slice);
        }
        else {
            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());
        }
    }
    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
    return {
        info,
        init,
        body
    };
}
exports.loadMessageRelaxed = loadMessageRelaxed;
function storeMessageRelaxed(message, opts) {
    return (builder) => {
        // Store CommonMsgInfo
        builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info));
        // Store init
        if (message.init) {
            builder.storeBit(true);
            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));
            // Check if ref is needed
            let needRef = false;
            if (opts && opts.forceRef) {
                needRef = true;
            }
            else {
                if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {
                    needRef = false;
                }
                else {
                    needRef = true;
                }
            }
            // Store ref
            if (needRef) {
                builder.storeBit(true);
                builder.storeRef(initCell);
            }
            else {
                builder.storeBit(false);
                builder.storeBuilder(initCell);
            }
        }
        else {
            builder.storeBit(false);
        }
        // Store body
        let needRef = false;
        if (opts && opts.forceRef) {
            needRef = true;
        }
        else {
            /*
             1. If at least one bit for ref flag
             2. If enough space for refs
             3. If not exotic
            */
            if (builder.availableBits - 1 >= message.body.bits.length &&
                builder.refs + message.body.refs.length <= 4 &&
                !message.body.isExotic) {
                needRef = false;
            }
            else {
                needRef = true;
            }
        }
        if (needRef) {
            builder.storeBit(true);
            builder.storeRef(message.body);
        }
        else {
            builder.storeBit(false);
            builder.storeBuilder(message.body.asBuilder());
        }
    };
}
exports.storeMessageRelaxed = storeMessageRelaxed;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/OutList.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/OutList.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadOutList = exports.storeOutList = exports.loadOutAction = exports.storeOutAction = void 0;
const MessageRelaxed_1 = __webpack_require__(/*! ./MessageRelaxed */ "./node_modules/@ton/core/dist/types/MessageRelaxed.js");
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
const LibRef_1 = __webpack_require__(/*! ./LibRef */ "./node_modules/@ton/core/dist/types/LibRef.js");
function storeOutAction(action) {
    switch (action.type) {
        case 'sendMsg':
            return storeOutActionSendMsg(action);
        case 'setCode':
            return storeOutActionSetCode(action);
        case 'reserve':
            return storeOutActionReserve(action);
        case 'changeLibrary':
            return storeOutActionChangeLibrary(action);
        default:
            throw new Error(`Unknown action type ${action.type}`);
    }
}
exports.storeOutAction = storeOutAction;
/*
action_send_msg#0ec3c86d mode:(## 8)
  out_msg:^(MessageRelaxed Any) = OutAction;
*/
const outActionSendMsgTag = 0x0ec3c86d;
function storeOutActionSendMsg(action) {
    return (builder) => {
        builder.storeUint(outActionSendMsgTag, 32)
            .storeUint(action.mode, 8)
            .storeRef((0, Builder_1.beginCell)().store((0, MessageRelaxed_1.storeMessageRelaxed)(action.outMsg)).endCell());
    };
}
/*
action_set_code#ad4de08e new_code:^Cell = OutAction;
 */
const outActionSetCodeTag = 0xad4de08e;
function storeOutActionSetCode(action) {
    return (builder) => {
        builder.storeUint(outActionSetCodeTag, 32).storeRef(action.newCode);
    };
}
/*
action_reserve_currency#36e6b809 mode:(## 8)
  currency:CurrencyCollection = OutAction;
 */
const outActionReserveTag = 0x36e6b809;
function storeOutActionReserve(action) {
    return (builder) => {
        builder.storeUint(outActionReserveTag, 32)
            .storeUint(action.mode, 8)
            .store((0, CurrencyCollection_1.storeCurrencyCollection)(action.currency));
    };
}
/*
action_change_library#26fa1dd4 mode:(## 7)
  libref:LibRef = OutAction;
 */
const outActionChangeLibraryTag = 0x26fa1dd4;
function storeOutActionChangeLibrary(action) {
    return (builder) => {
        builder.storeUint(outActionChangeLibraryTag, 32)
            .storeUint(action.mode, 7)
            .store((0, LibRef_1.storeLibRef)(action.libRef));
    };
}
function loadOutAction(slice) {
    const tag = slice.loadUint(32);
    if (tag === outActionSendMsgTag) {
        const mode = slice.loadUint(8);
        const outMsg = (0, MessageRelaxed_1.loadMessageRelaxed)(slice.loadRef().beginParse());
        return {
            type: 'sendMsg',
            mode,
            outMsg
        };
    }
    if (tag === outActionSetCodeTag) {
        const newCode = slice.loadRef();
        return {
            type: 'setCode',
            newCode
        };
    }
    if (tag === outActionReserveTag) {
        const mode = slice.loadUint(8);
        const currency = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
        return {
            type: 'reserve',
            mode,
            currency
        };
    }
    if (tag === outActionChangeLibraryTag) {
        const mode = slice.loadUint(7);
        const libRef = (0, LibRef_1.loadLibRef)(slice);
        return {
            type: 'changeLibrary',
            mode,
            libRef
        };
    }
    throw new Error(`Unknown out action tag 0x${tag.toString(16)}`);
}
exports.loadOutAction = loadOutAction;
/*
out_list_empty$_ = OutList 0;
out_list$_ {n:#} prev:^(OutList n) action:OutAction
  = OutList (n + 1);
 */
function storeOutList(actions) {
    const cell = actions.reduce((cell, action) => (0, Builder_1.beginCell)()
        .storeRef(cell)
        .store(storeOutAction(action))
        .endCell(), (0, Builder_1.beginCell)().endCell());
    return (builder) => {
        builder.storeSlice(cell.beginParse());
    };
}
exports.storeOutList = storeOutList;
function loadOutList(slice) {
    const actions = [];
    while (slice.remainingRefs) {
        const nextCell = slice.loadRef();
        actions.push(loadOutAction(slice));
        slice = nextCell.beginParse();
    }
    return actions.reverse();
}
exports.loadOutList = loadOutList;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ReserveMode.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ReserveMode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReserveMode = void 0;
var ReserveMode;
(function (ReserveMode) {
    ReserveMode[ReserveMode["THIS_AMOUNT"] = 0] = "THIS_AMOUNT";
    ReserveMode[ReserveMode["LEAVE_THIS_AMOUNT"] = 1] = "LEAVE_THIS_AMOUNT";
    ReserveMode[ReserveMode["AT_MOST_THIS_AMOUNT"] = 2] = "AT_MOST_THIS_AMOUNT";
    ReserveMode[ReserveMode["LEAVE_MAX_THIS_AMOUNT"] = 3] = "LEAVE_MAX_THIS_AMOUNT";
    ReserveMode[ReserveMode["BEFORE_BALANCE_PLUS_THIS_AMOUNT"] = 4] = "BEFORE_BALANCE_PLUS_THIS_AMOUNT";
    ReserveMode[ReserveMode["LEAVE_BBALANCE_PLUS_THIS_AMOUNT"] = 5] = "LEAVE_BBALANCE_PLUS_THIS_AMOUNT";
    ReserveMode[ReserveMode["BEFORE_BALANCE_MINUS_THIS_AMOUNT"] = 12] = "BEFORE_BALANCE_MINUS_THIS_AMOUNT";
    ReserveMode[ReserveMode["LEAVE_BEFORE_BALANCE_MINUS_THIS_AMOUNT"] = 13] = "LEAVE_BEFORE_BALANCE_MINUS_THIS_AMOUNT";
})(ReserveMode || (exports.ReserveMode = ReserveMode = {}));


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/SendMode.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SendMode.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SendMode = void 0;
var SendMode;
(function (SendMode) {
    SendMode[SendMode["CARRY_ALL_REMAINING_BALANCE"] = 128] = "CARRY_ALL_REMAINING_BALANCE";
    SendMode[SendMode["CARRY_ALL_REMAINING_INCOMING_VALUE"] = 64] = "CARRY_ALL_REMAINING_INCOMING_VALUE";
    SendMode[SendMode["DESTROY_ACCOUNT_IF_ZERO"] = 32] = "DESTROY_ACCOUNT_IF_ZERO";
    SendMode[SendMode["PAY_GAS_SEPARATELY"] = 1] = "PAY_GAS_SEPARATELY";
    SendMode[SendMode["IGNORE_ERRORS"] = 2] = "IGNORE_ERRORS";
    SendMode[SendMode["NONE"] = 0] = "NONE";
})(SendMode || (exports.SendMode = SendMode = {}));


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ShardAccount.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardAccount.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeShardAccount = exports.loadShardAccount = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const Account_1 = __webpack_require__(/*! ./Account */ "./node_modules/@ton/core/dist/types/Account.js");
function loadShardAccount(slice) {
    let accountRef = slice.loadRef();
    let account = undefined;
    if (!accountRef.isExotic) {
        let accountSlice = accountRef.beginParse();
        if (accountSlice.loadBit()) {
            account = (0, Account_1.loadAccount)(accountSlice);
        }
    }
    return {
        account,
        lastTransactionHash: slice.loadUintBig(256),
        lastTransactionLt: slice.loadUintBig(64)
    };
}
exports.loadShardAccount = loadShardAccount;
function storeShardAccount(src) {
    return (builder) => {
        if (src.account) {
            builder.storeRef((0, Builder_1.beginCell)()
                .storeBit(true)
                .store((0, Account_1.storeAccount)(src.account)));
        }
        else {
            builder.storeRef((0, Builder_1.beginCell)()
                .storeBit(false));
        }
        builder.storeUint(src.lastTransactionHash, 256);
        builder.storeUint(src.lastTransactionLt, 64);
    };
}
exports.storeShardAccount = storeShardAccount;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ShardAccounts.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardAccounts.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = void 0;
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
const DepthBalanceInfo_1 = __webpack_require__(/*! ./DepthBalanceInfo */ "./node_modules/@ton/core/dist/types/DepthBalanceInfo.js");
const ShardAccount_1 = __webpack_require__(/*! ./ShardAccount */ "./node_modules/@ton/core/dist/types/ShardAccount.js");
exports.ShardAccountRefValue = {
    parse: (cs) => {
        let depthBalanceInfo = (0, DepthBalanceInfo_1.loadDepthBalanceInfo)(cs);
        let shardAccount = (0, ShardAccount_1.loadShardAccount)(cs);
        return {
            depthBalanceInfo,
            shardAccount
        };
    },
    serialize(src, builder) {
        builder.store((0, DepthBalanceInfo_1.storeDepthBalanceInfo)(src.depthBalanceInfo));
        builder.store((0, ShardAccount_1.storeShardAccount)(src.shardAccount));
    },
};
function loadShardAccounts(cs) {
    return Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.BigUint(256), exports.ShardAccountRefValue, cs);
}
exports.loadShardAccounts = loadShardAccounts;
function storeShardAccounts(src) {
    return (Builder) => {
        Builder.storeDict(src);
    };
}
exports.storeShardAccounts = storeShardAccounts;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ShardIdent.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardIdent.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeShardIdent = exports.loadShardIdent = void 0;
function loadShardIdent(slice) {
    if (slice.loadUint(2) !== 0) {
        throw Error('Invalid data');
    }
    return {
        shardPrefixBits: slice.loadUint(6),
        workchainId: slice.loadInt(32),
        shardPrefix: slice.loadUintBig(64)
    };
}
exports.loadShardIdent = loadShardIdent;
function storeShardIdent(src) {
    return (builder) => {
        builder.storeUint(0, 2);
        builder.storeUint(src.shardPrefixBits, 6);
        builder.storeInt(src.workchainId, 32);
        builder.storeUint(src.shardPrefix, 64);
    };
}
exports.storeShardIdent = storeShardIdent;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/ShardStateUnsplit.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/ShardStateUnsplit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadShardStateUnsplit = void 0;
const MasterchainStateExtra_1 = __webpack_require__(/*! ./MasterchainStateExtra */ "./node_modules/@ton/core/dist/types/MasterchainStateExtra.js");
const ShardAccounts_1 = __webpack_require__(/*! ./ShardAccounts */ "./node_modules/@ton/core/dist/types/ShardAccounts.js");
const ShardIdent_1 = __webpack_require__(/*! ./ShardIdent */ "./node_modules/@ton/core/dist/types/ShardIdent.js");
function loadShardStateUnsplit(cs) {
    if (cs.loadUint(32) !== 0x9023afe2) {
        throw Error('Invalid data');
    }
    let globalId = cs.loadInt(32);
    let shardId = (0, ShardIdent_1.loadShardIdent)(cs);
    let seqno = cs.loadUint(32);
    let vertSeqNo = cs.loadUint(32);
    let genUtime = cs.loadUint(32);
    let genLt = cs.loadUintBig(64);
    let minRefMcSeqno = cs.loadUint(32);
    // Skip OutMsgQueueInfo: usually exotic
    cs.loadRef();
    let beforeSplit = cs.loadBit();
    // Parse accounts
    let shardAccountsRef = cs.loadRef();
    let accounts = undefined;
    if (!shardAccountsRef.isExotic) {
        accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());
    }
    // Skip (not used by apps)
    cs.loadRef();
    // Parse extras
    let mcStateExtra = cs.loadBit();
    let extras = null;
    if (mcStateExtra) {
        let cell = cs.loadRef();
        if (!cell.isExotic) {
            extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());
        }
    }
    ;
    return {
        globalId,
        shardId,
        seqno,
        vertSeqNo,
        genUtime,
        genLt,
        minRefMcSeqno,
        beforeSplit,
        accounts,
        extras
    };
}
exports.loadShardStateUnsplit = loadShardStateUnsplit;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/SimpleLibrary.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SimpleLibrary.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimpleLibraryValue = exports.storeSimpleLibrary = exports.loadSimpleLibrary = void 0;
function loadSimpleLibrary(slice) {
    return {
        public: slice.loadBit(),
        root: slice.loadRef()
    };
}
exports.loadSimpleLibrary = loadSimpleLibrary;
function storeSimpleLibrary(src) {
    return (builder) => {
        builder.storeBit(src.public);
        builder.storeRef(src.root);
    };
}
exports.storeSimpleLibrary = storeSimpleLibrary;
exports.SimpleLibraryValue = {
    serialize(src, builder) {
        storeSimpleLibrary(src)(builder);
    },
    parse(src) {
        return loadSimpleLibrary(src);
    },
};


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/SplitMergeInfo.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/SplitMergeInfo.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = void 0;
function loadSplitMergeInfo(slice) {
    let currentShardPrefixLength = slice.loadUint(6);
    let accountSplitDepth = slice.loadUint(6);
    let thisAddress = slice.loadUintBig(256);
    let siblingAddress = slice.loadUintBig(256);
    return {
        currentShardPrefixLength,
        accountSplitDepth,
        thisAddress,
        siblingAddress
    };
}
exports.loadSplitMergeInfo = loadSplitMergeInfo;
function storeSplitMergeInfo(src) {
    return (builder) => {
        builder.storeUint(src.currentShardPrefixLength, 6);
        builder.storeUint(src.accountSplitDepth, 6);
        builder.storeUint(src.thisAddress, 256);
        builder.storeUint(src.siblingAddress, 256);
    };
}
exports.storeSplitMergeInfo = storeSplitMergeInfo;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/StateInit.js":
/*!********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StateInit.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeStateInit = exports.loadStateInit = void 0;
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
const SimpleLibrary_1 = __webpack_require__(/*! ./SimpleLibrary */ "./node_modules/@ton/core/dist/types/SimpleLibrary.js");
const TickTock_1 = __webpack_require__(/*! ./TickTock */ "./node_modules/@ton/core/dist/types/TickTock.js");
;
function loadStateInit(slice) {
    // Split Depth
    let splitDepth;
    if (slice.loadBit()) {
        splitDepth = slice.loadUint(5);
    }
    // TickTock
    let special;
    if (slice.loadBit()) {
        special = (0, TickTock_1.loadTickTock)(slice);
    }
    // Code and Data
    let code = slice.loadMaybeRef();
    let data = slice.loadMaybeRef();
    // Libs
    let libraries = slice.loadDict(Dictionary_1.Dictionary.Keys.BigUint(256), SimpleLibrary_1.SimpleLibraryValue);
    if (libraries.size === 0) {
        libraries = undefined;
    }
    return {
        splitDepth,
        special,
        code,
        data,
        libraries
    };
}
exports.loadStateInit = loadStateInit;
function storeStateInit(src) {
    return (builder) => {
        if (src.splitDepth !== null && src.splitDepth !== undefined) {
            builder.storeBit(true);
            builder.storeUint(src.splitDepth, 5);
        }
        else {
            builder.storeBit(false);
        }
        if (src.special !== null && src.special !== undefined) {
            builder.storeBit(true);
            builder.store((0, TickTock_1.storeTickTock)(src.special));
        }
        else {
            builder.storeBit(false);
        }
        builder.storeMaybeRef(src.code);
        builder.storeMaybeRef(src.data);
        builder.storeDict(src.libraries);
    };
}
exports.storeStateInit = storeStateInit;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/StorageInto.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageInto.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeStorageInfo = exports.loadStorageInfo = void 0;
const StorageUsed_1 = __webpack_require__(/*! ./StorageUsed */ "./node_modules/@ton/core/dist/types/StorageUsed.js");
function loadStorageInfo(slice) {
    return {
        used: (0, StorageUsed_1.loadStorageUsed)(slice),
        lastPaid: slice.loadUint(32),
        duePayment: slice.loadMaybeCoins()
    };
}
exports.loadStorageInfo = loadStorageInfo;
function storeStorageInfo(src) {
    return (builder) => {
        builder.store((0, StorageUsed_1.storeStorageUsed)(src.used));
        builder.storeUint(src.lastPaid, 32);
        builder.storeMaybeCoins(src.duePayment);
    };
}
exports.storeStorageInfo = storeStorageInfo;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/StorageUsed.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageUsed.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeStorageUsed = exports.loadStorageUsed = void 0;
function loadStorageUsed(cs) {
    return {
        cells: cs.loadVarUintBig(3),
        bits: cs.loadVarUintBig(3),
        publicCells: cs.loadVarUintBig(3),
    };
}
exports.loadStorageUsed = loadStorageUsed;
function storeStorageUsed(src) {
    return (builder) => {
        builder.storeVarUint(src.cells, 3);
        builder.storeVarUint(src.bits, 3);
        builder.storeVarUint(src.publicCells, 3);
    };
}
exports.storeStorageUsed = storeStorageUsed;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/StorageUsedShort.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/StorageUsedShort.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeStorageUsedShort = exports.loadStorageUsedShort = void 0;
function loadStorageUsedShort(slice) {
    let cells = slice.loadVarUintBig(3);
    let bits = slice.loadVarUintBig(3);
    return {
        cells,
        bits
    };
}
exports.loadStorageUsedShort = loadStorageUsedShort;
function storeStorageUsedShort(src) {
    return (builder) => {
        builder.storeVarUint(src.cells, 3);
        builder.storeVarUint(src.bits, 3);
    };
}
exports.storeStorageUsedShort = storeStorageUsedShort;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TickTock.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TickTock.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTickTock = exports.loadTickTock = void 0;
function loadTickTock(slice) {
    return {
        tick: slice.loadBit(),
        tock: slice.loadBit()
    };
}
exports.loadTickTock = loadTickTock;
function storeTickTock(src) {
    return (builder) => {
        builder.storeBit(src.tick);
        builder.storeBit(src.tock);
    };
}
exports.storeTickTock = storeTickTock;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/Transaction.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/Transaction.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransaction = exports.loadTransaction = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const Dictionary_1 = __webpack_require__(/*! ../dict/Dictionary */ "./node_modules/@ton/core/dist/dict/Dictionary.js");
const AccountStatus_1 = __webpack_require__(/*! ./AccountStatus */ "./node_modules/@ton/core/dist/types/AccountStatus.js");
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
const HashUpdate_1 = __webpack_require__(/*! ./HashUpdate */ "./node_modules/@ton/core/dist/types/HashUpdate.js");
const Message_1 = __webpack_require__(/*! ./Message */ "./node_modules/@ton/core/dist/types/Message.js");
const TransactionDescription_1 = __webpack_require__(/*! ./TransactionDescription */ "./node_modules/@ton/core/dist/types/TransactionDescription.js");
function loadTransaction(slice) {
    let raw = slice.asCell();
    if (slice.loadUint(4) !== 0x07) {
        throw Error('Invalid data');
    }
    let address = slice.loadUintBig(256);
    let lt = slice.loadUintBig(64);
    let prevTransactionHash = slice.loadUintBig(256);
    let prevTransactionLt = slice.loadUintBig(64);
    let now = slice.loadUint(32);
    let outMessagesCount = slice.loadUint(15);
    let oldStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
    let endStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
    let msgRef = slice.loadRef();
    let msgSlice = msgRef.beginParse();
    let inMessage = msgSlice.loadBit() ? (0, Message_1.loadMessage)(msgSlice.loadRef().beginParse()) : undefined;
    let outMessages = msgSlice.loadDict(Dictionary_1.Dictionary.Keys.Uint(15), Message_1.MessageValue);
    msgSlice.endParse();
    let totalFees = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
    let stateUpdate = (0, HashUpdate_1.loadHashUpdate)(slice.loadRef().beginParse());
    let description = (0, TransactionDescription_1.loadTransactionDescription)(slice.loadRef().beginParse());
    return {
        address,
        lt,
        prevTransactionHash,
        prevTransactionLt,
        now,
        outMessagesCount,
        oldStatus,
        endStatus,
        inMessage,
        outMessages,
        totalFees,
        stateUpdate,
        description,
        raw,
        hash: () => raw.hash(),
    };
}
exports.loadTransaction = loadTransaction;
function storeTransaction(src) {
    return (builder) => {
        builder.storeUint(0x07, 4);
        builder.storeUint(src.address, 256);
        builder.storeUint(src.lt, 64);
        builder.storeUint(src.prevTransactionHash, 256);
        builder.storeUint(src.prevTransactionLt, 64);
        builder.storeUint(src.now, 32);
        builder.storeUint(src.outMessagesCount, 15);
        builder.store((0, AccountStatus_1.storeAccountStatus)(src.oldStatus));
        builder.store((0, AccountStatus_1.storeAccountStatus)(src.endStatus));
        let msgBuilder = (0, Builder_1.beginCell)();
        if (src.inMessage) {
            msgBuilder.storeBit(true);
            msgBuilder.storeRef((0, Builder_1.beginCell)().store((0, Message_1.storeMessage)(src.inMessage)));
        }
        else {
            msgBuilder.storeBit(false);
        }
        msgBuilder.storeDict(src.outMessages);
        builder.storeRef(msgBuilder);
        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.totalFees));
        builder.storeRef((0, Builder_1.beginCell)().store((0, HashUpdate_1.storeHashUpdate)(src.stateUpdate)));
        builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionDescription_1.storeTransactionDescription)(src.description)));
    };
}
exports.storeTransaction = storeTransaction;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionActionPhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionActionPhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = void 0;
const AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ "./node_modules/@ton/core/dist/types/AccountStatusChange.js");
const StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ "./node_modules/@ton/core/dist/types/StorageUsedShort.js");
function loadTransactionActionPhase(slice) {
    let success = slice.loadBit();
    let valid = slice.loadBit();
    let noFunds = slice.loadBit();
    let statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);
    let totalFwdFees = slice.loadBit() ? slice.loadCoins() : undefined;
    let totalActionFees = slice.loadBit() ? slice.loadCoins() : undefined;
    let resultCode = slice.loadInt(32);
    let resultArg = slice.loadBit() ? slice.loadInt(32) : undefined;
    let totalActions = slice.loadUint(16);
    let specActions = slice.loadUint(16);
    let skippedActions = slice.loadUint(16);
    let messagesCreated = slice.loadUint(16);
    let actionListHash = slice.loadUintBig(256);
    let totalMessageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
    return {
        success,
        valid,
        noFunds,
        statusChange,
        totalFwdFees,
        totalActionFees,
        resultCode,
        resultArg,
        totalActions,
        specActions,
        skippedActions,
        messagesCreated,
        actionListHash,
        totalMessageSize
    };
}
exports.loadTransactionActionPhase = loadTransactionActionPhase;
function storeTransactionActionPhase(src) {
    return (builder) => {
        builder.storeBit(src.success);
        builder.storeBit(src.valid);
        builder.storeBit(src.noFunds);
        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));
        builder.storeMaybeCoins(src.totalFwdFees);
        builder.storeMaybeCoins(src.totalActionFees);
        builder.storeInt(src.resultCode, 32);
        builder.storeMaybeInt(src.resultArg, 32);
        builder.storeUint(src.totalActions, 16);
        builder.storeUint(src.specActions, 16);
        builder.storeUint(src.skippedActions, 16);
        builder.storeUint(src.messagesCreated, 16);
        builder.storeUint(src.actionListHash, 256);
        builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.totalMessageSize));
    };
}
exports.storeTransactionActionPhase = storeTransactionActionPhase;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionBouncePhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionBouncePhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = void 0;
const StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ "./node_modules/@ton/core/dist/types/StorageUsedShort.js");
function loadTransactionBouncePhase(slice) {
    // Ok
    if (slice.loadBit()) {
        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
        let messageFees = slice.loadCoins();
        let forwardFees = slice.loadCoins();
        return {
            type: "ok",
            messageSize,
            messageFees,
            forwardFees,
        };
    }
    // No funds
    if (slice.loadBit()) {
        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
        let requiredForwardFees = slice.loadCoins();
        return {
            type: "no-funds",
            messageSize,
            requiredForwardFees,
        };
    }
    // Negative funds
    return {
        type: "negative-funds",
    };
}
exports.loadTransactionBouncePhase = loadTransactionBouncePhase;
function storeTransactionBouncePhase(src) {
    return (builder) => {
        if (src.type === 'ok') {
            builder.storeBit(true);
            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));
            builder.storeCoins(src.messageFees);
            builder.storeCoins(src.forwardFees);
        }
        else if (src.type === 'negative-funds') {
            builder.storeBit(false);
            builder.storeBit(false);
        }
        else if (src.type === 'no-funds') {
            builder.storeBit(false);
            builder.storeBit(true);
            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));
            builder.storeCoins(src.requiredForwardFees);
        }
        else {
            throw new Error("Invalid TransactionBouncePhase type");
        }
    };
}
exports.storeTransactionBouncePhase = storeTransactionBouncePhase;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionComputePhase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionComputePhase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const ComputeSkipReason_1 = __webpack_require__(/*! ./ComputeSkipReason */ "./node_modules/@ton/core/dist/types/ComputeSkipReason.js");
function loadTransactionComputePhase(slice) {
    // Skipped
    if (!slice.loadBit()) {
        let reason = (0, ComputeSkipReason_1.loadComputeSkipReason)(slice);
        return {
            type: 'skipped',
            reason
        };
    }
    let success = slice.loadBit();
    let messageStateUsed = slice.loadBit();
    let accountActivated = slice.loadBit();
    let gasFees = slice.loadCoins();
    const vmState = slice.loadRef().beginParse();
    let gasUsed = vmState.loadVarUintBig(3);
    let gasLimit = vmState.loadVarUintBig(3);
    let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : undefined;
    let mode = vmState.loadUint(8);
    let exitCode = vmState.loadInt(32);
    let exitArg = vmState.loadBit() ? vmState.loadInt(32) : undefined;
    let vmSteps = vmState.loadUint(32);
    let vmInitStateHash = vmState.loadUintBig(256);
    let vmFinalStateHash = vmState.loadUintBig(256);
    return {
        type: 'vm',
        success,
        messageStateUsed,
        accountActivated,
        gasFees,
        gasUsed,
        gasLimit,
        gasCredit,
        mode,
        exitCode,
        exitArg,
        vmSteps,
        vmInitStateHash,
        vmFinalStateHash
    };
}
exports.loadTransactionComputePhase = loadTransactionComputePhase;
function storeTransactionComputePhase(src) {
    return (builder) => {
        if (src.type === 'skipped') {
            builder.storeBit(0);
            builder.store((0, ComputeSkipReason_1.storeComputeSkipReason)(src.reason));
            return;
        }
        builder.storeBit(1);
        builder.storeBit(src.success);
        builder.storeBit(src.messageStateUsed);
        builder.storeBit(src.accountActivated);
        builder.storeCoins(src.gasFees);
        builder.storeRef((0, Builder_1.beginCell)()
            .storeVarUint(src.gasUsed, 3)
            .storeVarUint(src.gasLimit, 3)
            .store((b) => (src.gasCredit !== undefined && src.gasCredit !== null) ? b.storeBit(1).storeVarUint(src.gasCredit, 2) : b.storeBit(0))
            .storeUint(src.mode, 8)
            .storeInt(src.exitCode, 32)
            .store((b) => (src.exitArg !== undefined && src.exitArg !== null) ? b.storeBit(1).storeInt(src.exitArg, 32) : b.storeBit(0))
            .storeUint(src.vmSteps, 32)
            .storeUint(src.vmInitStateHash, 256)
            .storeUint(src.vmFinalStateHash, 256)
            .endCell());
    };
}
exports.storeTransactionComputePhase = storeTransactionComputePhase;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionCreditPhase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionCreditPhase.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = void 0;
const CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
function loadTransactionCreditPhase(slice) {
    const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : undefined;
    const credit = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
    return {
        dueFeesColelcted,
        credit
    };
}
exports.loadTransactionCreditPhase = loadTransactionCreditPhase;
function storeTransactionCreditPhase(src) {
    return (builder) => {
        if (src.dueFeesColelcted === null || src.dueFeesColelcted === undefined) {
            builder.storeBit(false);
        }
        else {
            builder.storeBit(true);
            builder.storeCoins(src.dueFeesColelcted);
        }
        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.credit));
    };
}
exports.storeTransactionCreditPhase = storeTransactionCreditPhase;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionDescription.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionDescription.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionDescription = exports.loadTransactionDescription = void 0;
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const SplitMergeInfo_1 = __webpack_require__(/*! ./SplitMergeInfo */ "./node_modules/@ton/core/dist/types/SplitMergeInfo.js");
const Transaction_1 = __webpack_require__(/*! ./Transaction */ "./node_modules/@ton/core/dist/types/Transaction.js");
const TransactionActionPhase_1 = __webpack_require__(/*! ./TransactionActionPhase */ "./node_modules/@ton/core/dist/types/TransactionActionPhase.js");
const TransactionBouncePhase_1 = __webpack_require__(/*! ./TransactionBouncePhase */ "./node_modules/@ton/core/dist/types/TransactionBouncePhase.js");
const TransactionComputePhase_1 = __webpack_require__(/*! ./TransactionComputePhase */ "./node_modules/@ton/core/dist/types/TransactionComputePhase.js");
const TransactionCreditPhase_1 = __webpack_require__(/*! ./TransactionCreditPhase */ "./node_modules/@ton/core/dist/types/TransactionCreditPhase.js");
const TransactionStoragePhase_1 = __webpack_require__(/*! ./TransactionStoragePhase */ "./node_modules/@ton/core/dist/types/TransactionStoragePhase.js");
function loadTransactionDescription(slice) {
    let type = slice.loadUint(4);
    if (type === 0x00) {
        const creditFirst = slice.loadBit();
        let storagePhase = undefined;
        if (slice.loadBit()) {
            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
        }
        let creditPhase = undefined;
        if (slice.loadBit()) {
            creditPhase = (0, TransactionCreditPhase_1.loadTransactionCreditPhase)(slice);
        }
        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
        let actionPhase = undefined;
        if (slice.loadBit()) {
            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
        }
        let aborted = slice.loadBit();
        let bouncePhase = undefined;
        if (slice.loadBit()) {
            bouncePhase = (0, TransactionBouncePhase_1.loadTransactionBouncePhase)(slice);
        }
        const destroyed = slice.loadBit();
        return {
            type: 'generic',
            creditFirst,
            storagePhase,
            creditPhase,
            computePhase,
            actionPhase,
            bouncePhase,
            aborted,
            destroyed
        };
    }
    if (type === 0x01) {
        return {
            type: 'storage',
            storagePhase: (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice)
        };
    }
    if (type === 0x2 || type === 0x03) {
        const isTock = type === 0x03;
        let storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
        let actionPhase = undefined;
        if (slice.loadBit()) {
            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
        }
        const aborted = slice.loadBit();
        const destroyed = slice.loadBit();
        return {
            type: 'tick-tock',
            isTock,
            storagePhase,
            computePhase,
            actionPhase,
            aborted,
            destroyed
        };
    }
    if (type === 0x04) {
        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
        let storagePhase = undefined;
        if (slice.loadBit()) {
            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
        }
        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
        let actionPhase = undefined;
        if (slice.loadBit()) {
            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
        }
        const aborted = slice.loadBit();
        const destroyed = slice.loadBit();
        return {
            type: 'split-prepare',
            splitInfo,
            storagePhase,
            computePhase,
            actionPhase,
            aborted,
            destroyed
        };
    }
    if (type === 0x05) {
        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
        let prepareTransaction = (0, Transaction_1.loadTransaction)(slice.loadRef().beginParse());
        const installed = slice.loadBit();
        return {
            type: 'split-install',
            splitInfo,
            prepareTransaction,
            installed
        };
    }
    throw Error(`Unsupported transaction description type ${type}`);
}
exports.loadTransactionDescription = loadTransactionDescription;
function storeTransactionDescription(src) {
    return (builder) => {
        if (src.type === 'generic') {
            builder.storeUint(0x00, 4);
            builder.storeBit(src.creditFirst);
            if (src.storagePhase) {
                builder.storeBit(true);
                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
            }
            else {
                builder.storeBit(false);
            }
            if (src.creditPhase) {
                builder.storeBit(true);
                builder.store((0, TransactionCreditPhase_1.storeTransactionCreditPhase)(src.creditPhase));
            }
            else {
                builder.storeBit(false);
            }
            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
            if (src.actionPhase) {
                builder.storeBit(true);
                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));
            }
            else {
                builder.storeBit(false);
            }
            builder.storeBit(src.aborted);
            if (src.bouncePhase) {
                builder.storeBit(true);
                builder.store((0, TransactionBouncePhase_1.storeTransactionBouncePhase)(src.bouncePhase));
            }
            else {
                builder.storeBit(false);
            }
            builder.storeBit(src.destroyed);
        }
        else if (src.type === 'storage') {
            builder.storeUint(0x01, 4);
            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
        }
        else if (src.type === 'tick-tock') {
            builder.storeUint(src.isTock ? 0x03 : 0x02, 4);
            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
            if (src.actionPhase) {
                builder.storeBit(true);
                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));
            }
            else {
                builder.storeBit(false);
            }
            builder.storeBit(src.aborted);
            builder.storeBit(src.destroyed);
        }
        else if (src.type === 'split-prepare') {
            builder.storeUint(0x04, 4);
            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));
            if (src.storagePhase) {
                builder.storeBit(true);
                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));
            }
            else {
                builder.storeBit(false);
            }
            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));
            if (src.actionPhase) {
                builder.storeBit(true);
                builder.store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase));
            }
            else {
                builder.storeBit(false);
            }
            builder.storeBit(src.aborted);
            builder.storeBit(src.destroyed);
        }
        else if (src.type === 'split-install') {
            builder.storeUint(0x05, 4);
            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));
            builder.storeRef((0, Builder_1.beginCell)().store((0, Transaction_1.storeTransaction)(src.prepareTransaction)));
            builder.storeBit(src.installed);
        }
        else {
            throw Error(`Unsupported transaction description type ${src.type}`);
        }
    };
}
exports.storeTransactionDescription = storeTransactionDescription;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/TransactionStoragePhase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/TransactionStoragePhase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = void 0;
const AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ "./node_modules/@ton/core/dist/types/AccountStatusChange.js");
function loadTransactionStoragePhase(slice) {
    const storageFeesCollected = slice.loadCoins();
    let storageFeesDue = undefined;
    if (slice.loadBit()) {
        storageFeesDue = slice.loadCoins();
    }
    const statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);
    return {
        storageFeesCollected,
        storageFeesDue,
        statusChange
    };
}
exports.loadTransactionStoragePhase = loadTransactionStoragePhase;
function storeTransactionsStoragePhase(src) {
    return (builder) => {
        builder.storeCoins(src.storageFeesCollected);
        if (src.storageFeesDue === null || src.storageFeesDue === undefined) {
            builder.storeBit(false);
        }
        else {
            builder.storeBit(true);
            builder.storeCoins(src.storageFeesDue);
        }
        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));
    };
}
exports.storeTransactionsStoragePhase = storeTransactionsStoragePhase;


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/_export.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/_export.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadSimpleLibrary = exports.loadShardStateUnsplit = exports.storeShardIdent = exports.loadShardIdent = exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = exports.storeShardAccount = exports.loadShardAccount = exports.ReserveMode = exports.SendMode = exports.storeMessageRelaxed = exports.loadMessageRelaxed = exports.storeMessage = exports.loadMessage = exports.loadMasterchainStateExtra = exports.storeHashUpdate = exports.loadHashUpdate = exports.storeExtraCurrency = exports.loadMaybeExtraCurrency = exports.loadExtraCurrency = exports.packExtraCurrencyDict = exports.packExtraCurrencyCell = exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = exports.storeCurrencyCollection = exports.loadCurrencyCollection = exports.storeComputeSkipReason = exports.loadComputeSkipReason = exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = exports.storeOutList = exports.loadOutList = exports.storeOutAction = exports.loadOutAction = exports.storeAccountStorage = exports.loadAccountStorage = exports.storeAccountStatusChange = exports.loadAccountStatusChange = exports.storeAccountStatus = exports.loadAccountStatus = exports.storeAccountState = exports.loadAccountState = exports.storeAccount = exports.loadAccount = exports.comment = exports.external = exports.internal = void 0;
exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = exports.storeTransactionDescription = exports.loadTransactionDescription = exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = exports.storeTransaction = exports.loadTransaction = exports.storeTickTock = exports.loadTickTock = exports.storeStorageUsedShort = exports.loadStorageUsedShort = exports.storeStorageUsed = exports.loadStorageUsed = exports.storeStorageInfo = exports.loadStorageInfo = exports.storeStateInit = exports.loadStateInit = exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = exports.storeLibRef = exports.loadLibRef = exports.storeSimpleLibrary = void 0;
var _helpers_1 = __webpack_require__(/*! ./_helpers */ "./node_modules/@ton/core/dist/types/_helpers.js");
Object.defineProperty(exports, "internal", ({ enumerable: true, get: function () { return _helpers_1.internal; } }));
Object.defineProperty(exports, "external", ({ enumerable: true, get: function () { return _helpers_1.external; } }));
Object.defineProperty(exports, "comment", ({ enumerable: true, get: function () { return _helpers_1.comment; } }));
var Account_1 = __webpack_require__(/*! ./Account */ "./node_modules/@ton/core/dist/types/Account.js");
Object.defineProperty(exports, "loadAccount", ({ enumerable: true, get: function () { return Account_1.loadAccount; } }));
Object.defineProperty(exports, "storeAccount", ({ enumerable: true, get: function () { return Account_1.storeAccount; } }));
var AccountState_1 = __webpack_require__(/*! ./AccountState */ "./node_modules/@ton/core/dist/types/AccountState.js");
Object.defineProperty(exports, "loadAccountState", ({ enumerable: true, get: function () { return AccountState_1.loadAccountState; } }));
Object.defineProperty(exports, "storeAccountState", ({ enumerable: true, get: function () { return AccountState_1.storeAccountState; } }));
var AccountStatus_1 = __webpack_require__(/*! ./AccountStatus */ "./node_modules/@ton/core/dist/types/AccountStatus.js");
Object.defineProperty(exports, "loadAccountStatus", ({ enumerable: true, get: function () { return AccountStatus_1.loadAccountStatus; } }));
Object.defineProperty(exports, "storeAccountStatus", ({ enumerable: true, get: function () { return AccountStatus_1.storeAccountStatus; } }));
var AccountStatusChange_1 = __webpack_require__(/*! ./AccountStatusChange */ "./node_modules/@ton/core/dist/types/AccountStatusChange.js");
Object.defineProperty(exports, "loadAccountStatusChange", ({ enumerable: true, get: function () { return AccountStatusChange_1.loadAccountStatusChange; } }));
Object.defineProperty(exports, "storeAccountStatusChange", ({ enumerable: true, get: function () { return AccountStatusChange_1.storeAccountStatusChange; } }));
var AccountStorage_1 = __webpack_require__(/*! ./AccountStorage */ "./node_modules/@ton/core/dist/types/AccountStorage.js");
Object.defineProperty(exports, "loadAccountStorage", ({ enumerable: true, get: function () { return AccountStorage_1.loadAccountStorage; } }));
Object.defineProperty(exports, "storeAccountStorage", ({ enumerable: true, get: function () { return AccountStorage_1.storeAccountStorage; } }));
var OutList_1 = __webpack_require__(/*! ./OutList */ "./node_modules/@ton/core/dist/types/OutList.js");
Object.defineProperty(exports, "loadOutAction", ({ enumerable: true, get: function () { return OutList_1.loadOutAction; } }));
Object.defineProperty(exports, "storeOutAction", ({ enumerable: true, get: function () { return OutList_1.storeOutAction; } }));
Object.defineProperty(exports, "loadOutList", ({ enumerable: true, get: function () { return OutList_1.loadOutList; } }));
Object.defineProperty(exports, "storeOutList", ({ enumerable: true, get: function () { return OutList_1.storeOutList; } }));
var CommonMessageInfo_1 = __webpack_require__(/*! ./CommonMessageInfo */ "./node_modules/@ton/core/dist/types/CommonMessageInfo.js");
Object.defineProperty(exports, "loadCommonMessageInfo", ({ enumerable: true, get: function () { return CommonMessageInfo_1.loadCommonMessageInfo; } }));
Object.defineProperty(exports, "storeCommonMessageInfo", ({ enumerable: true, get: function () { return CommonMessageInfo_1.storeCommonMessageInfo; } }));
var CommonMessageInfoRelaxed_1 = __webpack_require__(/*! ./CommonMessageInfoRelaxed */ "./node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js");
Object.defineProperty(exports, "loadCommonMessageInfoRelaxed", ({ enumerable: true, get: function () { return CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed; } }));
Object.defineProperty(exports, "storeCommonMessageInfoRelaxed", ({ enumerable: true, get: function () { return CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed; } }));
var ComputeSkipReason_1 = __webpack_require__(/*! ./ComputeSkipReason */ "./node_modules/@ton/core/dist/types/ComputeSkipReason.js");
Object.defineProperty(exports, "loadComputeSkipReason", ({ enumerable: true, get: function () { return ComputeSkipReason_1.loadComputeSkipReason; } }));
Object.defineProperty(exports, "storeComputeSkipReason", ({ enumerable: true, get: function () { return ComputeSkipReason_1.storeComputeSkipReason; } }));
var CurrencyCollection_1 = __webpack_require__(/*! ./CurrencyCollection */ "./node_modules/@ton/core/dist/types/CurrencyCollection.js");
Object.defineProperty(exports, "loadCurrencyCollection", ({ enumerable: true, get: function () { return CurrencyCollection_1.loadCurrencyCollection; } }));
Object.defineProperty(exports, "storeCurrencyCollection", ({ enumerable: true, get: function () { return CurrencyCollection_1.storeCurrencyCollection; } }));
var DepthBalanceInfo_1 = __webpack_require__(/*! ./DepthBalanceInfo */ "./node_modules/@ton/core/dist/types/DepthBalanceInfo.js");
Object.defineProperty(exports, "loadDepthBalanceInfo", ({ enumerable: true, get: function () { return DepthBalanceInfo_1.loadDepthBalanceInfo; } }));
Object.defineProperty(exports, "storeDepthBalanceInfo", ({ enumerable: true, get: function () { return DepthBalanceInfo_1.storeDepthBalanceInfo; } }));
var ExtraCurrency_1 = __webpack_require__(/*! ./ExtraCurrency */ "./node_modules/@ton/core/dist/types/ExtraCurrency.js");
Object.defineProperty(exports, "packExtraCurrencyCell", ({ enumerable: true, get: function () { return ExtraCurrency_1.packExtraCurrencyCell; } }));
Object.defineProperty(exports, "packExtraCurrencyDict", ({ enumerable: true, get: function () { return ExtraCurrency_1.packExtraCurrencyDict; } }));
Object.defineProperty(exports, "loadExtraCurrency", ({ enumerable: true, get: function () { return ExtraCurrency_1.loadExtraCurrency; } }));
Object.defineProperty(exports, "loadMaybeExtraCurrency", ({ enumerable: true, get: function () { return ExtraCurrency_1.loadMaybeExtraCurrency; } }));
Object.defineProperty(exports, "storeExtraCurrency", ({ enumerable: true, get: function () { return ExtraCurrency_1.storeExtraCurrency; } }));
var HashUpdate_1 = __webpack_require__(/*! ./HashUpdate */ "./node_modules/@ton/core/dist/types/HashUpdate.js");
Object.defineProperty(exports, "loadHashUpdate", ({ enumerable: true, get: function () { return HashUpdate_1.loadHashUpdate; } }));
Object.defineProperty(exports, "storeHashUpdate", ({ enumerable: true, get: function () { return HashUpdate_1.storeHashUpdate; } }));
var MasterchainStateExtra_1 = __webpack_require__(/*! ./MasterchainStateExtra */ "./node_modules/@ton/core/dist/types/MasterchainStateExtra.js");
Object.defineProperty(exports, "loadMasterchainStateExtra", ({ enumerable: true, get: function () { return MasterchainStateExtra_1.loadMasterchainStateExtra; } }));
var Message_1 = __webpack_require__(/*! ./Message */ "./node_modules/@ton/core/dist/types/Message.js");
Object.defineProperty(exports, "loadMessage", ({ enumerable: true, get: function () { return Message_1.loadMessage; } }));
Object.defineProperty(exports, "storeMessage", ({ enumerable: true, get: function () { return Message_1.storeMessage; } }));
var MessageRelaxed_1 = __webpack_require__(/*! ./MessageRelaxed */ "./node_modules/@ton/core/dist/types/MessageRelaxed.js");
Object.defineProperty(exports, "loadMessageRelaxed", ({ enumerable: true, get: function () { return MessageRelaxed_1.loadMessageRelaxed; } }));
Object.defineProperty(exports, "storeMessageRelaxed", ({ enumerable: true, get: function () { return MessageRelaxed_1.storeMessageRelaxed; } }));
var SendMode_1 = __webpack_require__(/*! ./SendMode */ "./node_modules/@ton/core/dist/types/SendMode.js");
Object.defineProperty(exports, "SendMode", ({ enumerable: true, get: function () { return SendMode_1.SendMode; } }));
var ReserveMode_1 = __webpack_require__(/*! ./ReserveMode */ "./node_modules/@ton/core/dist/types/ReserveMode.js");
Object.defineProperty(exports, "ReserveMode", ({ enumerable: true, get: function () { return ReserveMode_1.ReserveMode; } }));
var ShardAccount_1 = __webpack_require__(/*! ./ShardAccount */ "./node_modules/@ton/core/dist/types/ShardAccount.js");
Object.defineProperty(exports, "loadShardAccount", ({ enumerable: true, get: function () { return ShardAccount_1.loadShardAccount; } }));
Object.defineProperty(exports, "storeShardAccount", ({ enumerable: true, get: function () { return ShardAccount_1.storeShardAccount; } }));
var ShardAccounts_1 = __webpack_require__(/*! ./ShardAccounts */ "./node_modules/@ton/core/dist/types/ShardAccounts.js");
Object.defineProperty(exports, "ShardAccountRefValue", ({ enumerable: true, get: function () { return ShardAccounts_1.ShardAccountRefValue; } }));
Object.defineProperty(exports, "loadShardAccounts", ({ enumerable: true, get: function () { return ShardAccounts_1.loadShardAccounts; } }));
Object.defineProperty(exports, "storeShardAccounts", ({ enumerable: true, get: function () { return ShardAccounts_1.storeShardAccounts; } }));
var ShardIdent_1 = __webpack_require__(/*! ./ShardIdent */ "./node_modules/@ton/core/dist/types/ShardIdent.js");
Object.defineProperty(exports, "loadShardIdent", ({ enumerable: true, get: function () { return ShardIdent_1.loadShardIdent; } }));
Object.defineProperty(exports, "storeShardIdent", ({ enumerable: true, get: function () { return ShardIdent_1.storeShardIdent; } }));
var ShardStateUnsplit_1 = __webpack_require__(/*! ./ShardStateUnsplit */ "./node_modules/@ton/core/dist/types/ShardStateUnsplit.js");
Object.defineProperty(exports, "loadShardStateUnsplit", ({ enumerable: true, get: function () { return ShardStateUnsplit_1.loadShardStateUnsplit; } }));
var SimpleLibrary_1 = __webpack_require__(/*! ./SimpleLibrary */ "./node_modules/@ton/core/dist/types/SimpleLibrary.js");
Object.defineProperty(exports, "loadSimpleLibrary", ({ enumerable: true, get: function () { return SimpleLibrary_1.loadSimpleLibrary; } }));
Object.defineProperty(exports, "storeSimpleLibrary", ({ enumerable: true, get: function () { return SimpleLibrary_1.storeSimpleLibrary; } }));
var LibRef_1 = __webpack_require__(/*! ./LibRef */ "./node_modules/@ton/core/dist/types/LibRef.js");
Object.defineProperty(exports, "loadLibRef", ({ enumerable: true, get: function () { return LibRef_1.loadLibRef; } }));
Object.defineProperty(exports, "storeLibRef", ({ enumerable: true, get: function () { return LibRef_1.storeLibRef; } }));
var SplitMergeInfo_1 = __webpack_require__(/*! ./SplitMergeInfo */ "./node_modules/@ton/core/dist/types/SplitMergeInfo.js");
Object.defineProperty(exports, "loadSplitMergeInfo", ({ enumerable: true, get: function () { return SplitMergeInfo_1.loadSplitMergeInfo; } }));
Object.defineProperty(exports, "storeSplitMergeInfo", ({ enumerable: true, get: function () { return SplitMergeInfo_1.storeSplitMergeInfo; } }));
var StateInit_1 = __webpack_require__(/*! ./StateInit */ "./node_modules/@ton/core/dist/types/StateInit.js");
Object.defineProperty(exports, "loadStateInit", ({ enumerable: true, get: function () { return StateInit_1.loadStateInit; } }));
Object.defineProperty(exports, "storeStateInit", ({ enumerable: true, get: function () { return StateInit_1.storeStateInit; } }));
var StorageInto_1 = __webpack_require__(/*! ./StorageInto */ "./node_modules/@ton/core/dist/types/StorageInto.js");
Object.defineProperty(exports, "loadStorageInfo", ({ enumerable: true, get: function () { return StorageInto_1.loadStorageInfo; } }));
Object.defineProperty(exports, "storeStorageInfo", ({ enumerable: true, get: function () { return StorageInto_1.storeStorageInfo; } }));
var StorageUsed_1 = __webpack_require__(/*! ./StorageUsed */ "./node_modules/@ton/core/dist/types/StorageUsed.js");
Object.defineProperty(exports, "loadStorageUsed", ({ enumerable: true, get: function () { return StorageUsed_1.loadStorageUsed; } }));
Object.defineProperty(exports, "storeStorageUsed", ({ enumerable: true, get: function () { return StorageUsed_1.storeStorageUsed; } }));
var StorageUsedShort_1 = __webpack_require__(/*! ./StorageUsedShort */ "./node_modules/@ton/core/dist/types/StorageUsedShort.js");
Object.defineProperty(exports, "loadStorageUsedShort", ({ enumerable: true, get: function () { return StorageUsedShort_1.loadStorageUsedShort; } }));
Object.defineProperty(exports, "storeStorageUsedShort", ({ enumerable: true, get: function () { return StorageUsedShort_1.storeStorageUsedShort; } }));
var TickTock_1 = __webpack_require__(/*! ./TickTock */ "./node_modules/@ton/core/dist/types/TickTock.js");
Object.defineProperty(exports, "loadTickTock", ({ enumerable: true, get: function () { return TickTock_1.loadTickTock; } }));
Object.defineProperty(exports, "storeTickTock", ({ enumerable: true, get: function () { return TickTock_1.storeTickTock; } }));
var Transaction_1 = __webpack_require__(/*! ./Transaction */ "./node_modules/@ton/core/dist/types/Transaction.js");
Object.defineProperty(exports, "loadTransaction", ({ enumerable: true, get: function () { return Transaction_1.loadTransaction; } }));
Object.defineProperty(exports, "storeTransaction", ({ enumerable: true, get: function () { return Transaction_1.storeTransaction; } }));
var TransactionActionPhase_1 = __webpack_require__(/*! ./TransactionActionPhase */ "./node_modules/@ton/core/dist/types/TransactionActionPhase.js");
Object.defineProperty(exports, "loadTransactionActionPhase", ({ enumerable: true, get: function () { return TransactionActionPhase_1.loadTransactionActionPhase; } }));
Object.defineProperty(exports, "storeTransactionActionPhase", ({ enumerable: true, get: function () { return TransactionActionPhase_1.storeTransactionActionPhase; } }));
var TransactionBouncePhase_1 = __webpack_require__(/*! ./TransactionBouncePhase */ "./node_modules/@ton/core/dist/types/TransactionBouncePhase.js");
Object.defineProperty(exports, "loadTransactionBouncePhase", ({ enumerable: true, get: function () { return TransactionBouncePhase_1.loadTransactionBouncePhase; } }));
Object.defineProperty(exports, "storeTransactionBouncePhase", ({ enumerable: true, get: function () { return TransactionBouncePhase_1.storeTransactionBouncePhase; } }));
var TransactionComputePhase_1 = __webpack_require__(/*! ./TransactionComputePhase */ "./node_modules/@ton/core/dist/types/TransactionComputePhase.js");
Object.defineProperty(exports, "loadTransactionComputePhase", ({ enumerable: true, get: function () { return TransactionComputePhase_1.loadTransactionComputePhase; } }));
Object.defineProperty(exports, "storeTransactionComputePhase", ({ enumerable: true, get: function () { return TransactionComputePhase_1.storeTransactionComputePhase; } }));
var TransactionCreditPhase_1 = __webpack_require__(/*! ./TransactionCreditPhase */ "./node_modules/@ton/core/dist/types/TransactionCreditPhase.js");
Object.defineProperty(exports, "loadTransactionCreditPhase", ({ enumerable: true, get: function () { return TransactionCreditPhase_1.loadTransactionCreditPhase; } }));
Object.defineProperty(exports, "storeTransactionCreditPhase", ({ enumerable: true, get: function () { return TransactionCreditPhase_1.storeTransactionCreditPhase; } }));
var TransactionDescription_1 = __webpack_require__(/*! ./TransactionDescription */ "./node_modules/@ton/core/dist/types/TransactionDescription.js");
Object.defineProperty(exports, "loadTransactionDescription", ({ enumerable: true, get: function () { return TransactionDescription_1.loadTransactionDescription; } }));
Object.defineProperty(exports, "storeTransactionDescription", ({ enumerable: true, get: function () { return TransactionDescription_1.storeTransactionDescription; } }));
var TransactionStoragePhase_1 = __webpack_require__(/*! ./TransactionStoragePhase */ "./node_modules/@ton/core/dist/types/TransactionStoragePhase.js");
Object.defineProperty(exports, "loadTransactionStoragePhase", ({ enumerable: true, get: function () { return TransactionStoragePhase_1.loadTransactionStoragePhase; } }));
Object.defineProperty(exports, "storeTransactionsStoragePhase", ({ enumerable: true, get: function () { return TransactionStoragePhase_1.storeTransactionsStoragePhase; } }));


/***/ }),

/***/ "./node_modules/@ton/core/dist/types/_helpers.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/core/dist/types/_helpers.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.comment = exports.external = exports.internal = void 0;
const Address_1 = __webpack_require__(/*! ../address/Address */ "./node_modules/@ton/core/dist/address/Address.js");
const Cell_1 = __webpack_require__(/*! ../boc/Cell */ "./node_modules/@ton/core/dist/boc/Cell.js");
const Builder_1 = __webpack_require__(/*! ../boc/Builder */ "./node_modules/@ton/core/dist/boc/Builder.js");
const convert_1 = __webpack_require__(/*! ../utils/convert */ "./node_modules/@ton/core/dist/utils/convert.js");
const ExtraCurrency_1 = __webpack_require__(/*! ./ExtraCurrency */ "./node_modules/@ton/core/dist/types/ExtraCurrency.js");
function internal(src) {
    // Resolve bounce
    let bounce = true;
    if (src.bounce !== null && src.bounce !== undefined) {
        bounce = src.bounce;
    }
    // Resolve address
    let to;
    if (typeof src.to === 'string') {
        to = Address_1.Address.parse(src.to);
    }
    else if (Address_1.Address.isAddress(src.to)) {
        to = src.to;
    }
    else {
        throw new Error(`Invalid address ${src.to}`);
    }
    // Resolve value
    let value;
    if (typeof src.value === 'string') {
        value = (0, convert_1.toNano)(src.value);
    }
    else {
        value = src.value;
    }
    let other;
    if (src.extracurrency) {
        // Resolve value
        other = (0, ExtraCurrency_1.packExtraCurrencyDict)(src.extracurrency);
    }
    // Resolve body
    let body = Cell_1.Cell.EMPTY;
    if (typeof src.body === 'string') {
        body = (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src.body).endCell();
    }
    else if (src.body) {
        body = src.body;
    }
    // Create message
    return {
        info: {
            type: 'internal',
            dest: to,
            value: { coins: value, other },
            bounce,
            ihrDisabled: true,
            bounced: false,
            ihrFee: 0n,
            forwardFee: 0n,
            createdAt: 0,
            createdLt: 0n
        },
        init: src.init ?? undefined,
        body: body
    };
}
exports.internal = internal;
function external(src) {
    // Resolve address
    let to;
    if (typeof src.to === 'string') {
        to = Address_1.Address.parse(src.to);
    }
    else if (Address_1.Address.isAddress(src.to)) {
        to = src.to;
    }
    else {
        throw new Error(`Invalid address ${src.to}`);
    }
    return {
        info: {
            type: 'external-in',
            dest: to,
            importFee: 0n
        },
        init: src.init ?? undefined,
        body: src.body || Cell_1.Cell.EMPTY
    };
}
exports.external = external;
function comment(src) {
    return (0, Builder_1.beginCell)()
        .storeUint(0, 32)
        .storeStringTail(src)
        .endCell();
}
exports.comment = comment;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/base32.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/base32.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.base32Decode = exports.base32Encode = void 0;
const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';
function base32Encode(buffer) {
    const length = buffer.byteLength;
    let bits = 0;
    let value = 0;
    let output = '';
    for (let i = 0; i < length; i++) {
        value = (value << 8) | buffer[i];
        bits += 8;
        while (bits >= 5) {
            output += alphabet[(value >>> (bits - 5)) & 31];
            bits -= 5;
        }
    }
    if (bits > 0) {
        output += alphabet[(value << (5 - bits)) & 31];
    }
    return output;
}
exports.base32Encode = base32Encode;
function readChar(alphabet, char) {
    const idx = alphabet.indexOf(char);
    if (idx === -1) {
        throw new Error('Invalid character found: ' + char);
    }
    return idx;
}
function base32Decode(input) {
    let cleanedInput;
    cleanedInput = input.toLowerCase();
    const { length } = cleanedInput;
    let bits = 0;
    let value = 0;
    let index = 0;
    const output = Buffer.alloc(((length * 5) / 8) | 0);
    for (let i = 0; i < length; i++) {
        value = (value << 5) | readChar(alphabet, cleanedInput[i]);
        bits += 5;
        if (bits >= 8) {
            output[index++] = (value >>> (bits - 8)) & 255;
            bits -= 8;
        }
    }
    return output;
}
exports.base32Decode = base32Decode;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/bitsForNumber.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/bitsForNumber.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bitsForNumber = void 0;
function bitsForNumber(src, mode) {
    let v = BigInt(src);
    // Handle negative values
    if (mode === 'int') {
        // Corner case for zero or -1 value
        if (v === 0n || v === -1n) {
            return 1;
        }
        let v2 = v > 0 ? v : -v;
        return (v2.toString(2).length + 1 /* Sign bit */);
    }
    else if (mode === 'uint') {
        if (v < 0) {
            throw Error(`value is negative. Got ${src}`);
        }
        return (v.toString(2).length);
    }
    else {
        throw Error(`invalid mode. Got ${mode}`);
    }
}
exports.bitsForNumber = bitsForNumber;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/convert.js":
/*!******************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/convert.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fromNano = exports.toNano = void 0;
function toNano(src) {
    if (typeof src === 'bigint') {
        return src * 1000000000n;
    }
    else {
        if (typeof src === 'number') {
            if (!Number.isFinite(src)) {
                throw Error('Invalid number');
            }
            if (Math.log10(src) <= 6) {
                src = src.toLocaleString('en', { minimumFractionDigits: 9, useGrouping: false });
            }
            else if (src - Math.trunc(src) === 0) {
                src = src.toLocaleString('en', { maximumFractionDigits: 0, useGrouping: false });
            }
            else {
                throw Error('Not enough precision for a number value. Use string value instead');
            }
        }
        // Check sign
        let neg = false;
        while (src.startsWith('-')) {
            neg = !neg;
            src = src.slice(1);
        }
        // Split string
        if (src === '.') {
            throw Error('Invalid number');
        }
        let parts = src.split('.');
        if (parts.length > 2) {
            throw Error('Invalid number');
        }
        // Prepare parts
        let whole = parts[0];
        let frac = parts[1];
        if (!whole) {
            whole = '0';
        }
        if (!frac) {
            frac = '0';
        }
        if (frac.length > 9) {
            throw Error('Invalid number');
        }
        while (frac.length < 9) {
            frac += '0';
        }
        // Convert
        let r = BigInt(whole) * 1000000000n + BigInt(frac);
        if (neg) {
            r = -r;
        }
        return r;
    }
}
exports.toNano = toNano;
function fromNano(src) {
    let v = BigInt(src);
    let neg = false;
    if (v < 0) {
        neg = true;
        v = -v;
    }
    // Convert fraction
    let frac = v % 1000000000n;
    let facStr = frac.toString();
    while (facStr.length < 9) {
        facStr = '0' + facStr;
    }
    facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    // Convert whole
    let whole = v / 1000000000n;
    let wholeStr = whole.toString();
    // Value
    let value = `${wholeStr}${facStr === '0' ? '' : `.${facStr}`}`;
    if (neg) {
        value = '-' + value;
    }
    return value;
}
exports.fromNano = fromNano;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/crc16.js":
/*!****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/crc16.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.crc16 = void 0;
function crc16(data) {
    const poly = 0x1021;
    let reg = 0;
    const message = Buffer.alloc(data.length + 2);
    message.set(data);
    for (let byte of message) {
        let mask = 0x80;
        while (mask > 0) {
            reg <<= 1;
            if (byte & mask) {
                reg += 1;
            }
            mask >>= 1;
            if (reg > 0xffff) {
                reg &= 0xffff;
                reg ^= poly;
            }
        }
    }
    return Buffer.from([Math.floor(reg / 256), reg % 256]);
}
exports.crc16 = crc16;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/crc32c.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/crc32c.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.crc32c = void 0;
const POLY = 0x82f63b78;
function crc32c(source) {
    let crc = 0 ^ 0xffffffff;
    for (let n = 0; n < source.length; n++) {
        crc ^= source[n];
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;
    }
    crc = crc ^ 0xffffffff;
    // Convert endianness
    let res = Buffer.alloc(4);
    res.writeInt32LE(crc);
    return res;
}
exports.crc32c = crc32c;


/***/ }),

/***/ "./node_modules/@ton/core/dist/utils/getMethodId.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/core/dist/utils/getMethodId.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMethodId = void 0;
const TABLE = new Int16Array([
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
    0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
    0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
    0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
    0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
    0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
]);
function crc16(data) {
    if (!(data instanceof Buffer)) {
        data = Buffer.from(data);
    }
    let crc = 0;
    for (let index = 0; index < data.length; index++) {
        const byte = data[index];
        crc = (TABLE[((crc >> 8) ^ byte) & 0xff] ^ (crc << 8)) & 0xffff;
    }
    return crc;
}
function getMethodId(name) {
    return (crc16(name) & 0xffff) | 0x10000;
}
exports.getMethodId = getMethodId;


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sha512 = exports.sha256 = exports.pbkdf2_sha512 = exports.hmac_sha512 = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
var getSecureRandom_1 = __webpack_require__(/*! ./node/getSecureRandom */ "./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js");
Object.defineProperty(exports, "getSecureRandomBytes", ({ enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomBytes; } }));
Object.defineProperty(exports, "getSecureRandomWords", ({ enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomWords; } }));
var hmac_sha512_1 = __webpack_require__(/*! ./node/hmac_sha512 */ "./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js");
Object.defineProperty(exports, "hmac_sha512", ({ enumerable: true, get: function () { return hmac_sha512_1.hmac_sha512; } }));
var pbkdf2_sha512_1 = __webpack_require__(/*! ./node/pbkdf2_sha512 */ "./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js");
Object.defineProperty(exports, "pbkdf2_sha512", ({ enumerable: true, get: function () { return pbkdf2_sha512_1.pbkdf2_sha512; } }));
var sha256_1 = __webpack_require__(/*! ./node/sha256 */ "./node_modules/@ton/crypto-primitives/dist/node/sha256.js");
Object.defineProperty(exports, "sha256", ({ enumerable: true, get: function () { return sha256_1.sha256; } }));
var sha512_1 = __webpack_require__(/*! ./node/sha512 */ "./node_modules/@ton/crypto-primitives/dist/node/sha512.js");
Object.defineProperty(exports, "sha512", ({ enumerable: true, get: function () { return sha512_1.sha512; } }));


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/getSecureRandom.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "crypto"));
function getSecureRandomBytes(size) {
    return crypto_1.default.randomBytes(size);
}
exports.getSecureRandomBytes = getSecureRandomBytes;
function getSecureRandomWords(size) {
    let res = new Uint16Array(size);
    crypto_1.default.randomFillSync(res);
    return res;
}
exports.getSecureRandomWords = getSecureRandomWords;


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/hmac_sha512.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hmac_sha512 = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "crypto"));
async function hmac_sha512(key, data) {
    let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;
    let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;
    return crypto_1.default.createHmac('sha512', keyBuffer)
        .update(dataBuffer)
        .digest();
}
exports.hmac_sha512 = hmac_sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/pbkdf2_sha512.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pbkdf2_sha512 = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "crypto"));
function pbkdf2_sha512(key, salt, iterations, keyLen) {
    return new Promise((resolve, reject) => crypto_1.default.pbkdf2(key, salt, iterations, keyLen, 'sha512', (error, derivedKey) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(derivedKey);
        }
    }));
}
exports.pbkdf2_sha512 = pbkdf2_sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node/sha256.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/sha256.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sha256 = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "crypto"));
async function sha256(source) {
    return crypto_1.default.createHash('sha256').update(source).digest();
}
exports.sha256 = sha256;


/***/ }),

/***/ "./node_modules/@ton/crypto-primitives/dist/node/sha512.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto-primitives/dist/node/sha512.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sha512 = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "crypto"));
async function sha512(source) {
    return crypto_1.default.createHash('sha512').update(source).digest();
}
exports.sha512 = sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/hd/ed25519.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/ed25519.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = void 0;
const hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js");
const ED25519_CURVE = 'ed25519 seed';
const HARDENED_OFFSET = 0x80000000;
async function getED25519MasterKeyFromSeed(seed) {
    const I = await (0, hmac_sha512_1.hmac_sha512)(ED25519_CURVE, seed);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;
;
async function deriveED25519HardenedKey(parent, index) {
    if (index >= HARDENED_OFFSET) {
        throw Error('Key index must be less than offset');
    }
    // Key Derive Path: 0x00 + parent.key + index;
    const indexBuffer = Buffer.alloc(4);
    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);
    const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]);
    // Derive key
    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.deriveED25519HardenedKey = deriveED25519HardenedKey;
;
async function deriveEd25519Path(seed, path) {
    let state = await getED25519MasterKeyFromSeed(seed);
    let remaining = [...path];
    while (remaining.length > 0) {
        let index = remaining[0];
        remaining = remaining.slice(1);
        state = await deriveED25519HardenedKey(state, index);
    }
    return state.key;
}
exports.deriveEd25519Path = deriveEd25519Path;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/hd/mnemonics.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/mnemonics.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deriveMnemonicsPath = exports.deriveMnemonicHardenedKey = exports.getMnemonicsMasterKeyFromSeed = void 0;
const mnemonic_1 = __webpack_require__(/*! ../mnemonic/mnemonic */ "./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js");
const hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js");
const HARDENED_OFFSET = 0x80000000;
const MNEMONICS_SEED = 'TON Mnemonics HD seed';
async function getMnemonicsMasterKeyFromSeed(seed) {
    const I = await (0, hmac_sha512_1.hmac_sha512)(MNEMONICS_SEED, seed);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;
;
async function deriveMnemonicHardenedKey(parent, index) {
    if (index >= HARDENED_OFFSET) {
        throw Error('Key index must be less than offset');
    }
    // Key Derive Path: 0x00 + parent.key + index;
    const indexBuffer = Buffer.alloc(4);
    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);
    const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]);
    // Derive key
    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;
async function deriveMnemonicsPath(seed, path, wordsCount = 24, password) {
    let state = await getMnemonicsMasterKeyFromSeed(seed);
    let remaining = [...path];
    while (remaining.length > 0) {
        let index = remaining[0];
        remaining = remaining.slice(1);
        state = await deriveMnemonicHardenedKey(state, index);
    }
    return await (0, mnemonic_1.mnemonicFromRandomSeed)(state.key, wordsCount, password);
}
exports.deriveMnemonicsPath = deriveMnemonicsPath;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/hd/symmetric.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/hd/symmetric.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = void 0;
const hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js");
const SYMMETRIC_SEED = 'Symmetric key seed';
async function getSymmetricMasterKeyFromSeed(seed) {
    const I = await (0, hmac_sha512_1.hmac_sha512)(SYMMETRIC_SEED, seed);
    const IL = I.slice(32);
    const IR = I.slice(0, 32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;
;
async function deriveSymmetricHardenedKey(parent, offset) {
    // Prepare data
    const data = Buffer.concat([Buffer.alloc(1, 0), Buffer.from(offset)]);
    // Derive key
    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);
    const IL = I.slice(32);
    const IR = I.slice(0, 32);
    return {
        key: IL,
        chainCode: IR,
    };
}
exports.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;
async function deriveSymmetricPath(seed, path) {
    let state = await getSymmetricMasterKeyFromSeed(seed);
    let remaining = [...path];
    while (remaining.length > 0) {
        let index = remaining[0];
        remaining = remaining.slice(1);
        state = await deriveSymmetricHardenedKey(state, index);
    }
    return state.key;
}
exports.deriveSymmetricPath = deriveSymmetricPath;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMnemonicsMasterKeyFromSeed = exports.deriveMnemonicHardenedKey = exports.deriveMnemonicsPath = exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = exports.signVerify = exports.sign = exports.keyPairFromSecretKey = exports.keyPairFromSeed = exports.openBox = exports.sealBox = exports.mnemonicWordList = exports.mnemonicToHDSeed = exports.mnemonicToSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicValidate = exports.mnemonicNew = exports.newSecurePassphrase = exports.newSecureWords = exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = exports.hmac_sha512 = exports.pbkdf2_sha512 = exports.sha512_sync = exports.sha512 = exports.sha256_sync = exports.sha256 = void 0;
var sha256_1 = __webpack_require__(/*! ./primitives/sha256 */ "./node_modules/@ton/crypto/dist/primitives/sha256.js");
Object.defineProperty(exports, "sha256", ({ enumerable: true, get: function () { return sha256_1.sha256; } }));
Object.defineProperty(exports, "sha256_sync", ({ enumerable: true, get: function () { return sha256_1.sha256_sync; } }));
var sha512_1 = __webpack_require__(/*! ./primitives/sha512 */ "./node_modules/@ton/crypto/dist/primitives/sha512.js");
Object.defineProperty(exports, "sha512", ({ enumerable: true, get: function () { return sha512_1.sha512; } }));
Object.defineProperty(exports, "sha512_sync", ({ enumerable: true, get: function () { return sha512_1.sha512_sync; } }));
var pbkdf2_sha512_1 = __webpack_require__(/*! ./primitives/pbkdf2_sha512 */ "./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js");
Object.defineProperty(exports, "pbkdf2_sha512", ({ enumerable: true, get: function () { return pbkdf2_sha512_1.pbkdf2_sha512; } }));
var hmac_sha512_1 = __webpack_require__(/*! ./primitives/hmac_sha512 */ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js");
Object.defineProperty(exports, "hmac_sha512", ({ enumerable: true, get: function () { return hmac_sha512_1.hmac_sha512; } }));
var getSecureRandom_1 = __webpack_require__(/*! ./primitives/getSecureRandom */ "./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js");
Object.defineProperty(exports, "getSecureRandomBytes", ({ enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomBytes; } }));
Object.defineProperty(exports, "getSecureRandomWords", ({ enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomWords; } }));
Object.defineProperty(exports, "getSecureRandomNumber", ({ enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomNumber; } }));
var newSecureWords_1 = __webpack_require__(/*! ./passwords/newSecureWords */ "./node_modules/@ton/crypto/dist/passwords/newSecureWords.js");
Object.defineProperty(exports, "newSecureWords", ({ enumerable: true, get: function () { return newSecureWords_1.newSecureWords; } }));
var newSecurePassphrase_1 = __webpack_require__(/*! ./passwords/newSecurePassphrase */ "./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js");
Object.defineProperty(exports, "newSecurePassphrase", ({ enumerable: true, get: function () { return newSecurePassphrase_1.newSecurePassphrase; } }));
var mnemonic_1 = __webpack_require__(/*! ./mnemonic/mnemonic */ "./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js");
Object.defineProperty(exports, "mnemonicNew", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicNew; } }));
Object.defineProperty(exports, "mnemonicValidate", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicValidate; } }));
Object.defineProperty(exports, "mnemonicToPrivateKey", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToPrivateKey; } }));
Object.defineProperty(exports, "mnemonicToWalletKey", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToWalletKey; } }));
Object.defineProperty(exports, "mnemonicToSeed", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToSeed; } }));
Object.defineProperty(exports, "mnemonicToHDSeed", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToHDSeed; } }));
var wordlist_1 = __webpack_require__(/*! ./mnemonic/wordlist */ "./node_modules/@ton/crypto/dist/mnemonic/wordlist.js");
Object.defineProperty(exports, "mnemonicWordList", ({ enumerable: true, get: function () { return wordlist_1.wordlist; } }));
var nacl_1 = __webpack_require__(/*! ./primitives/nacl */ "./node_modules/@ton/crypto/dist/primitives/nacl.js");
Object.defineProperty(exports, "sealBox", ({ enumerable: true, get: function () { return nacl_1.sealBox; } }));
Object.defineProperty(exports, "openBox", ({ enumerable: true, get: function () { return nacl_1.openBox; } }));
var nacl_2 = __webpack_require__(/*! ./primitives/nacl */ "./node_modules/@ton/crypto/dist/primitives/nacl.js");
Object.defineProperty(exports, "keyPairFromSeed", ({ enumerable: true, get: function () { return nacl_2.keyPairFromSeed; } }));
Object.defineProperty(exports, "keyPairFromSecretKey", ({ enumerable: true, get: function () { return nacl_2.keyPairFromSecretKey; } }));
Object.defineProperty(exports, "sign", ({ enumerable: true, get: function () { return nacl_2.sign; } }));
Object.defineProperty(exports, "signVerify", ({ enumerable: true, get: function () { return nacl_2.signVerify; } }));
var ed25519_1 = __webpack_require__(/*! ./hd/ed25519 */ "./node_modules/@ton/crypto/dist/hd/ed25519.js");
Object.defineProperty(exports, "getED25519MasterKeyFromSeed", ({ enumerable: true, get: function () { return ed25519_1.getED25519MasterKeyFromSeed; } }));
Object.defineProperty(exports, "deriveED25519HardenedKey", ({ enumerable: true, get: function () { return ed25519_1.deriveED25519HardenedKey; } }));
Object.defineProperty(exports, "deriveEd25519Path", ({ enumerable: true, get: function () { return ed25519_1.deriveEd25519Path; } }));
var symmetric_1 = __webpack_require__(/*! ./hd/symmetric */ "./node_modules/@ton/crypto/dist/hd/symmetric.js");
Object.defineProperty(exports, "getSymmetricMasterKeyFromSeed", ({ enumerable: true, get: function () { return symmetric_1.getSymmetricMasterKeyFromSeed; } }));
Object.defineProperty(exports, "deriveSymmetricHardenedKey", ({ enumerable: true, get: function () { return symmetric_1.deriveSymmetricHardenedKey; } }));
Object.defineProperty(exports, "deriveSymmetricPath", ({ enumerable: true, get: function () { return symmetric_1.deriveSymmetricPath; } }));
var mnemonics_1 = __webpack_require__(/*! ./hd/mnemonics */ "./node_modules/@ton/crypto/dist/hd/mnemonics.js");
Object.defineProperty(exports, "deriveMnemonicsPath", ({ enumerable: true, get: function () { return mnemonics_1.deriveMnemonicsPath; } }));
Object.defineProperty(exports, "deriveMnemonicHardenedKey", ({ enumerable: true, get: function () { return mnemonics_1.deriveMnemonicHardenedKey; } }));
Object.defineProperty(exports, "getMnemonicsMasterKeyFromSeed", ({ enumerable: true, get: function () { return mnemonics_1.getMnemonicsMasterKeyFromSeed; } }));


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/mnemonic/mnemonic.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mnemonicFromRandomSeed = exports.mnemonicIndexesToBytes = exports.bytesToMnemonics = exports.bytesToMnemonicIndexes = exports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToHDSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;
const tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ "./node_modules/tweetnacl/nacl-fast.js"));
const getSecureRandom_1 = __webpack_require__(/*! ../primitives/getSecureRandom */ "./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js");
const hmac_sha512_1 = __webpack_require__(/*! ../primitives/hmac_sha512 */ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js");
const pbkdf2_sha512_1 = __webpack_require__(/*! ../primitives/pbkdf2_sha512 */ "./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js");
const binary_1 = __webpack_require__(/*! ../utils/binary */ "./node_modules/@ton/crypto/dist/utils/binary.js");
const wordlist_1 = __webpack_require__(/*! ./wordlist */ "./node_modules/@ton/crypto/dist/mnemonic/wordlist.js");
const PBKDF_ITERATIONS = 100000;
async function isPasswordNeeded(mnemonicArray) {
    const passlessEntropy = await mnemonicToEntropy(mnemonicArray);
    return (await isPasswordSeed(passlessEntropy)) && !(await isBasicSeed(passlessEntropy));
}
function normalizeMnemonic(src) {
    return src.map((v) => v.toLowerCase().trim());
}
async function isBasicSeed(entropy) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68
    // bool Mnemonic::is_basic_seed() {
    //   td::SecureString hash(64);
    //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON seed version", td::max(1, PBKDF_ITERATIONS / 256),
    //                     hash.as_mutable_slice());
    //   return hash.as_slice()[0] == 0;
    // }
    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON seed version', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);
    return seed[0] == 0;
}
async function isPasswordSeed(entropy) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75
    // bool Mnemonic::is_password_seed() {
    //   td::SecureString hash(64);
    //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON fast seed version", 1, hash.as_mutable_slice());
    //   return hash.as_slice()[0] == 1;
    // }
    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON fast seed version', 1, 64);
    return seed[0] == 1;
}
async function mnemonicToEntropy(mnemonicArray, password) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52
    // td::SecureString Mnemonic::to_entropy() const {
    //   td::SecureString res(64);
    //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());
    //   return res;
    // }
    return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(' '), password && password.length > 0 ? password : '');
}
exports.mnemonicToEntropy = mnemonicToEntropy;
async function mnemonicToSeed(mnemonicArray, seed, password) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58
    // td::SecureString Mnemonic::to_seed() const {
    //   td::SecureString hash(64);
    //   td::pbkdf2_sha512(as_slice(to_entropy()), "TON default seed", PBKDF_ITERATIONS, hash.as_mutable_slice());
    //   return hash;
    // }
    const entropy = await mnemonicToEntropy(mnemonicArray, password);
    return await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);
}
exports.mnemonicToSeed = mnemonicToSeed;
/**
 * Extract private key from mnemonic
 * @param mnemonicArray mnemonic array
 * @param password mnemonic password
 * @returns Key Pair
 */
async function mnemonicToPrivateKey(mnemonicArray, password) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64
    // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {
    //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));
    // }
    mnemonicArray = normalizeMnemonic(mnemonicArray);
    const seed = (await mnemonicToSeed(mnemonicArray, 'TON default seed', password));
    let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed.slice(0, 32));
    return {
        publicKey: Buffer.from(keyPair.publicKey),
        secretKey: Buffer.from(keyPair.secretKey)
    };
}
exports.mnemonicToPrivateKey = mnemonicToPrivateKey;
/**
 * Convert mnemonic to wallet key pair
 * @param mnemonicArray mnemonic array
 * @param password mnemonic password
 * @returns Key Pair
 */
async function mnemonicToWalletKey(mnemonicArray, password) {
    let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);
    let seedSecret = seedPk.secretKey.slice(0, 32);
    const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);
    return {
        publicKey: Buffer.from(keyPair.publicKey),
        secretKey: Buffer.from(keyPair.secretKey)
    };
}
exports.mnemonicToWalletKey = mnemonicToWalletKey;
/**
 * Convert mnemonics to HD seed
 * @param mnemonicArray mnemonic array
 * @param password mnemonic password
 * @returns 64 byte seed
 */
async function mnemonicToHDSeed(mnemonicArray, password) {
    mnemonicArray = normalizeMnemonic(mnemonicArray);
    return (await mnemonicToSeed(mnemonicArray, 'TON HD Keys seed', password));
}
exports.mnemonicToHDSeed = mnemonicToHDSeed;
/**
 * Validate Mnemonic
 * @param mnemonicArray mnemonic array
 * @param password mnemonic password
 * @returns true for valid mnemonic
 */
async function mnemonicValidate(mnemonicArray, password) {
    // Normalize
    mnemonicArray = normalizeMnemonic(mnemonicArray);
    // Validate mnemonic words
    for (let word of mnemonicArray) {
        if (wordlist_1.wordlist.indexOf(word) < 0) {
            return false;
        }
    }
    // Check password
    if (password && password.length > 0) {
        if (!await isPasswordNeeded(mnemonicArray)) {
            return false;
        }
    }
    // Validate seed
    return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));
}
exports.mnemonicValidate = mnemonicValidate;
/**
 * Generate new Mnemonic
 * @param wordsCount number of words to generate
 * @param password mnemonic password
 * @returns
 */
async function mnemonicNew(wordsCount = 24, password) {
    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159
    let mnemonicArray = [];
    while (true) {
        // Regenerate new mnemonics
        mnemonicArray = [];
        for (let i = 0; i < wordsCount; i++) {
            let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);
            mnemonicArray.push(wordlist_1.wordlist[ind]);
        }
        // Chek password conformance
        if (password && password.length > 0) {
            if (!await isPasswordNeeded(mnemonicArray)) {
                continue;
            }
        }
        // Check if basic seed correct
        if (!(await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password)))) {
            continue;
        }
        break;
    }
    return mnemonicArray;
}
exports.mnemonicNew = mnemonicNew;
/**
 * Converts bytes to mnemonics array (could be invalid for TON)
 * @param src source buffer
 * @param wordsCount number of words
 */
function bytesToMnemonicIndexes(src, wordsCount) {
    let bits = (0, binary_1.bytesToBits)(src);
    let indexes = [];
    for (let i = 0; i < wordsCount; i++) {
        let sl = bits.slice(i * 11, i * 11 + 11);
        indexes.push(parseInt(sl, 2));
    }
    return indexes;
}
exports.bytesToMnemonicIndexes = bytesToMnemonicIndexes;
function bytesToMnemonics(src, wordsCount) {
    let mnemonics = bytesToMnemonicIndexes(src, wordsCount);
    let res = [];
    for (let m of mnemonics) {
        res.push(wordlist_1.wordlist[m]);
    }
    return res;
}
exports.bytesToMnemonics = bytesToMnemonics;
/**
 * Converts mnemonics indexes to buffer with zero padding in the end
 * @param src source indexes
 * @returns Buffer
 */
function mnemonicIndexesToBytes(src) {
    let res = '';
    for (let s of src) {
        if (!Number.isSafeInteger(s)) {
            throw Error('Invalid input');
        }
        if (s < 0 || s >= 2028) {
            throw Error('Invalid input');
        }
        res += (0, binary_1.lpad)(s.toString(2), '0', 11);
    }
    while (res.length % 8 !== 0) {
        res = res + '0';
    }
    return (0, binary_1.bitsToBytes)(res);
}
exports.mnemonicIndexesToBytes = mnemonicIndexesToBytes;
/**
 * Generates deterministically mnemonics
 * @param seed
 * @param wordsCount
 * @param password
 */
async function mnemonicFromRandomSeed(seed, wordsCount = 24, password) {
    const bytesLength = Math.ceil(wordsCount * 11 / 8);
    let currentSeed = seed;
    while (true) {
        // Create entropy
        let entropy = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(currentSeed, 'TON mnemonic seed', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength);
        // Create mnemonics
        let mnemonics = bytesToMnemonics(entropy, wordsCount);
        // Check if mnemonics are valid
        if (await mnemonicValidate(mnemonics, password)) {
            return mnemonics;
        }
        currentSeed = entropy;
    }
}
exports.mnemonicFromRandomSeed = mnemonicFromRandomSeed;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/mnemonic/wordlist.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/mnemonic/wordlist.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wordlist = void 0;
const EN = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis',
    'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz',
    'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle',
    'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic',
    'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow',
    'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future',
    'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym',
    'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid',
    'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory',
    'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just',
    'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know',
    'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics',
    'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth',
    'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut',
    'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone',
    'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid',
    'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote',
    'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural',
    'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system',
    'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical',
    'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility',
    'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage',
    'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong',
    'yard', 'year', 'yellow', 'you', 'young', 'youth',
    'zebra', 'zero', 'zone', 'zoo'];
exports.wordlist = EN;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newSecurePassphrase = void 0;
const __1 = __webpack_require__(/*! .. */ "./node_modules/@ton/crypto/dist/index.js");
async function newSecurePassphrase(size = 6) {
    return (await (0, __1.newSecureWords)(size)).join('-');
}
exports.newSecurePassphrase = newSecurePassphrase;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/passwords/newSecureWords.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/newSecureWords.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.newSecureWords = void 0;
const getSecureRandom_1 = __webpack_require__(/*! ../primitives/getSecureRandom */ "./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js");
const wordlist_1 = __webpack_require__(/*! ./wordlist */ "./node_modules/@ton/crypto/dist/passwords/wordlist.js");
async function newSecureWords(size = 6) {
    let words = [];
    for (let i = 0; i < size; i++) {
        words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);
    }
    return words;
}
exports.newSecureWords = newSecureWords;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/passwords/wordlist.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/passwords/wordlist.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wordlist = void 0;
// Source https://www.eff.org/dice
exports.wordlist = [
    'abacus',
    'abdomen',
    'abdominal',
    'abide',
    'abiding',
    'ability',
    'ablaze',
    'able',
    'abnormal',
    'abrasion',
    'abrasive',
    'abreast',
    'abridge',
    'abroad',
    'abruptly',
    'absence',
    'absentee',
    'absently',
    'absinthe',
    'absolute',
    'absolve',
    'abstain',
    'abstract',
    'absurd',
    'accent',
    'acclaim',
    'acclimate',
    'accompany',
    'account',
    'accuracy',
    'accurate',
    'accustom',
    'acetone',
    'achiness',
    'aching',
    'acid',
    'acorn',
    'acquaint',
    'acquire',
    'acre',
    'acrobat',
    'acronym',
    'acting',
    'action',
    'activate',
    'activator',
    'active',
    'activism',
    'activist',
    'activity',
    'actress',
    'acts',
    'acutely',
    'acuteness',
    'aeration',
    'aerobics',
    'aerosol',
    'aerospace',
    'afar',
    'affair',
    'affected',
    'affecting',
    'affection',
    'affidavit',
    'affiliate',
    'affirm',
    'affix',
    'afflicted',
    'affluent',
    'afford',
    'affront',
    'aflame',
    'afloat',
    'aflutter',
    'afoot',
    'afraid',
    'afterglow',
    'afterlife',
    'aftermath',
    'aftermost',
    'afternoon',
    'aged',
    'ageless',
    'agency',
    'agenda',
    'agent',
    'aggregate',
    'aghast',
    'agile',
    'agility',
    'aging',
    'agnostic',
    'agonize',
    'agonizing',
    'agony',
    'agreeable',
    'agreeably',
    'agreed',
    'agreeing',
    'agreement',
    'aground',
    'ahead',
    'ahoy',
    'aide',
    'aids',
    'aim',
    'ajar',
    'alabaster',
    'alarm',
    'albatross',
    'album',
    'alfalfa',
    'algebra',
    'algorithm',
    'alias',
    'alibi',
    'alienable',
    'alienate',
    'aliens',
    'alike',
    'alive',
    'alkaline',
    'alkalize',
    'almanac',
    'almighty',
    'almost',
    'aloe',
    'aloft',
    'aloha',
    'alone',
    'alongside',
    'aloof',
    'alphabet',
    'alright',
    'although',
    'altitude',
    'alto',
    'aluminum',
    'alumni',
    'always',
    'amaretto',
    'amaze',
    'amazingly',
    'amber',
    'ambiance',
    'ambiguity',
    'ambiguous',
    'ambition',
    'ambitious',
    'ambulance',
    'ambush',
    'amendable',
    'amendment',
    'amends',
    'amenity',
    'amiable',
    'amicably',
    'amid',
    'amigo',
    'amino',
    'amiss',
    'ammonia',
    'ammonium',
    'amnesty',
    'amniotic',
    'among',
    'amount',
    'amperage',
    'ample',
    'amplifier',
    'amplify',
    'amply',
    'amuck',
    'amulet',
    'amusable',
    'amused',
    'amusement',
    'amuser',
    'amusing',
    'anaconda',
    'anaerobic',
    'anagram',
    'anatomist',
    'anatomy',
    'anchor',
    'anchovy',
    'ancient',
    'android',
    'anemia',
    'anemic',
    'aneurism',
    'anew',
    'angelfish',
    'angelic',
    'anger',
    'angled',
    'angler',
    'angles',
    'angling',
    'angrily',
    'angriness',
    'anguished',
    'angular',
    'animal',
    'animate',
    'animating',
    'animation',
    'animator',
    'anime',
    'animosity',
    'ankle',
    'annex',
    'annotate',
    'announcer',
    'annoying',
    'annually',
    'annuity',
    'anointer',
    'another',
    'answering',
    'antacid',
    'antarctic',
    'anteater',
    'antelope',
    'antennae',
    'anthem',
    'anthill',
    'anthology',
    'antibody',
    'antics',
    'antidote',
    'antihero',
    'antiquely',
    'antiques',
    'antiquity',
    'antirust',
    'antitoxic',
    'antitrust',
    'antiviral',
    'antivirus',
    'antler',
    'antonym',
    'antsy',
    'anvil',
    'anybody',
    'anyhow',
    'anymore',
    'anyone',
    'anyplace',
    'anything',
    'anytime',
    'anyway',
    'anywhere',
    'aorta',
    'apache',
    'apostle',
    'appealing',
    'appear',
    'appease',
    'appeasing',
    'appendage',
    'appendix',
    'appetite',
    'appetizer',
    'applaud',
    'applause',
    'apple',
    'appliance',
    'applicant',
    'applied',
    'apply',
    'appointee',
    'appraisal',
    'appraiser',
    'apprehend',
    'approach',
    'approval',
    'approve',
    'apricot',
    'april',
    'apron',
    'aptitude',
    'aptly',
    'aqua',
    'aqueduct',
    'arbitrary',
    'arbitrate',
    'ardently',
    'area',
    'arena',
    'arguable',
    'arguably',
    'argue',
    'arise',
    'armadillo',
    'armband',
    'armchair',
    'armed',
    'armful',
    'armhole',
    'arming',
    'armless',
    'armoire',
    'armored',
    'armory',
    'armrest',
    'army',
    'aroma',
    'arose',
    'around',
    'arousal',
    'arrange',
    'array',
    'arrest',
    'arrival',
    'arrive',
    'arrogance',
    'arrogant',
    'arson',
    'art',
    'ascend',
    'ascension',
    'ascent',
    'ascertain',
    'ashamed',
    'ashen',
    'ashes',
    'ashy',
    'aside',
    'askew',
    'asleep',
    'asparagus',
    'aspect',
    'aspirate',
    'aspire',
    'aspirin',
    'astonish',
    'astound',
    'astride',
    'astrology',
    'astronaut',
    'astronomy',
    'astute',
    'atlantic',
    'atlas',
    'atom',
    'atonable',
    'atop',
    'atrium',
    'atrocious',
    'atrophy',
    'attach',
    'attain',
    'attempt',
    'attendant',
    'attendee',
    'attention',
    'attentive',
    'attest',
    'attic',
    'attire',
    'attitude',
    'attractor',
    'attribute',
    'atypical',
    'auction',
    'audacious',
    'audacity',
    'audible',
    'audibly',
    'audience',
    'audio',
    'audition',
    'augmented',
    'august',
    'authentic',
    'author',
    'autism',
    'autistic',
    'autograph',
    'automaker',
    'automated',
    'automatic',
    'autopilot',
    'available',
    'avalanche',
    'avatar',
    'avenge',
    'avenging',
    'avenue',
    'average',
    'aversion',
    'avert',
    'aviation',
    'aviator',
    'avid',
    'avoid',
    'await',
    'awaken',
    'award',
    'aware',
    'awhile',
    'awkward',
    'awning',
    'awoke',
    'awry',
    'axis',
    'babble',
    'babbling',
    'babied',
    'baboon',
    'backache',
    'backboard',
    'backboned',
    'backdrop',
    'backed',
    'backer',
    'backfield',
    'backfire',
    'backhand',
    'backing',
    'backlands',
    'backlash',
    'backless',
    'backlight',
    'backlit',
    'backlog',
    'backpack',
    'backpedal',
    'backrest',
    'backroom',
    'backshift',
    'backside',
    'backslid',
    'backspace',
    'backspin',
    'backstab',
    'backstage',
    'backtalk',
    'backtrack',
    'backup',
    'backward',
    'backwash',
    'backwater',
    'backyard',
    'bacon',
    'bacteria',
    'bacterium',
    'badass',
    'badge',
    'badland',
    'badly',
    'badness',
    'baffle',
    'baffling',
    'bagel',
    'bagful',
    'baggage',
    'bagged',
    'baggie',
    'bagginess',
    'bagging',
    'baggy',
    'bagpipe',
    'baguette',
    'baked',
    'bakery',
    'bakeshop',
    'baking',
    'balance',
    'balancing',
    'balcony',
    'balmy',
    'balsamic',
    'bamboo',
    'banana',
    'banish',
    'banister',
    'banjo',
    'bankable',
    'bankbook',
    'banked',
    'banker',
    'banking',
    'banknote',
    'bankroll',
    'banner',
    'bannister',
    'banshee',
    'banter',
    'barbecue',
    'barbed',
    'barbell',
    'barber',
    'barcode',
    'barge',
    'bargraph',
    'barista',
    'baritone',
    'barley',
    'barmaid',
    'barman',
    'barn',
    'barometer',
    'barrack',
    'barracuda',
    'barrel',
    'barrette',
    'barricade',
    'barrier',
    'barstool',
    'bartender',
    'barterer',
    'bash',
    'basically',
    'basics',
    'basil',
    'basin',
    'basis',
    'basket',
    'batboy',
    'batch',
    'bath',
    'baton',
    'bats',
    'battalion',
    'battered',
    'battering',
    'battery',
    'batting',
    'battle',
    'bauble',
    'bazooka',
    'blabber',
    'bladder',
    'blade',
    'blah',
    'blame',
    'blaming',
    'blanching',
    'blandness',
    'blank',
    'blaspheme',
    'blasphemy',
    'blast',
    'blatancy',
    'blatantly',
    'blazer',
    'blazing',
    'bleach',
    'bleak',
    'bleep',
    'blemish',
    'blend',
    'bless',
    'blighted',
    'blimp',
    'bling',
    'blinked',
    'blinker',
    'blinking',
    'blinks',
    'blip',
    'blissful',
    'blitz',
    'blizzard',
    'bloated',
    'bloating',
    'blob',
    'blog',
    'bloomers',
    'blooming',
    'blooper',
    'blot',
    'blouse',
    'blubber',
    'bluff',
    'bluish',
    'blunderer',
    'blunt',
    'blurb',
    'blurred',
    'blurry',
    'blurt',
    'blush',
    'blustery',
    'boaster',
    'boastful',
    'boasting',
    'boat',
    'bobbed',
    'bobbing',
    'bobble',
    'bobcat',
    'bobsled',
    'bobtail',
    'bodacious',
    'body',
    'bogged',
    'boggle',
    'bogus',
    'boil',
    'bok',
    'bolster',
    'bolt',
    'bonanza',
    'bonded',
    'bonding',
    'bondless',
    'boned',
    'bonehead',
    'boneless',
    'bonelike',
    'boney',
    'bonfire',
    'bonnet',
    'bonsai',
    'bonus',
    'bony',
    'boogeyman',
    'boogieman',
    'book',
    'boondocks',
    'booted',
    'booth',
    'bootie',
    'booting',
    'bootlace',
    'bootleg',
    'boots',
    'boozy',
    'borax',
    'boring',
    'borough',
    'borrower',
    'borrowing',
    'boss',
    'botanical',
    'botanist',
    'botany',
    'botch',
    'both',
    'bottle',
    'bottling',
    'bottom',
    'bounce',
    'bouncing',
    'bouncy',
    'bounding',
    'boundless',
    'bountiful',
    'bovine',
    'boxcar',
    'boxer',
    'boxing',
    'boxlike',
    'boxy',
    'breach',
    'breath',
    'breeches',
    'breeching',
    'breeder',
    'breeding',
    'breeze',
    'breezy',
    'brethren',
    'brewery',
    'brewing',
    'briar',
    'bribe',
    'brick',
    'bride',
    'bridged',
    'brigade',
    'bright',
    'brilliant',
    'brim',
    'bring',
    'brink',
    'brisket',
    'briskly',
    'briskness',
    'bristle',
    'brittle',
    'broadband',
    'broadcast',
    'broaden',
    'broadly',
    'broadness',
    'broadside',
    'broadways',
    'broiler',
    'broiling',
    'broken',
    'broker',
    'bronchial',
    'bronco',
    'bronze',
    'bronzing',
    'brook',
    'broom',
    'brought',
    'browbeat',
    'brownnose',
    'browse',
    'browsing',
    'bruising',
    'brunch',
    'brunette',
    'brunt',
    'brush',
    'brussels',
    'brute',
    'brutishly',
    'bubble',
    'bubbling',
    'bubbly',
    'buccaneer',
    'bucked',
    'bucket',
    'buckle',
    'buckshot',
    'buckskin',
    'bucktooth',
    'buckwheat',
    'buddhism',
    'buddhist',
    'budding',
    'buddy',
    'budget',
    'buffalo',
    'buffed',
    'buffer',
    'buffing',
    'buffoon',
    'buggy',
    'bulb',
    'bulge',
    'bulginess',
    'bulgur',
    'bulk',
    'bulldog',
    'bulldozer',
    'bullfight',
    'bullfrog',
    'bullhorn',
    'bullion',
    'bullish',
    'bullpen',
    'bullring',
    'bullseye',
    'bullwhip',
    'bully',
    'bunch',
    'bundle',
    'bungee',
    'bunion',
    'bunkbed',
    'bunkhouse',
    'bunkmate',
    'bunny',
    'bunt',
    'busboy',
    'bush',
    'busily',
    'busload',
    'bust',
    'busybody',
    'buzz',
    'cabana',
    'cabbage',
    'cabbie',
    'cabdriver',
    'cable',
    'caboose',
    'cache',
    'cackle',
    'cacti',
    'cactus',
    'caddie',
    'caddy',
    'cadet',
    'cadillac',
    'cadmium',
    'cage',
    'cahoots',
    'cake',
    'calamari',
    'calamity',
    'calcium',
    'calculate',
    'calculus',
    'caliber',
    'calibrate',
    'calm',
    'caloric',
    'calorie',
    'calzone',
    'camcorder',
    'cameo',
    'camera',
    'camisole',
    'camper',
    'campfire',
    'camping',
    'campsite',
    'campus',
    'canal',
    'canary',
    'cancel',
    'candied',
    'candle',
    'candy',
    'cane',
    'canine',
    'canister',
    'cannabis',
    'canned',
    'canning',
    'cannon',
    'cannot',
    'canola',
    'canon',
    'canopener',
    'canopy',
    'canteen',
    'canyon',
    'capable',
    'capably',
    'capacity',
    'cape',
    'capillary',
    'capital',
    'capitol',
    'capped',
    'capricorn',
    'capsize',
    'capsule',
    'caption',
    'captivate',
    'captive',
    'captivity',
    'capture',
    'caramel',
    'carat',
    'caravan',
    'carbon',
    'cardboard',
    'carded',
    'cardiac',
    'cardigan',
    'cardinal',
    'cardstock',
    'carefully',
    'caregiver',
    'careless',
    'caress',
    'caretaker',
    'cargo',
    'caring',
    'carless',
    'carload',
    'carmaker',
    'carnage',
    'carnation',
    'carnival',
    'carnivore',
    'carol',
    'carpenter',
    'carpentry',
    'carpool',
    'carport',
    'carried',
    'carrot',
    'carrousel',
    'carry',
    'cartel',
    'cartload',
    'carton',
    'cartoon',
    'cartridge',
    'cartwheel',
    'carve',
    'carving',
    'carwash',
    'cascade',
    'case',
    'cash',
    'casing',
    'casino',
    'casket',
    'cassette',
    'casually',
    'casualty',
    'catacomb',
    'catalog',
    'catalyst',
    'catalyze',
    'catapult',
    'cataract',
    'catatonic',
    'catcall',
    'catchable',
    'catcher',
    'catching',
    'catchy',
    'caterer',
    'catering',
    'catfight',
    'catfish',
    'cathedral',
    'cathouse',
    'catlike',
    'catnap',
    'catnip',
    'catsup',
    'cattail',
    'cattishly',
    'cattle',
    'catty',
    'catwalk',
    'caucasian',
    'caucus',
    'causal',
    'causation',
    'cause',
    'causing',
    'cauterize',
    'caution',
    'cautious',
    'cavalier',
    'cavalry',
    'caviar',
    'cavity',
    'cedar',
    'celery',
    'celestial',
    'celibacy',
    'celibate',
    'celtic',
    'cement',
    'census',
    'ceramics',
    'ceremony',
    'certainly',
    'certainty',
    'certified',
    'certify',
    'cesarean',
    'cesspool',
    'chafe',
    'chaffing',
    'chain',
    'chair',
    'chalice',
    'challenge',
    'chamber',
    'chamomile',
    'champion',
    'chance',
    'change',
    'channel',
    'chant',
    'chaos',
    'chaperone',
    'chaplain',
    'chapped',
    'chaps',
    'chapter',
    'character',
    'charbroil',
    'charcoal',
    'charger',
    'charging',
    'chariot',
    'charity',
    'charm',
    'charred',
    'charter',
    'charting',
    'chase',
    'chasing',
    'chaste',
    'chastise',
    'chastity',
    'chatroom',
    'chatter',
    'chatting',
    'chatty',
    'cheating',
    'cheddar',
    'cheek',
    'cheer',
    'cheese',
    'cheesy',
    'chef',
    'chemicals',
    'chemist',
    'chemo',
    'cherisher',
    'cherub',
    'chess',
    'chest',
    'chevron',
    'chevy',
    'chewable',
    'chewer',
    'chewing',
    'chewy',
    'chief',
    'chihuahua',
    'childcare',
    'childhood',
    'childish',
    'childless',
    'childlike',
    'chili',
    'chill',
    'chimp',
    'chip',
    'chirping',
    'chirpy',
    'chitchat',
    'chivalry',
    'chive',
    'chloride',
    'chlorine',
    'choice',
    'chokehold',
    'choking',
    'chomp',
    'chooser',
    'choosing',
    'choosy',
    'chop',
    'chosen',
    'chowder',
    'chowtime',
    'chrome',
    'chubby',
    'chuck',
    'chug',
    'chummy',
    'chump',
    'chunk',
    'churn',
    'chute',
    'cider',
    'cilantro',
    'cinch',
    'cinema',
    'cinnamon',
    'circle',
    'circling',
    'circular',
    'circulate',
    'circus',
    'citable',
    'citadel',
    'citation',
    'citizen',
    'citric',
    'citrus',
    'city',
    'civic',
    'civil',
    'clad',
    'claim',
    'clambake',
    'clammy',
    'clamor',
    'clamp',
    'clamshell',
    'clang',
    'clanking',
    'clapped',
    'clapper',
    'clapping',
    'clarify',
    'clarinet',
    'clarity',
    'clash',
    'clasp',
    'class',
    'clatter',
    'clause',
    'clavicle',
    'claw',
    'clay',
    'clean',
    'clear',
    'cleat',
    'cleaver',
    'cleft',
    'clench',
    'clergyman',
    'clerical',
    'clerk',
    'clever',
    'clicker',
    'client',
    'climate',
    'climatic',
    'cling',
    'clinic',
    'clinking',
    'clip',
    'clique',
    'cloak',
    'clobber',
    'clock',
    'clone',
    'cloning',
    'closable',
    'closure',
    'clothes',
    'clothing',
    'cloud',
    'clover',
    'clubbed',
    'clubbing',
    'clubhouse',
    'clump',
    'clumsily',
    'clumsy',
    'clunky',
    'clustered',
    'clutch',
    'clutter',
    'coach',
    'coagulant',
    'coastal',
    'coaster',
    'coasting',
    'coastland',
    'coastline',
    'coat',
    'coauthor',
    'cobalt',
    'cobbler',
    'cobweb',
    'cocoa',
    'coconut',
    'cod',
    'coeditor',
    'coerce',
    'coexist',
    'coffee',
    'cofounder',
    'cognition',
    'cognitive',
    'cogwheel',
    'coherence',
    'coherent',
    'cohesive',
    'coil',
    'coke',
    'cola',
    'cold',
    'coleslaw',
    'coliseum',
    'collage',
    'collapse',
    'collar',
    'collected',
    'collector',
    'collide',
    'collie',
    'collision',
    'colonial',
    'colonist',
    'colonize',
    'colony',
    'colossal',
    'colt',
    'coma',
    'come',
    'comfort',
    'comfy',
    'comic',
    'coming',
    'comma',
    'commence',
    'commend',
    'comment',
    'commerce',
    'commode',
    'commodity',
    'commodore',
    'common',
    'commotion',
    'commute',
    'commuting',
    'compacted',
    'compacter',
    'compactly',
    'compactor',
    'companion',
    'company',
    'compare',
    'compel',
    'compile',
    'comply',
    'component',
    'composed',
    'composer',
    'composite',
    'compost',
    'composure',
    'compound',
    'compress',
    'comprised',
    'computer',
    'computing',
    'comrade',
    'concave',
    'conceal',
    'conceded',
    'concept',
    'concerned',
    'concert',
    'conch',
    'concierge',
    'concise',
    'conclude',
    'concrete',
    'concur',
    'condense',
    'condiment',
    'condition',
    'condone',
    'conducive',
    'conductor',
    'conduit',
    'cone',
    'confess',
    'confetti',
    'confidant',
    'confident',
    'confider',
    'confiding',
    'configure',
    'confined',
    'confining',
    'confirm',
    'conflict',
    'conform',
    'confound',
    'confront',
    'confused',
    'confusing',
    'confusion',
    'congenial',
    'congested',
    'congrats',
    'congress',
    'conical',
    'conjoined',
    'conjure',
    'conjuror',
    'connected',
    'connector',
    'consensus',
    'consent',
    'console',
    'consoling',
    'consonant',
    'constable',
    'constant',
    'constrain',
    'constrict',
    'construct',
    'consult',
    'consumer',
    'consuming',
    'contact',
    'container',
    'contempt',
    'contend',
    'contented',
    'contently',
    'contents',
    'contest',
    'context',
    'contort',
    'contour',
    'contrite',
    'control',
    'contusion',
    'convene',
    'convent',
    'copartner',
    'cope',
    'copied',
    'copier',
    'copilot',
    'coping',
    'copious',
    'copper',
    'copy',
    'coral',
    'cork',
    'cornball',
    'cornbread',
    'corncob',
    'cornea',
    'corned',
    'corner',
    'cornfield',
    'cornflake',
    'cornhusk',
    'cornmeal',
    'cornstalk',
    'corny',
    'coronary',
    'coroner',
    'corporal',
    'corporate',
    'corral',
    'correct',
    'corridor',
    'corrode',
    'corroding',
    'corrosive',
    'corsage',
    'corset',
    'cortex',
    'cosigner',
    'cosmetics',
    'cosmic',
    'cosmos',
    'cosponsor',
    'cost',
    'cottage',
    'cotton',
    'couch',
    'cough',
    'could',
    'countable',
    'countdown',
    'counting',
    'countless',
    'country',
    'county',
    'courier',
    'covenant',
    'cover',
    'coveted',
    'coveting',
    'coyness',
    'cozily',
    'coziness',
    'cozy',
    'crabbing',
    'crabgrass',
    'crablike',
    'crabmeat',
    'cradle',
    'cradling',
    'crafter',
    'craftily',
    'craftsman',
    'craftwork',
    'crafty',
    'cramp',
    'cranberry',
    'crane',
    'cranial',
    'cranium',
    'crank',
    'crate',
    'crave',
    'craving',
    'crawfish',
    'crawlers',
    'crawling',
    'crayfish',
    'crayon',
    'crazed',
    'crazily',
    'craziness',
    'crazy',
    'creamed',
    'creamer',
    'creamlike',
    'crease',
    'creasing',
    'creatable',
    'create',
    'creation',
    'creative',
    'creature',
    'credible',
    'credibly',
    'credit',
    'creed',
    'creme',
    'creole',
    'crepe',
    'crept',
    'crescent',
    'crested',
    'cresting',
    'crestless',
    'crevice',
    'crewless',
    'crewman',
    'crewmate',
    'crib',
    'cricket',
    'cried',
    'crier',
    'crimp',
    'crimson',
    'cringe',
    'cringing',
    'crinkle',
    'crinkly',
    'crisped',
    'crisping',
    'crisply',
    'crispness',
    'crispy',
    'criteria',
    'critter',
    'croak',
    'crock',
    'crook',
    'croon',
    'crop',
    'cross',
    'crouch',
    'crouton',
    'crowbar',
    'crowd',
    'crown',
    'crucial',
    'crudely',
    'crudeness',
    'cruelly',
    'cruelness',
    'cruelty',
    'crumb',
    'crummiest',
    'crummy',
    'crumpet',
    'crumpled',
    'cruncher',
    'crunching',
    'crunchy',
    'crusader',
    'crushable',
    'crushed',
    'crusher',
    'crushing',
    'crust',
    'crux',
    'crying',
    'cryptic',
    'crystal',
    'cubbyhole',
    'cube',
    'cubical',
    'cubicle',
    'cucumber',
    'cuddle',
    'cuddly',
    'cufflink',
    'culinary',
    'culminate',
    'culpable',
    'culprit',
    'cultivate',
    'cultural',
    'culture',
    'cupbearer',
    'cupcake',
    'cupid',
    'cupped',
    'cupping',
    'curable',
    'curator',
    'curdle',
    'cure',
    'curfew',
    'curing',
    'curled',
    'curler',
    'curliness',
    'curling',
    'curly',
    'curry',
    'curse',
    'cursive',
    'cursor',
    'curtain',
    'curtly',
    'curtsy',
    'curvature',
    'curve',
    'curvy',
    'cushy',
    'cusp',
    'cussed',
    'custard',
    'custodian',
    'custody',
    'customary',
    'customer',
    'customize',
    'customs',
    'cut',
    'cycle',
    'cyclic',
    'cycling',
    'cyclist',
    'cylinder',
    'cymbal',
    'cytoplasm',
    'cytoplast',
    'dab',
    'dad',
    'daffodil',
    'dagger',
    'daily',
    'daintily',
    'dainty',
    'dairy',
    'daisy',
    'dallying',
    'dance',
    'dancing',
    'dandelion',
    'dander',
    'dandruff',
    'dandy',
    'danger',
    'dangle',
    'dangling',
    'daredevil',
    'dares',
    'daringly',
    'darkened',
    'darkening',
    'darkish',
    'darkness',
    'darkroom',
    'darling',
    'darn',
    'dart',
    'darwinism',
    'dash',
    'dastardly',
    'data',
    'datebook',
    'dating',
    'daughter',
    'daunting',
    'dawdler',
    'dawn',
    'daybed',
    'daybreak',
    'daycare',
    'daydream',
    'daylight',
    'daylong',
    'dayroom',
    'daytime',
    'dazzler',
    'dazzling',
    'deacon',
    'deafening',
    'deafness',
    'dealer',
    'dealing',
    'dealmaker',
    'dealt',
    'dean',
    'debatable',
    'debate',
    'debating',
    'debit',
    'debrief',
    'debtless',
    'debtor',
    'debug',
    'debunk',
    'decade',
    'decaf',
    'decal',
    'decathlon',
    'decay',
    'deceased',
    'deceit',
    'deceiver',
    'deceiving',
    'december',
    'decency',
    'decent',
    'deception',
    'deceptive',
    'decibel',
    'decidable',
    'decimal',
    'decimeter',
    'decipher',
    'deck',
    'declared',
    'decline',
    'decode',
    'decompose',
    'decorated',
    'decorator',
    'decoy',
    'decrease',
    'decree',
    'dedicate',
    'dedicator',
    'deduce',
    'deduct',
    'deed',
    'deem',
    'deepen',
    'deeply',
    'deepness',
    'deface',
    'defacing',
    'defame',
    'default',
    'defeat',
    'defection',
    'defective',
    'defendant',
    'defender',
    'defense',
    'defensive',
    'deferral',
    'deferred',
    'defiance',
    'defiant',
    'defile',
    'defiling',
    'define',
    'definite',
    'deflate',
    'deflation',
    'deflator',
    'deflected',
    'deflector',
    'defog',
    'deforest',
    'defraud',
    'defrost',
    'deftly',
    'defuse',
    'defy',
    'degraded',
    'degrading',
    'degrease',
    'degree',
    'dehydrate',
    'deity',
    'dejected',
    'delay',
    'delegate',
    'delegator',
    'delete',
    'deletion',
    'delicacy',
    'delicate',
    'delicious',
    'delighted',
    'delirious',
    'delirium',
    'deliverer',
    'delivery',
    'delouse',
    'delta',
    'deluge',
    'delusion',
    'deluxe',
    'demanding',
    'demeaning',
    'demeanor',
    'demise',
    'democracy',
    'democrat',
    'demote',
    'demotion',
    'demystify',
    'denatured',
    'deniable',
    'denial',
    'denim',
    'denote',
    'dense',
    'density',
    'dental',
    'dentist',
    'denture',
    'deny',
    'deodorant',
    'deodorize',
    'departed',
    'departure',
    'depict',
    'deplete',
    'depletion',
    'deplored',
    'deploy',
    'deport',
    'depose',
    'depraved',
    'depravity',
    'deprecate',
    'depress',
    'deprive',
    'depth',
    'deputize',
    'deputy',
    'derail',
    'deranged',
    'derby',
    'derived',
    'desecrate',
    'deserve',
    'deserving',
    'designate',
    'designed',
    'designer',
    'designing',
    'deskbound',
    'desktop',
    'deskwork',
    'desolate',
    'despair',
    'despise',
    'despite',
    'destiny',
    'destitute',
    'destruct',
    'detached',
    'detail',
    'detection',
    'detective',
    'detector',
    'detention',
    'detergent',
    'detest',
    'detonate',
    'detonator',
    'detoxify',
    'detract',
    'deuce',
    'devalue',
    'deviancy',
    'deviant',
    'deviate',
    'deviation',
    'deviator',
    'device',
    'devious',
    'devotedly',
    'devotee',
    'devotion',
    'devourer',
    'devouring',
    'devoutly',
    'dexterity',
    'dexterous',
    'diabetes',
    'diabetic',
    'diabolic',
    'diagnoses',
    'diagnosis',
    'diagram',
    'dial',
    'diameter',
    'diaper',
    'diaphragm',
    'diary',
    'dice',
    'dicing',
    'dictate',
    'dictation',
    'dictator',
    'difficult',
    'diffused',
    'diffuser',
    'diffusion',
    'diffusive',
    'dig',
    'dilation',
    'diligence',
    'diligent',
    'dill',
    'dilute',
    'dime',
    'diminish',
    'dimly',
    'dimmed',
    'dimmer',
    'dimness',
    'dimple',
    'diner',
    'dingbat',
    'dinghy',
    'dinginess',
    'dingo',
    'dingy',
    'dining',
    'dinner',
    'diocese',
    'dioxide',
    'diploma',
    'dipped',
    'dipper',
    'dipping',
    'directed',
    'direction',
    'directive',
    'directly',
    'directory',
    'direness',
    'dirtiness',
    'disabled',
    'disagree',
    'disallow',
    'disarm',
    'disarray',
    'disaster',
    'disband',
    'disbelief',
    'disburse',
    'discard',
    'discern',
    'discharge',
    'disclose',
    'discolor',
    'discount',
    'discourse',
    'discover',
    'discuss',
    'disdain',
    'disengage',
    'disfigure',
    'disgrace',
    'dish',
    'disinfect',
    'disjoin',
    'disk',
    'dislike',
    'disliking',
    'dislocate',
    'dislodge',
    'disloyal',
    'dismantle',
    'dismay',
    'dismiss',
    'dismount',
    'disobey',
    'disorder',
    'disown',
    'disparate',
    'disparity',
    'dispatch',
    'dispense',
    'dispersal',
    'dispersed',
    'disperser',
    'displace',
    'display',
    'displease',
    'disposal',
    'dispose',
    'disprove',
    'dispute',
    'disregard',
    'disrupt',
    'dissuade',
    'distance',
    'distant',
    'distaste',
    'distill',
    'distinct',
    'distort',
    'distract',
    'distress',
    'district',
    'distrust',
    'ditch',
    'ditto',
    'ditzy',
    'dividable',
    'divided',
    'dividend',
    'dividers',
    'dividing',
    'divinely',
    'diving',
    'divinity',
    'divisible',
    'divisibly',
    'division',
    'divisive',
    'divorcee',
    'dizziness',
    'dizzy',
    'doable',
    'docile',
    'dock',
    'doctrine',
    'document',
    'dodge',
    'dodgy',
    'doily',
    'doing',
    'dole',
    'dollar',
    'dollhouse',
    'dollop',
    'dolly',
    'dolphin',
    'domain',
    'domelike',
    'domestic',
    'dominion',
    'dominoes',
    'donated',
    'donation',
    'donator',
    'donor',
    'donut',
    'doodle',
    'doorbell',
    'doorframe',
    'doorknob',
    'doorman',
    'doormat',
    'doornail',
    'doorpost',
    'doorstep',
    'doorstop',
    'doorway',
    'doozy',
    'dork',
    'dormitory',
    'dorsal',
    'dosage',
    'dose',
    'dotted',
    'doubling',
    'douche',
    'dove',
    'down',
    'dowry',
    'doze',
    'drab',
    'dragging',
    'dragonfly',
    'dragonish',
    'dragster',
    'drainable',
    'drainage',
    'drained',
    'drainer',
    'drainpipe',
    'dramatic',
    'dramatize',
    'drank',
    'drapery',
    'drastic',
    'draw',
    'dreaded',
    'dreadful',
    'dreadlock',
    'dreamboat',
    'dreamily',
    'dreamland',
    'dreamless',
    'dreamlike',
    'dreamt',
    'dreamy',
    'drearily',
    'dreary',
    'drench',
    'dress',
    'drew',
    'dribble',
    'dried',
    'drier',
    'drift',
    'driller',
    'drilling',
    'drinkable',
    'drinking',
    'dripping',
    'drippy',
    'drivable',
    'driven',
    'driver',
    'driveway',
    'driving',
    'drizzle',
    'drizzly',
    'drone',
    'drool',
    'droop',
    'drop-down',
    'dropbox',
    'dropkick',
    'droplet',
    'dropout',
    'dropper',
    'drove',
    'drown',
    'drowsily',
    'drudge',
    'drum',
    'dry',
    'dubbed',
    'dubiously',
    'duchess',
    'duckbill',
    'ducking',
    'duckling',
    'ducktail',
    'ducky',
    'duct',
    'dude',
    'duffel',
    'dugout',
    'duh',
    'duke',
    'duller',
    'dullness',
    'duly',
    'dumping',
    'dumpling',
    'dumpster',
    'duo',
    'dupe',
    'duplex',
    'duplicate',
    'duplicity',
    'durable',
    'durably',
    'duration',
    'duress',
    'during',
    'dusk',
    'dust',
    'dutiful',
    'duty',
    'duvet',
    'dwarf',
    'dweeb',
    'dwelled',
    'dweller',
    'dwelling',
    'dwindle',
    'dwindling',
    'dynamic',
    'dynamite',
    'dynasty',
    'dyslexia',
    'dyslexic',
    'each',
    'eagle',
    'earache',
    'eardrum',
    'earflap',
    'earful',
    'earlobe',
    'early',
    'earmark',
    'earmuff',
    'earphone',
    'earpiece',
    'earplugs',
    'earring',
    'earshot',
    'earthen',
    'earthlike',
    'earthling',
    'earthly',
    'earthworm',
    'earthy',
    'earwig',
    'easeful',
    'easel',
    'easiest',
    'easily',
    'easiness',
    'easing',
    'eastbound',
    'eastcoast',
    'easter',
    'eastward',
    'eatable',
    'eaten',
    'eatery',
    'eating',
    'eats',
    'ebay',
    'ebony',
    'ebook',
    'ecard',
    'eccentric',
    'echo',
    'eclair',
    'eclipse',
    'ecologist',
    'ecology',
    'economic',
    'economist',
    'economy',
    'ecosphere',
    'ecosystem',
    'edge',
    'edginess',
    'edging',
    'edgy',
    'edition',
    'editor',
    'educated',
    'education',
    'educator',
    'eel',
    'effective',
    'effects',
    'efficient',
    'effort',
    'eggbeater',
    'egging',
    'eggnog',
    'eggplant',
    'eggshell',
    'egomaniac',
    'egotism',
    'egotistic',
    'either',
    'eject',
    'elaborate',
    'elastic',
    'elated',
    'elbow',
    'eldercare',
    'elderly',
    'eldest',
    'electable',
    'election',
    'elective',
    'elephant',
    'elevate',
    'elevating',
    'elevation',
    'elevator',
    'eleven',
    'elf',
    'eligible',
    'eligibly',
    'eliminate',
    'elite',
    'elitism',
    'elixir',
    'elk',
    'ellipse',
    'elliptic',
    'elm',
    'elongated',
    'elope',
    'eloquence',
    'eloquent',
    'elsewhere',
    'elude',
    'elusive',
    'elves',
    'email',
    'embargo',
    'embark',
    'embassy',
    'embattled',
    'embellish',
    'ember',
    'embezzle',
    'emblaze',
    'emblem',
    'embody',
    'embolism',
    'emboss',
    'embroider',
    'emcee',
    'emerald',
    'emergency',
    'emission',
    'emit',
    'emote',
    'emoticon',
    'emotion',
    'empathic',
    'empathy',
    'emperor',
    'emphases',
    'emphasis',
    'emphasize',
    'emphatic',
    'empirical',
    'employed',
    'employee',
    'employer',
    'emporium',
    'empower',
    'emptier',
    'emptiness',
    'empty',
    'emu',
    'enable',
    'enactment',
    'enamel',
    'enchanted',
    'enchilada',
    'encircle',
    'enclose',
    'enclosure',
    'encode',
    'encore',
    'encounter',
    'encourage',
    'encroach',
    'encrust',
    'encrypt',
    'endanger',
    'endeared',
    'endearing',
    'ended',
    'ending',
    'endless',
    'endnote',
    'endocrine',
    'endorphin',
    'endorse',
    'endowment',
    'endpoint',
    'endurable',
    'endurance',
    'enduring',
    'energetic',
    'energize',
    'energy',
    'enforced',
    'enforcer',
    'engaged',
    'engaging',
    'engine',
    'engorge',
    'engraved',
    'engraver',
    'engraving',
    'engross',
    'engulf',
    'enhance',
    'enigmatic',
    'enjoyable',
    'enjoyably',
    'enjoyer',
    'enjoying',
    'enjoyment',
    'enlarged',
    'enlarging',
    'enlighten',
    'enlisted',
    'enquirer',
    'enrage',
    'enrich',
    'enroll',
    'enslave',
    'ensnare',
    'ensure',
    'entail',
    'entangled',
    'entering',
    'entertain',
    'enticing',
    'entire',
    'entitle',
    'entity',
    'entomb',
    'entourage',
    'entrap',
    'entree',
    'entrench',
    'entrust',
    'entryway',
    'entwine',
    'enunciate',
    'envelope',
    'enviable',
    'enviably',
    'envious',
    'envision',
    'envoy',
    'envy',
    'enzyme',
    'epic',
    'epidemic',
    'epidermal',
    'epidermis',
    'epidural',
    'epilepsy',
    'epileptic',
    'epilogue',
    'epiphany',
    'episode',
    'equal',
    'equate',
    'equation',
    'equator',
    'equinox',
    'equipment',
    'equity',
    'equivocal',
    'eradicate',
    'erasable',
    'erased',
    'eraser',
    'erasure',
    'ergonomic',
    'errand',
    'errant',
    'erratic',
    'error',
    'erupt',
    'escalate',
    'escalator',
    'escapable',
    'escapade',
    'escapist',
    'escargot',
    'eskimo',
    'esophagus',
    'espionage',
    'espresso',
    'esquire',
    'essay',
    'essence',
    'essential',
    'establish',
    'estate',
    'esteemed',
    'estimate',
    'estimator',
    'estranged',
    'estrogen',
    'etching',
    'eternal',
    'eternity',
    'ethanol',
    'ether',
    'ethically',
    'ethics',
    'euphemism',
    'evacuate',
    'evacuee',
    'evade',
    'evaluate',
    'evaluator',
    'evaporate',
    'evasion',
    'evasive',
    'even',
    'everglade',
    'evergreen',
    'everybody',
    'everyday',
    'everyone',
    'evict',
    'evidence',
    'evident',
    'evil',
    'evoke',
    'evolution',
    'evolve',
    'exact',
    'exalted',
    'example',
    'excavate',
    'excavator',
    'exceeding',
    'exception',
    'excess',
    'exchange',
    'excitable',
    'exciting',
    'exclaim',
    'exclude',
    'excluding',
    'exclusion',
    'exclusive',
    'excretion',
    'excretory',
    'excursion',
    'excusable',
    'excusably',
    'excuse',
    'exemplary',
    'exemplify',
    'exemption',
    'exerciser',
    'exert',
    'exes',
    'exfoliate',
    'exhale',
    'exhaust',
    'exhume',
    'exile',
    'existing',
    'exit',
    'exodus',
    'exonerate',
    'exorcism',
    'exorcist',
    'expand',
    'expanse',
    'expansion',
    'expansive',
    'expectant',
    'expedited',
    'expediter',
    'expel',
    'expend',
    'expenses',
    'expensive',
    'expert',
    'expire',
    'expiring',
    'explain',
    'expletive',
    'explicit',
    'explode',
    'exploit',
    'explore',
    'exploring',
    'exponent',
    'exporter',
    'exposable',
    'expose',
    'exposure',
    'express',
    'expulsion',
    'exquisite',
    'extended',
    'extending',
    'extent',
    'extenuate',
    'exterior',
    'external',
    'extinct',
    'extortion',
    'extradite',
    'extras',
    'extrovert',
    'extrude',
    'extruding',
    'exuberant',
    'fable',
    'fabric',
    'fabulous',
    'facebook',
    'facecloth',
    'facedown',
    'faceless',
    'facelift',
    'faceplate',
    'faceted',
    'facial',
    'facility',
    'facing',
    'facsimile',
    'faction',
    'factoid',
    'factor',
    'factsheet',
    'factual',
    'faculty',
    'fade',
    'fading',
    'failing',
    'falcon',
    'fall',
    'false',
    'falsify',
    'fame',
    'familiar',
    'family',
    'famine',
    'famished',
    'fanatic',
    'fancied',
    'fanciness',
    'fancy',
    'fanfare',
    'fang',
    'fanning',
    'fantasize',
    'fantastic',
    'fantasy',
    'fascism',
    'fastball',
    'faster',
    'fasting',
    'fastness',
    'faucet',
    'favorable',
    'favorably',
    'favored',
    'favoring',
    'favorite',
    'fax',
    'feast',
    'federal',
    'fedora',
    'feeble',
    'feed',
    'feel',
    'feisty',
    'feline',
    'felt-tip',
    'feminine',
    'feminism',
    'feminist',
    'feminize',
    'femur',
    'fence',
    'fencing',
    'fender',
    'ferment',
    'fernlike',
    'ferocious',
    'ferocity',
    'ferret',
    'ferris',
    'ferry',
    'fervor',
    'fester',
    'festival',
    'festive',
    'festivity',
    'fetal',
    'fetch',
    'fever',
    'fiber',
    'fiction',
    'fiddle',
    'fiddling',
    'fidelity',
    'fidgeting',
    'fidgety',
    'fifteen',
    'fifth',
    'fiftieth',
    'fifty',
    'figment',
    'figure',
    'figurine',
    'filing',
    'filled',
    'filler',
    'filling',
    'film',
    'filter',
    'filth',
    'filtrate',
    'finale',
    'finalist',
    'finalize',
    'finally',
    'finance',
    'financial',
    'finch',
    'fineness',
    'finer',
    'finicky',
    'finished',
    'finisher',
    'finishing',
    'finite',
    'finless',
    'finlike',
    'fiscally',
    'fit',
    'five',
    'flaccid',
    'flagman',
    'flagpole',
    'flagship',
    'flagstick',
    'flagstone',
    'flail',
    'flakily',
    'flaky',
    'flame',
    'flammable',
    'flanked',
    'flanking',
    'flannels',
    'flap',
    'flaring',
    'flashback',
    'flashbulb',
    'flashcard',
    'flashily',
    'flashing',
    'flashy',
    'flask',
    'flatbed',
    'flatfoot',
    'flatly',
    'flatness',
    'flatten',
    'flattered',
    'flatterer',
    'flattery',
    'flattop',
    'flatware',
    'flatworm',
    'flavored',
    'flavorful',
    'flavoring',
    'flaxseed',
    'fled',
    'fleshed',
    'fleshy',
    'flick',
    'flier',
    'flight',
    'flinch',
    'fling',
    'flint',
    'flip',
    'flirt',
    'float',
    'flock',
    'flogging',
    'flop',
    'floral',
    'florist',
    'floss',
    'flounder',
    'flyable',
    'flyaway',
    'flyer',
    'flying',
    'flyover',
    'flypaper',
    'foam',
    'foe',
    'fog',
    'foil',
    'folic',
    'folk',
    'follicle',
    'follow',
    'fondling',
    'fondly',
    'fondness',
    'fondue',
    'font',
    'food',
    'fool',
    'footage',
    'football',
    'footbath',
    'footboard',
    'footer',
    'footgear',
    'foothill',
    'foothold',
    'footing',
    'footless',
    'footman',
    'footnote',
    'footpad',
    'footpath',
    'footprint',
    'footrest',
    'footsie',
    'footsore',
    'footwear',
    'footwork',
    'fossil',
    'foster',
    'founder',
    'founding',
    'fountain',
    'fox',
    'foyer',
    'fraction',
    'fracture',
    'fragile',
    'fragility',
    'fragment',
    'fragrance',
    'fragrant',
    'frail',
    'frame',
    'framing',
    'frantic',
    'fraternal',
    'frayed',
    'fraying',
    'frays',
    'freckled',
    'freckles',
    'freebase',
    'freebee',
    'freebie',
    'freedom',
    'freefall',
    'freehand',
    'freeing',
    'freeload',
    'freely',
    'freemason',
    'freeness',
    'freestyle',
    'freeware',
    'freeway',
    'freewill',
    'freezable',
    'freezing',
    'freight',
    'french',
    'frenzied',
    'frenzy',
    'frequency',
    'frequent',
    'fresh',
    'fretful',
    'fretted',
    'friction',
    'friday',
    'fridge',
    'fried',
    'friend',
    'frighten',
    'frightful',
    'frigidity',
    'frigidly',
    'frill',
    'fringe',
    'frisbee',
    'frisk',
    'fritter',
    'frivolous',
    'frolic',
    'from',
    'front',
    'frostbite',
    'frosted',
    'frostily',
    'frosting',
    'frostlike',
    'frosty',
    'froth',
    'frown',
    'frozen',
    'fructose',
    'frugality',
    'frugally',
    'fruit',
    'frustrate',
    'frying',
    'gab',
    'gaffe',
    'gag',
    'gainfully',
    'gaining',
    'gains',
    'gala',
    'gallantly',
    'galleria',
    'gallery',
    'galley',
    'gallon',
    'gallows',
    'gallstone',
    'galore',
    'galvanize',
    'gambling',
    'game',
    'gaming',
    'gamma',
    'gander',
    'gangly',
    'gangrene',
    'gangway',
    'gap',
    'garage',
    'garbage',
    'garden',
    'gargle',
    'garland',
    'garlic',
    'garment',
    'garnet',
    'garnish',
    'garter',
    'gas',
    'gatherer',
    'gathering',
    'gating',
    'gauging',
    'gauntlet',
    'gauze',
    'gave',
    'gawk',
    'gazing',
    'gear',
    'gecko',
    'geek',
    'geiger',
    'gem',
    'gender',
    'generic',
    'generous',
    'genetics',
    'genre',
    'gentile',
    'gentleman',
    'gently',
    'gents',
    'geography',
    'geologic',
    'geologist',
    'geology',
    'geometric',
    'geometry',
    'geranium',
    'gerbil',
    'geriatric',
    'germicide',
    'germinate',
    'germless',
    'germproof',
    'gestate',
    'gestation',
    'gesture',
    'getaway',
    'getting',
    'getup',
    'giant',
    'gibberish',
    'giblet',
    'giddily',
    'giddiness',
    'giddy',
    'gift',
    'gigabyte',
    'gigahertz',
    'gigantic',
    'giggle',
    'giggling',
    'giggly',
    'gigolo',
    'gilled',
    'gills',
    'gimmick',
    'girdle',
    'giveaway',
    'given',
    'giver',
    'giving',
    'gizmo',
    'gizzard',
    'glacial',
    'glacier',
    'glade',
    'gladiator',
    'gladly',
    'glamorous',
    'glamour',
    'glance',
    'glancing',
    'glandular',
    'glare',
    'glaring',
    'glass',
    'glaucoma',
    'glazing',
    'gleaming',
    'gleeful',
    'glider',
    'gliding',
    'glimmer',
    'glimpse',
    'glisten',
    'glitch',
    'glitter',
    'glitzy',
    'gloater',
    'gloating',
    'gloomily',
    'gloomy',
    'glorified',
    'glorifier',
    'glorify',
    'glorious',
    'glory',
    'gloss',
    'glove',
    'glowing',
    'glowworm',
    'glucose',
    'glue',
    'gluten',
    'glutinous',
    'glutton',
    'gnarly',
    'gnat',
    'goal',
    'goatskin',
    'goes',
    'goggles',
    'going',
    'goldfish',
    'goldmine',
    'goldsmith',
    'golf',
    'goliath',
    'gonad',
    'gondola',
    'gone',
    'gong',
    'good',
    'gooey',
    'goofball',
    'goofiness',
    'goofy',
    'google',
    'goon',
    'gopher',
    'gore',
    'gorged',
    'gorgeous',
    'gory',
    'gosling',
    'gossip',
    'gothic',
    'gotten',
    'gout',
    'gown',
    'grab',
    'graceful',
    'graceless',
    'gracious',
    'gradation',
    'graded',
    'grader',
    'gradient',
    'grading',
    'gradually',
    'graduate',
    'graffiti',
    'grafted',
    'grafting',
    'grain',
    'granddad',
    'grandkid',
    'grandly',
    'grandma',
    'grandpa',
    'grandson',
    'granite',
    'granny',
    'granola',
    'grant',
    'granular',
    'grape',
    'graph',
    'grapple',
    'grappling',
    'grasp',
    'grass',
    'gratified',
    'gratify',
    'grating',
    'gratitude',
    'gratuity',
    'gravel',
    'graveness',
    'graves',
    'graveyard',
    'gravitate',
    'gravity',
    'gravy',
    'gray',
    'grazing',
    'greasily',
    'greedily',
    'greedless',
    'greedy',
    'green',
    'greeter',
    'greeting',
    'grew',
    'greyhound',
    'grid',
    'grief',
    'grievance',
    'grieving',
    'grievous',
    'grill',
    'grimace',
    'grimacing',
    'grime',
    'griminess',
    'grimy',
    'grinch',
    'grinning',
    'grip',
    'gristle',
    'grit',
    'groggily',
    'groggy',
    'groin',
    'groom',
    'groove',
    'grooving',
    'groovy',
    'grope',
    'ground',
    'grouped',
    'grout',
    'grove',
    'grower',
    'growing',
    'growl',
    'grub',
    'grudge',
    'grudging',
    'grueling',
    'gruffly',
    'grumble',
    'grumbling',
    'grumbly',
    'grumpily',
    'grunge',
    'grunt',
    'guacamole',
    'guidable',
    'guidance',
    'guide',
    'guiding',
    'guileless',
    'guise',
    'gulf',
    'gullible',
    'gully',
    'gulp',
    'gumball',
    'gumdrop',
    'gumminess',
    'gumming',
    'gummy',
    'gurgle',
    'gurgling',
    'guru',
    'gush',
    'gusto',
    'gusty',
    'gutless',
    'guts',
    'gutter',
    'guy',
    'guzzler',
    'gyration',
    'habitable',
    'habitant',
    'habitat',
    'habitual',
    'hacked',
    'hacker',
    'hacking',
    'hacksaw',
    'had',
    'haggler',
    'haiku',
    'half',
    'halogen',
    'halt',
    'halved',
    'halves',
    'hamburger',
    'hamlet',
    'hammock',
    'hamper',
    'hamster',
    'hamstring',
    'handbag',
    'handball',
    'handbook',
    'handbrake',
    'handcart',
    'handclap',
    'handclasp',
    'handcraft',
    'handcuff',
    'handed',
    'handful',
    'handgrip',
    'handgun',
    'handheld',
    'handiness',
    'handiwork',
    'handlebar',
    'handled',
    'handler',
    'handling',
    'handmade',
    'handoff',
    'handpick',
    'handprint',
    'handrail',
    'handsaw',
    'handset',
    'handsfree',
    'handshake',
    'handstand',
    'handwash',
    'handwork',
    'handwoven',
    'handwrite',
    'handyman',
    'hangnail',
    'hangout',
    'hangover',
    'hangup',
    'hankering',
    'hankie',
    'hanky',
    'haphazard',
    'happening',
    'happier',
    'happiest',
    'happily',
    'happiness',
    'happy',
    'harbor',
    'hardcopy',
    'hardcore',
    'hardcover',
    'harddisk',
    'hardened',
    'hardener',
    'hardening',
    'hardhat',
    'hardhead',
    'hardiness',
    'hardly',
    'hardness',
    'hardship',
    'hardware',
    'hardwired',
    'hardwood',
    'hardy',
    'harmful',
    'harmless',
    'harmonica',
    'harmonics',
    'harmonize',
    'harmony',
    'harness',
    'harpist',
    'harsh',
    'harvest',
    'hash',
    'hassle',
    'haste',
    'hastily',
    'hastiness',
    'hasty',
    'hatbox',
    'hatchback',
    'hatchery',
    'hatchet',
    'hatching',
    'hatchling',
    'hate',
    'hatless',
    'hatred',
    'haunt',
    'haven',
    'hazard',
    'hazelnut',
    'hazily',
    'haziness',
    'hazing',
    'hazy',
    'headache',
    'headband',
    'headboard',
    'headcount',
    'headdress',
    'headed',
    'header',
    'headfirst',
    'headgear',
    'heading',
    'headlamp',
    'headless',
    'headlock',
    'headphone',
    'headpiece',
    'headrest',
    'headroom',
    'headscarf',
    'headset',
    'headsman',
    'headstand',
    'headstone',
    'headway',
    'headwear',
    'heap',
    'heat',
    'heave',
    'heavily',
    'heaviness',
    'heaving',
    'hedge',
    'hedging',
    'heftiness',
    'hefty',
    'helium',
    'helmet',
    'helper',
    'helpful',
    'helping',
    'helpless',
    'helpline',
    'hemlock',
    'hemstitch',
    'hence',
    'henchman',
    'henna',
    'herald',
    'herbal',
    'herbicide',
    'herbs',
    'heritage',
    'hermit',
    'heroics',
    'heroism',
    'herring',
    'herself',
    'hertz',
    'hesitancy',
    'hesitant',
    'hesitate',
    'hexagon',
    'hexagram',
    'hubcap',
    'huddle',
    'huddling',
    'huff',
    'hug',
    'hula',
    'hulk',
    'hull',
    'human',
    'humble',
    'humbling',
    'humbly',
    'humid',
    'humiliate',
    'humility',
    'humming',
    'hummus',
    'humongous',
    'humorist',
    'humorless',
    'humorous',
    'humpback',
    'humped',
    'humvee',
    'hunchback',
    'hundredth',
    'hunger',
    'hungrily',
    'hungry',
    'hunk',
    'hunter',
    'hunting',
    'huntress',
    'huntsman',
    'hurdle',
    'hurled',
    'hurler',
    'hurling',
    'hurray',
    'hurricane',
    'hurried',
    'hurry',
    'hurt',
    'husband',
    'hush',
    'husked',
    'huskiness',
    'hut',
    'hybrid',
    'hydrant',
    'hydrated',
    'hydration',
    'hydrogen',
    'hydroxide',
    'hyperlink',
    'hypertext',
    'hyphen',
    'hypnoses',
    'hypnosis',
    'hypnotic',
    'hypnotism',
    'hypnotist',
    'hypnotize',
    'hypocrisy',
    'hypocrite',
    'ibuprofen',
    'ice',
    'iciness',
    'icing',
    'icky',
    'icon',
    'icy',
    'idealism',
    'idealist',
    'idealize',
    'ideally',
    'idealness',
    'identical',
    'identify',
    'identity',
    'ideology',
    'idiocy',
    'idiom',
    'idly',
    'igloo',
    'ignition',
    'ignore',
    'iguana',
    'illicitly',
    'illusion',
    'illusive',
    'image',
    'imaginary',
    'imagines',
    'imaging',
    'imbecile',
    'imitate',
    'imitation',
    'immature',
    'immerse',
    'immersion',
    'imminent',
    'immobile',
    'immodest',
    'immorally',
    'immortal',
    'immovable',
    'immovably',
    'immunity',
    'immunize',
    'impaired',
    'impale',
    'impart',
    'impatient',
    'impeach',
    'impeding',
    'impending',
    'imperfect',
    'imperial',
    'impish',
    'implant',
    'implement',
    'implicate',
    'implicit',
    'implode',
    'implosion',
    'implosive',
    'imply',
    'impolite',
    'important',
    'importer',
    'impose',
    'imposing',
    'impotence',
    'impotency',
    'impotent',
    'impound',
    'imprecise',
    'imprint',
    'imprison',
    'impromptu',
    'improper',
    'improve',
    'improving',
    'improvise',
    'imprudent',
    'impulse',
    'impulsive',
    'impure',
    'impurity',
    'iodine',
    'iodize',
    'ion',
    'ipad',
    'iphone',
    'ipod',
    'irate',
    'irk',
    'iron',
    'irregular',
    'irrigate',
    'irritable',
    'irritably',
    'irritant',
    'irritate',
    'islamic',
    'islamist',
    'isolated',
    'isolating',
    'isolation',
    'isotope',
    'issue',
    'issuing',
    'italicize',
    'italics',
    'item',
    'itinerary',
    'itunes',
    'ivory',
    'ivy',
    'jab',
    'jackal',
    'jacket',
    'jackknife',
    'jackpot',
    'jailbird',
    'jailbreak',
    'jailer',
    'jailhouse',
    'jalapeno',
    'jam',
    'janitor',
    'january',
    'jargon',
    'jarring',
    'jasmine',
    'jaundice',
    'jaunt',
    'java',
    'jawed',
    'jawless',
    'jawline',
    'jaws',
    'jaybird',
    'jaywalker',
    'jazz',
    'jeep',
    'jeeringly',
    'jellied',
    'jelly',
    'jersey',
    'jester',
    'jet',
    'jiffy',
    'jigsaw',
    'jimmy',
    'jingle',
    'jingling',
    'jinx',
    'jitters',
    'jittery',
    'job',
    'jockey',
    'jockstrap',
    'jogger',
    'jogging',
    'john',
    'joining',
    'jokester',
    'jokingly',
    'jolliness',
    'jolly',
    'jolt',
    'jot',
    'jovial',
    'joyfully',
    'joylessly',
    'joyous',
    'joyride',
    'joystick',
    'jubilance',
    'jubilant',
    'judge',
    'judgingly',
    'judicial',
    'judiciary',
    'judo',
    'juggle',
    'juggling',
    'jugular',
    'juice',
    'juiciness',
    'juicy',
    'jujitsu',
    'jukebox',
    'july',
    'jumble',
    'jumbo',
    'jump',
    'junction',
    'juncture',
    'june',
    'junior',
    'juniper',
    'junkie',
    'junkman',
    'junkyard',
    'jurist',
    'juror',
    'jury',
    'justice',
    'justifier',
    'justify',
    'justly',
    'justness',
    'juvenile',
    'kabob',
    'kangaroo',
    'karaoke',
    'karate',
    'karma',
    'kebab',
    'keenly',
    'keenness',
    'keep',
    'keg',
    'kelp',
    'kennel',
    'kept',
    'kerchief',
    'kerosene',
    'kettle',
    'kick',
    'kiln',
    'kilobyte',
    'kilogram',
    'kilometer',
    'kilowatt',
    'kilt',
    'kimono',
    'kindle',
    'kindling',
    'kindly',
    'kindness',
    'kindred',
    'kinetic',
    'kinfolk',
    'king',
    'kinship',
    'kinsman',
    'kinswoman',
    'kissable',
    'kisser',
    'kissing',
    'kitchen',
    'kite',
    'kitten',
    'kitty',
    'kiwi',
    'kleenex',
    'knapsack',
    'knee',
    'knelt',
    'knickers',
    'knoll',
    'koala',
    'kooky',
    'kosher',
    'krypton',
    'kudos',
    'kung',
    'labored',
    'laborer',
    'laboring',
    'laborious',
    'labrador',
    'ladder',
    'ladies',
    'ladle',
    'ladybug',
    'ladylike',
    'lagged',
    'lagging',
    'lagoon',
    'lair',
    'lake',
    'lance',
    'landed',
    'landfall',
    'landfill',
    'landing',
    'landlady',
    'landless',
    'landline',
    'landlord',
    'landmark',
    'landmass',
    'landmine',
    'landowner',
    'landscape',
    'landside',
    'landslide',
    'language',
    'lankiness',
    'lanky',
    'lantern',
    'lapdog',
    'lapel',
    'lapped',
    'lapping',
    'laptop',
    'lard',
    'large',
    'lark',
    'lash',
    'lasso',
    'last',
    'latch',
    'late',
    'lather',
    'latitude',
    'latrine',
    'latter',
    'latticed',
    'launch',
    'launder',
    'laundry',
    'laurel',
    'lavender',
    'lavish',
    'laxative',
    'lazily',
    'laziness',
    'lazy',
    'lecturer',
    'left',
    'legacy',
    'legal',
    'legend',
    'legged',
    'leggings',
    'legible',
    'legibly',
    'legislate',
    'lego',
    'legroom',
    'legume',
    'legwarmer',
    'legwork',
    'lemon',
    'lend',
    'length',
    'lens',
    'lent',
    'leotard',
    'lesser',
    'letdown',
    'lethargic',
    'lethargy',
    'letter',
    'lettuce',
    'level',
    'leverage',
    'levers',
    'levitate',
    'levitator',
    'liability',
    'liable',
    'liberty',
    'librarian',
    'library',
    'licking',
    'licorice',
    'lid',
    'life',
    'lifter',
    'lifting',
    'liftoff',
    'ligament',
    'likely',
    'likeness',
    'likewise',
    'liking',
    'lilac',
    'lilly',
    'lily',
    'limb',
    'limeade',
    'limelight',
    'limes',
    'limit',
    'limping',
    'limpness',
    'line',
    'lingo',
    'linguini',
    'linguist',
    'lining',
    'linked',
    'linoleum',
    'linseed',
    'lint',
    'lion',
    'lip',
    'liquefy',
    'liqueur',
    'liquid',
    'lisp',
    'list',
    'litigate',
    'litigator',
    'litmus',
    'litter',
    'little',
    'livable',
    'lived',
    'lively',
    'liver',
    'livestock',
    'lividly',
    'living',
    'lizard',
    'lubricant',
    'lubricate',
    'lucid',
    'luckily',
    'luckiness',
    'luckless',
    'lucrative',
    'ludicrous',
    'lugged',
    'lukewarm',
    'lullaby',
    'lumber',
    'luminance',
    'luminous',
    'lumpiness',
    'lumping',
    'lumpish',
    'lunacy',
    'lunar',
    'lunchbox',
    'luncheon',
    'lunchroom',
    'lunchtime',
    'lung',
    'lurch',
    'lure',
    'luridness',
    'lurk',
    'lushly',
    'lushness',
    'luster',
    'lustfully',
    'lustily',
    'lustiness',
    'lustrous',
    'lusty',
    'luxurious',
    'luxury',
    'lying',
    'lyrically',
    'lyricism',
    'lyricist',
    'lyrics',
    'macarena',
    'macaroni',
    'macaw',
    'mace',
    'machine',
    'machinist',
    'magazine',
    'magenta',
    'maggot',
    'magical',
    'magician',
    'magma',
    'magnesium',
    'magnetic',
    'magnetism',
    'magnetize',
    'magnifier',
    'magnify',
    'magnitude',
    'magnolia',
    'mahogany',
    'maimed',
    'majestic',
    'majesty',
    'majorette',
    'majority',
    'makeover',
    'maker',
    'makeshift',
    'making',
    'malformed',
    'malt',
    'mama',
    'mammal',
    'mammary',
    'mammogram',
    'manager',
    'managing',
    'manatee',
    'mandarin',
    'mandate',
    'mandatory',
    'mandolin',
    'manger',
    'mangle',
    'mango',
    'mangy',
    'manhandle',
    'manhole',
    'manhood',
    'manhunt',
    'manicotti',
    'manicure',
    'manifesto',
    'manila',
    'mankind',
    'manlike',
    'manliness',
    'manly',
    'manmade',
    'manned',
    'mannish',
    'manor',
    'manpower',
    'mantis',
    'mantra',
    'manual',
    'many',
    'map',
    'marathon',
    'marauding',
    'marbled',
    'marbles',
    'marbling',
    'march',
    'mardi',
    'margarine',
    'margarita',
    'margin',
    'marigold',
    'marina',
    'marine',
    'marital',
    'maritime',
    'marlin',
    'marmalade',
    'maroon',
    'married',
    'marrow',
    'marry',
    'marshland',
    'marshy',
    'marsupial',
    'marvelous',
    'marxism',
    'mascot',
    'masculine',
    'mashed',
    'mashing',
    'massager',
    'masses',
    'massive',
    'mastiff',
    'matador',
    'matchbook',
    'matchbox',
    'matcher',
    'matching',
    'matchless',
    'material',
    'maternal',
    'maternity',
    'math',
    'mating',
    'matriarch',
    'matrimony',
    'matrix',
    'matron',
    'matted',
    'matter',
    'maturely',
    'maturing',
    'maturity',
    'mauve',
    'maverick',
    'maximize',
    'maximum',
    'maybe',
    'mayday',
    'mayflower',
    'moaner',
    'moaning',
    'mobile',
    'mobility',
    'mobilize',
    'mobster',
    'mocha',
    'mocker',
    'mockup',
    'modified',
    'modify',
    'modular',
    'modulator',
    'module',
    'moisten',
    'moistness',
    'moisture',
    'molar',
    'molasses',
    'mold',
    'molecular',
    'molecule',
    'molehill',
    'mollusk',
    'mom',
    'monastery',
    'monday',
    'monetary',
    'monetize',
    'moneybags',
    'moneyless',
    'moneywise',
    'mongoose',
    'mongrel',
    'monitor',
    'monkhood',
    'monogamy',
    'monogram',
    'monologue',
    'monopoly',
    'monorail',
    'monotone',
    'monotype',
    'monoxide',
    'monsieur',
    'monsoon',
    'monstrous',
    'monthly',
    'monument',
    'moocher',
    'moodiness',
    'moody',
    'mooing',
    'moonbeam',
    'mooned',
    'moonlight',
    'moonlike',
    'moonlit',
    'moonrise',
    'moonscape',
    'moonshine',
    'moonstone',
    'moonwalk',
    'mop',
    'morale',
    'morality',
    'morally',
    'morbidity',
    'morbidly',
    'morphine',
    'morphing',
    'morse',
    'mortality',
    'mortally',
    'mortician',
    'mortified',
    'mortify',
    'mortuary',
    'mosaic',
    'mossy',
    'most',
    'mothball',
    'mothproof',
    'motion',
    'motivate',
    'motivator',
    'motive',
    'motocross',
    'motor',
    'motto',
    'mountable',
    'mountain',
    'mounted',
    'mounting',
    'mourner',
    'mournful',
    'mouse',
    'mousiness',
    'moustache',
    'mousy',
    'mouth',
    'movable',
    'move',
    'movie',
    'moving',
    'mower',
    'mowing',
    'much',
    'muck',
    'mud',
    'mug',
    'mulberry',
    'mulch',
    'mule',
    'mulled',
    'mullets',
    'multiple',
    'multiply',
    'multitask',
    'multitude',
    'mumble',
    'mumbling',
    'mumbo',
    'mummified',
    'mummify',
    'mummy',
    'mumps',
    'munchkin',
    'mundane',
    'municipal',
    'muppet',
    'mural',
    'murkiness',
    'murky',
    'murmuring',
    'muscular',
    'museum',
    'mushily',
    'mushiness',
    'mushroom',
    'mushy',
    'music',
    'musket',
    'muskiness',
    'musky',
    'mustang',
    'mustard',
    'muster',
    'mustiness',
    'musty',
    'mutable',
    'mutate',
    'mutation',
    'mute',
    'mutilated',
    'mutilator',
    'mutiny',
    'mutt',
    'mutual',
    'muzzle',
    'myself',
    'myspace',
    'mystified',
    'mystify',
    'myth',
    'nacho',
    'nag',
    'nail',
    'name',
    'naming',
    'nanny',
    'nanometer',
    'nape',
    'napkin',
    'napped',
    'napping',
    'nappy',
    'narrow',
    'nastily',
    'nastiness',
    'national',
    'native',
    'nativity',
    'natural',
    'nature',
    'naturist',
    'nautical',
    'navigate',
    'navigator',
    'navy',
    'nearby',
    'nearest',
    'nearly',
    'nearness',
    'neatly',
    'neatness',
    'nebula',
    'nebulizer',
    'nectar',
    'negate',
    'negation',
    'negative',
    'neglector',
    'negligee',
    'negligent',
    'negotiate',
    'nemeses',
    'nemesis',
    'neon',
    'nephew',
    'nerd',
    'nervous',
    'nervy',
    'nest',
    'net',
    'neurology',
    'neuron',
    'neurosis',
    'neurotic',
    'neuter',
    'neutron',
    'never',
    'next',
    'nibble',
    'nickname',
    'nicotine',
    'niece',
    'nifty',
    'nimble',
    'nimbly',
    'nineteen',
    'ninetieth',
    'ninja',
    'nintendo',
    'ninth',
    'nuclear',
    'nuclei',
    'nucleus',
    'nugget',
    'nullify',
    'number',
    'numbing',
    'numbly',
    'numbness',
    'numeral',
    'numerate',
    'numerator',
    'numeric',
    'numerous',
    'nuptials',
    'nursery',
    'nursing',
    'nurture',
    'nutcase',
    'nutlike',
    'nutmeg',
    'nutrient',
    'nutshell',
    'nuttiness',
    'nutty',
    'nuzzle',
    'nylon',
    'oaf',
    'oak',
    'oasis',
    'oat',
    'obedience',
    'obedient',
    'obituary',
    'object',
    'obligate',
    'obliged',
    'oblivion',
    'oblivious',
    'oblong',
    'obnoxious',
    'oboe',
    'obscure',
    'obscurity',
    'observant',
    'observer',
    'observing',
    'obsessed',
    'obsession',
    'obsessive',
    'obsolete',
    'obstacle',
    'obstinate',
    'obstruct',
    'obtain',
    'obtrusive',
    'obtuse',
    'obvious',
    'occultist',
    'occupancy',
    'occupant',
    'occupier',
    'occupy',
    'ocean',
    'ocelot',
    'octagon',
    'octane',
    'october',
    'octopus',
    'ogle',
    'oil',
    'oink',
    'ointment',
    'okay',
    'old',
    'olive',
    'olympics',
    'omega',
    'omen',
    'ominous',
    'omission',
    'omit',
    'omnivore',
    'onboard',
    'oncoming',
    'ongoing',
    'onion',
    'online',
    'onlooker',
    'only',
    'onscreen',
    'onset',
    'onshore',
    'onslaught',
    'onstage',
    'onto',
    'onward',
    'onyx',
    'oops',
    'ooze',
    'oozy',
    'opacity',
    'opal',
    'open',
    'operable',
    'operate',
    'operating',
    'operation',
    'operative',
    'operator',
    'opium',
    'opossum',
    'opponent',
    'oppose',
    'opposing',
    'opposite',
    'oppressed',
    'oppressor',
    'opt',
    'opulently',
    'osmosis',
    'other',
    'otter',
    'ouch',
    'ought',
    'ounce',
    'outage',
    'outback',
    'outbid',
    'outboard',
    'outbound',
    'outbreak',
    'outburst',
    'outcast',
    'outclass',
    'outcome',
    'outdated',
    'outdoors',
    'outer',
    'outfield',
    'outfit',
    'outflank',
    'outgoing',
    'outgrow',
    'outhouse',
    'outing',
    'outlast',
    'outlet',
    'outline',
    'outlook',
    'outlying',
    'outmatch',
    'outmost',
    'outnumber',
    'outplayed',
    'outpost',
    'outpour',
    'output',
    'outrage',
    'outrank',
    'outreach',
    'outright',
    'outscore',
    'outsell',
    'outshine',
    'outshoot',
    'outsider',
    'outskirts',
    'outsmart',
    'outsource',
    'outspoken',
    'outtakes',
    'outthink',
    'outward',
    'outweigh',
    'outwit',
    'oval',
    'ovary',
    'oven',
    'overact',
    'overall',
    'overarch',
    'overbid',
    'overbill',
    'overbite',
    'overblown',
    'overboard',
    'overbook',
    'overbuilt',
    'overcast',
    'overcoat',
    'overcome',
    'overcook',
    'overcrowd',
    'overdraft',
    'overdrawn',
    'overdress',
    'overdrive',
    'overdue',
    'overeager',
    'overeater',
    'overexert',
    'overfed',
    'overfeed',
    'overfill',
    'overflow',
    'overfull',
    'overgrown',
    'overhand',
    'overhang',
    'overhaul',
    'overhead',
    'overhear',
    'overheat',
    'overhung',
    'overjoyed',
    'overkill',
    'overlabor',
    'overlaid',
    'overlap',
    'overlay',
    'overload',
    'overlook',
    'overlord',
    'overlying',
    'overnight',
    'overpass',
    'overpay',
    'overplant',
    'overplay',
    'overpower',
    'overprice',
    'overrate',
    'overreach',
    'overreact',
    'override',
    'overripe',
    'overrule',
    'overrun',
    'overshoot',
    'overshot',
    'oversight',
    'oversized',
    'oversleep',
    'oversold',
    'overspend',
    'overstate',
    'overstay',
    'overstep',
    'overstock',
    'overstuff',
    'oversweet',
    'overtake',
    'overthrow',
    'overtime',
    'overtly',
    'overtone',
    'overture',
    'overturn',
    'overuse',
    'overvalue',
    'overview',
    'overwrite',
    'owl',
    'oxford',
    'oxidant',
    'oxidation',
    'oxidize',
    'oxidizing',
    'oxygen',
    'oxymoron',
    'oyster',
    'ozone',
    'paced',
    'pacemaker',
    'pacific',
    'pacifier',
    'pacifism',
    'pacifist',
    'pacify',
    'padded',
    'padding',
    'paddle',
    'paddling',
    'padlock',
    'pagan',
    'pager',
    'paging',
    'pajamas',
    'palace',
    'palatable',
    'palm',
    'palpable',
    'palpitate',
    'paltry',
    'pampered',
    'pamperer',
    'pampers',
    'pamphlet',
    'panama',
    'pancake',
    'pancreas',
    'panda',
    'pandemic',
    'pang',
    'panhandle',
    'panic',
    'panning',
    'panorama',
    'panoramic',
    'panther',
    'pantomime',
    'pantry',
    'pants',
    'pantyhose',
    'paparazzi',
    'papaya',
    'paper',
    'paprika',
    'papyrus',
    'parabola',
    'parachute',
    'parade',
    'paradox',
    'paragraph',
    'parakeet',
    'paralegal',
    'paralyses',
    'paralysis',
    'paralyze',
    'paramedic',
    'parameter',
    'paramount',
    'parasail',
    'parasite',
    'parasitic',
    'parcel',
    'parched',
    'parchment',
    'pardon',
    'parish',
    'parka',
    'parking',
    'parkway',
    'parlor',
    'parmesan',
    'parole',
    'parrot',
    'parsley',
    'parsnip',
    'partake',
    'parted',
    'parting',
    'partition',
    'partly',
    'partner',
    'partridge',
    'party',
    'passable',
    'passably',
    'passage',
    'passcode',
    'passenger',
    'passerby',
    'passing',
    'passion',
    'passive',
    'passivism',
    'passover',
    'passport',
    'password',
    'pasta',
    'pasted',
    'pastel',
    'pastime',
    'pastor',
    'pastrami',
    'pasture',
    'pasty',
    'patchwork',
    'patchy',
    'paternal',
    'paternity',
    'path',
    'patience',
    'patient',
    'patio',
    'patriarch',
    'patriot',
    'patrol',
    'patronage',
    'patronize',
    'pauper',
    'pavement',
    'paver',
    'pavestone',
    'pavilion',
    'paving',
    'pawing',
    'payable',
    'payback',
    'paycheck',
    'payday',
    'payee',
    'payer',
    'paying',
    'payment',
    'payphone',
    'payroll',
    'pebble',
    'pebbly',
    'pecan',
    'pectin',
    'peculiar',
    'peddling',
    'pediatric',
    'pedicure',
    'pedigree',
    'pedometer',
    'pegboard',
    'pelican',
    'pellet',
    'pelt',
    'pelvis',
    'penalize',
    'penalty',
    'pencil',
    'pendant',
    'pending',
    'penholder',
    'penknife',
    'pennant',
    'penniless',
    'penny',
    'penpal',
    'pension',
    'pentagon',
    'pentagram',
    'pep',
    'perceive',
    'percent',
    'perch',
    'percolate',
    'perennial',
    'perfected',
    'perfectly',
    'perfume',
    'periscope',
    'perish',
    'perjurer',
    'perjury',
    'perkiness',
    'perky',
    'perm',
    'peroxide',
    'perpetual',
    'perplexed',
    'persecute',
    'persevere',
    'persuaded',
    'persuader',
    'pesky',
    'peso',
    'pessimism',
    'pessimist',
    'pester',
    'pesticide',
    'petal',
    'petite',
    'petition',
    'petri',
    'petroleum',
    'petted',
    'petticoat',
    'pettiness',
    'petty',
    'petunia',
    'phantom',
    'phobia',
    'phoenix',
    'phonebook',
    'phoney',
    'phonics',
    'phoniness',
    'phony',
    'phosphate',
    'photo',
    'phrase',
    'phrasing',
    'placard',
    'placate',
    'placidly',
    'plank',
    'planner',
    'plant',
    'plasma',
    'plaster',
    'plastic',
    'plated',
    'platform',
    'plating',
    'platinum',
    'platonic',
    'platter',
    'platypus',
    'plausible',
    'plausibly',
    'playable',
    'playback',
    'player',
    'playful',
    'playgroup',
    'playhouse',
    'playing',
    'playlist',
    'playmaker',
    'playmate',
    'playoff',
    'playpen',
    'playroom',
    'playset',
    'plaything',
    'playtime',
    'plaza',
    'pleading',
    'pleat',
    'pledge',
    'plentiful',
    'plenty',
    'plethora',
    'plexiglas',
    'pliable',
    'plod',
    'plop',
    'plot',
    'plow',
    'ploy',
    'pluck',
    'plug',
    'plunder',
    'plunging',
    'plural',
    'plus',
    'plutonium',
    'plywood',
    'poach',
    'pod',
    'poem',
    'poet',
    'pogo',
    'pointed',
    'pointer',
    'pointing',
    'pointless',
    'pointy',
    'poise',
    'poison',
    'poker',
    'poking',
    'polar',
    'police',
    'policy',
    'polio',
    'polish',
    'politely',
    'polka',
    'polo',
    'polyester',
    'polygon',
    'polygraph',
    'polymer',
    'poncho',
    'pond',
    'pony',
    'popcorn',
    'pope',
    'poplar',
    'popper',
    'poppy',
    'popsicle',
    'populace',
    'popular',
    'populate',
    'porcupine',
    'pork',
    'porous',
    'porridge',
    'portable',
    'portal',
    'portfolio',
    'porthole',
    'portion',
    'portly',
    'portside',
    'poser',
    'posh',
    'posing',
    'possible',
    'possibly',
    'possum',
    'postage',
    'postal',
    'postbox',
    'postcard',
    'posted',
    'poster',
    'posting',
    'postnasal',
    'posture',
    'postwar',
    'pouch',
    'pounce',
    'pouncing',
    'pound',
    'pouring',
    'pout',
    'powdered',
    'powdering',
    'powdery',
    'power',
    'powwow',
    'pox',
    'praising',
    'prance',
    'prancing',
    'pranker',
    'prankish',
    'prankster',
    'prayer',
    'praying',
    'preacher',
    'preaching',
    'preachy',
    'preamble',
    'precinct',
    'precise',
    'precision',
    'precook',
    'precut',
    'predator',
    'predefine',
    'predict',
    'preface',
    'prefix',
    'preflight',
    'preformed',
    'pregame',
    'pregnancy',
    'pregnant',
    'preheated',
    'prelaunch',
    'prelaw',
    'prelude',
    'premiere',
    'premises',
    'premium',
    'prenatal',
    'preoccupy',
    'preorder',
    'prepaid',
    'prepay',
    'preplan',
    'preppy',
    'preschool',
    'prescribe',
    'preseason',
    'preset',
    'preshow',
    'president',
    'presoak',
    'press',
    'presume',
    'presuming',
    'preteen',
    'pretended',
    'pretender',
    'pretense',
    'pretext',
    'pretty',
    'pretzel',
    'prevail',
    'prevalent',
    'prevent',
    'preview',
    'previous',
    'prewar',
    'prewashed',
    'prideful',
    'pried',
    'primal',
    'primarily',
    'primary',
    'primate',
    'primer',
    'primp',
    'princess',
    'print',
    'prior',
    'prism',
    'prison',
    'prissy',
    'pristine',
    'privacy',
    'private',
    'privatize',
    'prize',
    'proactive',
    'probable',
    'probably',
    'probation',
    'probe',
    'probing',
    'probiotic',
    'problem',
    'procedure',
    'process',
    'proclaim',
    'procreate',
    'procurer',
    'prodigal',
    'prodigy',
    'produce',
    'product',
    'profane',
    'profanity',
    'professed',
    'professor',
    'profile',
    'profound',
    'profusely',
    'progeny',
    'prognosis',
    'program',
    'progress',
    'projector',
    'prologue',
    'prolonged',
    'promenade',
    'prominent',
    'promoter',
    'promotion',
    'prompter',
    'promptly',
    'prone',
    'prong',
    'pronounce',
    'pronto',
    'proofing',
    'proofread',
    'proofs',
    'propeller',
    'properly',
    'property',
    'proponent',
    'proposal',
    'propose',
    'props',
    'prorate',
    'protector',
    'protegee',
    'proton',
    'prototype',
    'protozoan',
    'protract',
    'protrude',
    'proud',
    'provable',
    'proved',
    'proven',
    'provided',
    'provider',
    'providing',
    'province',
    'proving',
    'provoke',
    'provoking',
    'provolone',
    'prowess',
    'prowler',
    'prowling',
    'proximity',
    'proxy',
    'prozac',
    'prude',
    'prudishly',
    'prune',
    'pruning',
    'pry',
    'psychic',
    'public',
    'publisher',
    'pucker',
    'pueblo',
    'pug',
    'pull',
    'pulmonary',
    'pulp',
    'pulsate',
    'pulse',
    'pulverize',
    'puma',
    'pumice',
    'pummel',
    'punch',
    'punctual',
    'punctuate',
    'punctured',
    'pungent',
    'punisher',
    'punk',
    'pupil',
    'puppet',
    'puppy',
    'purchase',
    'pureblood',
    'purebred',
    'purely',
    'pureness',
    'purgatory',
    'purge',
    'purging',
    'purifier',
    'purify',
    'purist',
    'puritan',
    'purity',
    'purple',
    'purplish',
    'purposely',
    'purr',
    'purse',
    'pursuable',
    'pursuant',
    'pursuit',
    'purveyor',
    'pushcart',
    'pushchair',
    'pusher',
    'pushiness',
    'pushing',
    'pushover',
    'pushpin',
    'pushup',
    'pushy',
    'putdown',
    'putt',
    'puzzle',
    'puzzling',
    'pyramid',
    'pyromania',
    'python',
    'quack',
    'quadrant',
    'quail',
    'quaintly',
    'quake',
    'quaking',
    'qualified',
    'qualifier',
    'qualify',
    'quality',
    'qualm',
    'quantum',
    'quarrel',
    'quarry',
    'quartered',
    'quarterly',
    'quarters',
    'quartet',
    'quench',
    'query',
    'quicken',
    'quickly',
    'quickness',
    'quicksand',
    'quickstep',
    'quiet',
    'quill',
    'quilt',
    'quintet',
    'quintuple',
    'quirk',
    'quit',
    'quiver',
    'quizzical',
    'quotable',
    'quotation',
    'quote',
    'rabid',
    'race',
    'racing',
    'racism',
    'rack',
    'racoon',
    'radar',
    'radial',
    'radiance',
    'radiantly',
    'radiated',
    'radiation',
    'radiator',
    'radio',
    'radish',
    'raffle',
    'raft',
    'rage',
    'ragged',
    'raging',
    'ragweed',
    'raider',
    'railcar',
    'railing',
    'railroad',
    'railway',
    'raisin',
    'rake',
    'raking',
    'rally',
    'ramble',
    'rambling',
    'ramp',
    'ramrod',
    'ranch',
    'rancidity',
    'random',
    'ranged',
    'ranger',
    'ranging',
    'ranked',
    'ranking',
    'ransack',
    'ranting',
    'rants',
    'rare',
    'rarity',
    'rascal',
    'rash',
    'rasping',
    'ravage',
    'raven',
    'ravine',
    'raving',
    'ravioli',
    'ravishing',
    'reabsorb',
    'reach',
    'reacquire',
    'reaction',
    'reactive',
    'reactor',
    'reaffirm',
    'ream',
    'reanalyze',
    'reappear',
    'reapply',
    'reappoint',
    'reapprove',
    'rearrange',
    'rearview',
    'reason',
    'reassign',
    'reassure',
    'reattach',
    'reawake',
    'rebalance',
    'rebate',
    'rebel',
    'rebirth',
    'reboot',
    'reborn',
    'rebound',
    'rebuff',
    'rebuild',
    'rebuilt',
    'reburial',
    'rebuttal',
    'recall',
    'recant',
    'recapture',
    'recast',
    'recede',
    'recent',
    'recess',
    'recharger',
    'recipient',
    'recital',
    'recite',
    'reckless',
    'reclaim',
    'recliner',
    'reclining',
    'recluse',
    'reclusive',
    'recognize',
    'recoil',
    'recollect',
    'recolor',
    'reconcile',
    'reconfirm',
    'reconvene',
    'recopy',
    'record',
    'recount',
    'recoup',
    'recovery',
    'recreate',
    'rectal',
    'rectangle',
    'rectified',
    'rectify',
    'recycled',
    'recycler',
    'recycling',
    'reemerge',
    'reenact',
    'reenter',
    'reentry',
    'reexamine',
    'referable',
    'referee',
    'reference',
    'refill',
    'refinance',
    'refined',
    'refinery',
    'refining',
    'refinish',
    'reflected',
    'reflector',
    'reflex',
    'reflux',
    'refocus',
    'refold',
    'reforest',
    'reformat',
    'reformed',
    'reformer',
    'reformist',
    'refract',
    'refrain',
    'refreeze',
    'refresh',
    'refried',
    'refueling',
    'refund',
    'refurbish',
    'refurnish',
    'refusal',
    'refuse',
    'refusing',
    'refutable',
    'refute',
    'regain',
    'regalia',
    'regally',
    'reggae',
    'regime',
    'region',
    'register',
    'registrar',
    'registry',
    'regress',
    'regretful',
    'regroup',
    'regular',
    'regulate',
    'regulator',
    'rehab',
    'reheat',
    'rehire',
    'rehydrate',
    'reimburse',
    'reissue',
    'reiterate',
    'rejoice',
    'rejoicing',
    'rejoin',
    'rekindle',
    'relapse',
    'relapsing',
    'relatable',
    'related',
    'relation',
    'relative',
    'relax',
    'relay',
    'relearn',
    'release',
    'relenting',
    'reliable',
    'reliably',
    'reliance',
    'reliant',
    'relic',
    'relieve',
    'relieving',
    'relight',
    'relish',
    'relive',
    'reload',
    'relocate',
    'relock',
    'reluctant',
    'rely',
    'remake',
    'remark',
    'remarry',
    'rematch',
    'remedial',
    'remedy',
    'remember',
    'reminder',
    'remindful',
    'remission',
    'remix',
    'remnant',
    'remodeler',
    'remold',
    'remorse',
    'remote',
    'removable',
    'removal',
    'removed',
    'remover',
    'removing',
    'rename',
    'renderer',
    'rendering',
    'rendition',
    'renegade',
    'renewable',
    'renewably',
    'renewal',
    'renewed',
    'renounce',
    'renovate',
    'renovator',
    'rentable',
    'rental',
    'rented',
    'renter',
    'reoccupy',
    'reoccur',
    'reopen',
    'reorder',
    'repackage',
    'repacking',
    'repaint',
    'repair',
    'repave',
    'repaying',
    'repayment',
    'repeal',
    'repeated',
    'repeater',
    'repent',
    'rephrase',
    'replace',
    'replay',
    'replica',
    'reply',
    'reporter',
    'repose',
    'repossess',
    'repost',
    'repressed',
    'reprimand',
    'reprint',
    'reprise',
    'reproach',
    'reprocess',
    'reproduce',
    'reprogram',
    'reps',
    'reptile',
    'reptilian',
    'repugnant',
    'repulsion',
    'repulsive',
    'repurpose',
    'reputable',
    'reputably',
    'request',
    'require',
    'requisite',
    'reroute',
    'rerun',
    'resale',
    'resample',
    'rescuer',
    'reseal',
    'research',
    'reselect',
    'reseller',
    'resemble',
    'resend',
    'resent',
    'reset',
    'reshape',
    'reshoot',
    'reshuffle',
    'residence',
    'residency',
    'resident',
    'residual',
    'residue',
    'resigned',
    'resilient',
    'resistant',
    'resisting',
    'resize',
    'resolute',
    'resolved',
    'resonant',
    'resonate',
    'resort',
    'resource',
    'respect',
    'resubmit',
    'result',
    'resume',
    'resupply',
    'resurface',
    'resurrect',
    'retail',
    'retainer',
    'retaining',
    'retake',
    'retaliate',
    'retention',
    'rethink',
    'retinal',
    'retired',
    'retiree',
    'retiring',
    'retold',
    'retool',
    'retorted',
    'retouch',
    'retrace',
    'retract',
    'retrain',
    'retread',
    'retreat',
    'retrial',
    'retrieval',
    'retriever',
    'retry',
    'return',
    'retying',
    'retype',
    'reunion',
    'reunite',
    'reusable',
    'reuse',
    'reveal',
    'reveler',
    'revenge',
    'revenue',
    'reverb',
    'revered',
    'reverence',
    'reverend',
    'reversal',
    'reverse',
    'reversing',
    'reversion',
    'revert',
    'revisable',
    'revise',
    'revision',
    'revisit',
    'revivable',
    'revival',
    'reviver',
    'reviving',
    'revocable',
    'revoke',
    'revolt',
    'revolver',
    'revolving',
    'reward',
    'rewash',
    'rewind',
    'rewire',
    'reword',
    'rework',
    'rewrap',
    'rewrite',
    'rhyme',
    'ribbon',
    'ribcage',
    'rice',
    'riches',
    'richly',
    'richness',
    'rickety',
    'ricotta',
    'riddance',
    'ridden',
    'ride',
    'riding',
    'rifling',
    'rift',
    'rigging',
    'rigid',
    'rigor',
    'rimless',
    'rimmed',
    'rind',
    'rink',
    'rinse',
    'rinsing',
    'riot',
    'ripcord',
    'ripeness',
    'ripening',
    'ripping',
    'ripple',
    'rippling',
    'riptide',
    'rise',
    'rising',
    'risk',
    'risotto',
    'ritalin',
    'ritzy',
    'rival',
    'riverbank',
    'riverbed',
    'riverboat',
    'riverside',
    'riveter',
    'riveting',
    'roamer',
    'roaming',
    'roast',
    'robbing',
    'robe',
    'robin',
    'robotics',
    'robust',
    'rockband',
    'rocker',
    'rocket',
    'rockfish',
    'rockiness',
    'rocking',
    'rocklike',
    'rockslide',
    'rockstar',
    'rocky',
    'rogue',
    'roman',
    'romp',
    'rope',
    'roping',
    'roster',
    'rosy',
    'rotten',
    'rotting',
    'rotunda',
    'roulette',
    'rounding',
    'roundish',
    'roundness',
    'roundup',
    'roundworm',
    'routine',
    'routing',
    'rover',
    'roving',
    'royal',
    'rubbed',
    'rubber',
    'rubbing',
    'rubble',
    'rubdown',
    'ruby',
    'ruckus',
    'rudder',
    'rug',
    'ruined',
    'rule',
    'rumble',
    'rumbling',
    'rummage',
    'rumor',
    'runaround',
    'rundown',
    'runner',
    'running',
    'runny',
    'runt',
    'runway',
    'rupture',
    'rural',
    'ruse',
    'rush',
    'rust',
    'rut',
    'sabbath',
    'sabotage',
    'sacrament',
    'sacred',
    'sacrifice',
    'sadden',
    'saddlebag',
    'saddled',
    'saddling',
    'sadly',
    'sadness',
    'safari',
    'safeguard',
    'safehouse',
    'safely',
    'safeness',
    'saffron',
    'saga',
    'sage',
    'sagging',
    'saggy',
    'said',
    'saint',
    'sake',
    'salad',
    'salami',
    'salaried',
    'salary',
    'saline',
    'salon',
    'saloon',
    'salsa',
    'salt',
    'salutary',
    'salute',
    'salvage',
    'salvaging',
    'salvation',
    'same',
    'sample',
    'sampling',
    'sanction',
    'sanctity',
    'sanctuary',
    'sandal',
    'sandbag',
    'sandbank',
    'sandbar',
    'sandblast',
    'sandbox',
    'sanded',
    'sandfish',
    'sanding',
    'sandlot',
    'sandpaper',
    'sandpit',
    'sandstone',
    'sandstorm',
    'sandworm',
    'sandy',
    'sanitary',
    'sanitizer',
    'sank',
    'santa',
    'sapling',
    'sappiness',
    'sappy',
    'sarcasm',
    'sarcastic',
    'sardine',
    'sash',
    'sasquatch',
    'sassy',
    'satchel',
    'satiable',
    'satin',
    'satirical',
    'satisfied',
    'satisfy',
    'saturate',
    'saturday',
    'sauciness',
    'saucy',
    'sauna',
    'savage',
    'savanna',
    'saved',
    'savings',
    'savior',
    'savor',
    'saxophone',
    'say',
    'scabbed',
    'scabby',
    'scalded',
    'scalding',
    'scale',
    'scaling',
    'scallion',
    'scallop',
    'scalping',
    'scam',
    'scandal',
    'scanner',
    'scanning',
    'scant',
    'scapegoat',
    'scarce',
    'scarcity',
    'scarecrow',
    'scared',
    'scarf',
    'scarily',
    'scariness',
    'scarring',
    'scary',
    'scavenger',
    'scenic',
    'schedule',
    'schematic',
    'scheme',
    'scheming',
    'schilling',
    'schnapps',
    'scholar',
    'science',
    'scientist',
    'scion',
    'scoff',
    'scolding',
    'scone',
    'scoop',
    'scooter',
    'scope',
    'scorch',
    'scorebook',
    'scorecard',
    'scored',
    'scoreless',
    'scorer',
    'scoring',
    'scorn',
    'scorpion',
    'scotch',
    'scoundrel',
    'scoured',
    'scouring',
    'scouting',
    'scouts',
    'scowling',
    'scrabble',
    'scraggly',
    'scrambled',
    'scrambler',
    'scrap',
    'scratch',
    'scrawny',
    'screen',
    'scribble',
    'scribe',
    'scribing',
    'scrimmage',
    'script',
    'scroll',
    'scrooge',
    'scrounger',
    'scrubbed',
    'scrubber',
    'scruffy',
    'scrunch',
    'scrutiny',
    'scuba',
    'scuff',
    'sculptor',
    'sculpture',
    'scurvy',
    'scuttle',
    'secluded',
    'secluding',
    'seclusion',
    'second',
    'secrecy',
    'secret',
    'sectional',
    'sector',
    'secular',
    'securely',
    'security',
    'sedan',
    'sedate',
    'sedation',
    'sedative',
    'sediment',
    'seduce',
    'seducing',
    'segment',
    'seismic',
    'seizing',
    'seldom',
    'selected',
    'selection',
    'selective',
    'selector',
    'self',
    'seltzer',
    'semantic',
    'semester',
    'semicolon',
    'semifinal',
    'seminar',
    'semisoft',
    'semisweet',
    'senate',
    'senator',
    'send',
    'senior',
    'senorita',
    'sensation',
    'sensitive',
    'sensitize',
    'sensually',
    'sensuous',
    'sepia',
    'september',
    'septic',
    'septum',
    'sequel',
    'sequence',
    'sequester',
    'series',
    'sermon',
    'serotonin',
    'serpent',
    'serrated',
    'serve',
    'service',
    'serving',
    'sesame',
    'sessions',
    'setback',
    'setting',
    'settle',
    'settling',
    'setup',
    'sevenfold',
    'seventeen',
    'seventh',
    'seventy',
    'severity',
    'shabby',
    'shack',
    'shaded',
    'shadily',
    'shadiness',
    'shading',
    'shadow',
    'shady',
    'shaft',
    'shakable',
    'shakily',
    'shakiness',
    'shaking',
    'shaky',
    'shale',
    'shallot',
    'shallow',
    'shame',
    'shampoo',
    'shamrock',
    'shank',
    'shanty',
    'shape',
    'shaping',
    'share',
    'sharpener',
    'sharper',
    'sharpie',
    'sharply',
    'sharpness',
    'shawl',
    'sheath',
    'shed',
    'sheep',
    'sheet',
    'shelf',
    'shell',
    'shelter',
    'shelve',
    'shelving',
    'sherry',
    'shield',
    'shifter',
    'shifting',
    'shiftless',
    'shifty',
    'shimmer',
    'shimmy',
    'shindig',
    'shine',
    'shingle',
    'shininess',
    'shining',
    'shiny',
    'ship',
    'shirt',
    'shivering',
    'shock',
    'shone',
    'shoplift',
    'shopper',
    'shopping',
    'shoptalk',
    'shore',
    'shortage',
    'shortcake',
    'shortcut',
    'shorten',
    'shorter',
    'shorthand',
    'shortlist',
    'shortly',
    'shortness',
    'shorts',
    'shortwave',
    'shorty',
    'shout',
    'shove',
    'showbiz',
    'showcase',
    'showdown',
    'shower',
    'showgirl',
    'showing',
    'showman',
    'shown',
    'showoff',
    'showpiece',
    'showplace',
    'showroom',
    'showy',
    'shrank',
    'shrapnel',
    'shredder',
    'shredding',
    'shrewdly',
    'shriek',
    'shrill',
    'shrimp',
    'shrine',
    'shrink',
    'shrivel',
    'shrouded',
    'shrubbery',
    'shrubs',
    'shrug',
    'shrunk',
    'shucking',
    'shudder',
    'shuffle',
    'shuffling',
    'shun',
    'shush',
    'shut',
    'shy',
    'siamese',
    'siberian',
    'sibling',
    'siding',
    'sierra',
    'siesta',
    'sift',
    'sighing',
    'silenced',
    'silencer',
    'silent',
    'silica',
    'silicon',
    'silk',
    'silliness',
    'silly',
    'silo',
    'silt',
    'silver',
    'similarly',
    'simile',
    'simmering',
    'simple',
    'simplify',
    'simply',
    'sincere',
    'sincerity',
    'singer',
    'singing',
    'single',
    'singular',
    'sinister',
    'sinless',
    'sinner',
    'sinuous',
    'sip',
    'siren',
    'sister',
    'sitcom',
    'sitter',
    'sitting',
    'situated',
    'situation',
    'sixfold',
    'sixteen',
    'sixth',
    'sixties',
    'sixtieth',
    'sixtyfold',
    'sizable',
    'sizably',
    'size',
    'sizing',
    'sizzle',
    'sizzling',
    'skater',
    'skating',
    'skedaddle',
    'skeletal',
    'skeleton',
    'skeptic',
    'sketch',
    'skewed',
    'skewer',
    'skid',
    'skied',
    'skier',
    'skies',
    'skiing',
    'skilled',
    'skillet',
    'skillful',
    'skimmed',
    'skimmer',
    'skimming',
    'skimpily',
    'skincare',
    'skinhead',
    'skinless',
    'skinning',
    'skinny',
    'skintight',
    'skipper',
    'skipping',
    'skirmish',
    'skirt',
    'skittle',
    'skydiver',
    'skylight',
    'skyline',
    'skype',
    'skyrocket',
    'skyward',
    'slab',
    'slacked',
    'slacker',
    'slacking',
    'slackness',
    'slacks',
    'slain',
    'slam',
    'slander',
    'slang',
    'slapping',
    'slapstick',
    'slashed',
    'slashing',
    'slate',
    'slather',
    'slaw',
    'sled',
    'sleek',
    'sleep',
    'sleet',
    'sleeve',
    'slept',
    'sliceable',
    'sliced',
    'slicer',
    'slicing',
    'slick',
    'slider',
    'slideshow',
    'sliding',
    'slighted',
    'slighting',
    'slightly',
    'slimness',
    'slimy',
    'slinging',
    'slingshot',
    'slinky',
    'slip',
    'slit',
    'sliver',
    'slobbery',
    'slogan',
    'sloped',
    'sloping',
    'sloppily',
    'sloppy',
    'slot',
    'slouching',
    'slouchy',
    'sludge',
    'slug',
    'slum',
    'slurp',
    'slush',
    'sly',
    'small',
    'smartly',
    'smartness',
    'smasher',
    'smashing',
    'smashup',
    'smell',
    'smelting',
    'smile',
    'smilingly',
    'smirk',
    'smite',
    'smith',
    'smitten',
    'smock',
    'smog',
    'smoked',
    'smokeless',
    'smokiness',
    'smoking',
    'smoky',
    'smolder',
    'smooth',
    'smother',
    'smudge',
    'smudgy',
    'smuggler',
    'smuggling',
    'smugly',
    'smugness',
    'snack',
    'snagged',
    'snaking',
    'snap',
    'snare',
    'snarl',
    'snazzy',
    'sneak',
    'sneer',
    'sneeze',
    'sneezing',
    'snide',
    'sniff',
    'snippet',
    'snipping',
    'snitch',
    'snooper',
    'snooze',
    'snore',
    'snoring',
    'snorkel',
    'snort',
    'snout',
    'snowbird',
    'snowboard',
    'snowbound',
    'snowcap',
    'snowdrift',
    'snowdrop',
    'snowfall',
    'snowfield',
    'snowflake',
    'snowiness',
    'snowless',
    'snowman',
    'snowplow',
    'snowshoe',
    'snowstorm',
    'snowsuit',
    'snowy',
    'snub',
    'snuff',
    'snuggle',
    'snugly',
    'snugness',
    'speak',
    'spearfish',
    'spearhead',
    'spearman',
    'spearmint',
    'species',
    'specimen',
    'specked',
    'speckled',
    'specks',
    'spectacle',
    'spectator',
    'spectrum',
    'speculate',
    'speech',
    'speed',
    'spellbind',
    'speller',
    'spelling',
    'spendable',
    'spender',
    'spending',
    'spent',
    'spew',
    'sphere',
    'spherical',
    'sphinx',
    'spider',
    'spied',
    'spiffy',
    'spill',
    'spilt',
    'spinach',
    'spinal',
    'spindle',
    'spinner',
    'spinning',
    'spinout',
    'spinster',
    'spiny',
    'spiral',
    'spirited',
    'spiritism',
    'spirits',
    'spiritual',
    'splashed',
    'splashing',
    'splashy',
    'splatter',
    'spleen',
    'splendid',
    'splendor',
    'splice',
    'splicing',
    'splinter',
    'splotchy',
    'splurge',
    'spoilage',
    'spoiled',
    'spoiler',
    'spoiling',
    'spoils',
    'spoken',
    'spokesman',
    'sponge',
    'spongy',
    'sponsor',
    'spoof',
    'spookily',
    'spooky',
    'spool',
    'spoon',
    'spore',
    'sporting',
    'sports',
    'sporty',
    'spotless',
    'spotlight',
    'spotted',
    'spotter',
    'spotting',
    'spotty',
    'spousal',
    'spouse',
    'spout',
    'sprain',
    'sprang',
    'sprawl',
    'spray',
    'spree',
    'sprig',
    'spring',
    'sprinkled',
    'sprinkler',
    'sprint',
    'sprite',
    'sprout',
    'spruce',
    'sprung',
    'spry',
    'spud',
    'spur',
    'sputter',
    'spyglass',
    'squabble',
    'squad',
    'squall',
    'squander',
    'squash',
    'squatted',
    'squatter',
    'squatting',
    'squeak',
    'squealer',
    'squealing',
    'squeamish',
    'squeegee',
    'squeeze',
    'squeezing',
    'squid',
    'squiggle',
    'squiggly',
    'squint',
    'squire',
    'squirt',
    'squishier',
    'squishy',
    'stability',
    'stabilize',
    'stable',
    'stack',
    'stadium',
    'staff',
    'stage',
    'staging',
    'stagnant',
    'stagnate',
    'stainable',
    'stained',
    'staining',
    'stainless',
    'stalemate',
    'staleness',
    'stalling',
    'stallion',
    'stamina',
    'stammer',
    'stamp',
    'stand',
    'stank',
    'staple',
    'stapling',
    'starboard',
    'starch',
    'stardom',
    'stardust',
    'starfish',
    'stargazer',
    'staring',
    'stark',
    'starless',
    'starlet',
    'starlight',
    'starlit',
    'starring',
    'starry',
    'starship',
    'starter',
    'starting',
    'startle',
    'startling',
    'startup',
    'starved',
    'starving',
    'stash',
    'state',
    'static',
    'statistic',
    'statue',
    'stature',
    'status',
    'statute',
    'statutory',
    'staunch',
    'stays',
    'steadfast',
    'steadier',
    'steadily',
    'steadying',
    'steam',
    'steed',
    'steep',
    'steerable',
    'steering',
    'steersman',
    'stegosaur',
    'stellar',
    'stem',
    'stench',
    'stencil',
    'step',
    'stereo',
    'sterile',
    'sterility',
    'sterilize',
    'sterling',
    'sternness',
    'sternum',
    'stew',
    'stick',
    'stiffen',
    'stiffly',
    'stiffness',
    'stifle',
    'stifling',
    'stillness',
    'stilt',
    'stimulant',
    'stimulate',
    'stimuli',
    'stimulus',
    'stinger',
    'stingily',
    'stinging',
    'stingray',
    'stingy',
    'stinking',
    'stinky',
    'stipend',
    'stipulate',
    'stir',
    'stitch',
    'stock',
    'stoic',
    'stoke',
    'stole',
    'stomp',
    'stonewall',
    'stoneware',
    'stonework',
    'stoning',
    'stony',
    'stood',
    'stooge',
    'stool',
    'stoop',
    'stoplight',
    'stoppable',
    'stoppage',
    'stopped',
    'stopper',
    'stopping',
    'stopwatch',
    'storable',
    'storage',
    'storeroom',
    'storewide',
    'storm',
    'stout',
    'stove',
    'stowaway',
    'stowing',
    'straddle',
    'straggler',
    'strained',
    'strainer',
    'straining',
    'strangely',
    'stranger',
    'strangle',
    'strategic',
    'strategy',
    'stratus',
    'straw',
    'stray',
    'streak',
    'stream',
    'street',
    'strength',
    'strenuous',
    'strep',
    'stress',
    'stretch',
    'strewn',
    'stricken',
    'strict',
    'stride',
    'strife',
    'strike',
    'striking',
    'strive',
    'striving',
    'strobe',
    'strode',
    'stroller',
    'strongbox',
    'strongly',
    'strongman',
    'struck',
    'structure',
    'strudel',
    'struggle',
    'strum',
    'strung',
    'strut',
    'stubbed',
    'stubble',
    'stubbly',
    'stubborn',
    'stucco',
    'stuck',
    'student',
    'studied',
    'studio',
    'study',
    'stuffed',
    'stuffing',
    'stuffy',
    'stumble',
    'stumbling',
    'stump',
    'stung',
    'stunned',
    'stunner',
    'stunning',
    'stunt',
    'stupor',
    'sturdily',
    'sturdy',
    'styling',
    'stylishly',
    'stylist',
    'stylized',
    'stylus',
    'suave',
    'subarctic',
    'subatomic',
    'subdivide',
    'subdued',
    'subduing',
    'subfloor',
    'subgroup',
    'subheader',
    'subject',
    'sublease',
    'sublet',
    'sublevel',
    'sublime',
    'submarine',
    'submerge',
    'submersed',
    'submitter',
    'subpanel',
    'subpar',
    'subplot',
    'subprime',
    'subscribe',
    'subscript',
    'subsector',
    'subside',
    'subsiding',
    'subsidize',
    'subsidy',
    'subsoil',
    'subsonic',
    'substance',
    'subsystem',
    'subtext',
    'subtitle',
    'subtly',
    'subtotal',
    'subtract',
    'subtype',
    'suburb',
    'subway',
    'subwoofer',
    'subzero',
    'succulent',
    'such',
    'suction',
    'sudden',
    'sudoku',
    'suds',
    'sufferer',
    'suffering',
    'suffice',
    'suffix',
    'suffocate',
    'suffrage',
    'sugar',
    'suggest',
    'suing',
    'suitable',
    'suitably',
    'suitcase',
    'suitor',
    'sulfate',
    'sulfide',
    'sulfite',
    'sulfur',
    'sulk',
    'sullen',
    'sulphate',
    'sulphuric',
    'sultry',
    'superbowl',
    'superglue',
    'superhero',
    'superior',
    'superjet',
    'superman',
    'supermom',
    'supernova',
    'supervise',
    'supper',
    'supplier',
    'supply',
    'support',
    'supremacy',
    'supreme',
    'surcharge',
    'surely',
    'sureness',
    'surface',
    'surfacing',
    'surfboard',
    'surfer',
    'surgery',
    'surgical',
    'surging',
    'surname',
    'surpass',
    'surplus',
    'surprise',
    'surreal',
    'surrender',
    'surrogate',
    'surround',
    'survey',
    'survival',
    'survive',
    'surviving',
    'survivor',
    'sushi',
    'suspect',
    'suspend',
    'suspense',
    'sustained',
    'sustainer',
    'swab',
    'swaddling',
    'swagger',
    'swampland',
    'swan',
    'swapping',
    'swarm',
    'sway',
    'swear',
    'sweat',
    'sweep',
    'swell',
    'swept',
    'swerve',
    'swifter',
    'swiftly',
    'swiftness',
    'swimmable',
    'swimmer',
    'swimming',
    'swimsuit',
    'swimwear',
    'swinger',
    'swinging',
    'swipe',
    'swirl',
    'switch',
    'swivel',
    'swizzle',
    'swooned',
    'swoop',
    'swoosh',
    'swore',
    'sworn',
    'swung',
    'sycamore',
    'sympathy',
    'symphonic',
    'symphony',
    'symptom',
    'synapse',
    'syndrome',
    'synergy',
    'synopses',
    'synopsis',
    'synthesis',
    'synthetic',
    'syrup',
    'system',
    't-shirt',
    'tabasco',
    'tabby',
    'tableful',
    'tables',
    'tablet',
    'tableware',
    'tabloid',
    'tackiness',
    'tacking',
    'tackle',
    'tackling',
    'tacky',
    'taco',
    'tactful',
    'tactical',
    'tactics',
    'tactile',
    'tactless',
    'tadpole',
    'taekwondo',
    'tag',
    'tainted',
    'take',
    'taking',
    'talcum',
    'talisman',
    'tall',
    'talon',
    'tamale',
    'tameness',
    'tamer',
    'tamper',
    'tank',
    'tanned',
    'tannery',
    'tanning',
    'tantrum',
    'tapeless',
    'tapered',
    'tapering',
    'tapestry',
    'tapioca',
    'tapping',
    'taps',
    'tarantula',
    'target',
    'tarmac',
    'tarnish',
    'tarot',
    'tartar',
    'tartly',
    'tartness',
    'task',
    'tassel',
    'taste',
    'tastiness',
    'tasting',
    'tasty',
    'tattered',
    'tattle',
    'tattling',
    'tattoo',
    'taunt',
    'tavern',
    'thank',
    'that',
    'thaw',
    'theater',
    'theatrics',
    'thee',
    'theft',
    'theme',
    'theology',
    'theorize',
    'thermal',
    'thermos',
    'thesaurus',
    'these',
    'thesis',
    'thespian',
    'thicken',
    'thicket',
    'thickness',
    'thieving',
    'thievish',
    'thigh',
    'thimble',
    'thing',
    'think',
    'thinly',
    'thinner',
    'thinness',
    'thinning',
    'thirstily',
    'thirsting',
    'thirsty',
    'thirteen',
    'thirty',
    'thong',
    'thorn',
    'those',
    'thousand',
    'thrash',
    'thread',
    'threaten',
    'threefold',
    'thrift',
    'thrill',
    'thrive',
    'thriving',
    'throat',
    'throbbing',
    'throng',
    'throttle',
    'throwaway',
    'throwback',
    'thrower',
    'throwing',
    'thud',
    'thumb',
    'thumping',
    'thursday',
    'thus',
    'thwarting',
    'thyself',
    'tiara',
    'tibia',
    'tidal',
    'tidbit',
    'tidiness',
    'tidings',
    'tidy',
    'tiger',
    'tighten',
    'tightly',
    'tightness',
    'tightrope',
    'tightwad',
    'tigress',
    'tile',
    'tiling',
    'till',
    'tilt',
    'timid',
    'timing',
    'timothy',
    'tinderbox',
    'tinfoil',
    'tingle',
    'tingling',
    'tingly',
    'tinker',
    'tinkling',
    'tinsel',
    'tinsmith',
    'tint',
    'tinwork',
    'tiny',
    'tipoff',
    'tipped',
    'tipper',
    'tipping',
    'tiptoeing',
    'tiptop',
    'tiring',
    'tissue',
    'trace',
    'tracing',
    'track',
    'traction',
    'tractor',
    'trade',
    'trading',
    'tradition',
    'traffic',
    'tragedy',
    'trailing',
    'trailside',
    'train',
    'traitor',
    'trance',
    'tranquil',
    'transfer',
    'transform',
    'translate',
    'transpire',
    'transport',
    'transpose',
    'trapdoor',
    'trapeze',
    'trapezoid',
    'trapped',
    'trapper',
    'trapping',
    'traps',
    'trash',
    'travel',
    'traverse',
    'travesty',
    'tray',
    'treachery',
    'treading',
    'treadmill',
    'treason',
    'treat',
    'treble',
    'tree',
    'trekker',
    'tremble',
    'trembling',
    'tremor',
    'trench',
    'trend',
    'trespass',
    'triage',
    'trial',
    'triangle',
    'tribesman',
    'tribunal',
    'tribune',
    'tributary',
    'tribute',
    'triceps',
    'trickery',
    'trickily',
    'tricking',
    'trickle',
    'trickster',
    'tricky',
    'tricolor',
    'tricycle',
    'trident',
    'tried',
    'trifle',
    'trifocals',
    'trillion',
    'trilogy',
    'trimester',
    'trimmer',
    'trimming',
    'trimness',
    'trinity',
    'trio',
    'tripod',
    'tripping',
    'triumph',
    'trivial',
    'trodden',
    'trolling',
    'trombone',
    'trophy',
    'tropical',
    'tropics',
    'trouble',
    'troubling',
    'trough',
    'trousers',
    'trout',
    'trowel',
    'truce',
    'truck',
    'truffle',
    'trump',
    'trunks',
    'trustable',
    'trustee',
    'trustful',
    'trusting',
    'trustless',
    'truth',
    'try',
    'tubby',
    'tubeless',
    'tubular',
    'tucking',
    'tuesday',
    'tug',
    'tuition',
    'tulip',
    'tumble',
    'tumbling',
    'tummy',
    'turban',
    'turbine',
    'turbofan',
    'turbojet',
    'turbulent',
    'turf',
    'turkey',
    'turmoil',
    'turret',
    'turtle',
    'tusk',
    'tutor',
    'tutu',
    'tux',
    'tweak',
    'tweed',
    'tweet',
    'tweezers',
    'twelve',
    'twentieth',
    'twenty',
    'twerp',
    'twice',
    'twiddle',
    'twiddling',
    'twig',
    'twilight',
    'twine',
    'twins',
    'twirl',
    'twistable',
    'twisted',
    'twister',
    'twisting',
    'twisty',
    'twitch',
    'twitter',
    'tycoon',
    'tying',
    'tyke',
    'udder',
    'ultimate',
    'ultimatum',
    'ultra',
    'umbilical',
    'umbrella',
    'umpire',
    'unabashed',
    'unable',
    'unadorned',
    'unadvised',
    'unafraid',
    'unaired',
    'unaligned',
    'unaltered',
    'unarmored',
    'unashamed',
    'unaudited',
    'unawake',
    'unaware',
    'unbaked',
    'unbalance',
    'unbeaten',
    'unbend',
    'unbent',
    'unbiased',
    'unbitten',
    'unblended',
    'unblessed',
    'unblock',
    'unbolted',
    'unbounded',
    'unboxed',
    'unbraided',
    'unbridle',
    'unbroken',
    'unbuckled',
    'unbundle',
    'unburned',
    'unbutton',
    'uncanny',
    'uncapped',
    'uncaring',
    'uncertain',
    'unchain',
    'unchanged',
    'uncharted',
    'uncheck',
    'uncivil',
    'unclad',
    'unclaimed',
    'unclamped',
    'unclasp',
    'uncle',
    'unclip',
    'uncloak',
    'unclog',
    'unclothed',
    'uncoated',
    'uncoiled',
    'uncolored',
    'uncombed',
    'uncommon',
    'uncooked',
    'uncork',
    'uncorrupt',
    'uncounted',
    'uncouple',
    'uncouth',
    'uncover',
    'uncross',
    'uncrown',
    'uncrushed',
    'uncured',
    'uncurious',
    'uncurled',
    'uncut',
    'undamaged',
    'undated',
    'undaunted',
    'undead',
    'undecided',
    'undefined',
    'underage',
    'underarm',
    'undercoat',
    'undercook',
    'undercut',
    'underdog',
    'underdone',
    'underfed',
    'underfeed',
    'underfoot',
    'undergo',
    'undergrad',
    'underhand',
    'underline',
    'underling',
    'undermine',
    'undermost',
    'underpaid',
    'underpass',
    'underpay',
    'underrate',
    'undertake',
    'undertone',
    'undertook',
    'undertow',
    'underuse',
    'underwear',
    'underwent',
    'underwire',
    'undesired',
    'undiluted',
    'undivided',
    'undocked',
    'undoing',
    'undone',
    'undrafted',
    'undress',
    'undrilled',
    'undusted',
    'undying',
    'unearned',
    'unearth',
    'unease',
    'uneasily',
    'uneasy',
    'uneatable',
    'uneaten',
    'unedited',
    'unelected',
    'unending',
    'unengaged',
    'unenvied',
    'unequal',
    'unethical',
    'uneven',
    'unexpired',
    'unexposed',
    'unfailing',
    'unfair',
    'unfasten',
    'unfazed',
    'unfeeling',
    'unfiled',
    'unfilled',
    'unfitted',
    'unfitting',
    'unfixable',
    'unfixed',
    'unflawed',
    'unfocused',
    'unfold',
    'unfounded',
    'unframed',
    'unfreeze',
    'unfrosted',
    'unfrozen',
    'unfunded',
    'unglazed',
    'ungloved',
    'unglue',
    'ungodly',
    'ungraded',
    'ungreased',
    'unguarded',
    'unguided',
    'unhappily',
    'unhappy',
    'unharmed',
    'unhealthy',
    'unheard',
    'unhearing',
    'unheated',
    'unhelpful',
    'unhidden',
    'unhinge',
    'unhitched',
    'unholy',
    'unhook',
    'unicorn',
    'unicycle',
    'unified',
    'unifier',
    'uniformed',
    'uniformly',
    'unify',
    'unimpeded',
    'uninjured',
    'uninstall',
    'uninsured',
    'uninvited',
    'union',
    'uniquely',
    'unisexual',
    'unison',
    'unissued',
    'unit',
    'universal',
    'universe',
    'unjustly',
    'unkempt',
    'unkind',
    'unknotted',
    'unknowing',
    'unknown',
    'unlaced',
    'unlatch',
    'unlawful',
    'unleaded',
    'unlearned',
    'unleash',
    'unless',
    'unleveled',
    'unlighted',
    'unlikable',
    'unlimited',
    'unlined',
    'unlinked',
    'unlisted',
    'unlit',
    'unlivable',
    'unloaded',
    'unloader',
    'unlocked',
    'unlocking',
    'unlovable',
    'unloved',
    'unlovely',
    'unloving',
    'unluckily',
    'unlucky',
    'unmade',
    'unmanaged',
    'unmanned',
    'unmapped',
    'unmarked',
    'unmasked',
    'unmasking',
    'unmatched',
    'unmindful',
    'unmixable',
    'unmixed',
    'unmolded',
    'unmoral',
    'unmovable',
    'unmoved',
    'unmoving',
    'unnamable',
    'unnamed',
    'unnatural',
    'unneeded',
    'unnerve',
    'unnerving',
    'unnoticed',
    'unopened',
    'unopposed',
    'unpack',
    'unpadded',
    'unpaid',
    'unpainted',
    'unpaired',
    'unpaved',
    'unpeeled',
    'unpicked',
    'unpiloted',
    'unpinned',
    'unplanned',
    'unplanted',
    'unpleased',
    'unpledged',
    'unplowed',
    'unplug',
    'unpopular',
    'unproven',
    'unquote',
    'unranked',
    'unrated',
    'unraveled',
    'unreached',
    'unread',
    'unreal',
    'unreeling',
    'unrefined',
    'unrelated',
    'unrented',
    'unrest',
    'unretired',
    'unrevised',
    'unrigged',
    'unripe',
    'unrivaled',
    'unroasted',
    'unrobed',
    'unroll',
    'unruffled',
    'unruly',
    'unrushed',
    'unsaddle',
    'unsafe',
    'unsaid',
    'unsalted',
    'unsaved',
    'unsavory',
    'unscathed',
    'unscented',
    'unscrew',
    'unsealed',
    'unseated',
    'unsecured',
    'unseeing',
    'unseemly',
    'unseen',
    'unselect',
    'unselfish',
    'unsent',
    'unsettled',
    'unshackle',
    'unshaken',
    'unshaved',
    'unshaven',
    'unsheathe',
    'unshipped',
    'unsightly',
    'unsigned',
    'unskilled',
    'unsliced',
    'unsmooth',
    'unsnap',
    'unsocial',
    'unsoiled',
    'unsold',
    'unsolved',
    'unsorted',
    'unspoiled',
    'unspoken',
    'unstable',
    'unstaffed',
    'unstamped',
    'unsteady',
    'unsterile',
    'unstirred',
    'unstitch',
    'unstopped',
    'unstuck',
    'unstuffed',
    'unstylish',
    'unsubtle',
    'unsubtly',
    'unsuited',
    'unsure',
    'unsworn',
    'untagged',
    'untainted',
    'untaken',
    'untamed',
    'untangled',
    'untapped',
    'untaxed',
    'unthawed',
    'unthread',
    'untidy',
    'untie',
    'until',
    'untimed',
    'untimely',
    'untitled',
    'untoasted',
    'untold',
    'untouched',
    'untracked',
    'untrained',
    'untreated',
    'untried',
    'untrimmed',
    'untrue',
    'untruth',
    'unturned',
    'untwist',
    'untying',
    'unusable',
    'unused',
    'unusual',
    'unvalued',
    'unvaried',
    'unvarying',
    'unveiled',
    'unveiling',
    'unvented',
    'unviable',
    'unvisited',
    'unvocal',
    'unwanted',
    'unwarlike',
    'unwary',
    'unwashed',
    'unwatched',
    'unweave',
    'unwed',
    'unwelcome',
    'unwell',
    'unwieldy',
    'unwilling',
    'unwind',
    'unwired',
    'unwitting',
    'unwomanly',
    'unworldly',
    'unworn',
    'unworried',
    'unworthy',
    'unwound',
    'unwoven',
    'unwrapped',
    'unwritten',
    'unzip',
    'upbeat',
    'upchuck',
    'upcoming',
    'upcountry',
    'update',
    'upfront',
    'upgrade',
    'upheaval',
    'upheld',
    'uphill',
    'uphold',
    'uplifted',
    'uplifting',
    'upload',
    'upon',
    'upper',
    'upright',
    'uprising',
    'upriver',
    'uproar',
    'uproot',
    'upscale',
    'upside',
    'upstage',
    'upstairs',
    'upstart',
    'upstate',
    'upstream',
    'upstroke',
    'upswing',
    'uptake',
    'uptight',
    'uptown',
    'upturned',
    'upward',
    'upwind',
    'uranium',
    'urban',
    'urchin',
    'urethane',
    'urgency',
    'urgent',
    'urging',
    'urologist',
    'urology',
    'usable',
    'usage',
    'useable',
    'used',
    'uselessly',
    'user',
    'usher',
    'usual',
    'utensil',
    'utility',
    'utilize',
    'utmost',
    'utopia',
    'utter',
    'vacancy',
    'vacant',
    'vacate',
    'vacation',
    'vagabond',
    'vagrancy',
    'vagrantly',
    'vaguely',
    'vagueness',
    'valiant',
    'valid',
    'valium',
    'valley',
    'valuables',
    'value',
    'vanilla',
    'vanish',
    'vanity',
    'vanquish',
    'vantage',
    'vaporizer',
    'variable',
    'variably',
    'varied',
    'variety',
    'various',
    'varmint',
    'varnish',
    'varsity',
    'varying',
    'vascular',
    'vaseline',
    'vastly',
    'vastness',
    'veal',
    'vegan',
    'veggie',
    'vehicular',
    'velcro',
    'velocity',
    'velvet',
    'vendetta',
    'vending',
    'vendor',
    'veneering',
    'vengeful',
    'venomous',
    'ventricle',
    'venture',
    'venue',
    'venus',
    'verbalize',
    'verbally',
    'verbose',
    'verdict',
    'verify',
    'verse',
    'version',
    'versus',
    'vertebrae',
    'vertical',
    'vertigo',
    'very',
    'vessel',
    'vest',
    'veteran',
    'veto',
    'vexingly',
    'viability',
    'viable',
    'vibes',
    'vice',
    'vicinity',
    'victory',
    'video',
    'viewable',
    'viewer',
    'viewing',
    'viewless',
    'viewpoint',
    'vigorous',
    'village',
    'villain',
    'vindicate',
    'vineyard',
    'vintage',
    'violate',
    'violation',
    'violator',
    'violet',
    'violin',
    'viper',
    'viral',
    'virtual',
    'virtuous',
    'virus',
    'visa',
    'viscosity',
    'viscous',
    'viselike',
    'visible',
    'visibly',
    'vision',
    'visiting',
    'visitor',
    'visor',
    'vista',
    'vitality',
    'vitalize',
    'vitally',
    'vitamins',
    'vivacious',
    'vividly',
    'vividness',
    'vixen',
    'vocalist',
    'vocalize',
    'vocally',
    'vocation',
    'voice',
    'voicing',
    'void',
    'volatile',
    'volley',
    'voltage',
    'volumes',
    'voter',
    'voting',
    'voucher',
    'vowed',
    'vowel',
    'voyage',
    'wackiness',
    'wad',
    'wafer',
    'waffle',
    'waged',
    'wager',
    'wages',
    'waggle',
    'wagon',
    'wake',
    'waking',
    'walk',
    'walmart',
    'walnut',
    'walrus',
    'waltz',
    'wand',
    'wannabe',
    'wanted',
    'wanting',
    'wasabi',
    'washable',
    'washbasin',
    'washboard',
    'washbowl',
    'washcloth',
    'washday',
    'washed',
    'washer',
    'washhouse',
    'washing',
    'washout',
    'washroom',
    'washstand',
    'washtub',
    'wasp',
    'wasting',
    'watch',
    'water',
    'waviness',
    'waving',
    'wavy',
    'whacking',
    'whacky',
    'wham',
    'wharf',
    'wheat',
    'whenever',
    'whiff',
    'whimsical',
    'whinny',
    'whiny',
    'whisking',
    'whoever',
    'whole',
    'whomever',
    'whoopee',
    'whooping',
    'whoops',
    'why',
    'wick',
    'widely',
    'widen',
    'widget',
    'widow',
    'width',
    'wieldable',
    'wielder',
    'wife',
    'wifi',
    'wikipedia',
    'wildcard',
    'wildcat',
    'wilder',
    'wildfire',
    'wildfowl',
    'wildland',
    'wildlife',
    'wildly',
    'wildness',
    'willed',
    'willfully',
    'willing',
    'willow',
    'willpower',
    'wilt',
    'wimp',
    'wince',
    'wincing',
    'wind',
    'wing',
    'winking',
    'winner',
    'winnings',
    'winter',
    'wipe',
    'wired',
    'wireless',
    'wiring',
    'wiry',
    'wisdom',
    'wise',
    'wish',
    'wisplike',
    'wispy',
    'wistful',
    'wizard',
    'wobble',
    'wobbling',
    'wobbly',
    'wok',
    'wolf',
    'wolverine',
    'womanhood',
    'womankind',
    'womanless',
    'womanlike',
    'womanly',
    'womb',
    'woof',
    'wooing',
    'wool',
    'woozy',
    'word',
    'work',
    'worried',
    'worrier',
    'worrisome',
    'worry',
    'worsening',
    'worshiper',
    'worst',
    'wound',
    'woven',
    'wow',
    'wrangle',
    'wrath',
    'wreath',
    'wreckage',
    'wrecker',
    'wrecking',
    'wrench',
    'wriggle',
    'wriggly',
    'wrinkle',
    'wrinkly',
    'wrist',
    'writing',
    'written',
    'wrongdoer',
    'wronged',
    'wrongful',
    'wrongly',
    'wrongness',
    'wrought',
    'xbox',
    'xerox',
    'yahoo',
    'yam',
    'yanking',
    'yapping',
    'yard',
    'yarn',
    'yeah',
    'yearbook',
    'yearling',
    'yearly',
    'yearning',
    'yeast',
    'yelling',
    'yelp',
    'yen',
    'yesterday',
    'yiddish',
    'yield',
    'yin',
    'yippee',
    'yo-yo',
    'yodel',
    'yoga',
    'yogurt',
    'yonder',
    'yoyo',
    'yummy',
    'zap',
    'zealous',
    'zebra',
    'zen',
    'zeppelin',
    'zero',
    'zestfully',
    'zesty',
    'zigzagged',
    'zipfile',
    'zipping',
    'zippy',
    'zips',
    'zit',
    'zodiac',
    'zombie',
    'zone',
    'zoning',
    'zookeeper',
    'zoologist',
    'zoology',
    'zoom',
];


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/getSecureRandom.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
const crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ "./node_modules/@ton/crypto-primitives/dist/node.js");
async function getSecureRandomBytes(size) {
    return (0, crypto_primitives_1.getSecureRandomBytes)(size);
}
exports.getSecureRandomBytes = getSecureRandomBytes;
async function getSecureRandomWords(size) {
    return getSecureRandomWords(size);
}
exports.getSecureRandomWords = getSecureRandomWords;
async function getSecureRandomNumber(min, max) {
    let range = max - min;
    var bitsNeeded = Math.ceil(Math.log2(range));
    if (bitsNeeded > 53) {
        throw new Error('Range is too large');
    }
    var bytesNeeded = Math.ceil(bitsNeeded / 8);
    var mask = Math.pow(2, bitsNeeded) - 1;
    while (true) {
        let res = await getSecureRandomBytes(bitsNeeded);
        let power = (bytesNeeded - 1) * 8;
        let numberValue = 0;
        for (var i = 0; i < bytesNeeded; i++) {
            numberValue += res[i] * Math.pow(2, power);
            power -= 8;
        }
        numberValue = numberValue & mask; // Truncate
        if (numberValue >= range) {
            continue;
        }
        return min + numberValue;
    }
}
exports.getSecureRandomNumber = getSecureRandomNumber;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/hmac_sha512.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hmac_sha512 = exports.hmac_sha512_fallback = void 0;
const jssha_1 = __importDefault(__webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.js"));
const crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ "./node_modules/@ton/crypto-primitives/dist/node.js");
async function hmac_sha512_fallback(key, data) {
    let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;
    let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;
    const shaObj = new jssha_1.default("SHA-512", "HEX", {
        hmacKey: { value: keyBuffer.toString('hex'), format: "HEX" },
    });
    shaObj.update(dataBuffer.toString('hex'));
    const hmac = shaObj.getHash("HEX");
    return Buffer.from(hmac, 'hex');
}
exports.hmac_sha512_fallback = hmac_sha512_fallback;
function hmac_sha512(key, data) {
    return (0, crypto_primitives_1.hmac_sha512)(key, data);
}
exports.hmac_sha512 = hmac_sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/nacl.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/nacl.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.openBox = exports.sealBox = exports.signVerify = exports.sign = exports.keyPairFromSeed = exports.keyPairFromSecretKey = void 0;
const tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ "./node_modules/tweetnacl/nacl-fast.js"));
function keyPairFromSecretKey(secretKey) {
    let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));
    return {
        publicKey: Buffer.from(res.publicKey),
        secretKey: Buffer.from(res.secretKey),
    };
}
exports.keyPairFromSecretKey = keyPairFromSecretKey;
function keyPairFromSeed(secretKey) {
    let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));
    return {
        publicKey: Buffer.from(res.publicKey),
        secretKey: Buffer.from(res.secretKey),
    };
}
exports.keyPairFromSeed = keyPairFromSeed;
function sign(data, secretKey) {
    return Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data), new Uint8Array(secretKey)));
}
exports.sign = sign;
function signVerify(data, signature, publicKey) {
    return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data), new Uint8Array(signature), new Uint8Array(publicKey));
}
exports.signVerify = signVerify;
function sealBox(data, nonce, key) {
    return Buffer.from(tweetnacl_1.default.secretbox(data, nonce, key));
}
exports.sealBox = sealBox;
function openBox(data, nonce, key) {
    let res = tweetnacl_1.default.secretbox.open(data, nonce, key);
    if (!res) {
        return null;
    }
    return Buffer.from(res);
}
exports.openBox = openBox;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.pbkdf2_sha512 = void 0;
const crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ "./node_modules/@ton/crypto-primitives/dist/node.js");
function pbkdf2_sha512(key, salt, iterations, keyLen) {
    return (0, crypto_primitives_1.pbkdf2_sha512)(key, salt, iterations, keyLen);
}
exports.pbkdf2_sha512 = pbkdf2_sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/sha256.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/sha256.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sha256 = exports.sha256_fallback = exports.sha256_sync = void 0;
const jssha_1 = __importDefault(__webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.js"));
const crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ "./node_modules/@ton/crypto-primitives/dist/node.js");
function sha256_sync(source) {
    let src;
    if (typeof source === 'string') {
        src = Buffer.from(source, 'utf-8').toString('hex');
    }
    else {
        src = source.toString('hex');
    }
    let hasher = new jssha_1.default('SHA-256', 'HEX');
    hasher.update(src);
    let res = hasher.getHash('HEX');
    return Buffer.from(res, 'hex');
}
exports.sha256_sync = sha256_sync;
async function sha256_fallback(source) {
    return sha256_sync(source);
}
exports.sha256_fallback = sha256_fallback;
function sha256(source) {
    return (0, crypto_primitives_1.sha256)(source);
}
exports.sha256 = sha256;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/primitives/sha512.js":
/*!************************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/primitives/sha512.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sha512 = exports.sha512_fallback = exports.sha512_sync = void 0;
const jssha_1 = __importDefault(__webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.js"));
const crypto_primitives_1 = __webpack_require__(/*! @ton/crypto-primitives */ "./node_modules/@ton/crypto-primitives/dist/node.js");
function sha512_sync(source) {
    let src;
    if (typeof source === 'string') {
        src = Buffer.from(source, 'utf-8').toString('hex');
    }
    else {
        src = source.toString('hex');
    }
    let hasher = new jssha_1.default('SHA-512', 'HEX');
    hasher.update(src);
    let res = hasher.getHash('HEX');
    return Buffer.from(res, 'hex');
}
exports.sha512_sync = sha512_sync;
async function sha512_fallback(source) {
    return sha512_sync(source);
}
exports.sha512_fallback = sha512_fallback;
async function sha512(source) {
    return (0, crypto_primitives_1.sha512)(source);
}
exports.sha512 = sha512;


/***/ }),

/***/ "./node_modules/@ton/crypto/dist/utils/binary.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ton/crypto/dist/utils/binary.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;
function lpad(str, padString, length) {
    while (str.length < length) {
        str = padString + str;
    }
    return str;
}
exports.lpad = lpad;
function bytesToBits(bytes) {
    let res = '';
    for (let i = 0; i < bytes.length; i++) {
        let x = bytes.at(i);
        res += lpad(x.toString(2), '0', 8);
    }
    return res;
}
exports.bytesToBits = bytesToBits;
function bitsToBytes(src) {
    if (src.length % 8 !== 0) {
        throw Error('Uneven bits');
    }
    let res = [];
    while (src.length > 0) {
        res.push(parseInt(src.slice(0, 8), 2));
        src = src.slice(8);
    }
    return Buffer.from(res);
}
exports.bitsToBytes = bitsToBytes;


/***/ }),

/***/ "./node_modules/balanced-match/index.js":
/*!**********************************************!*\
  !*** ./node_modules/balanced-match/index.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ "./node_modules/brace-expansion/index.js":
/*!***********************************************!*\
  !*** ./node_modules/brace-expansion/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var balanced = __webpack_require__(/*! balanced-match */ "./node_modules/balanced-match/index.js");

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m) return [str];

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  if (/\$$/.test(m.pre)) {    
    for (var k = 0; k < post.length; k++) {
      var expansion = pre+ '{' + m.body + '}' + post[k];
      expansions.push(expansion);
    }
  } else {
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(',') >= 0;
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.
    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length)
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = [];

      for (var j = 0; j < n.length; j++) {
        N.push.apply(N, expand(n[j], false));
      }
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
  }

  return expansions;
}



/***/ }),

/***/ "./node_modules/jssha/dist/sha.js":
/*!****************************************!*\
  !*** ./node_modules/jssha/dist/sha.js ***!
  \****************************************/
/***/ (function(module) {

/**
 * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
 * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
 *
 * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
 * Distributed under the BSD License
 * See http://caligatio.github.com/jsSHA/ for more information
 *
 * Two ECMAScript polyfill functions carry the following license:
 *
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
 * MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */
!function(n,r){ true?module.exports=r():0}(this,(function(){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function r(n,r,t,e){var i,o,u,f=r||[0],w=(t=t||0)>>>3,s=-1===e?3:0;for(i=0;i<n.length;i+=1)o=(u=i+w)>>>2,f.length<=o&&f.push(0),f[o]|=n[i]<<8*(s+e*(u%4));return{value:f,binLen:8*n.length+t}}function t(t,e,i){switch(e){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(t){case"HEX":return function(n,r,t){return function(n,r,t,e){var i,o,u,f;if(0!=n.length%2)throw new Error("String of HEX type must be in byte increments");var w=r||[0],s=(t=t||0)>>>3,a=-1===e?3:0;for(i=0;i<n.length;i+=2){if(o=parseInt(n.substr(i,2),16),isNaN(o))throw new Error("String of HEX type contains invalid characters");for(u=(f=(i>>>1)+s)>>>2;w.length<=u;)w.push(0);w[u]|=o<<8*(a+e*(f%4))}return{value:w,binLen:4*n.length+t}}(n,r,t,i)};case"TEXT":return function(n,r,t){return function(n,r,t,e,i){var o,u,f,w,s,a,h,c,v=0,A=t||[0],E=(e=e||0)>>>3;if("UTF8"===r)for(h=-1===i?3:0,f=0;f<n.length;f+=1)for(u=[],128>(o=n.charCodeAt(f))?u.push(o):2048>o?(u.push(192|o>>>6),u.push(128|63&o)):55296>o||57344<=o?u.push(224|o>>>12,128|o>>>6&63,128|63&o):(f+=1,o=65536+((1023&o)<<10|1023&n.charCodeAt(f)),u.push(240|o>>>18,128|o>>>12&63,128|o>>>6&63,128|63&o)),w=0;w<u.length;w+=1){for(s=(a=v+E)>>>2;A.length<=s;)A.push(0);A[s]|=u[w]<<8*(h+i*(a%4)),v+=1}else for(h=-1===i?2:0,c="UTF16LE"===r&&1!==i||"UTF16LE"!==r&&1===i,f=0;f<n.length;f+=1){for(o=n.charCodeAt(f),!0===c&&(o=(w=255&o)<<8|o>>>8),s=(a=v+E)>>>2;A.length<=s;)A.push(0);A[s]|=o<<8*(h+i*(a%4)),v+=2}return{value:A,binLen:8*v+e}}(n,e,r,t,i)};case"B64":return function(r,t,e){return function(r,t,e,i){var o,u,f,w,s,a,h=0,c=t||[0],v=(e=e||0)>>>3,A=-1===i?3:0,E=r.indexOf("=");if(-1===r.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(r=r.replace(/=/g,""),-1!==E&&E<r.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<r.length;o+=4){for(w=r.substr(o,4),f=0,u=0;u<w.length;u+=1)f|=n.indexOf(w.charAt(u))<<18-6*u;for(u=0;u<w.length-1;u+=1){for(s=(a=h+v)>>>2;c.length<=s;)c.push(0);c[s]|=(f>>>16-8*u&255)<<8*(A+i*(a%4)),h+=1}}return{value:c,binLen:8*h+e}}(r,t,e,i)};case"BYTES":return function(n,r,t){return function(n,r,t,e){var i,o,u,f,w=r||[0],s=(t=t||0)>>>3,a=-1===e?3:0;for(o=0;o<n.length;o+=1)i=n.charCodeAt(o),u=(f=o+s)>>>2,w.length<=u&&w.push(0),w[u]|=i<<8*(a+e*(f%4));return{value:w,binLen:8*n.length+t}}(n,r,t,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(n){throw new Error("ARRAYBUFFER not supported by this environment")}return function(n,t,e){return function(n,t,e,i){return r(new Uint8Array(n),t,e,i)}(n,t,e,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(n){throw new Error("UINT8ARRAY not supported by this environment")}return function(n,t,e){return r(n,t,e,i)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function e(r,t,e,i){switch(r){case"HEX":return function(n){return function(n,r,t,e){var i,o,u="",f=r/8,w=-1===t?3:0;for(i=0;i<f;i+=1)o=n[i>>>2]>>>8*(w+t*(i%4)),u+="0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o);return e.outputUpper?u.toUpperCase():u}(n,t,e,i)};case"B64":return function(r){return function(r,t,e,i){var o,u,f,w,s,a="",h=t/8,c=-1===e?3:0;for(o=0;o<h;o+=3)for(w=o+1<h?r[o+1>>>2]:0,s=o+2<h?r[o+2>>>2]:0,f=(r[o>>>2]>>>8*(c+e*(o%4))&255)<<16|(w>>>8*(c+e*((o+1)%4))&255)<<8|s>>>8*(c+e*((o+2)%4))&255,u=0;u<4;u+=1)a+=8*o+6*u<=t?n.charAt(f>>>6*(3-u)&63):i.b64Pad;return a}(r,t,e,i)};case"BYTES":return function(n){return function(n,r,t){var e,i,o="",u=r/8,f=-1===t?3:0;for(e=0;e<u;e+=1)i=n[e>>>2]>>>8*(f+t*(e%4))&255,o+=String.fromCharCode(i);return o}(n,t,e)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(n){throw new Error("ARRAYBUFFER not supported by this environment")}return function(n){return function(n,r,t){var e,i=r/8,o=new ArrayBuffer(i),u=new Uint8Array(o),f=-1===t?3:0;for(e=0;e<i;e+=1)u[e]=n[e>>>2]>>>8*(f+t*(e%4))&255;return o}(n,t,e)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(n){throw new Error("UINT8ARRAY not supported by this environment")}return function(n){return function(n,r,t){var e,i=r/8,o=-1===t?3:0,u=new Uint8Array(i);for(e=0;e<i;e+=1)u[e]=n[e>>>2]>>>8*(o+t*(e%4))&255;return u}(n,t,e)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}var i=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],o=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],u=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],f="Chosen SHA variant is not supported";function w(n,r){var t,e,i=n.binLen>>>3,o=r.binLen>>>3,u=i<<3,f=4-i<<3;if(i%4!=0){for(t=0;t<o;t+=4)e=i+t>>>2,n.value[e]|=r.value[t>>>2]<<u,n.value.push(0),n.value[e+1]|=r.value[t>>>2]>>>f;return(n.value.length<<2)-4>=o+i&&n.value.pop(),{value:n.value,binLen:n.binLen+r.binLen}}return{value:n.value.concat(r.value),binLen:n.binLen+r.binLen}}function s(n){var r={outputUpper:!1,b64Pad:"=",outputLen:-1},t=n||{},e="Output length must be a multiple of 8";if(r.outputUpper=t.outputUpper||!1,t.b64Pad&&(r.b64Pad=t.b64Pad),t.outputLen){if(t.outputLen%8!=0)throw new Error(e);r.outputLen=t.outputLen}else if(t.shakeLen){if(t.shakeLen%8!=0)throw new Error(e);r.outputLen=t.shakeLen}if("boolean"!=typeof r.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof r.b64Pad)throw new Error("Invalid b64Pad formatting option");return r}function a(n,r,e,i){var o=n+" must include a value and format";if(!r){if(!i)throw new Error(o);return i}if(void 0===r.value||!r.format)throw new Error(o);return t(r.format,r.encoding||"UTF8",e)(r.value)}var h=function(){function n(n,r,t){var e=t||{};if(this.t=r,this.i=e.encoding||"UTF8",this.numRounds=e.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.o=n,this.u=[],this.s=0,this.h=!1,this.v=0,this.A=!1,this.l=[],this.H=[]}return n.prototype.update=function(n){var r,t=0,e=this.S>>>5,i=this.p(n,this.u,this.s),o=i.binLen,u=i.value,f=o>>>5;for(r=0;r<f;r+=e)t+this.S<=o&&(this.m=this.R(u.slice(r,r+e),this.m),t+=this.S);this.v+=t,this.u=u.slice(t>>>5),this.s=o%this.S,this.h=!0},n.prototype.getHash=function(n,r){var t,i,o=this.U,u=s(r);if(this.T){if(-1===u.outputLen)throw new Error("Output length must be specified in options");o=u.outputLen}var f=e(n,o,this.C,u);if(this.A&&this.F)return f(this.F(u));for(i=this.K(this.u.slice(),this.s,this.v,this.B(this.m),o),t=1;t<this.numRounds;t+=1)this.T&&o%32!=0&&(i[i.length-1]&=16777215>>>24-o%32),i=this.K(i,o,0,this.L(this.o),o);return f(i)},n.prototype.setHMACKey=function(n,r,e){if(!this.g)throw new Error("Variant does not support HMAC");if(this.h)throw new Error("Cannot set MAC key after calling update");var i=t(r,(e||{}).encoding||"UTF8",this.C);this.k(i(n))},n.prototype.k=function(n){var r,t=this.S>>>3,e=t/4-1;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.A)throw new Error("MAC key already set");for(t<n.binLen/8&&(n.value=this.K(n.value,n.binLen,0,this.L(this.o),this.U));n.value.length<=e;)n.value.push(0);for(r=0;r<=e;r+=1)this.l[r]=909522486^n.value[r],this.H[r]=1549556828^n.value[r];this.m=this.R(this.l,this.m),this.v=this.S,this.A=!0},n.prototype.getHMAC=function(n,r){var t=s(r);return e(n,this.U,this.C,t)(this.Y())},n.prototype.Y=function(){var n;if(!this.A)throw new Error("Cannot call getHMAC without first setting MAC key");var r=this.K(this.u.slice(),this.s,this.v,this.B(this.m),this.U);return n=this.R(this.H,this.L(this.o)),n=this.K(r,this.U,this.S,n,this.U)},n}(),c=function(n,r){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(n[t]=r[t])})(n,r)};function v(n,r){function t(){this.constructor=n}c(n,r),n.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}function A(n,r){return n<<r|n>>>32-r}function E(n,r){return n>>>r|n<<32-r}function l(n,r){return n>>>r}function b(n,r,t){return n^r^t}function H(n,r,t){return n&r^~n&t}function d(n,r,t){return n&r^n&t^r&t}function S(n){return E(n,2)^E(n,13)^E(n,22)}function p(n,r){var t=(65535&n)+(65535&r);return(65535&(n>>>16)+(r>>>16)+(t>>>16))<<16|65535&t}function m(n,r,t,e){var i=(65535&n)+(65535&r)+(65535&t)+(65535&e);return(65535&(n>>>16)+(r>>>16)+(t>>>16)+(e>>>16)+(i>>>16))<<16|65535&i}function y(n,r,t,e,i){var o=(65535&n)+(65535&r)+(65535&t)+(65535&e)+(65535&i);return(65535&(n>>>16)+(r>>>16)+(t>>>16)+(e>>>16)+(i>>>16)+(o>>>16))<<16|65535&o}function R(n){return E(n,7)^E(n,18)^l(n,3)}function U(n){return E(n,6)^E(n,11)^E(n,25)}function T(n){return[1732584193,4023233417,2562383102,271733878,3285377520]}function C(n,r){var t,e,i,o,u,f,w,s=[];for(t=r[0],e=r[1],i=r[2],o=r[3],u=r[4],w=0;w<80;w+=1)s[w]=w<16?n[w]:A(s[w-3]^s[w-8]^s[w-14]^s[w-16],1),f=w<20?y(A(t,5),H(e,i,o),u,1518500249,s[w]):w<40?y(A(t,5),b(e,i,o),u,1859775393,s[w]):w<60?y(A(t,5),d(e,i,o),u,2400959708,s[w]):y(A(t,5),b(e,i,o),u,3395469782,s[w]),u=o,o=i,i=A(e,30),e=t,t=f;return r[0]=p(t,r[0]),r[1]=p(e,r[1]),r[2]=p(i,r[2]),r[3]=p(o,r[3]),r[4]=p(u,r[4]),r}function F(n,r,t,e){for(var i,o=15+(r+65>>>9<<4),u=r+t;n.length<=o;)n.push(0);for(n[r>>>5]|=128<<24-r%32,n[o]=4294967295&u,n[o-1]=u/4294967296|0,i=0;i<n.length;i+=16)e=C(n.slice(i,i+16),e);return e}var K=function(n){function r(r,e,i){var o=this;if("SHA-1"!==r)throw new Error(f);var u=i||{};return(o=n.call(this,r,e,i)||this).g=!0,o.F=o.Y,o.C=-1,o.p=t(o.t,o.i,o.C),o.R=C,o.B=function(n){return n.slice()},o.L=T,o.K=F,o.m=[1732584193,4023233417,2562383102,271733878,3285377520],o.S=512,o.U=160,o.T=!1,u.hmacKey&&o.k(a("hmacKey",u.hmacKey,o.C)),o}return v(r,n),r}(h);function B(n){return"SHA-224"==n?o.slice():u.slice()}function L(n,r){var t,e,o,u,f,w,s,a,h,c,v,A,b=[];for(t=r[0],e=r[1],o=r[2],u=r[3],f=r[4],w=r[5],s=r[6],a=r[7],v=0;v<64;v+=1)b[v]=v<16?n[v]:m(E(A=b[v-2],17)^E(A,19)^l(A,10),b[v-7],R(b[v-15]),b[v-16]),h=y(a,U(f),H(f,w,s),i[v],b[v]),c=p(S(t),d(t,e,o)),a=s,s=w,w=f,f=p(u,h),u=o,o=e,e=t,t=p(h,c);return r[0]=p(t,r[0]),r[1]=p(e,r[1]),r[2]=p(o,r[2]),r[3]=p(u,r[3]),r[4]=p(f,r[4]),r[5]=p(w,r[5]),r[6]=p(s,r[6]),r[7]=p(a,r[7]),r}var g=function(n){function r(r,e,i){var o=this;if("SHA-224"!==r&&"SHA-256"!==r)throw new Error(f);var u=i||{};return(o=n.call(this,r,e,i)||this).F=o.Y,o.g=!0,o.C=-1,o.p=t(o.t,o.i,o.C),o.R=L,o.B=function(n){return n.slice()},o.L=B,o.K=function(n,t,e,i){return function(n,r,t,e,i){for(var o,u=15+(r+65>>>9<<4),f=r+t;n.length<=u;)n.push(0);for(n[r>>>5]|=128<<24-r%32,n[u]=4294967295&f,n[u-1]=f/4294967296|0,o=0;o<n.length;o+=16)e=L(n.slice(o,o+16),e);return"SHA-224"===i?[e[0],e[1],e[2],e[3],e[4],e[5],e[6]]:e}(n,t,e,i,r)},o.m=B(r),o.S=512,o.U="SHA-224"===r?224:256,o.T=!1,u.hmacKey&&o.k(a("hmacKey",u.hmacKey,o.C)),o}return v(r,n),r}(h),k=function(n,r){this.N=n,this.I=r};function Y(n,r){var t;return r>32?(t=64-r,new k(n.I<<r|n.N>>>t,n.N<<r|n.I>>>t)):0!==r?(t=32-r,new k(n.N<<r|n.I>>>t,n.I<<r|n.N>>>t)):n}function N(n,r){var t;return r<32?(t=32-r,new k(n.N>>>r|n.I<<t,n.I>>>r|n.N<<t)):(t=64-r,new k(n.I>>>r|n.N<<t,n.N>>>r|n.I<<t))}function I(n,r){return new k(n.N>>>r,n.I>>>r|n.N<<32-r)}function M(n,r,t){return new k(n.N&r.N^~n.N&t.N,n.I&r.I^~n.I&t.I)}function X(n,r,t){return new k(n.N&r.N^n.N&t.N^r.N&t.N,n.I&r.I^n.I&t.I^r.I&t.I)}function z(n){var r=N(n,28),t=N(n,34),e=N(n,39);return new k(r.N^t.N^e.N,r.I^t.I^e.I)}function O(n,r){var t,e;t=(65535&n.I)+(65535&r.I);var i=(65535&(e=(n.I>>>16)+(r.I>>>16)+(t>>>16)))<<16|65535&t;return t=(65535&n.N)+(65535&r.N)+(e>>>16),e=(n.N>>>16)+(r.N>>>16)+(t>>>16),new k((65535&e)<<16|65535&t,i)}function j(n,r,t,e){var i,o;i=(65535&n.I)+(65535&r.I)+(65535&t.I)+(65535&e.I);var u=(65535&(o=(n.I>>>16)+(r.I>>>16)+(t.I>>>16)+(e.I>>>16)+(i>>>16)))<<16|65535&i;return i=(65535&n.N)+(65535&r.N)+(65535&t.N)+(65535&e.N)+(o>>>16),o=(n.N>>>16)+(r.N>>>16)+(t.N>>>16)+(e.N>>>16)+(i>>>16),new k((65535&o)<<16|65535&i,u)}function _(n,r,t,e,i){var o,u;o=(65535&n.I)+(65535&r.I)+(65535&t.I)+(65535&e.I)+(65535&i.I);var f=(65535&(u=(n.I>>>16)+(r.I>>>16)+(t.I>>>16)+(e.I>>>16)+(i.I>>>16)+(o>>>16)))<<16|65535&o;return o=(65535&n.N)+(65535&r.N)+(65535&t.N)+(65535&e.N)+(65535&i.N)+(u>>>16),u=(n.N>>>16)+(r.N>>>16)+(t.N>>>16)+(e.N>>>16)+(i.N>>>16)+(o>>>16),new k((65535&u)<<16|65535&o,f)}function P(n,r){return new k(n.N^r.N,n.I^r.I)}function x(n){var r=N(n,1),t=N(n,8),e=I(n,7);return new k(r.N^t.N^e.N,r.I^t.I^e.I)}function V(n){var r=N(n,14),t=N(n,18),e=N(n,41);return new k(r.N^t.N^e.N,r.I^t.I^e.I)}var Z=[new k(i[0],3609767458),new k(i[1],602891725),new k(i[2],3964484399),new k(i[3],2173295548),new k(i[4],4081628472),new k(i[5],3053834265),new k(i[6],2937671579),new k(i[7],3664609560),new k(i[8],2734883394),new k(i[9],1164996542),new k(i[10],1323610764),new k(i[11],3590304994),new k(i[12],4068182383),new k(i[13],991336113),new k(i[14],633803317),new k(i[15],3479774868),new k(i[16],2666613458),new k(i[17],944711139),new k(i[18],2341262773),new k(i[19],2007800933),new k(i[20],1495990901),new k(i[21],1856431235),new k(i[22],3175218132),new k(i[23],2198950837),new k(i[24],3999719339),new k(i[25],766784016),new k(i[26],2566594879),new k(i[27],3203337956),new k(i[28],1034457026),new k(i[29],2466948901),new k(i[30],3758326383),new k(i[31],168717936),new k(i[32],1188179964),new k(i[33],1546045734),new k(i[34],1522805485),new k(i[35],2643833823),new k(i[36],2343527390),new k(i[37],1014477480),new k(i[38],1206759142),new k(i[39],344077627),new k(i[40],1290863460),new k(i[41],3158454273),new k(i[42],3505952657),new k(i[43],106217008),new k(i[44],3606008344),new k(i[45],1432725776),new k(i[46],1467031594),new k(i[47],851169720),new k(i[48],3100823752),new k(i[49],1363258195),new k(i[50],3750685593),new k(i[51],3785050280),new k(i[52],3318307427),new k(i[53],3812723403),new k(i[54],2003034995),new k(i[55],3602036899),new k(i[56],1575990012),new k(i[57],1125592928),new k(i[58],2716904306),new k(i[59],442776044),new k(i[60],593698344),new k(i[61],3733110249),new k(i[62],2999351573),new k(i[63],3815920427),new k(3391569614,3928383900),new k(3515267271,566280711),new k(3940187606,3454069534),new k(4118630271,4000239992),new k(116418474,1914138554),new k(174292421,2731055270),new k(289380356,3203993006),new k(460393269,320620315),new k(685471733,587496836),new k(852142971,1086792851),new k(1017036298,365543100),new k(1126000580,2618297676),new k(1288033470,3409855158),new k(1501505948,4234509866),new k(1607167915,987167468),new k(1816402316,1246189591)];function q(n){return"SHA-384"===n?[new k(3418070365,o[0]),new k(1654270250,o[1]),new k(2438529370,o[2]),new k(355462360,o[3]),new k(1731405415,o[4]),new k(41048885895,o[5]),new k(3675008525,o[6]),new k(1203062813,o[7])]:[new k(u[0],4089235720),new k(u[1],2227873595),new k(u[2],4271175723),new k(u[3],1595750129),new k(u[4],2917565137),new k(u[5],725511199),new k(u[6],4215389547),new k(u[7],327033209)]}function D(n,r){var t,e,i,o,u,f,w,s,a,h,c,v,A,E,l,b,H=[];for(t=r[0],e=r[1],i=r[2],o=r[3],u=r[4],f=r[5],w=r[6],s=r[7],c=0;c<80;c+=1)c<16?(v=2*c,H[c]=new k(n[v],n[v+1])):H[c]=j((A=H[c-2],E=void 0,l=void 0,b=void 0,E=N(A,19),l=N(A,61),b=I(A,6),new k(E.N^l.N^b.N,E.I^l.I^b.I)),H[c-7],x(H[c-15]),H[c-16]),a=_(s,V(u),M(u,f,w),Z[c],H[c]),h=O(z(t),X(t,e,i)),s=w,w=f,f=u,u=O(o,a),o=i,i=e,e=t,t=O(a,h);return r[0]=O(t,r[0]),r[1]=O(e,r[1]),r[2]=O(i,r[2]),r[3]=O(o,r[3]),r[4]=O(u,r[4]),r[5]=O(f,r[5]),r[6]=O(w,r[6]),r[7]=O(s,r[7]),r}var G=function(n){function r(r,e,i){var o=this;if("SHA-384"!==r&&"SHA-512"!==r)throw new Error(f);var u=i||{};return(o=n.call(this,r,e,i)||this).F=o.Y,o.g=!0,o.C=-1,o.p=t(o.t,o.i,o.C),o.R=D,o.B=function(n){return n.slice()},o.L=q,o.K=function(n,t,e,i){return function(n,r,t,e,i){for(var o,u=31+(r+129>>>10<<5),f=r+t;n.length<=u;)n.push(0);for(n[r>>>5]|=128<<24-r%32,n[u]=4294967295&f,n[u-1]=f/4294967296|0,o=0;o<n.length;o+=32)e=D(n.slice(o,o+32),e);return"SHA-384"===i?[(e=e)[0].N,e[0].I,e[1].N,e[1].I,e[2].N,e[2].I,e[3].N,e[3].I,e[4].N,e[4].I,e[5].N,e[5].I]:[e[0].N,e[0].I,e[1].N,e[1].I,e[2].N,e[2].I,e[3].N,e[3].I,e[4].N,e[4].I,e[5].N,e[5].I,e[6].N,e[6].I,e[7].N,e[7].I]}(n,t,e,i,r)},o.m=q(r),o.S=1024,o.U="SHA-384"===r?384:512,o.T=!1,u.hmacKey&&o.k(a("hmacKey",u.hmacKey,o.C)),o}return v(r,n),r}(h),J=[new k(0,1),new k(0,32898),new k(2147483648,32906),new k(2147483648,2147516416),new k(0,32907),new k(0,2147483649),new k(2147483648,2147516545),new k(2147483648,32777),new k(0,138),new k(0,136),new k(0,2147516425),new k(0,2147483658),new k(0,2147516555),new k(2147483648,139),new k(2147483648,32905),new k(2147483648,32771),new k(2147483648,32770),new k(2147483648,128),new k(0,32778),new k(2147483648,2147483658),new k(2147483648,2147516545),new k(2147483648,32896),new k(0,2147483649),new k(2147483648,2147516424)],Q=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function W(n){var r,t=[];for(r=0;r<5;r+=1)t[r]=[new k(0,0),new k(0,0),new k(0,0),new k(0,0),new k(0,0)];return t}function $(n){var r,t=[];for(r=0;r<5;r+=1)t[r]=n[r].slice();return t}function nn(n,r){var t,e,i,o,u,f,w,s,a,h=[],c=[];if(null!==n)for(e=0;e<n.length;e+=2)r[(e>>>1)%5][(e>>>1)/5|0]=P(r[(e>>>1)%5][(e>>>1)/5|0],new k(n[e+1],n[e]));for(t=0;t<24;t+=1){for(o=W(),e=0;e<5;e+=1)h[e]=(u=r[e][0],f=r[e][1],w=r[e][2],s=r[e][3],a=r[e][4],new k(u.N^f.N^w.N^s.N^a.N,u.I^f.I^w.I^s.I^a.I));for(e=0;e<5;e+=1)c[e]=P(h[(e+4)%5],Y(h[(e+1)%5],1));for(e=0;e<5;e+=1)for(i=0;i<5;i+=1)r[e][i]=P(r[e][i],c[e]);for(e=0;e<5;e+=1)for(i=0;i<5;i+=1)o[i][(2*e+3*i)%5]=Y(r[e][i],Q[e][i]);for(e=0;e<5;e+=1)for(i=0;i<5;i+=1)r[e][i]=P(o[e][i],new k(~o[(e+1)%5][i].N&o[(e+2)%5][i].N,~o[(e+1)%5][i].I&o[(e+2)%5][i].I));r[0][0]=P(r[0][0],J[t])}return r}function rn(n){var r,t,e=0,i=[0,0],o=[4294967295&n,n/4294967296&2097151];for(r=6;r>=0;r--)0===(t=o[r>>2]>>>8*r&255)&&0===e||(i[e+1>>2]|=t<<8*(e+1),e+=1);return e=0!==e?e:1,i[0]|=e,{value:e+1>4?i:[i[0]],binLen:8+8*e}}function tn(n){return w(rn(n.binLen),n)}function en(n,r){var t,e=rn(r),i=r>>>2,o=(i-(e=w(e,n)).value.length%i)%i;for(t=0;t<o;t++)e.value.push(0);return e.value}var on=function(n){function r(r,e,i){var o=this,u=6,w=0,s=i||{};if(1!==(o=n.call(this,r,e,i)||this).numRounds){if(s.kmacKey||s.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===o.o||"CSHAKE256"===o.o)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(o.C=1,o.p=t(o.t,o.i,o.C),o.R=nn,o.B=$,o.L=W,o.m=W(),o.T=!1,r){case"SHA3-224":o.S=w=1152,o.U=224,o.g=!0,o.F=o.Y;break;case"SHA3-256":o.S=w=1088,o.U=256,o.g=!0,o.F=o.Y;break;case"SHA3-384":o.S=w=832,o.U=384,o.g=!0,o.F=o.Y;break;case"SHA3-512":o.S=w=576,o.U=512,o.g=!0,o.F=o.Y;break;case"SHAKE128":u=31,o.S=w=1344,o.U=-1,o.T=!0,o.g=!1,o.F=null;break;case"SHAKE256":u=31,o.S=w=1088,o.U=-1,o.T=!0,o.g=!1,o.F=null;break;case"KMAC128":u=4,o.S=w=1344,o.M(i),o.U=-1,o.T=!0,o.g=!1,o.F=o.X;break;case"KMAC256":u=4,o.S=w=1088,o.M(i),o.U=-1,o.T=!0,o.g=!1,o.F=o.X;break;case"CSHAKE128":o.S=w=1344,u=o.O(i),o.U=-1,o.T=!0,o.g=!1,o.F=null;break;case"CSHAKE256":o.S=w=1088,u=o.O(i),o.U=-1,o.T=!0,o.g=!1,o.F=null;break;default:throw new Error(f)}return o.K=function(n,r,t,e,i){return function(n,r,t,e,i,o,u){var f,w,s=0,a=[],h=i>>>5,c=r>>>5;for(f=0;f<c&&r>=i;f+=h)e=nn(n.slice(f,f+h),e),r-=i;for(n=n.slice(f),r%=i;n.length<h;)n.push(0);for(n[(f=r>>>3)>>2]^=o<<f%4*8,n[h-1]^=2147483648,e=nn(n,e);32*a.length<u&&(w=e[s%5][s/5|0],a.push(w.I),!(32*a.length>=u));)a.push(w.N),0==64*(s+=1)%i&&(nn(null,e),s=0);return a}(n,r,0,e,w,u,i)},s.hmacKey&&o.k(a("hmacKey",s.hmacKey,o.C)),o}return v(r,n),r.prototype.O=function(n,r){var t=function(n){var r=n||{};return{funcName:a("funcName",r.funcName,1,{value:[],binLen:0}),customization:a("Customization",r.customization,1,{value:[],binLen:0})}}(n||{});r&&(t.funcName=r);var e=w(tn(t.funcName),tn(t.customization));if(0!==t.customization.binLen||0!==t.funcName.binLen){for(var i=en(e,this.S>>>3),o=0;o<i.length;o+=this.S>>>5)this.m=this.R(i.slice(o,o+(this.S>>>5)),this.m),this.v+=this.S;return 4}return 31},r.prototype.M=function(n){var r=function(n){var r=n||{};return{kmacKey:a("kmacKey",r.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:a("Customization",r.customization,1,{value:[],binLen:0})}}(n||{});this.O(n,r.funcName);for(var t=en(tn(r.kmacKey),this.S>>>3),e=0;e<t.length;e+=this.S>>>5)this.m=this.R(t.slice(e,e+(this.S>>>5)),this.m),this.v+=this.S;this.A=!0},r.prototype.X=function(n){var r=w({value:this.u.slice(),binLen:this.s},function(n){var r,t,e=0,i=[0,0],o=[4294967295&n,n/4294967296&2097151];for(r=6;r>=0;r--)0==(t=o[r>>2]>>>8*r&255)&&0===e||(i[e>>2]|=t<<8*e,e+=1);return i[(e=0!==e?e:1)>>2]|=e<<8*e,{value:e+1>4?i:[i[0]],binLen:8+8*e}}(n.outputLen));return this.K(r.value,r.binLen,this.v,this.B(this.m),n.outputLen)},r}(h);return function(){function n(n,r,t){if("SHA-1"==n)this.j=new K(n,r,t);else if("SHA-224"==n||"SHA-256"==n)this.j=new g(n,r,t);else if("SHA-384"==n||"SHA-512"==n)this.j=new G(n,r,t);else{if("SHA3-224"!=n&&"SHA3-256"!=n&&"SHA3-384"!=n&&"SHA3-512"!=n&&"SHAKE128"!=n&&"SHAKE256"!=n&&"CSHAKE128"!=n&&"CSHAKE256"!=n&&"KMAC128"!=n&&"KMAC256"!=n)throw new Error(f);this.j=new on(n,r,t)}}return n.prototype.update=function(n){this.j.update(n)},n.prototype.getHash=function(n,r){return this.j.getHash(n,r)},n.prototype.setHMACKey=function(n,r,t){this.j.setHMACKey(n,r,t)},n.prototype.getHMAC=function(n,r){return this.j.getHMAC(n,r)},n}()}));
//# sourceMappingURL=sha.js.map


/***/ }),

/***/ "./node_modules/semver/classes/comparator.js":
/*!***************************************************!*\
  !*** ./node_modules/semver/classes/comparator.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    comp = comp.trim().split(/\s+/).join(' ')
    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    options = parseOptions(options)

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/semver/internal/parse-options.js")
const { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ "./node_modules/semver/internal/re.js")
const cmp = __webpack_require__(/*! ../functions/cmp */ "./node_modules/semver/functions/cmp.js")
const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "./node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ./range */ "./node_modules/semver/classes/range.js")


/***/ }),

/***/ "./node_modules/semver/classes/range.js":
/*!**********************************************!*\
  !*** ./node_modules/semver/classes/range.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SPACE_CHARACTERS = /\s+/g

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.formatted = undefined
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.formatted = undefined
  }

  get range () {
    if (this.formatted === undefined) {
      this.formatted = ''
      for (let i = 0; i < this.set.length; i++) {
        if (i > 0) {
          this.formatted += '||'
        }
        const comps = this.set[i]
        for (let k = 0; k < comps.length; k++) {
          if (k > 0) {
            this.formatted += ' '
          }
          this.formatted += comps[k].toString().trim()
        }
      }
    }
    return this.formatted
  }

  format () {
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE)
    const memoKey = memoOpts + ':' + range
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
    debug('tilde trim', range)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)
    debug('caret trim', range)

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

module.exports = Range

const LRU = __webpack_require__(/*! ../internal/lrucache */ "./node_modules/semver/internal/lrucache.js")
const cache = new LRU()

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/semver/internal/parse-options.js")
const Comparator = __webpack_require__(/*! ./comparator */ "./node_modules/semver/classes/comparator.js")
const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "./node_modules/semver/classes/semver.js")
const {
  safeRe: re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __webpack_require__(/*! ../internal/re */ "./node_modules/semver/internal/re.js")
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__(/*! ../internal/constants */ "./node_modules/semver/internal/constants.js")

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
}

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
}

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp
    .trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return `${from} ${to}`.trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ "./node_modules/semver/classes/semver.js":
/*!***********************************************!*\
  !*** ./node_modules/semver/classes/semver.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/semver/internal/debug.js")
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(/*! ../internal/constants */ "./node_modules/semver/internal/constants.js")
const { safeRe: re, safeSrc: src, t } = __webpack_require__(/*! ../internal/re */ "./node_modules/semver/internal/re.js")

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/semver/internal/parse-options.js")
const { compareIdentifiers } = __webpack_require__(/*! ../internal/identifiers */ "./node_modules/semver/internal/identifiers.js")
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
        version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('build compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    if (release.startsWith('pre')) {
      if (!identifier && identifierBase === false) {
        throw new Error('invalid increment argument: identifier is empty')
      }
      // Avoid an invalid semver results
      if (identifier) {
        const r = new RegExp(`^${this.options.loose ? src[t.PRERELEASELOOSE] : src[t.PRERELEASE]}$`)
        const match = `-${identifier}`.match(r)
        if (!match || match[1] !== identifier) {
          throw new Error(`invalid identifier: ${identifier}`)
        }
      }
    }

    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier, identifierBase)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier, identifierBase)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier, identifierBase)
        this.inc('pre', identifier, identifierBase)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase)
        }
        this.inc('pre', identifier, identifierBase)
        break
      case 'release':
        if (this.prerelease.length === 0) {
          throw new Error(`version ${this.raw} is not a prerelease`)
        }
        this.prerelease.length = 0
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0

        if (this.prerelease.length === 0) {
          this.prerelease = [base]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base]
          if (identifierBase === false) {
            prerelease = [identifier]
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease
            }
          } else {
            this.prerelease = prerelease
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format()
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`
    }
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ "./node_modules/semver/functions/cmp.js":
/*!**********************************************!*\
  !*** ./node_modules/semver/functions/cmp.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const eq = __webpack_require__(/*! ./eq */ "./node_modules/semver/functions/eq.js")
const neq = __webpack_require__(/*! ./neq */ "./node_modules/semver/functions/neq.js")
const gt = __webpack_require__(/*! ./gt */ "./node_modules/semver/functions/gt.js")
const gte = __webpack_require__(/*! ./gte */ "./node_modules/semver/functions/gte.js")
const lt = __webpack_require__(/*! ./lt */ "./node_modules/semver/functions/lt.js")
const lte = __webpack_require__(/*! ./lte */ "./node_modules/semver/functions/lte.js")

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ "./node_modules/semver/functions/compare.js":
/*!**************************************************!*\
  !*** ./node_modules/semver/functions/compare.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "./node_modules/semver/classes/semver.js")
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ "./node_modules/semver/functions/eq.js":
/*!*********************************************!*\
  !*** ./node_modules/semver/functions/eq.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ "./node_modules/semver/functions/gt.js":
/*!*********************************************!*\
  !*** ./node_modules/semver/functions/gt.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ "./node_modules/semver/functions/gte.js":
/*!**********************************************!*\
  !*** ./node_modules/semver/functions/gte.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ "./node_modules/semver/functions/lt.js":
/*!*********************************************!*\
  !*** ./node_modules/semver/functions/lt.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ "./node_modules/semver/functions/lte.js":
/*!**********************************************!*\
  !*** ./node_modules/semver/functions/lte.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ "./node_modules/semver/functions/neq.js":
/*!**********************************************!*\
  !*** ./node_modules/semver/functions/neq.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/semver/functions/compare.js")
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ "./node_modules/semver/functions/parse.js":
/*!************************************************!*\
  !*** ./node_modules/semver/functions/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "./node_modules/semver/classes/semver.js")
const parse = (version, options, throwErrors = false) => {
  if (version instanceof SemVer) {
    return version
  }
  try {
    return new SemVer(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
}

module.exports = parse


/***/ }),

/***/ "./node_modules/semver/functions/satisfies.js":
/*!****************************************************!*\
  !*** ./node_modules/semver/functions/satisfies.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range */ "./node_modules/semver/classes/range.js")
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ "./node_modules/semver/internal/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/semver/internal/constants.js ***!
  \***************************************************/
/***/ ((module) => {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
]

module.exports = {
  MAX_LENGTH,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
}


/***/ }),

/***/ "./node_modules/semver/internal/debug.js":
/*!***********************************************!*\
  !*** ./node_modules/semver/internal/debug.js ***!
  \***********************************************/
/***/ ((module) => {

const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ "./node_modules/semver/internal/identifiers.js":
/*!*****************************************************!*\
  !*** ./node_modules/semver/internal/identifiers.js ***!
  \*****************************************************/
/***/ ((module) => {

const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ "./node_modules/semver/internal/lrucache.js":
/*!**************************************************!*\
  !*** ./node_modules/semver/internal/lrucache.js ***!
  \**************************************************/
/***/ ((module) => {

class LRUCache {
  constructor () {
    this.max = 1000
    this.map = new Map()
  }

  get (key) {
    const value = this.map.get(key)
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key)
      this.map.set(key, value)
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key)

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value
        this.delete(firstKey)
      }

      this.map.set(key, value)
    }

    return this
  }
}

module.exports = LRUCache


/***/ }),

/***/ "./node_modules/semver/internal/parse-options.js":
/*!*******************************************************!*\
  !*** ./node_modules/semver/internal/parse-options.js ***!
  \*******************************************************/
/***/ ((module) => {

// parse out just the options we care about
const looseOption = Object.freeze({ loose: true })
const emptyOpts = Object.freeze({ })
const parseOptions = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
}
module.exports = parseOptions


/***/ }),

/***/ "./node_modules/semver/internal/re.js":
/*!********************************************!*\
  !*** ./node_modules/semver/internal/re.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = __webpack_require__(/*! ./constants */ "./node_modules/semver/internal/constants.js")
const debug = __webpack_require__(/*! ./debug */ "./node_modules/semver/internal/debug.js")
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const safeRe = exports.safeRe = []
const src = exports.src = []
const safeSrc = exports.safeSrc = []
const t = exports.t = {}
let R = 0

const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
]

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`)
  }
  return value
}

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value)
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  safeSrc[index] = safe
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)
createToken('COERCERTLFULL', src[t.COERCEFULL], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ "./node_modules/symbol.inspect/index.js":
/*!**********************************************!*\
  !*** ./node_modules/symbol.inspect/index.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";

/**
 * <symbol> that can be used to declare custom inspect functions.
 *
 * same as Symbol.for('nodejs.util.inspect.custom')
 * same as util.inspect.custom
 */
const SymbolInspect = Symbol.for('nodejs.util.inspect.custom');
module.exports = SymbolInspect;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./client/src/build-system.ts":
/*!************************************!*\
  !*** ./client/src/build-system.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TactTemplateTaskProvider = exports.BlueprintTaskProvider = void 0;
exports.registerBuildTasks = registerBuildTasks;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const fs_1 = __webpack_require__(/*! ./utils/fs */ "./client/src/utils/fs.ts");
class BlueprintTaskProvider {
    constructor(id, name, command, group) {
        this.taskType = `blueprint-${id}`;
        this.name = name;
        this.command = command;
        this.group = group;
    }
    async provideTasks() {
        const isAvailable = await this.isAvailable();
        if (!isAvailable)
            return [];
        return [this.createTask()];
    }
    async isAvailable() {
        return projectUsesBlueprint();
    }
    resolveTask(task) {
        const def = task.definition;
        if (def.type === this.taskType) {
            return this.createTask();
        }
        return undefined;
    }
    createTask() {
        const definition = {
            type: this.taskType,
        };
        const execution = new vscode.ShellExecution(this.command);
        const task = new vscode.Task(definition, vscode.TaskScope.Workspace, this.name, "Blueprint", execution);
        task.group = this.group;
        task.presentationOptions = {
            reveal: vscode.TaskRevealKind.Always,
            panel: vscode.TaskPanelKind.Dedicated,
            focus: true,
        };
        const settings = vscode.workspace.getConfiguration("tact");
        const useProblemMatcher = settings.get("linters.useProblemMatcher") ?? false;
        if (useProblemMatcher) {
            task.problemMatchers = ["$tact"];
        }
        return task;
    }
}
exports.BlueprintTaskProvider = BlueprintTaskProvider;
class TactTemplateTaskProvider {
    constructor(id, name, command, group) {
        this.taskType = `tact-template-${id}`;
        this.name = name;
        this.command = command;
        this.group = group;
    }
    async isAvailable() {
        return !(await projectUsesBlueprint());
    }
    async provideTasks() {
        const isAvailable = await this.isAvailable();
        if (!isAvailable)
            return [];
        return [this.createTask()];
    }
    resolveTask(task) {
        const def = task.definition;
        if (def.type === this.taskType) {
            return this.createTask();
        }
        return undefined;
    }
    createTask() {
        const definition = {
            type: this.taskType,
        };
        const execution = new vscode.ShellExecution(this.command);
        const task = new vscode.Task(definition, vscode.TaskScope.Workspace, this.name, "Tact Template", execution);
        task.group = this.group;
        task.presentationOptions = {
            reveal: vscode.TaskRevealKind.Always,
            panel: vscode.TaskPanelKind.Dedicated,
            focus: true,
        };
        const settings = vscode.workspace.getConfiguration("tact");
        const useProblemMatcher = settings.get("linters.useProblemMatcher") ?? false;
        if (useProblemMatcher) {
            task.problemMatchers = ["$tact"];
        }
        return task;
    }
}
exports.TactTemplateTaskProvider = TactTemplateTaskProvider;
async function registerTaskProvider(context, provider) {
    if (!(await provider.isAvailable()))
        return;
    const taskProviderDisposable = vscode.tasks.registerTaskProvider(provider.taskType, provider);
    context.subscriptions.push(taskProviderDisposable);
}
async function registerBuildTasks(context) {
    await registerTaskProvider(context, new BlueprintTaskProvider("build", "build", "npx blueprint build", vscode.TaskGroup.Build));
    await registerTaskProvider(context, new BlueprintTaskProvider("build-all", "build all contracts", "npx blueprint build --all", vscode.TaskGroup.Build));
    await registerTaskProvider(context, new BlueprintTaskProvider("test", "test", "npx blueprint test", vscode.TaskGroup.Test));
    await registerTaskProvider(context, new BlueprintTaskProvider("build-and-test-all", "build and test all contracts", "npx blueprint build --all && npx blueprint test", vscode.TaskGroup.Build));
    await registerTaskProvider(context, new TactTemplateTaskProvider("build", "build", "yarn build", vscode.TaskGroup.Build));
    await registerTaskProvider(context, new TactTemplateTaskProvider("test", "test", "yarn test", vscode.TaskGroup.Test));
    await registerTaskProvider(context, new TactTemplateTaskProvider("build-and-test", "build and test", "yarn build && yarn test", vscode.TaskGroup.Build));
    context.subscriptions.push(vscode.commands.registerCommand("tact.build", async () => {
        const tasks = await vscode.tasks.fetchTasks();
        const buildTask = tasks.find(task => task.group === vscode.TaskGroup.Build &&
            (task.source === "Blueprint" || task.source === "Tact Template"));
        if (buildTask) {
            await vscode.tasks.executeTask(buildTask);
        }
        else {
            void vscode.window.showErrorMessage("Build task not found");
        }
    }));
}
async function projectUsesBlueprint() {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0)
        return false;
    const packageJsonPath = vscode.Uri.joinPath(workspaceFolders[0].uri, "package.json");
    try {
        const packageJson = JSON.parse(await (0, fs_1.readFile)(packageJsonPath));
        return (packageJson.dependencies?.["@ton/blueprint"] !== undefined ||
            packageJson.devDependencies?.["@ton/blueprint"] !== undefined);
    }
    catch {
        // ignore any errors
    }
    return false;
}


/***/ }),

/***/ "./client/src/client-config.ts":
/*!*************************************!*\
  !*** ./client/src/client-config.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getClientConfiguration = getClientConfiguration;
exports.resetClientConfigCache = resetClientConfigCache;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const config_scheme_1 = __webpack_require__(/*! @shared/config-scheme */ "./shared/src/config-scheme.ts");
let cachedClientConfig = null;
function getClientConfiguration() {
    if (cachedClientConfig) {
        return cachedClientConfig;
    }
    const obj = {};
    const w = vscode.workspace.getConfiguration("tact");
    for (const key in config_scheme_1.defaultConfig) {
        const value = w.get(key);
        if (value !== undefined) {
            obj[key] = value;
        }
    }
    cachedClientConfig = obj;
    return cachedClientConfig;
}
function resetClientConfigCache() {
    cachedClientConfig = null;
}


/***/ }),

/***/ "./client/src/client-log.ts":
/*!**********************************!*\
  !*** ./client/src/client-log.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createClientLog = createClientLog;
exports.consoleError = consoleError;
/* eslint-disable @typescript-eslint/no-base-to-string */
const vscode = __webpack_require__(/*! vscode */ "vscode");
let consoleLogChannel = null;
function createClientLog() {
    if (!consoleLogChannel) {
        consoleLogChannel = vscode.window.createOutputChannel("Tact");
        if (process.env["TACT_LS_DEV"] === "true") {
            consoleLogChannel.show(true);
        }
    }
    return consoleLogChannel;
}
function consoleError(...items) {
    consoleLogChannel?.appendLine("[ERROR] " + items.map(element => itemToString(element)).join(" "));
}
function itemToString(item) {
    if (item === null)
        return "null";
    if (item === undefined)
        return "undefined";
    if (item instanceof Error) {
        return item.message;
    }
    if (typeof item === "object") {
        try {
            return JSON.stringify(item, null, 2);
        }
        catch {
            return item.toString();
        }
    }
    return item.toString();
}


/***/ }),

/***/ "./client/src/commands/openBocCommand.ts":
/*!***********************************************!*\
  !*** ./client/src/commands/openBocCommand.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerOpenBocCommand = registerOpenBocCommand;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const BocDecompilerProvider_1 = __webpack_require__(/*! ../providers/BocDecompilerProvider */ "./client/src/providers/BocDecompilerProvider.ts");
const saveBocDecompiledCommand_1 = __webpack_require__(/*! ./saveBocDecompiledCommand */ "./client/src/commands/saveBocDecompiledCommand.ts");
function registerOpenBocCommand(_context) {
    return vscode.commands.registerCommand("tact.openBocFile", async (fileUri) => {
        try {
            const actualFileUri = fileUri ?? (await (0, saveBocDecompiledCommand_1.openBocFilePicker)());
            if (actualFileUri === undefined)
                return;
            const decompileUri = actualFileUri.with({
                scheme: BocDecompilerProvider_1.BocDecompilerProvider.scheme,
                path: actualFileUri.path + ".decompiled.fif",
            });
            const doc = await vscode.workspace.openTextDocument(decompileUri);
            await vscode.window.showTextDocument(doc, {
                preview: true,
                viewColumn: vscode.ViewColumn.Active,
            });
        }
        catch (error) {
            console.error("Error in openBocCommand:", error);
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            vscode.window.showErrorMessage(`Failed to open BoC file: ${error}`);
        }
    });
}


/***/ }),

/***/ "./client/src/commands/saveBocDecompiledCommand.ts":
/*!*********************************************************!*\
  !*** ./client/src/commands/saveBocDecompiledCommand.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerSaveBocDecompiledCommand = registerSaveBocDecompiledCommand;
exports.openBocFilePicker = openBocFilePicker;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const fs = __webpack_require__(/*! ../utils/fs */ "./client/src/utils/fs.ts");
const BocDecompilerProvider_1 = __webpack_require__(/*! ../providers/BocDecompilerProvider */ "./client/src/providers/BocDecompilerProvider.ts");
function registerSaveBocDecompiledCommand(_context) {
    return vscode.commands.registerCommand("tact.saveBocDecompiled", async (fileUri) => {
        try {
            await saveBoc(fileUri);
        }
        catch (error) {
            console.error("Error in saveBocDecompiledCommand:", error);
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            vscode.window.showErrorMessage(`Failed to save decompiled BщC: ${error}`);
        }
    });
}
async function openBocFilePicker() {
    const files = await vscode.window.showOpenDialog({
        canSelectFiles: true,
        canSelectFolders: false,
        canSelectMany: false,
        filters: {
            "BOC files": ["boc"],
        },
    });
    if (!files || files.length === 0) {
        return undefined;
    }
    return files[0];
}
async function saveBoc(fileUri) {
    const actualFileUri = fileUri ?? (await openBocFilePicker());
    if (actualFileUri === undefined)
        return;
    const decompiler = new BocDecompilerProvider_1.BocDecompilerProvider();
    const decompileUri = actualFileUri.with({
        scheme: BocDecompilerProvider_1.BocDecompilerProvider.scheme,
        path: actualFileUri.path + ".decompiled.fif",
    });
    const content = await decompiler.provideTextDocumentContent(decompileUri);
    const outputPath = actualFileUri.fsPath + ".decompiled.fif";
    await fs.writeFile(outputPath, content);
    const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri;
    if (!workspaceRoot)
        return;
    const relativePath = vscode.Uri.joinPath(workspaceRoot, outputPath);
    vscode.window.showInformationMessage(`Decompiled BOC saved to: ${relativePath.fsPath}`);
    const savedFileUri = vscode.Uri.file(outputPath);
    const doc = await vscode.workspace.openTextDocument(savedFileUri);
    await vscode.window.showTextDocument(doc, {
        preview: false,
        viewColumn: vscode.ViewColumn.Active,
    });
}


/***/ }),

/***/ "./client/src/providers/BocDecompilerProvider.ts":
/*!*******************************************************!*\
  !*** ./client/src/providers/BocDecompilerProvider.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BocDecompilerProvider = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const fs = __webpack_require__(/*! ../utils/fs */ "./client/src/utils/fs.ts");
const opcode_1 = __webpack_require__(/*! @tact-lang/opcode */ "./node_modules/@tact-lang/opcode/dist/index.js");
class BocDecompilerProvider {
    constructor() {
        this._onDidChange = new vscode.EventEmitter();
        this.onDidChange = this._onDidChange.event;
    }
    async provideTextDocumentContent(uri) {
        const bocPath = this.getBocPath(uri);
        try {
            return await this.decompileBoc(bocPath);
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            return this.formatError(errorMessage);
        }
    }
    getBocPath(uri) {
        console.log("Original URI:", uri.toString());
        const bocPath = uri.fsPath.replace(".decompiled.fif", "");
        console.log("BOC path:", bocPath);
        return bocPath;
    }
    async decompileBoc(bocPath) {
        try {
            const content = await fs.readFileRaw(bocPath);
            const cell = opcode_1.Cell.fromBase64(content.toString("base64"));
            const program = (0, opcode_1.disassembleRoot)(cell, {
                computeRefs: true,
            });
            const output = opcode_1.AssemblyWriter.write(program, {
                useAliases: true,
                debugSymbols: opcode_1.debugSymbols,
            });
            return this.formatDecompiledOutput(output);
        }
        catch (error) {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            throw new Error(`Decompilation failed: ${error}`);
        }
    }
    formatDecompiledOutput(output) {
        const header = [
            "// Decompiled BOC file",
            "// Note: This is auto-generated code",
            "// Time: " + new Date().toISOString(),
            "",
            "",
        ].join("\n");
        return header + output;
    }
    formatError(error) {
        return [
            "// Failed to decompile BOC file",
            "// Error: " + error,
            "// Time: " + new Date().toISOString(),
        ].join("\n");
    }
}
exports.BocDecompilerProvider = BocDecompilerProvider;
BocDecompilerProvider.scheme = "boc-decompiled";


/***/ }),

/***/ "./client/src/providers/BocEditorProvider.ts":
/*!***************************************************!*\
  !*** ./client/src/providers/BocEditorProvider.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BocEditorProvider = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const BocDecompilerProvider_1 = __webpack_require__(/*! ./BocDecompilerProvider */ "./client/src/providers/BocDecompilerProvider.ts");
class BocEditorProvider {
    static register() {
        return vscode.window.registerCustomEditorProvider("boc.editor", new BocEditorProvider(), {
            supportsMultipleEditorsPerDocument: false,
        });
    }
    openCustomDocument(uri, _openContext, _token) {
        return {
            uri,
            dispose: () => { },
        };
    }
    async resolveCustomEditor(document, webviewPanel, _token) {
        const decompileUri = document.uri.with({
            scheme: BocDecompilerProvider_1.BocDecompilerProvider.scheme,
            path: document.uri.path + ".decompiled.fif",
        });
        const doc = await vscode.workspace.openTextDocument(decompileUri);
        await vscode.window.showTextDocument(doc, {
            preview: true,
            viewColumn: vscode.ViewColumn.Active,
        });
        webviewPanel.dispose();
    }
}
exports.BocEditorProvider = BocEditorProvider;


/***/ }),

/***/ "./client/src/providers/BocFileSystemProvider.ts":
/*!*******************************************************!*\
  !*** ./client/src/providers/BocFileSystemProvider.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BocFileSystemProvider = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const BocDecompilerProvider_1 = __webpack_require__(/*! ./BocDecompilerProvider */ "./client/src/providers/BocDecompilerProvider.ts");
const fs = __webpack_require__(/*! ../utils/fs */ "./client/src/utils/fs.ts");
class BocFileSystemProvider {
    constructor() {
        this._emitter = new vscode.EventEmitter();
        this.onDidChangeFile = this._emitter.event;
    }
    watch(_uri) {
        return new vscode.Disposable(() => { });
    }
    stat(_uri) {
        return {
            type: vscode.FileType.File,
            ctime: Date.now(),
            mtime: Date.now(),
            size: 0,
        };
    }
    readDirectory(_uri) {
        return [];
    }
    createDirectory(_uri) { }
    async readFile(uri) {
        console.log("Reading BOC file:", uri.fsPath);
        try {
            const fileContent = await fs.readFile(uri);
            console.log("File content length:", fileContent.length);
            const decompileUri = uri.with({
                scheme: BocDecompilerProvider_1.BocDecompilerProvider.scheme,
                path: uri.path + ".decompiled.fif",
            });
            console.log("Decompile URI:", decompileUri.toString());
            const doc = await vscode.workspace.openTextDocument(decompileUri);
            await vscode.window.showTextDocument(doc, {
                preview: true,
                viewColumn: vscode.ViewColumn.Active,
            });
            return Uint8Array.from(fileContent);
        }
        catch (error) {
            console.error("Error reading BOC file:", error);
            throw vscode.FileSystemError.FileNotFound(uri);
        }
    }
    writeFile(_uri, _content) { }
    delete(_uri) { }
    rename(_oldUri, _newUri) { }
}
exports.BocFileSystemProvider = BocFileSystemProvider;


/***/ }),

/***/ "./client/src/utils/fs.ts":
/*!********************************!*\
  !*** ./client/src/utils/fs.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readFile = readFile;
exports.readFileRaw = readFileRaw;
exports.writeFile = writeFile;
exports.fileExists = fileExists;
const vscode = __webpack_require__(/*! vscode */ "vscode");
async function readFile(uri) {
    const contentArray = await vscode.workspace.fs.readFile(uri);
    return Buffer.from(contentArray).toString("utf8");
}
async function readFileRaw(filePath) {
    const contentArray = await vscode.workspace.fs.readFile(vscode.Uri.parse(filePath));
    return Buffer.from(contentArray);
}
async function writeFile(filePath, content) {
    await vscode.workspace.fs.writeFile(vscode.Uri.parse(filePath), Buffer.from(content));
}
async function fileExists(uri) {
    try {
        await vscode.workspace.fs.readFile(uri);
        return true;
    }
    catch {
        return false;
    }
}


/***/ }),

/***/ "./client/src/utils/package-manager.ts":
/*!*********************************************!*\
  !*** ./client/src/utils/package-manager.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.detectPackageManager = detectPackageManager;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const fs_1 = __webpack_require__(/*! ./fs */ "./client/src/utils/fs.ts");
async function detectPackageManager() {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0)
        return "npm";
    const workspaceRoot = workspaceFolders[0].uri;
    // Check for lock files
    if (await (0, fs_1.fileExists)(vscode.Uri.joinPath(workspaceRoot, "bun.lockb"))) {
        return "bun";
    }
    if (await (0, fs_1.fileExists)(vscode.Uri.joinPath(workspaceRoot, "yarn.lock"))) {
        return "yarn";
    }
    if (await (0, fs_1.fileExists)(vscode.Uri.joinPath(workspaceRoot, "pnpm-lock.yaml"))) {
        return "pnpm";
    }
    if (await (0, fs_1.fileExists)(vscode.Uri.joinPath(workspaceRoot, "package-lock.json"))) {
        return "npm";
    }
    try {
        const packageJsonUri = vscode.Uri.joinPath(workspaceRoot, "package.json");
        const packageJson = JSON.parse(await (0, fs_1.readFile)(packageJsonUri));
        if (packageJson.packageManager) {
            if (packageJson.packageManager.startsWith("bun")) {
                return "bun";
            }
            if (packageJson.packageManager.startsWith("yarn")) {
                return "yarn";
            }
            if (packageJson.packageManager.startsWith("pnpm")) {
                return "pnpm";
            }
        }
    }
    catch {
        // ignore any errors
    }
    return "npm";
}


/***/ }),

/***/ "./shared/src/config-scheme.ts":
/*!*************************************!*\
  !*** ./shared/src/config-scheme.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultConfig = void 0;
// package.json, configuration properties default values
exports.defaultConfig = {};


/***/ }),

/***/ "./shared/src/shared-msgtypes.ts":
/*!***************************************!*\
  !*** ./shared/src/shared-msgtypes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetToolchainVersionNotification = exports.GetDocumentationAtPositionRequest = exports.GetTypeAtPositionRequest = void 0;
exports.GetTypeAtPositionRequest = "tact/getTypeAtPosition";
exports.GetDocumentationAtPositionRequest = "tact/executeHoverProvider";
exports.SetToolchainVersionNotification = "tact/setToolchainVersion";


/***/ }),

/***/ "./node_modules/tweetnacl/nacl-fast.js":
/*!*********************************************!*\
  !*** ./node_modules/tweetnacl/nacl-fast.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function(nacl) {
'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
};

//  Pluggable, initialized in high-level API below.
var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

var _0 = new Uint8Array(16);
var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function ts64(x, i, h, l) {
  x[i]   = (h >> 24) & 0xff;
  x[i+1] = (h >> 16) & 0xff;
  x[i+2] = (h >>  8) & 0xff;
  x[i+3] = h & 0xff;
  x[i+4] = (l >> 24)  & 0xff;
  x[i+5] = (l >> 16)  & 0xff;
  x[i+6] = (l >>  8)  & 0xff;
  x[i+7] = l & 0xff;
}

function vn(x, xi, y, yi, n) {
  var i,d = 0;
  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  return (1 & ((d - 1) >>> 8)) - 1;
}

function crypto_verify_16(x, xi, y, yi) {
  return vn(x,xi,y,yi,16);
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x,xi,y,yi,32);
}

function core_salsa20(o, p, k, c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }
   x0 =  x0 +  j0 | 0;
   x1 =  x1 +  j1 | 0;
   x2 =  x2 +  j2 | 0;
   x3 =  x3 +  j3 | 0;
   x4 =  x4 +  j4 | 0;
   x5 =  x5 +  j5 | 0;
   x6 =  x6 +  j6 | 0;
   x7 =  x7 +  j7 | 0;
   x8 =  x8 +  j8 | 0;
   x9 =  x9 +  j9 | 0;
  x10 = x10 + j10 | 0;
  x11 = x11 + j11 | 0;
  x12 = x12 + j12 | 0;
  x13 = x13 + j13 | 0;
  x14 = x14 + j14 | 0;
  x15 = x15 + j15 | 0;

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x1 >>>  0 & 0xff;
  o[ 5] = x1 >>>  8 & 0xff;
  o[ 6] = x1 >>> 16 & 0xff;
  o[ 7] = x1 >>> 24 & 0xff;

  o[ 8] = x2 >>>  0 & 0xff;
  o[ 9] = x2 >>>  8 & 0xff;
  o[10] = x2 >>> 16 & 0xff;
  o[11] = x2 >>> 24 & 0xff;

  o[12] = x3 >>>  0 & 0xff;
  o[13] = x3 >>>  8 & 0xff;
  o[14] = x3 >>> 16 & 0xff;
  o[15] = x3 >>> 24 & 0xff;

  o[16] = x4 >>>  0 & 0xff;
  o[17] = x4 >>>  8 & 0xff;
  o[18] = x4 >>> 16 & 0xff;
  o[19] = x4 >>> 24 & 0xff;

  o[20] = x5 >>>  0 & 0xff;
  o[21] = x5 >>>  8 & 0xff;
  o[22] = x5 >>> 16 & 0xff;
  o[23] = x5 >>> 24 & 0xff;

  o[24] = x6 >>>  0 & 0xff;
  o[25] = x6 >>>  8 & 0xff;
  o[26] = x6 >>> 16 & 0xff;
  o[27] = x6 >>> 24 & 0xff;

  o[28] = x7 >>>  0 & 0xff;
  o[29] = x7 >>>  8 & 0xff;
  o[30] = x7 >>> 16 & 0xff;
  o[31] = x7 >>> 24 & 0xff;

  o[32] = x8 >>>  0 & 0xff;
  o[33] = x8 >>>  8 & 0xff;
  o[34] = x8 >>> 16 & 0xff;
  o[35] = x8 >>> 24 & 0xff;

  o[36] = x9 >>>  0 & 0xff;
  o[37] = x9 >>>  8 & 0xff;
  o[38] = x9 >>> 16 & 0xff;
  o[39] = x9 >>> 24 & 0xff;

  o[40] = x10 >>>  0 & 0xff;
  o[41] = x10 >>>  8 & 0xff;
  o[42] = x10 >>> 16 & 0xff;
  o[43] = x10 >>> 24 & 0xff;

  o[44] = x11 >>>  0 & 0xff;
  o[45] = x11 >>>  8 & 0xff;
  o[46] = x11 >>> 16 & 0xff;
  o[47] = x11 >>> 24 & 0xff;

  o[48] = x12 >>>  0 & 0xff;
  o[49] = x12 >>>  8 & 0xff;
  o[50] = x12 >>> 16 & 0xff;
  o[51] = x12 >>> 24 & 0xff;

  o[52] = x13 >>>  0 & 0xff;
  o[53] = x13 >>>  8 & 0xff;
  o[54] = x13 >>> 16 & 0xff;
  o[55] = x13 >>> 24 & 0xff;

  o[56] = x14 >>>  0 & 0xff;
  o[57] = x14 >>>  8 & 0xff;
  o[58] = x14 >>> 16 & 0xff;
  o[59] = x14 >>> 24 & 0xff;

  o[60] = x15 >>>  0 & 0xff;
  o[61] = x15 >>>  8 & 0xff;
  o[62] = x15 >>> 16 & 0xff;
  o[63] = x15 >>> 24 & 0xff;
}

function core_hsalsa20(o,p,k,c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x5 >>>  0 & 0xff;
  o[ 5] = x5 >>>  8 & 0xff;
  o[ 6] = x5 >>> 16 & 0xff;
  o[ 7] = x5 >>> 24 & 0xff;

  o[ 8] = x10 >>>  0 & 0xff;
  o[ 9] = x10 >>>  8 & 0xff;
  o[10] = x10 >>> 16 & 0xff;
  o[11] = x10 >>> 24 & 0xff;

  o[12] = x15 >>>  0 & 0xff;
  o[13] = x15 >>>  8 & 0xff;
  o[14] = x15 >>> 16 & 0xff;
  o[15] = x15 >>> 24 & 0xff;

  o[16] = x6 >>>  0 & 0xff;
  o[17] = x6 >>>  8 & 0xff;
  o[18] = x6 >>> 16 & 0xff;
  o[19] = x6 >>> 24 & 0xff;

  o[20] = x7 >>>  0 & 0xff;
  o[21] = x7 >>>  8 & 0xff;
  o[22] = x7 >>> 16 & 0xff;
  o[23] = x7 >>> 24 & 0xff;

  o[24] = x8 >>>  0 & 0xff;
  o[25] = x8 >>>  8 & 0xff;
  o[26] = x8 >>> 16 & 0xff;
  o[27] = x8 >>> 24 & 0xff;

  o[28] = x9 >>>  0 & 0xff;
  o[29] = x9 >>>  8 & 0xff;
  o[30] = x9 >>> 16 & 0xff;
  o[31] = x9 >>> 24 & 0xff;
}

function crypto_core_salsa20(out,inp,k,c) {
  core_salsa20(out,inp,k,c);
}

function crypto_core_hsalsa20(out,inp,k,c) {
  core_hsalsa20(out,inp,k,c);
}

var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    mpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  }
  return 0;
}

function crypto_stream_salsa20(c,cpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = x[i];
  }
  return 0;
}

function crypto_stream(c,cpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20(c,cpos,d,sn,s);
}

function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
}

/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

var poly1305 = function(key) {
  this.buffer = new Uint8Array(16);
  this.r = new Uint16Array(10);
  this.h = new Uint16Array(10);
  this.pad = new Uint16Array(8);
  this.leftover = 0;
  this.fin = 0;

  var t0, t1, t2, t3, t4, t5, t6, t7;

  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  this.r[9] = ((t7 >>>  5)) & 0x007f;

  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
};

poly1305.prototype.blocks = function(m, mpos, bytes) {
  var hibit = this.fin ? 0 : (1 << 11);
  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  var h0 = this.h[0],
      h1 = this.h[1],
      h2 = this.h[2],
      h3 = this.h[3],
      h4 = this.h[4],
      h5 = this.h[5],
      h6 = this.h[6],
      h7 = this.h[7],
      h8 = this.h[8],
      h9 = this.h[9];

  var r0 = this.r[0],
      r1 = this.r[1],
      r2 = this.r[2],
      r3 = this.r[3],
      r4 = this.r[4],
      r5 = this.r[5],
      r6 = this.r[6],
      r7 = this.r[7],
      r8 = this.r[8],
      r9 = this.r[9];

  while (bytes >= 16) {
    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    h5 += ((t4 >>>  1)) & 0x1fff;
    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    h9 += ((t7 >>> 5)) | hibit;

    c = 0;

    d0 = c;
    d0 += h0 * r0;
    d0 += h1 * (5 * r9);
    d0 += h2 * (5 * r8);
    d0 += h3 * (5 * r7);
    d0 += h4 * (5 * r6);
    c = (d0 >>> 13); d0 &= 0x1fff;
    d0 += h5 * (5 * r5);
    d0 += h6 * (5 * r4);
    d0 += h7 * (5 * r3);
    d0 += h8 * (5 * r2);
    d0 += h9 * (5 * r1);
    c += (d0 >>> 13); d0 &= 0x1fff;

    d1 = c;
    d1 += h0 * r1;
    d1 += h1 * r0;
    d1 += h2 * (5 * r9);
    d1 += h3 * (5 * r8);
    d1 += h4 * (5 * r7);
    c = (d1 >>> 13); d1 &= 0x1fff;
    d1 += h5 * (5 * r6);
    d1 += h6 * (5 * r5);
    d1 += h7 * (5 * r4);
    d1 += h8 * (5 * r3);
    d1 += h9 * (5 * r2);
    c += (d1 >>> 13); d1 &= 0x1fff;

    d2 = c;
    d2 += h0 * r2;
    d2 += h1 * r1;
    d2 += h2 * r0;
    d2 += h3 * (5 * r9);
    d2 += h4 * (5 * r8);
    c = (d2 >>> 13); d2 &= 0x1fff;
    d2 += h5 * (5 * r7);
    d2 += h6 * (5 * r6);
    d2 += h7 * (5 * r5);
    d2 += h8 * (5 * r4);
    d2 += h9 * (5 * r3);
    c += (d2 >>> 13); d2 &= 0x1fff;

    d3 = c;
    d3 += h0 * r3;
    d3 += h1 * r2;
    d3 += h2 * r1;
    d3 += h3 * r0;
    d3 += h4 * (5 * r9);
    c = (d3 >>> 13); d3 &= 0x1fff;
    d3 += h5 * (5 * r8);
    d3 += h6 * (5 * r7);
    d3 += h7 * (5 * r6);
    d3 += h8 * (5 * r5);
    d3 += h9 * (5 * r4);
    c += (d3 >>> 13); d3 &= 0x1fff;

    d4 = c;
    d4 += h0 * r4;
    d4 += h1 * r3;
    d4 += h2 * r2;
    d4 += h3 * r1;
    d4 += h4 * r0;
    c = (d4 >>> 13); d4 &= 0x1fff;
    d4 += h5 * (5 * r9);
    d4 += h6 * (5 * r8);
    d4 += h7 * (5 * r7);
    d4 += h8 * (5 * r6);
    d4 += h9 * (5 * r5);
    c += (d4 >>> 13); d4 &= 0x1fff;

    d5 = c;
    d5 += h0 * r5;
    d5 += h1 * r4;
    d5 += h2 * r3;
    d5 += h3 * r2;
    d5 += h4 * r1;
    c = (d5 >>> 13); d5 &= 0x1fff;
    d5 += h5 * r0;
    d5 += h6 * (5 * r9);
    d5 += h7 * (5 * r8);
    d5 += h8 * (5 * r7);
    d5 += h9 * (5 * r6);
    c += (d5 >>> 13); d5 &= 0x1fff;

    d6 = c;
    d6 += h0 * r6;
    d6 += h1 * r5;
    d6 += h2 * r4;
    d6 += h3 * r3;
    d6 += h4 * r2;
    c = (d6 >>> 13); d6 &= 0x1fff;
    d6 += h5 * r1;
    d6 += h6 * r0;
    d6 += h7 * (5 * r9);
    d6 += h8 * (5 * r8);
    d6 += h9 * (5 * r7);
    c += (d6 >>> 13); d6 &= 0x1fff;

    d7 = c;
    d7 += h0 * r7;
    d7 += h1 * r6;
    d7 += h2 * r5;
    d7 += h3 * r4;
    d7 += h4 * r3;
    c = (d7 >>> 13); d7 &= 0x1fff;
    d7 += h5 * r2;
    d7 += h6 * r1;
    d7 += h7 * r0;
    d7 += h8 * (5 * r9);
    d7 += h9 * (5 * r8);
    c += (d7 >>> 13); d7 &= 0x1fff;

    d8 = c;
    d8 += h0 * r8;
    d8 += h1 * r7;
    d8 += h2 * r6;
    d8 += h3 * r5;
    d8 += h4 * r4;
    c = (d8 >>> 13); d8 &= 0x1fff;
    d8 += h5 * r3;
    d8 += h6 * r2;
    d8 += h7 * r1;
    d8 += h8 * r0;
    d8 += h9 * (5 * r9);
    c += (d8 >>> 13); d8 &= 0x1fff;

    d9 = c;
    d9 += h0 * r9;
    d9 += h1 * r8;
    d9 += h2 * r7;
    d9 += h3 * r6;
    d9 += h4 * r5;
    c = (d9 >>> 13); d9 &= 0x1fff;
    d9 += h5 * r4;
    d9 += h6 * r3;
    d9 += h7 * r2;
    d9 += h8 * r1;
    d9 += h9 * r0;
    c += (d9 >>> 13); d9 &= 0x1fff;

    c = (((c << 2) + c)) | 0;
    c = (c + d0) | 0;
    d0 = c & 0x1fff;
    c = (c >>> 13);
    d1 += c;

    h0 = d0;
    h1 = d1;
    h2 = d2;
    h3 = d3;
    h4 = d4;
    h5 = d5;
    h6 = d6;
    h7 = d7;
    h8 = d8;
    h9 = d9;

    mpos += 16;
    bytes -= 16;
  }
  this.h[0] = h0;
  this.h[1] = h1;
  this.h[2] = h2;
  this.h[3] = h3;
  this.h[4] = h4;
  this.h[5] = h5;
  this.h[6] = h6;
  this.h[7] = h7;
  this.h[8] = h8;
  this.h[9] = h9;
};

poly1305.prototype.finish = function(mac, macpos) {
  var g = new Uint16Array(10);
  var c, mask, f, i;

  if (this.leftover) {
    i = this.leftover;
    this.buffer[i++] = 1;
    for (; i < 16; i++) this.buffer[i] = 0;
    this.fin = 1;
    this.blocks(this.buffer, 0, 16);
  }

  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  for (i = 2; i < 10; i++) {
    this.h[i] += c;
    c = this.h[i] >>> 13;
    this.h[i] &= 0x1fff;
  }
  this.h[0] += (c * 5);
  c = this.h[0] >>> 13;
  this.h[0] &= 0x1fff;
  this.h[1] += c;
  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  this.h[2] += c;

  g[0] = this.h[0] + 5;
  c = g[0] >>> 13;
  g[0] &= 0x1fff;
  for (i = 1; i < 10; i++) {
    g[i] = this.h[i] + c;
    c = g[i] >>> 13;
    g[i] &= 0x1fff;
  }
  g[9] -= (1 << 13);

  mask = (c ^ 1) - 1;
  for (i = 0; i < 10; i++) g[i] &= mask;
  mask = ~mask;
  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  f = this.h[0] + this.pad[0];
  this.h[0] = f & 0xffff;
  for (i = 1; i < 8; i++) {
    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    this.h[i] = f & 0xffff;
  }

  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
};

poly1305.prototype.update = function(m, mpos, bytes) {
  var i, want;

  if (this.leftover) {
    want = (16 - this.leftover);
    if (want > bytes)
      want = bytes;
    for (i = 0; i < want; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    bytes -= want;
    mpos += want;
    this.leftover += want;
    if (this.leftover < 16)
      return;
    this.blocks(this.buffer, 0, 16);
    this.leftover = 0;
  }

  if (bytes >= 16) {
    want = bytes - (bytes % 16);
    this.blocks(m, mpos, want);
    mpos += want;
    bytes -= want;
  }

  if (bytes) {
    for (i = 0; i < bytes; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    this.leftover += bytes;
  }
};

function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  var s = new poly1305(k);
  s.update(m, mpos, n);
  s.finish(out, outpos);
  return 0;
}

function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  var x = new Uint8Array(16);
  crypto_onetimeauth(x,0,m,mpos,n,k);
  return crypto_verify_16(h,hpos,x,0);
}

function crypto_secretbox(c,m,d,n,k) {
  var i;
  if (d < 32) return -1;
  crypto_stream_xor(c,0,m,0,d,n,k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (i = 0; i < 16; i++) c[i] = 0;
  return 0;
}

function crypto_secretbox_open(m,c,d,n,k) {
  var i;
  var x = new Uint8Array(32);
  if (d < 32) return -1;
  crypto_stream(x,0,32,n,k);
  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
  crypto_stream_xor(m,0,c,0,d,n,k);
  for (i = 0; i < 32; i++) m[i] = 0;
  return 0;
}

function set25519(r, a) {
  var i;
  for (i = 0; i < 16; i++) r[i] = a[i]|0;
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function par25519(a) {
  var d = new Uint8Array(32);
  pack25519(d, a);
  return d[0] & 1;
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 250; a >= 0; a--) {
      S(c, c);
      if(a !== 1) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80), r, i;
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf();
  for (i = 0; i < 31; i++) z[i] = n[i];
  z[31]=(n[31]&127)|64;
  z[0]&=248;
  unpack25519(x,p);
  for (i = 0; i < 16; i++) {
    b[i]=x[i];
    d[i]=a[i]=c[i]=0;
  }
  a[0]=d[0]=1;
  for (i=254; i>=0; --i) {
    r=(z[i>>>3]>>>(i&7))&1;
    sel25519(a,b,r);
    sel25519(c,d,r);
    A(e,a,c);
    Z(a,a,c);
    A(c,b,d);
    Z(b,b,d);
    S(d,e);
    S(f,a);
    M(a,c,a);
    M(c,b,e);
    A(e,a,c);
    Z(a,a,c);
    S(b,a);
    Z(c,d,f);
    M(a,c,_121665);
    A(a,a,d);
    M(c,c,a);
    M(a,d,f);
    M(d,b,x);
    S(b,e);
    sel25519(a,b,r);
    sel25519(c,d,r);
  }
  for (i = 0; i < 16; i++) {
    x[i+16]=a[i];
    x[i+32]=c[i];
    x[i+48]=b[i];
    x[i+64]=d[i];
  }
  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32,x32);
  M(x16,x16,x32);
  pack25519(q,x16);
  return 0;
}

function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9);
}

function crypto_box_keypair(y, x) {
  randombytes(x, 32);
  return crypto_scalarmult_base(y, x);
}

function crypto_box_beforenm(k, y, x) {
  var s = new Uint8Array(32);
  crypto_scalarmult(s, x, y);
  return crypto_core_hsalsa20(k, _0, s, sigma);
}

var crypto_box_afternm = crypto_secretbox;
var crypto_box_open_afternm = crypto_secretbox_open;

function crypto_box(c, m, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_afternm(c, m, d, n, k);
}

function crypto_box_open(m, c, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_open_afternm(m, c, d, n, k);
}

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function crypto_hashblocks_hl(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16),
      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
      th, tl, i, j, h, l, a, b, c, d;

  var ah0 = hh[0],
      ah1 = hh[1],
      ah2 = hh[2],
      ah3 = hh[3],
      ah4 = hh[4],
      ah5 = hh[5],
      ah6 = hh[6],
      ah7 = hh[7],

      al0 = hl[0],
      al1 = hl[1],
      al2 = hl[2],
      al3 = hl[3],
      al4 = hl[4],
      al5 = hl[5],
      al6 = hl[6],
      al7 = hl[7];

  var pos = 0;
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos;
      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0;
      bh1 = ah1;
      bh2 = ah2;
      bh3 = ah3;
      bh4 = ah4;
      bh5 = ah5;
      bh6 = ah6;
      bh7 = ah7;

      bl0 = al0;
      bl1 = al1;
      bl2 = al2;
      bl3 = al3;
      bl4 = al4;
      bl5 = al5;
      bl6 = al6;
      bl7 = al7;

      // add
      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6);
      l = (al4 & al5) ^ (~al4 & al6);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // K
      h = K[i*2];
      l = K[i*2+1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // w
      h = wh[i%16];
      l = wl[i%16];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      th = c & 0xffff | d << 16;
      tl = a & 0xffff | b << 16;

      // add
      h = th;
      l = tl;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh7 = (c & 0xffff) | (d << 16);
      bl7 = (a & 0xffff) | (b << 16);

      // add
      h = bh3;
      l = bl3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = th;
      l = tl;

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh3 = (c & 0xffff) | (d << 16);
      bl3 = (a & 0xffff) | (b << 16);

      ah1 = bh0;
      ah2 = bh1;
      ah3 = bh2;
      ah4 = bh3;
      ah5 = bh4;
      ah6 = bh5;
      ah7 = bh6;
      ah0 = bh7;

      al1 = bl0;
      al2 = bl1;
      al3 = bl2;
      al4 = bl3;
      al5 = bl4;
      al6 = bl5;
      al7 = bl6;
      al0 = bl7;

      if (i%16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j];
          l = wl[j];

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = wh[(j+9)%16];
          l = wl[(j+9)%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma0
          th = wh[(j+1)%16];
          tl = wl[(j+1)%16];
          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma1
          th = wh[(j+14)%16];
          tl = wl[(j+14)%16];
          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          wh[j] = (c & 0xffff) | (d << 16);
          wl[j] = (a & 0xffff) | (b << 16);
        }
      }
    }

    // add
    h = ah0;
    l = al0;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[0];
    l = hl[0];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    hl[0] = al0 = (a & 0xffff) | (b << 16);

    h = ah1;
    l = al1;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[1];
    l = hl[1];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    hl[1] = al1 = (a & 0xffff) | (b << 16);

    h = ah2;
    l = al2;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[2];
    l = hl[2];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    hl[2] = al2 = (a & 0xffff) | (b << 16);

    h = ah3;
    l = al3;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[3];
    l = hl[3];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    hl[3] = al3 = (a & 0xffff) | (b << 16);

    h = ah4;
    l = al4;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[4];
    l = hl[4];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    hl[4] = al4 = (a & 0xffff) | (b << 16);

    h = ah5;
    l = al5;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[5];
    l = hl[5];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    hl[5] = al5 = (a & 0xffff) | (b << 16);

    h = ah6;
    l = al6;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[6];
    l = hl[6];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    hl[6] = al6 = (a & 0xffff) | (b << 16);

    h = ah7;
    l = al7;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[7];
    l = hl[7];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    hl[7] = al7 = (a & 0xffff) | (b << 16);

    pos += 128;
    n -= 128;
  }

  return n;
}

function crypto_hash(out, m, n) {
  var hh = new Int32Array(8),
      hl = new Int32Array(8),
      x = new Uint8Array(256),
      i, b = n;

  hh[0] = 0x6a09e667;
  hh[1] = 0xbb67ae85;
  hh[2] = 0x3c6ef372;
  hh[3] = 0xa54ff53a;
  hh[4] = 0x510e527f;
  hh[5] = 0x9b05688c;
  hh[6] = 0x1f83d9ab;
  hh[7] = 0x5be0cd19;

  hl[0] = 0xf3bcc908;
  hl[1] = 0x84caa73b;
  hl[2] = 0xfe94f82b;
  hl[3] = 0x5f1d36f1;
  hl[4] = 0xade682d1;
  hl[5] = 0x2b3e6c1f;
  hl[6] = 0xfb41bd6b;
  hl[7] = 0x137e2179;

  crypto_hashblocks_hl(hh, hl, m, n);
  n %= 128;

  for (i = 0; i < n; i++) x[i] = m[b-n+i];
  x[n] = 128;

  n = 256-128*(n<112?1:0);
  x[n-9] = 0;
  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
  crypto_hashblocks_hl(hh, hl, x, n);

  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

  return 0;
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  var i;
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for (i = 255; i >= 0; --i) {
    b = (s[(i/8)|0] >> (i&7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function crypto_sign_keypair(pk, sk, seeded) {
  var d = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()];
  var i;

  if (!seeded) randombytes(sk, 32);
  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  return 0;
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

function modL(r, x) {
  var carry, i, j, k;
  for (i = 63; i >= 32; --i) {
    carry = 0;
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = Math.floor((x[j] + 128) / 256);
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  for (i = 0; i < 32; i++) {
    x[i+1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64), i;
  for (i = 0; i < 64; i++) x[i] = r[i];
  for (i = 0; i < 64; i++) r[i] = 0;
  modL(r, x);
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  crypto_hash(r, sm.subarray(32), n+32);
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for (i = 32; i < 64; i++) sm[i] = sk[i];
  crypto_hash(h, sm, n + 64);
  reduce(h);

  for (i = 0; i < 64; i++) x[i] = 0;
  for (i = 0; i < 32; i++) x[i] = r[i];
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i+j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) M(r[0], r[0], I);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) return -1;

  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  M(r[3], r[0], r[1]);
  return 0;
}

function crypto_sign_open(m, sm, n, pk) {
  var i;
  var t = new Uint8Array(32), h = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  if (n < 64) return -1;

  if (unpackneg(q, pk)) return -1;

  for (i = 0; i < n; i++) m[i] = sm[i];
  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  crypto_hash(h, m, n);
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0;
    return -1;
  }

  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  return n;
}

var crypto_secretbox_KEYBYTES = 32,
    crypto_secretbox_NONCEBYTES = 24,
    crypto_secretbox_ZEROBYTES = 32,
    crypto_secretbox_BOXZEROBYTES = 16,
    crypto_scalarmult_BYTES = 32,
    crypto_scalarmult_SCALARBYTES = 32,
    crypto_box_PUBLICKEYBYTES = 32,
    crypto_box_SECRETKEYBYTES = 32,
    crypto_box_BEFORENMBYTES = 32,
    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
    crypto_sign_BYTES = 64,
    crypto_sign_PUBLICKEYBYTES = 32,
    crypto_sign_SECRETKEYBYTES = 64,
    crypto_sign_SEEDBYTES = 32,
    crypto_hash_BYTES = 64;

nacl.lowlevel = {
  crypto_core_hsalsa20: crypto_core_hsalsa20,
  crypto_stream_xor: crypto_stream_xor,
  crypto_stream: crypto_stream,
  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
  crypto_stream_salsa20: crypto_stream_salsa20,
  crypto_onetimeauth: crypto_onetimeauth,
  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
  crypto_verify_16: crypto_verify_16,
  crypto_verify_32: crypto_verify_32,
  crypto_secretbox: crypto_secretbox,
  crypto_secretbox_open: crypto_secretbox_open,
  crypto_scalarmult: crypto_scalarmult,
  crypto_scalarmult_base: crypto_scalarmult_base,
  crypto_box_beforenm: crypto_box_beforenm,
  crypto_box_afternm: crypto_box_afternm,
  crypto_box: crypto_box,
  crypto_box_open: crypto_box_open,
  crypto_box_keypair: crypto_box_keypair,
  crypto_hash: crypto_hash,
  crypto_sign: crypto_sign,
  crypto_sign_keypair: crypto_sign_keypair,
  crypto_sign_open: crypto_sign_open,

  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
  crypto_sign_BYTES: crypto_sign_BYTES,
  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
  crypto_hash_BYTES: crypto_hash_BYTES,

  gf: gf,
  D: D,
  L: L,
  pack25519: pack25519,
  unpack25519: unpack25519,
  M: M,
  A: A,
  S: S,
  Z: Z,
  pow2523: pow2523,
  add: add,
  set25519: set25519,
  modL: modL,
  scalarmult: scalarmult,
  scalarbase: scalarbase,
};

/* High-level API */

function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
}

function checkBoxLengths(pk, sk) {
  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
}

function checkArrayTypes() {
  for (var i = 0; i < arguments.length; i++) {
    if (!(arguments[i] instanceof Uint8Array))
      throw new TypeError('unexpected type, use Uint8Array');
  }
}

function cleanup(arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0;
}

nacl.randomBytes = function(n) {
  var b = new Uint8Array(n);
  randombytes(b, n);
  return b;
};

nacl.secretbox = function(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  var c = new Uint8Array(m.length);
  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
};

nacl.secretbox.open = function(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  var m = new Uint8Array(c.length);
  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32) return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
};

nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

nacl.scalarMult = function(n, p) {
  checkArrayTypes(n, p);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult(q, n, p);
  return q;
};

nacl.scalarMult.base = function(n) {
  checkArrayTypes(n);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult_base(q, n);
  return q;
};

nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

nacl.box = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox(msg, nonce, k);
};

nacl.box.before = function(publicKey, secretKey) {
  checkArrayTypes(publicKey, secretKey);
  checkBoxLengths(publicKey, secretKey);
  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
  crypto_box_beforenm(k, publicKey, secretKey);
  return k;
};

nacl.box.after = nacl.secretbox;

nacl.box.open = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox.open(msg, nonce, k);
};

nacl.box.open.after = nacl.secretbox.open;

nacl.box.keyPair = function() {
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  crypto_box_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.box.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  crypto_scalarmult_base(pk, secretKey);
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
nacl.box.nonceLength = crypto_box_NONCEBYTES;
nacl.box.overheadLength = nacl.secretbox.overheadLength;

nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  crypto_sign(signedMsg, msg, msg.length, secretKey);
  return signedMsg;
};

nacl.sign.open = function(signedMsg, publicKey) {
  checkArrayTypes(signedMsg, publicKey);
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var tmp = new Uint8Array(signedMsg.length);
  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
  if (mlen < 0) return null;
  var m = new Uint8Array(mlen);
  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
  return m;
};

nacl.sign.detached = function(msg, secretKey) {
  var signedMsg = nacl.sign(msg, secretKey);
  var sig = new Uint8Array(crypto_sign_BYTES);
  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  return sig;
};

nacl.sign.detached.verify = function(msg, sig, publicKey) {
  checkArrayTypes(msg, sig, publicKey);
  if (sig.length !== crypto_sign_BYTES)
    throw new Error('bad signature size');
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  var i;
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

nacl.sign.keyPair = function() {
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign.keyPair.fromSeed = function(seed) {
  checkArrayTypes(seed);
  if (seed.length !== crypto_sign_SEEDBYTES)
    throw new Error('bad seed size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  crypto_sign_keypair(pk, sk, true);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
nacl.sign.seedLength = crypto_sign_SEEDBYTES;
nacl.sign.signatureLength = crypto_sign_BYTES;

nacl.hash = function(msg) {
  checkArrayTypes(msg);
  var h = new Uint8Array(crypto_hash_BYTES);
  crypto_hash(h, msg, msg.length);
  return h;
};

nacl.hash.hashLength = crypto_hash_BYTES;

nacl.verify = function(x, y) {
  checkArrayTypes(x, y);
  // Zero length arguments are considered not equal.
  if (x.length === 0 || y.length === 0) return false;
  if (x.length !== y.length) return false;
  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
};

nacl.setPRNG = function(fn) {
  randombytes = fn;
};

(function() {
  // Initialize PRNG if environment provides CSPRNG.
  // If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  if (crypto && crypto.getRandomValues) {
    // Browsers.
    var QUOTA = 65536;
    nacl.setPRNG(function(x, n) {
      var i, v = new Uint8Array(n);
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
      }
      for (i = 0; i < n; i++) x[i] = v[i];
      cleanup(v);
    });
  } else if (true) {
    // Node.js.
    crypto = __webpack_require__(/*! crypto */ "crypto");
    if (crypto && crypto.randomBytes) {
      nacl.setPRNG(function(x, n) {
        var i, v = crypto.randomBytes(n);
        for (i = 0; i < n; i++) x[i] = v[i];
        cleanup(v);
      });
    }
  }
})();

})( true && module.exports ? module.exports : (self.nacl = self.nacl || {}));


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/browser.js":
/*!************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/browser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/browser/main */ "./node_modules/vscode-jsonrpc/lib/browser/main.js");

/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/browser/main.js":
/*!*********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/browser/main.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
const ril_1 = __webpack_require__(/*! ./ril */ "./node_modules/vscode-jsonrpc/lib/browser/ril.js");
// Install the browser runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js");
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js"), exports);
class BrowserMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            this._onData.fire(event.data);
        };
        port.addEventListener('error', (event) => this.fireError(event));
        port.onmessage = this._messageListener;
    }
    listen(callback) {
        return this._onData.event(callback);
    }
}
exports.BrowserMessageReader = BrowserMessageReader;
class BrowserMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.addEventListener('error', (event) => this.fireError(event));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.BrowserMessageWriter = BrowserMessageWriter;
function createMessageConnection(reader, writer, logger, options) {
    if (logger === undefined) {
        logger = api_1.NullLogger;
    }
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/browser/ril.js":
/*!********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/browser/ril.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js");
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
        this.asciiDecoder = new TextDecoder('ascii');
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
        return (new TextEncoder()).encode(value);
    }
    toString(value, encoding) {
        if (encoding === 'ascii') {
            return this.asciiDecoder.decode(value);
        }
        else {
            return (new TextDecoder(encoding)).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer;
        }
        else {
            return buffer.slice(0, length);
        }
    }
    allocNative(length) {
        return new Uint8Array(length);
    }
}
MessageBuffer.emptyBuffer = new Uint8Array(0);
class ReadableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            const blob = event.data;
            blob.arrayBuffer().then((buffer) => {
                this._onData.fire(new Uint8Array(buffer));
            }, () => {
                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
            });
        };
        this.socket.addEventListener('message', this._messageListener);
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    onData(listener) {
        return this._onData.event(listener);
    }
}
class WritableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    write(data, encoding) {
        if (typeof data === 'string') {
            if (encoding !== undefined && encoding !== 'utf-8') {
                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
            }
            this.socket.send(data);
        }
        else {
            this.socket.send(data);
        }
        return Promise.resolve();
    }
    end() {
        this.socket.close();
    }
}
const _textEncoder = new TextEncoder();
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                if (options.charset !== 'utf-8') {
                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                }
                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                if (!(buffer instanceof Uint8Array)) {
                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                }
                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (socket) => new ReadableStreamWrapper(socket),
        asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/api.js":
/*!*******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/api.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-jsonrpc/lib/common/messages.js");
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(/*! ./linkedMap */ "./node_modules/vscode-jsonrpc/lib/common/linkedMap.js");
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(/*! ./disposable */ "./node_modules/vscode-jsonrpc/lib/common/disposable.js");
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js");
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const sharedArrayCancellation_1 = __webpack_require__(/*! ./sharedArrayCancellation */ "./node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js");
Object.defineProperty(exports, "SharedArraySenderStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } }));
Object.defineProperty(exports, "SharedArrayReceiverStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } }));
const messageReader_1 = __webpack_require__(/*! ./messageReader */ "./node_modules/vscode-jsonrpc/lib/common/messageReader.js");
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(/*! ./messageWriter */ "./node_modules/vscode-jsonrpc/lib/common/messageWriter.js");
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const messageBuffer_1 = __webpack_require__(/*! ./messageBuffer */ "./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js");
Object.defineProperty(exports, "AbstractMessageBuffer", ({ enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } }));
const connection_1 = __webpack_require__(/*! ./connection */ "./node_modules/vscode-jsonrpc/lib/common/connection.js");
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
Object.defineProperty(exports, "MessageStrategy", ({ enumerable: true, get: function () { return connection_1.MessageStrategy; } }));
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
exports.RAL = ral_1.default;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/cancellation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/connection.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/connection.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-jsonrpc/lib/common/messages.js");
const linkedMap_1 = __webpack_require__(/*! ./linkedMap */ "./node_modules/vscode-jsonrpc/lib/common/linkedMap.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js");
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues = exports.TraceValues || (exports.TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var IdCancellationReceiverStrategy;
(function (IdCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    IdCancellationReceiverStrategy.is = is;
})(IdCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = {}));
var RequestCancellationReceiverStrategy;
(function (RequestCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    RequestCancellationReceiverStrategy.is = is;
})(RequestCancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
var MessageStrategy;
(function (MessageStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
    }
    MessageStrategy.is = is;
})(MessageStrategy = exports.MessageStrategy || (exports.MessageStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
        }
        else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
        }
        else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
        }
        else {
            handleInvalidMessage(message);
        }
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            const messageStrategy = options?.messageStrategy;
            if (MessageStrategy.is(messageStrategy)) {
                messageStrategy.handleMessage(message, handleMessage);
            }
            else {
                handleMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)
                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)
                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch((error) => {
                logger.error(`Sending notification failed.`);
                throw error;
            });
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            // This should not await but simple return to ensure that we don't have another
            // async scheduling. Otherwise one send could overtake another send.
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
            };
            traceSendingRequest(requestMessage);
            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                cancellationStrategy.sender.enableCancellation(requestMessage);
            }
            return new Promise(async (resolve, reject) => {
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                try {
                    await messageWriter.write(requestMessage);
                    responsePromises.set(id, responsePromise);
                }
                catch (error) {
                    logger.error(`Sending request failed.`);
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                    throw error;
                }
            });
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/disposable.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/disposable.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/events.js":
/*!**********************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/events.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/is.js":
/*!******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/is.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/linkedMap.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/linkedMap.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageBuffer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageReader.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageReader.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
const semaphore_1 = __webpack_require__(/*! ./semaphore */ "./node_modules/vscode-jsonrpc/lib/common/semaphore.js");
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                const headers = this.buffer.tryReadHeaders(true);
                if (!headers) {
                    return;
                }
                const contentLength = headers.get('content-length');
                if (!contentLength) {
                    this.fireError(new Error('Header must provide a Content-Length property.'));
                    return;
                }
                const length = parseInt(contentLength);
                if (isNaN(length)) {
                    this.fireError(new Error('Content-Length value must be a number.'));
                    return;
                }
                this.nextMessageLength = length;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === undefined) {
                /** We haven't received the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            // Make sure that we convert one received message after the
            // other. Otherwise it could happen that a decoding of a second
            // smaller message finished before the decoding of a first larger
            // message and then we would deliver the second message first.
            this.readSemaphore.lock(async () => {
                const bytes = this.options.contentDecoder !== undefined
                    ? await this.options.contentDecoder.decode(body)
                    : body;
                const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                this.callback(message);
            }).catch((error) => {
                this.fireError(error);
            });
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messageWriter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messageWriter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
const semaphore_1 = __webpack_require__(/*! ./semaphore */ "./node_modules/vscode-jsonrpc/lib/common/semaphore.js");
const events_1 = __webpack_require__(/*! ./events */ "./node_modules/vscode-jsonrpc/lib/common/events.js");
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/messages.js":
/*!************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/messages.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(/*! ./is */ "./node_modules/vscode-jsonrpc/lib/common/is.js");
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message = exports.Message || (exports.Message = {}));


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/ral.js":
/*!*******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/ral.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/semaphore.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/semaphore.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "./node_modules/vscode-jsonrpc/lib/common/ral.js");
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "./node_modules/vscode-jsonrpc/lib/common/cancellation.js");
var CancellationState;
(function (CancellationState) {
    CancellationState.Continue = 0;
    CancellationState.Cancelled = 1;
})(CancellationState || (CancellationState = {}));
class SharedArraySenderStrategy {
    constructor() {
        this.buffers = new Map();
    }
    enableCancellation(request) {
        if (request.id === null) {
            return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === undefined) {
            return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
        this.buffers.delete(id);
    }
    dispose() {
        this.buffers.clear();
    }
}
exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
class SharedArrayBufferCancellationToken {
    constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
    }
}
class SharedArrayBufferCancellationTokenSource {
    constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
    }
    cancel() {
    }
    dispose() {
    }
}
class SharedArrayReceiverStrategy {
    constructor() {
        this.kind = 'request';
    }
    createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === undefined) {
            return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
    }
}
exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/node/main.js":
/*!******************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/node/main.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.createServerSocketTransport = exports.createClientSocketTransport = exports.createServerPipeTransport = exports.createClientPipeTransport = exports.generateRandomPipeName = exports.StreamMessageWriter = exports.StreamMessageReader = exports.SocketMessageWriter = exports.SocketMessageReader = exports.PortMessageWriter = exports.PortMessageReader = exports.IPCMessageWriter = exports.IPCMessageReader = void 0;
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */
const ril_1 = __webpack_require__(/*! ./ril */ "./node_modules/vscode-jsonrpc/lib/node/ril.js");
// Install the node runtime abstract.
ril_1.default.install();
const path = __webpack_require__(/*! path */ "path");
const os = __webpack_require__(/*! os */ "os");
const crypto_1 = __webpack_require__(/*! crypto */ "crypto");
const net_1 = __webpack_require__(/*! net */ "net");
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js");
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js"), exports);
class IPCMessageReader extends api_1.AbstractMessageReader {
    constructor(process) {
        super();
        this.process = process;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose());
    }
    listen(callback) {
        this.process.on('message', callback);
        return api_1.Disposable.create(() => this.process.off('message', callback));
    }
}
exports.IPCMessageReader = IPCMessageReader;
class IPCMessageWriter extends api_1.AbstractMessageWriter {
    constructor(process) {
        super();
        this.process = process;
        this.errorCount = 0;
        const eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose);
    }
    write(msg) {
        try {
            if (typeof this.process.send === 'function') {
                this.process.send(msg, undefined, undefined, (error) => {
                    if (error) {
                        this.errorCount++;
                        this.handleError(error, msg);
                    }
                    else {
                        this.errorCount = 0;
                    }
                });
            }
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.IPCMessageWriter = IPCMessageWriter;
class PortMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this.onData = new api_1.Emitter;
        port.on('close', () => this.fireClose);
        port.on('error', (error) => this.fireError(error));
        port.on('message', (message) => {
            this.onData.fire(message);
        });
    }
    listen(callback) {
        return this.onData.event(callback);
    }
}
exports.PortMessageReader = PortMessageReader;
class PortMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.on('close', () => this.fireClose());
        port.on('error', (error) => this.fireError(error));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.PortMessageWriter = PortMessageWriter;
class SocketMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(socket, encoding = 'utf-8') {
        super((0, ril_1.default)().stream.asReadableStream(socket), encoding);
    }
}
exports.SocketMessageReader = SocketMessageReader;
class SocketMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(socket, options) {
        super((0, ril_1.default)().stream.asWritableStream(socket), options);
        this.socket = socket;
    }
    dispose() {
        super.dispose();
        this.socket.destroy();
    }
}
exports.SocketMessageWriter = SocketMessageWriter;
class StreamMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(readable, encoding) {
        super((0, ril_1.default)().stream.asReadableStream(readable), encoding);
    }
}
exports.StreamMessageReader = StreamMessageReader;
class StreamMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(writable, options) {
        super((0, ril_1.default)().stream.asWritableStream(writable), options);
    }
}
exports.StreamMessageWriter = StreamMessageWriter;
const XDG_RUNTIME_DIR = process.env['XDG_RUNTIME_DIR'];
const safeIpcPathLengths = new Map([
    ['linux', 107],
    ['darwin', 103]
]);
function generateRandomPipeName() {
    const randomSuffix = (0, crypto_1.randomBytes)(21).toString('hex');
    if (process.platform === 'win32') {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
    }
    let result;
    if (XDG_RUNTIME_DIR) {
        result = path.join(XDG_RUNTIME_DIR, `vscode-ipc-${randomSuffix}.sock`);
    }
    else {
        result = path.join(os.tmpdir(), `vscode-${randomSuffix}.sock`);
    }
    const limit = safeIpcPathLengths.get(process.platform);
    if (limit !== undefined && result.length > limit) {
        (0, ril_1.default)().console.warn(`WARNING: IPC handle "${result}" is longer than ${limit} characters.`);
    }
    return result;
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = (0, net_1.createServer)((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(pipeName, () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding = 'utf-8') {
    const socket = (0, net_1.createConnection)(pipeName);
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerPipeTransport = createServerPipeTransport;
function createClientSocketTransport(port, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        const server = (0, net_1.createServer)((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding = 'utf-8') {
    const socket = (0, net_1.createConnection)(port, '127.0.0.1');
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerSocketTransport = createServerSocketTransport;
function isReadableStream(value) {
    const candidate = value;
    return candidate.read !== undefined && candidate.addListener !== undefined;
}
function isWritableStream(value) {
    const candidate = value;
    return candidate.write !== undefined && candidate.addListener !== undefined;
}
function createMessageConnection(input, output, logger, options) {
    if (!logger) {
        logger = api_1.NullLogger;
    }
    const reader = isReadableStream(input) ? new StreamMessageReader(input) : input;
    const writer = isWritableStream(output) ? new StreamMessageWriter(output) : output;
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/lib/node/ril.js":
/*!*****************************************************!*\
  !*** ./node_modules/vscode-jsonrpc/lib/node/ril.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(/*! util */ "util");
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-jsonrpc/lib/common/api.js");
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, encoding) {
        return Buffer.from(value, encoding);
    }
    toString(value, encoding) {
        if (value instanceof Buffer) {
            return value.toString(encoding);
        }
        else {
            return new util_1.TextDecoder(encoding).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
        }
        else {
            return buffer instanceof Buffer ? buffer.slice(0, length) : Buffer.from(buffer, 0, length);
        }
    }
    allocNative(length) {
        return Buffer.allocUnsafe(length);
    }
}
MessageBuffer.emptyBuffer = Buffer.allocUnsafe(0);
class ReadableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return api_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return api_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return api_1.Disposable.create(() => this.stream.off('end', listener));
    }
    onData(listener) {
        this.stream.on('data', listener);
        return api_1.Disposable.create(() => this.stream.off('data', listener));
    }
}
class WritableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return api_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return api_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return api_1.Disposable.create(() => this.stream.off('end', listener));
    }
    write(data, encoding) {
        return new Promise((resolve, reject) => {
            const callback = (error) => {
                if (error === undefined || error === null) {
                    resolve();
                }
                else {
                    reject(error);
                }
            };
            if (typeof data === 'string') {
                this.stream.write(data, encoding, callback);
            }
            else {
                this.stream.write(data, callback);
            }
        });
    }
    end() {
        this.stream.end();
    }
}
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                try {
                    return Promise.resolve(Buffer.from(JSON.stringify(msg, undefined, 0), options.charset));
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                try {
                    if (buffer instanceof Buffer) {
                        return Promise.resolve(JSON.parse(buffer.toString(options.charset)));
                    }
                    else {
                        return Promise.resolve(JSON.parse(new util_1.TextDecoder(options.charset).decode(buffer)));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (stream) => new ReadableStreamWrapper(stream),
        asWritableStream: (stream) => new WritableStreamWrapper(stream)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setImmediate(callback, ...args);
            return { dispose: () => clearImmediate(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        }
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ "./node_modules/vscode-jsonrpc/node.js":
/*!*********************************************!*\
  !*** ./node_modules/vscode-jsonrpc/node.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-jsonrpc/lib/node/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageclient/browser.js":
/*!*******************************************************!*\
  !*** ./node_modules/vscode-languageclient/browser.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/browser/main */ "./node_modules/vscode-languageclient/lib/browser/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/browser/main.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/browser/main.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LanguageClient = void 0;
const api_1 = __webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageclient/lib/common/api.js");
const browser_1 = __webpack_require__(/*! vscode-languageserver-protocol/browser */ "./node_modules/vscode-languageserver-protocol/browser.js");
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/browser */ "./node_modules/vscode-languageserver-protocol/browser.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageclient/lib/common/api.js"), exports);
class LanguageClient extends api_1.BaseLanguageClient {
    constructor(id, name, clientOptions, worker) {
        super(id, name, clientOptions);
        this.worker = worker;
    }
    createMessageTransports(_encoding) {
        const reader = new browser_1.BrowserMessageReader(this.worker);
        const writer = new browser_1.BrowserMessageWriter(this.worker);
        return Promise.resolve({ reader, writer });
    }
}
exports.LanguageClient = LanguageClient;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/api.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/api.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticPullMode = exports.vsdiag = void 0;
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js"), exports);
__exportStar(__webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js"), exports);
var diagnostic_1 = __webpack_require__(/*! ./diagnostic */ "./node_modules/vscode-languageclient/lib/common/diagnostic.js");
Object.defineProperty(exports, "vsdiag", ({ enumerable: true, get: function () { return diagnostic_1.vsdiag; } }));
Object.defineProperty(exports, "DiagnosticPullMode", ({ enumerable: true, get: function () { return diagnostic_1.DiagnosticPullMode; } }));
__exportStar(__webpack_require__(/*! ./client */ "./node_modules/vscode-languageclient/lib/common/client.js"), exports);


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/callHierarchy.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/callHierarchy.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class CallHierarchyProvider {
    constructor(client) {
        this.client = client;
        this.middleware = client.middleware;
    }
    prepareCallHierarchy(document, position, token) {
        const client = this.client;
        const middleware = this.middleware;
        const prepareCallHierarchy = (document, position, token) => {
            const params = client.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asCallHierarchyItems(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, token, error, null);
            });
        };
        return middleware.prepareCallHierarchy
            ? middleware.prepareCallHierarchy(document, position, token, prepareCallHierarchy)
            : prepareCallHierarchy(document, position, token);
    }
    provideCallHierarchyIncomingCalls(item, token) {
        const client = this.client;
        const middleware = this.middleware;
        const provideCallHierarchyIncomingCalls = (item, token) => {
            const params = {
                item: client.code2ProtocolConverter.asCallHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asCallHierarchyIncomingCalls(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type, token, error, null);
            });
        };
        return middleware.provideCallHierarchyIncomingCalls
            ? middleware.provideCallHierarchyIncomingCalls(item, token, provideCallHierarchyIncomingCalls)
            : provideCallHierarchyIncomingCalls(item, token);
    }
    provideCallHierarchyOutgoingCalls(item, token) {
        const client = this.client;
        const middleware = this.middleware;
        const provideCallHierarchyOutgoingCalls = (item, token) => {
            const params = {
                item: client.code2ProtocolConverter.asCallHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asCallHierarchyOutgoingCalls(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type, token, error, null);
            });
        };
        return middleware.provideCallHierarchyOutgoingCalls
            ? middleware.provideCallHierarchyOutgoingCalls(item, token, provideCallHierarchyOutgoingCalls)
            : provideCallHierarchyOutgoingCalls(item, token);
    }
}
class CallHierarchyFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type);
    }
    fillClientCapabilities(cap) {
        const capabilities = cap;
        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'callHierarchy');
        capability.dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const [id, options] = this.getRegistration(documentSelector, capabilities.callHierarchyProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const client = this._client;
        const provider = new CallHierarchyProvider(client);
        return [vscode_1.languages.registerCallHierarchyProvider(this._client.protocol2CodeConverter.asDocumentSelector(options.documentSelector), provider), provider];
    }
}
exports.CallHierarchyFeature = CallHierarchyFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/client.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/client.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProposedFeatures = exports.BaseLanguageClient = exports.MessageTransports = exports.SuspendMode = exports.State = exports.CloseAction = exports.ErrorAction = exports.RevealOutputChannelOn = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const c2p = __webpack_require__(/*! ./codeConverter */ "./node_modules/vscode-languageclient/lib/common/codeConverter.js");
const p2c = __webpack_require__(/*! ./protocolConverter */ "./node_modules/vscode-languageclient/lib/common/protocolConverter.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const async_1 = __webpack_require__(/*! ./utils/async */ "./node_modules/vscode-languageclient/lib/common/utils/async.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const progressPart_1 = __webpack_require__(/*! ./progressPart */ "./node_modules/vscode-languageclient/lib/common/progressPart.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const diagnostic_1 = __webpack_require__(/*! ./diagnostic */ "./node_modules/vscode-languageclient/lib/common/diagnostic.js");
const notebook_1 = __webpack_require__(/*! ./notebook */ "./node_modules/vscode-languageclient/lib/common/notebook.js");
const configuration_1 = __webpack_require__(/*! ./configuration */ "./node_modules/vscode-languageclient/lib/common/configuration.js");
const textSynchronization_1 = __webpack_require__(/*! ./textSynchronization */ "./node_modules/vscode-languageclient/lib/common/textSynchronization.js");
const completion_1 = __webpack_require__(/*! ./completion */ "./node_modules/vscode-languageclient/lib/common/completion.js");
const hover_1 = __webpack_require__(/*! ./hover */ "./node_modules/vscode-languageclient/lib/common/hover.js");
const definition_1 = __webpack_require__(/*! ./definition */ "./node_modules/vscode-languageclient/lib/common/definition.js");
const signatureHelp_1 = __webpack_require__(/*! ./signatureHelp */ "./node_modules/vscode-languageclient/lib/common/signatureHelp.js");
const documentHighlight_1 = __webpack_require__(/*! ./documentHighlight */ "./node_modules/vscode-languageclient/lib/common/documentHighlight.js");
const documentSymbol_1 = __webpack_require__(/*! ./documentSymbol */ "./node_modules/vscode-languageclient/lib/common/documentSymbol.js");
const workspaceSymbol_1 = __webpack_require__(/*! ./workspaceSymbol */ "./node_modules/vscode-languageclient/lib/common/workspaceSymbol.js");
const reference_1 = __webpack_require__(/*! ./reference */ "./node_modules/vscode-languageclient/lib/common/reference.js");
const codeAction_1 = __webpack_require__(/*! ./codeAction */ "./node_modules/vscode-languageclient/lib/common/codeAction.js");
const codeLens_1 = __webpack_require__(/*! ./codeLens */ "./node_modules/vscode-languageclient/lib/common/codeLens.js");
const formatting_1 = __webpack_require__(/*! ./formatting */ "./node_modules/vscode-languageclient/lib/common/formatting.js");
const rename_1 = __webpack_require__(/*! ./rename */ "./node_modules/vscode-languageclient/lib/common/rename.js");
const documentLink_1 = __webpack_require__(/*! ./documentLink */ "./node_modules/vscode-languageclient/lib/common/documentLink.js");
const executeCommand_1 = __webpack_require__(/*! ./executeCommand */ "./node_modules/vscode-languageclient/lib/common/executeCommand.js");
const fileSystemWatcher_1 = __webpack_require__(/*! ./fileSystemWatcher */ "./node_modules/vscode-languageclient/lib/common/fileSystemWatcher.js");
const colorProvider_1 = __webpack_require__(/*! ./colorProvider */ "./node_modules/vscode-languageclient/lib/common/colorProvider.js");
const implementation_1 = __webpack_require__(/*! ./implementation */ "./node_modules/vscode-languageclient/lib/common/implementation.js");
const typeDefinition_1 = __webpack_require__(/*! ./typeDefinition */ "./node_modules/vscode-languageclient/lib/common/typeDefinition.js");
const workspaceFolder_1 = __webpack_require__(/*! ./workspaceFolder */ "./node_modules/vscode-languageclient/lib/common/workspaceFolder.js");
const foldingRange_1 = __webpack_require__(/*! ./foldingRange */ "./node_modules/vscode-languageclient/lib/common/foldingRange.js");
const declaration_1 = __webpack_require__(/*! ./declaration */ "./node_modules/vscode-languageclient/lib/common/declaration.js");
const selectionRange_1 = __webpack_require__(/*! ./selectionRange */ "./node_modules/vscode-languageclient/lib/common/selectionRange.js");
const progress_1 = __webpack_require__(/*! ./progress */ "./node_modules/vscode-languageclient/lib/common/progress.js");
const callHierarchy_1 = __webpack_require__(/*! ./callHierarchy */ "./node_modules/vscode-languageclient/lib/common/callHierarchy.js");
const semanticTokens_1 = __webpack_require__(/*! ./semanticTokens */ "./node_modules/vscode-languageclient/lib/common/semanticTokens.js");
const fileOperations_1 = __webpack_require__(/*! ./fileOperations */ "./node_modules/vscode-languageclient/lib/common/fileOperations.js");
const linkedEditingRange_1 = __webpack_require__(/*! ./linkedEditingRange */ "./node_modules/vscode-languageclient/lib/common/linkedEditingRange.js");
const typeHierarchy_1 = __webpack_require__(/*! ./typeHierarchy */ "./node_modules/vscode-languageclient/lib/common/typeHierarchy.js");
const inlineValue_1 = __webpack_require__(/*! ./inlineValue */ "./node_modules/vscode-languageclient/lib/common/inlineValue.js");
const inlayHint_1 = __webpack_require__(/*! ./inlayHint */ "./node_modules/vscode-languageclient/lib/common/inlayHint.js");
/**
 * Controls when the output channel is revealed.
 */
var RevealOutputChannelOn;
(function (RevealOutputChannelOn) {
    RevealOutputChannelOn[RevealOutputChannelOn["Info"] = 1] = "Info";
    RevealOutputChannelOn[RevealOutputChannelOn["Warn"] = 2] = "Warn";
    RevealOutputChannelOn[RevealOutputChannelOn["Error"] = 3] = "Error";
    RevealOutputChannelOn[RevealOutputChannelOn["Never"] = 4] = "Never";
})(RevealOutputChannelOn = exports.RevealOutputChannelOn || (exports.RevealOutputChannelOn = {}));
/**
 * An action to be performed when the connection is producing errors.
 */
var ErrorAction;
(function (ErrorAction) {
    /**
     * Continue running the server.
     */
    ErrorAction[ErrorAction["Continue"] = 1] = "Continue";
    /**
     * Shutdown the server.
     */
    ErrorAction[ErrorAction["Shutdown"] = 2] = "Shutdown";
})(ErrorAction = exports.ErrorAction || (exports.ErrorAction = {}));
/**
 * An action to be performed when the connection to a server got closed.
 */
var CloseAction;
(function (CloseAction) {
    /**
     * Don't restart the server. The connection stays closed.
     */
    CloseAction[CloseAction["DoNotRestart"] = 1] = "DoNotRestart";
    /**
     * Restart the server.
     */
    CloseAction[CloseAction["Restart"] = 2] = "Restart";
})(CloseAction = exports.CloseAction || (exports.CloseAction = {}));
/**
 * Signals in which state the language client is in.
 */
var State;
(function (State) {
    /**
     * The client is stopped or got never started.
     */
    State[State["Stopped"] = 1] = "Stopped";
    /**
     * The client is starting but not ready yet.
     */
    State[State["Starting"] = 3] = "Starting";
    /**
     * The client is running and ready.
     */
    State[State["Running"] = 2] = "Running";
})(State = exports.State || (exports.State = {}));
var SuspendMode;
(function (SuspendMode) {
    /**
     * Don't allow suspend mode.
     */
    SuspendMode["off"] = "off";
    /**
     * Support suspend mode even if not all
     * registered providers have a corresponding
     * activation listener.
     */
    SuspendMode["on"] = "on";
})(SuspendMode = exports.SuspendMode || (exports.SuspendMode = {}));
class DefaultErrorHandler {
    constructor(client, maxRestartCount) {
        this.client = client;
        this.maxRestartCount = maxRestartCount;
        this.restarts = [];
    }
    error(_error, _message, count) {
        if (count && count <= 3) {
            return { action: ErrorAction.Continue };
        }
        return { action: ErrorAction.Shutdown };
    }
    closed() {
        this.restarts.push(Date.now());
        if (this.restarts.length <= this.maxRestartCount) {
            return { action: CloseAction.Restart };
        }
        else {
            let diff = this.restarts[this.restarts.length - 1] - this.restarts[0];
            if (diff <= 3 * 60 * 1000) {
                return { action: CloseAction.DoNotRestart, message: `The ${this.client.name} server crashed ${this.maxRestartCount + 1} times in the last 3 minutes. The server will not be restarted. See the output for more information.` };
            }
            else {
                this.restarts.shift();
                return { action: CloseAction.Restart };
            }
        }
    }
}
var ClientState;
(function (ClientState) {
    ClientState["Initial"] = "initial";
    ClientState["Starting"] = "starting";
    ClientState["StartFailed"] = "startFailed";
    ClientState["Running"] = "running";
    ClientState["Stopping"] = "stopping";
    ClientState["Stopped"] = "stopped";
})(ClientState || (ClientState = {}));
var MessageTransports;
(function (MessageTransports) {
    function is(value) {
        let candidate = value;
        return candidate && vscode_languageserver_protocol_1.MessageReader.is(value.reader) && vscode_languageserver_protocol_1.MessageWriter.is(value.writer);
    }
    MessageTransports.is = is;
})(MessageTransports = exports.MessageTransports || (exports.MessageTransports = {}));
class BaseLanguageClient {
    constructor(id, name, clientOptions) {
        this._traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;
        this._diagnosticQueue = new Map();
        this._diagnosticQueueState = { state: 'idle' };
        this._features = [];
        this._dynamicFeatures = new Map();
        this.workspaceEditLock = new async_1.Semaphore(1);
        this._id = id;
        this._name = name;
        clientOptions = clientOptions || {};
        const markdown = { isTrusted: false, supportHtml: false };
        if (clientOptions.markdown !== undefined) {
            markdown.isTrusted = clientOptions.markdown.isTrusted === true;
            markdown.supportHtml = clientOptions.markdown.supportHtml === true;
        }
        // const defaultInterval = (clientOptions as TestOptions).$testMode ? 50 : 60000;
        this._clientOptions = {
            documentSelector: clientOptions.documentSelector ?? [],
            synchronize: clientOptions.synchronize ?? {},
            diagnosticCollectionName: clientOptions.diagnosticCollectionName,
            outputChannelName: clientOptions.outputChannelName ?? this._name,
            revealOutputChannelOn: clientOptions.revealOutputChannelOn ?? RevealOutputChannelOn.Error,
            stdioEncoding: clientOptions.stdioEncoding ?? 'utf8',
            initializationOptions: clientOptions.initializationOptions,
            initializationFailedHandler: clientOptions.initializationFailedHandler,
            progressOnInitialization: !!clientOptions.progressOnInitialization,
            errorHandler: clientOptions.errorHandler ?? this.createDefaultErrorHandler(clientOptions.connectionOptions?.maxRestartCount),
            middleware: clientOptions.middleware ?? {},
            uriConverters: clientOptions.uriConverters,
            workspaceFolder: clientOptions.workspaceFolder,
            connectionOptions: clientOptions.connectionOptions,
            markdown,
            // suspend: {
            // 	mode: clientOptions.suspend?.mode ?? SuspendMode.off,
            // 	callback: clientOptions.suspend?.callback ?? (() => Promise.resolve(true)),
            // 	interval: clientOptions.suspend?.interval ? Math.max(clientOptions.suspend.interval, defaultInterval) : defaultInterval
            // },
            diagnosticPullOptions: clientOptions.diagnosticPullOptions ?? { onChange: true, onSave: false },
            notebookDocumentOptions: clientOptions.notebookDocumentOptions ?? {}
        };
        this._clientOptions.synchronize = this._clientOptions.synchronize || {};
        this._state = ClientState.Initial;
        this._ignoredRegistrations = new Set();
        this._listeners = [];
        this._notificationHandlers = new Map();
        this._pendingNotificationHandlers = new Map();
        this._notificationDisposables = new Map();
        this._requestHandlers = new Map();
        this._pendingRequestHandlers = new Map();
        this._requestDisposables = new Map();
        this._progressHandlers = new Map();
        this._pendingProgressHandlers = new Map();
        this._progressDisposables = new Map();
        this._connection = undefined;
        // this._idleStart = undefined;
        this._initializeResult = undefined;
        if (clientOptions.outputChannel) {
            this._outputChannel = clientOptions.outputChannel;
            this._disposeOutputChannel = false;
        }
        else {
            this._outputChannel = undefined;
            this._disposeOutputChannel = true;
        }
        this._traceOutputChannel = clientOptions.traceOutputChannel;
        this._diagnostics = undefined;
        this._pendingOpenNotifications = new Set();
        this._pendingChangeSemaphore = new async_1.Semaphore(1);
        this._pendingChangeDelayer = new async_1.Delayer(250);
        this._fileEvents = [];
        this._fileEventDelayer = new async_1.Delayer(250);
        this._onStop = undefined;
        this._telemetryEmitter = new vscode_languageserver_protocol_1.Emitter();
        this._stateChangeEmitter = new vscode_languageserver_protocol_1.Emitter();
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
        this._tracer = {
            log: (messageOrDataObject, data) => {
                if (Is.string(messageOrDataObject)) {
                    this.logTrace(messageOrDataObject, data);
                }
                else {
                    this.logObjectTrace(messageOrDataObject);
                }
            },
        };
        this._c2p = c2p.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.code2Protocol : undefined);
        this._p2c = p2c.createConverter(clientOptions.uriConverters ? clientOptions.uriConverters.protocol2Code : undefined, this._clientOptions.markdown.isTrusted, this._clientOptions.markdown.supportHtml);
        this._syncedDocuments = new Map();
        this.registerBuiltinFeatures();
    }
    get name() {
        return this._name;
    }
    get middleware() {
        return this._clientOptions.middleware ?? Object.create(null);
    }
    get clientOptions() {
        return this._clientOptions;
    }
    get protocol2CodeConverter() {
        return this._p2c;
    }
    get code2ProtocolConverter() {
        return this._c2p;
    }
    get onTelemetry() {
        return this._telemetryEmitter.event;
    }
    get onDidChangeState() {
        return this._stateChangeEmitter.event;
    }
    get outputChannel() {
        if (!this._outputChannel) {
            this._outputChannel = vscode_1.window.createOutputChannel(this._clientOptions.outputChannelName ? this._clientOptions.outputChannelName : this._name);
        }
        return this._outputChannel;
    }
    get traceOutputChannel() {
        if (this._traceOutputChannel) {
            return this._traceOutputChannel;
        }
        return this.outputChannel;
    }
    get diagnostics() {
        return this._diagnostics;
    }
    get state() {
        return this.getPublicState();
    }
    get $state() {
        return this._state;
    }
    set $state(value) {
        let oldState = this.getPublicState();
        this._state = value;
        let newState = this.getPublicState();
        if (newState !== oldState) {
            this._stateChangeEmitter.fire({ oldState, newState });
        }
    }
    getPublicState() {
        switch (this.$state) {
            case ClientState.Starting:
                return State.Starting;
            case ClientState.Running:
                return State.Running;
            default:
                return State.Stopped;
        }
    }
    get initializeResult() {
        return this._initializeResult;
    }
    async sendRequest(type, ...params) {
        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {
            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));
        }
        // Ensure we have a connection before we force the document sync.
        const connection = await this.$start();
        // If any document is synced in full mode make sure we flush any pending
        // full document syncs.
        if (this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {
            await this.sendPendingFullTextDocumentChanges(connection);
        }
        return connection.sendRequest(type, ...params);
    }
    onRequest(type, handler) {
        const method = typeof type === 'string' ? type : type.method;
        this._requestHandlers.set(method, handler);
        const connection = this.activeConnection();
        let disposable;
        if (connection !== undefined) {
            this._requestDisposables.set(method, connection.onRequest(type, handler));
            disposable = {
                dispose: () => {
                    const disposable = this._requestDisposables.get(method);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._requestDisposables.delete(method);
                    }
                }
            };
        }
        else {
            this._pendingRequestHandlers.set(method, handler);
            disposable = {
                dispose: () => {
                    this._pendingRequestHandlers.delete(method);
                    const disposable = this._requestDisposables.get(method);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._requestDisposables.delete(method);
                    }
                }
            };
        }
        return {
            dispose: () => {
                this._requestHandlers.delete(method);
                disposable.dispose();
            }
        };
    }
    async sendNotification(type, params) {
        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {
            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));
        }
        const needsPendingFullTextDocumentSync = this._didChangeTextDocumentFeature.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
        let openNotification;
        if (needsPendingFullTextDocumentSync && typeof type !== 'string' && type.method === vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.method) {
            openNotification = params?.textDocument.uri;
            this._pendingOpenNotifications.add(openNotification);
        }
        // Ensure we have a connection before we force the document sync.
        const connection = await this.$start();
        // If any document is synced in full mode make sure we flush any pending
        // full document syncs.
        if (needsPendingFullTextDocumentSync) {
            await this.sendPendingFullTextDocumentChanges(connection);
        }
        // We need to remove the pending open notification before we actually
        // send the notification over the connection. Otherwise there could be
        // a request coming in that although the open notification got already put
        // onto the wire will ignore pending document changes.
        //
        // Since the code path of connection.sendNotification is actually sync
        // until the message is handed of to the writer and the writer as a semaphore
        // lock with a capacity of 1 no additional async scheduling can happen until
        // the message is actually handed of.
        if (openNotification !== undefined) {
            this._pendingOpenNotifications.delete(openNotification);
        }
        return connection.sendNotification(type, params);
    }
    onNotification(type, handler) {
        const method = typeof type === 'string' ? type : type.method;
        this._notificationHandlers.set(method, handler);
        const connection = this.activeConnection();
        let disposable;
        if (connection !== undefined) {
            this._notificationDisposables.set(method, connection.onNotification(type, handler));
            disposable = {
                dispose: () => {
                    const disposable = this._notificationDisposables.get(method);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._notificationDisposables.delete(method);
                    }
                }
            };
        }
        else {
            this._pendingNotificationHandlers.set(method, handler);
            disposable = {
                dispose: () => {
                    this._pendingNotificationHandlers.delete(method);
                    const disposable = this._notificationDisposables.get(method);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._notificationDisposables.delete(method);
                    }
                }
            };
        }
        return {
            dispose: () => {
                this._notificationHandlers.delete(method);
                disposable.dispose();
            }
        };
    }
    async sendProgress(type, token, value) {
        if (this.$state === ClientState.StartFailed || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped) {
            return Promise.reject(new vscode_languageserver_protocol_1.ResponseError(vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive, `Client is not running`));
        }
        try {
            // Ensure we have a connection before we force the document sync.
            const connection = await this.$start();
            return connection.sendProgress(type, token, value);
        }
        catch (error) {
            this.error(`Sending progress for token ${token} failed.`, error);
            throw error;
        }
    }
    onProgress(type, token, handler) {
        this._progressHandlers.set(token, { type, handler });
        const connection = this.activeConnection();
        let disposable;
        const handleWorkDoneProgress = this._clientOptions.middleware?.handleWorkDoneProgress;
        const realHandler = vscode_languageserver_protocol_1.WorkDoneProgress.is(type) && handleWorkDoneProgress !== undefined
            ? (params) => {
                handleWorkDoneProgress(token, params, () => handler(params));
            }
            : handler;
        if (connection !== undefined) {
            this._progressDisposables.set(token, connection.onProgress(type, token, realHandler));
            disposable = {
                dispose: () => {
                    const disposable = this._progressDisposables.get(token);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._progressDisposables.delete(token);
                    }
                }
            };
        }
        else {
            this._pendingProgressHandlers.set(token, { type, handler });
            disposable = {
                dispose: () => {
                    this._pendingProgressHandlers.delete(token);
                    const disposable = this._progressDisposables.get(token);
                    if (disposable !== undefined) {
                        disposable.dispose();
                        this._progressDisposables.delete(token);
                    }
                }
            };
        }
        return {
            dispose: () => {
                this._progressHandlers.delete(token);
                disposable.dispose();
            }
        };
    }
    createDefaultErrorHandler(maxRestartCount) {
        if (maxRestartCount !== undefined && maxRestartCount < 0) {
            throw new Error(`Invalid maxRestartCount: ${maxRestartCount}`);
        }
        return new DefaultErrorHandler(this, maxRestartCount ?? 4);
    }
    async setTrace(value) {
        this._trace = value;
        const connection = this.activeConnection();
        if (connection !== undefined) {
            await connection.trace(this._trace, this._tracer, {
                sendNotification: false,
                traceFormat: this._traceFormat
            });
        }
    }
    data2String(data) {
        if (data instanceof vscode_languageserver_protocol_1.ResponseError) {
            const responseError = data;
            return `  Message: ${responseError.message}\n  Code: ${responseError.code} ${responseError.data ? '\n' + responseError.data.toString() : ''}`;
        }
        if (data instanceof Error) {
            if (Is.string(data.stack)) {
                return data.stack;
            }
            return data.message;
        }
        if (Is.string(data)) {
            return data;
        }
        return data.toString();
    }
    info(message, data, showNotification = true) {
        this.outputChannel.appendLine(`[Info  - ${(new Date().toLocaleTimeString())}] ${message}`);
        if (data !== null && data !== undefined) {
            this.outputChannel.appendLine(this.data2String(data));
        }
        if (showNotification && this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Info) {
            this.showNotificationMessage(vscode_languageserver_protocol_1.MessageType.Info, message);
        }
    }
    warn(message, data, showNotification = true) {
        this.outputChannel.appendLine(`[Warn  - ${(new Date().toLocaleTimeString())}] ${message}`);
        if (data !== null && data !== undefined) {
            this.outputChannel.appendLine(this.data2String(data));
        }
        if (showNotification && this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Warn) {
            this.showNotificationMessage(vscode_languageserver_protocol_1.MessageType.Warning, message);
        }
    }
    error(message, data, showNotification = true) {
        this.outputChannel.appendLine(`[Error - ${(new Date().toLocaleTimeString())}] ${message}`);
        if (data !== null && data !== undefined) {
            this.outputChannel.appendLine(this.data2String(data));
        }
        if (showNotification === 'force' || (showNotification && this._clientOptions.revealOutputChannelOn <= RevealOutputChannelOn.Error)) {
            this.showNotificationMessage(vscode_languageserver_protocol_1.MessageType.Error, message);
        }
    }
    showNotificationMessage(type, message) {
        message = message ?? 'A request has failed. See the output for more information.';
        const messageFunc = type === vscode_languageserver_protocol_1.MessageType.Error
            ? vscode_1.window.showErrorMessage
            : type === vscode_languageserver_protocol_1.MessageType.Warning
                ? vscode_1.window.showWarningMessage
                : vscode_1.window.showInformationMessage;
        void messageFunc(message, 'Go to output').then((selection) => {
            if (selection !== undefined) {
                this.outputChannel.show(true);
            }
        });
    }
    logTrace(message, data) {
        this.traceOutputChannel.appendLine(`[Trace - ${(new Date().toLocaleTimeString())}] ${message}`);
        if (data) {
            this.traceOutputChannel.appendLine(this.data2String(data));
        }
    }
    logObjectTrace(data) {
        if (data.isLSPMessage && data.type) {
            this.traceOutputChannel.append(`[LSP   - ${(new Date().toLocaleTimeString())}] `);
        }
        else {
            this.traceOutputChannel.append(`[Trace - ${(new Date().toLocaleTimeString())}] `);
        }
        if (data) {
            this.traceOutputChannel.appendLine(`${JSON.stringify(data)}`);
        }
    }
    needsStart() {
        return this.$state === ClientState.Initial || this.$state === ClientState.Stopping || this.$state === ClientState.Stopped;
    }
    needsStop() {
        return this.$state === ClientState.Starting || this.$state === ClientState.Running;
    }
    activeConnection() {
        return this.$state === ClientState.Running && this._connection !== undefined ? this._connection : undefined;
    }
    isRunning() {
        return this.$state === ClientState.Running;
    }
    async start() {
        if (this._disposed === 'disposing' || this._disposed === 'disposed') {
            throw new Error(`Client got disposed and can't be restarted.`);
        }
        if (this.$state === ClientState.Stopping) {
            throw new Error(`Client is currently stopping. Can only restart a full stopped client`);
        }
        // We are already running or are in the process of getting up
        // to speed.
        if (this._onStart !== undefined) {
            return this._onStart;
        }
        const [promise, resolve, reject] = this.createOnStartPromise();
        this._onStart = promise;
        // If we restart then the diagnostics collection is reused.
        if (this._diagnostics === undefined) {
            this._diagnostics = this._clientOptions.diagnosticCollectionName
                ? vscode_1.languages.createDiagnosticCollection(this._clientOptions.diagnosticCollectionName)
                : vscode_1.languages.createDiagnosticCollection();
        }
        // When we start make all buffer handlers pending so that they
        // get added.
        for (const [method, handler] of this._notificationHandlers) {
            if (!this._pendingNotificationHandlers.has(method)) {
                this._pendingNotificationHandlers.set(method, handler);
            }
        }
        for (const [method, handler] of this._requestHandlers) {
            if (!this._pendingRequestHandlers.has(method)) {
                this._pendingRequestHandlers.set(method, handler);
            }
        }
        for (const [token, data] of this._progressHandlers) {
            if (!this._pendingProgressHandlers.has(token)) {
                this._pendingProgressHandlers.set(token, data);
            }
        }
        this.$state = ClientState.Starting;
        try {
            const connection = await this.createConnection();
            connection.onNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, (message) => {
                switch (message.type) {
                    case vscode_languageserver_protocol_1.MessageType.Error:
                        this.error(message.message, undefined, false);
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Warning:
                        this.warn(message.message, undefined, false);
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Info:
                        this.info(message.message, undefined, false);
                        break;
                    default:
                        this.outputChannel.appendLine(message.message);
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.ShowMessageNotification.type, (message) => {
                switch (message.type) {
                    case vscode_languageserver_protocol_1.MessageType.Error:
                        void vscode_1.window.showErrorMessage(message.message);
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Warning:
                        void vscode_1.window.showWarningMessage(message.message);
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Info:
                        void vscode_1.window.showInformationMessage(message.message);
                        break;
                    default:
                        void vscode_1.window.showInformationMessage(message.message);
                }
            });
            connection.onRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, (params) => {
                let messageFunc;
                switch (params.type) {
                    case vscode_languageserver_protocol_1.MessageType.Error:
                        messageFunc = vscode_1.window.showErrorMessage;
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Warning:
                        messageFunc = vscode_1.window.showWarningMessage;
                        break;
                    case vscode_languageserver_protocol_1.MessageType.Info:
                        messageFunc = vscode_1.window.showInformationMessage;
                        break;
                    default:
                        messageFunc = vscode_1.window.showInformationMessage;
                }
                let actions = params.actions || [];
                return messageFunc(params.message, ...actions);
            });
            connection.onNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, (data) => {
                this._telemetryEmitter.fire(data);
            });
            connection.onRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, async (params) => {
                const showDocument = async (params) => {
                    const uri = this.protocol2CodeConverter.asUri(params.uri);
                    try {
                        if (params.external === true) {
                            const success = await vscode_1.env.openExternal(uri);
                            return { success };
                        }
                        else {
                            const options = {};
                            if (params.selection !== undefined) {
                                options.selection = this.protocol2CodeConverter.asRange(params.selection);
                            }
                            if (params.takeFocus === undefined || params.takeFocus === false) {
                                options.preserveFocus = true;
                            }
                            else if (params.takeFocus === true) {
                                options.preserveFocus = false;
                            }
                            await vscode_1.window.showTextDocument(uri, options);
                            return { success: true };
                        }
                    }
                    catch (error) {
                        return { success: false };
                    }
                };
                const middleware = this._clientOptions.middleware.window?.showDocument;
                if (middleware !== undefined) {
                    return middleware(params, showDocument);
                }
                else {
                    return showDocument(params);
                }
            });
            connection.listen();
            await this.initialize(connection);
            resolve();
        }
        catch (error) {
            this.$state = ClientState.StartFailed;
            this.error(`${this._name} client: couldn't create connection to server.`, error, 'force');
            reject(error);
        }
        return this._onStart;
    }
    createOnStartPromise() {
        let resolve;
        let reject;
        const promise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
        return [promise, resolve, reject];
    }
    async initialize(connection) {
        this.refreshTrace(connection, false);
        const initOption = this._clientOptions.initializationOptions;
        // If the client is locked to a workspace folder use it. In this case the workspace folder
        // feature is not registered and we need to initialize the value here.
        const [rootPath, workspaceFolders] = this._clientOptions.workspaceFolder !== undefined
            ? [this._clientOptions.workspaceFolder.uri.fsPath, [{ uri: this._c2p.asUri(this._clientOptions.workspaceFolder.uri), name: this._clientOptions.workspaceFolder.name }]]
            : [this._clientGetRootPath(), null];
        const initParams = {
            processId: null,
            clientInfo: {
                name: vscode_1.env.appName,
                version: vscode_1.version
            },
            locale: this.getLocale(),
            rootPath: rootPath ? rootPath : null,
            rootUri: rootPath ? this._c2p.asUri(vscode_1.Uri.file(rootPath)) : null,
            capabilities: this.computeClientCapabilities(),
            initializationOptions: Is.func(initOption) ? initOption() : initOption,
            trace: vscode_languageserver_protocol_1.Trace.toString(this._trace),
            workspaceFolders: workspaceFolders
        };
        this.fillInitializeParams(initParams);
        if (this._clientOptions.progressOnInitialization) {
            const token = UUID.generateUuid();
            const part = new progressPart_1.ProgressPart(connection, token);
            initParams.workDoneToken = token;
            try {
                const result = await this.doInitialize(connection, initParams);
                part.done();
                return result;
            }
            catch (error) {
                part.cancel();
                throw error;
            }
        }
        else {
            return this.doInitialize(connection, initParams);
        }
    }
    async doInitialize(connection, initParams) {
        try {
            const result = await connection.initialize(initParams);
            if (result.capabilities.positionEncoding !== undefined && result.capabilities.positionEncoding !== vscode_languageserver_protocol_1.PositionEncodingKind.UTF16) {
                throw new Error(`Unsupported position encoding (${result.capabilities.positionEncoding}) received from server ${this.name}`);
            }
            this._initializeResult = result;
            this.$state = ClientState.Running;
            let textDocumentSyncOptions = undefined;
            if (Is.number(result.capabilities.textDocumentSync)) {
                if (result.capabilities.textDocumentSync === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {
                    textDocumentSyncOptions = {
                        openClose: false,
                        change: vscode_languageserver_protocol_1.TextDocumentSyncKind.None,
                        save: undefined
                    };
                }
                else {
                    textDocumentSyncOptions = {
                        openClose: true,
                        change: result.capabilities.textDocumentSync,
                        save: {
                            includeText: false
                        }
                    };
                }
            }
            else if (result.capabilities.textDocumentSync !== undefined && result.capabilities.textDocumentSync !== null) {
                textDocumentSyncOptions = result.capabilities.textDocumentSync;
            }
            this._capabilities = Object.assign({}, result.capabilities, { resolvedTextDocumentSync: textDocumentSyncOptions });
            connection.onNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params => this.handleDiagnostics(params));
            connection.onRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params => this.handleRegistrationRequest(params));
            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199
            connection.onRequest('client/registerFeature', params => this.handleRegistrationRequest(params));
            connection.onRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params => this.handleUnregistrationRequest(params));
            // See https://github.com/Microsoft/vscode-languageserver-node/issues/199
            connection.onRequest('client/unregisterFeature', params => this.handleUnregistrationRequest(params));
            connection.onRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params => this.handleApplyWorkspaceEdit(params));
            // Add pending notification, request and progress handlers.
            for (const [method, handler] of this._pendingNotificationHandlers) {
                this._notificationDisposables.set(method, connection.onNotification(method, handler));
            }
            this._pendingNotificationHandlers.clear();
            for (const [method, handler] of this._pendingRequestHandlers) {
                this._requestDisposables.set(method, connection.onRequest(method, handler));
            }
            this._pendingRequestHandlers.clear();
            for (const [token, data] of this._pendingProgressHandlers) {
                this._progressDisposables.set(token, connection.onProgress(data.type, token, data.handler));
            }
            this._pendingProgressHandlers.clear();
            // if (this._clientOptions.suspend.mode !== SuspendMode.off) {
            // 	this._idleInterval =  RAL().timer.setInterval(() => this.checkSuspend(), this._clientOptions.suspend.interval);
            // }
            await connection.sendNotification(vscode_languageserver_protocol_1.InitializedNotification.type, {});
            this.hookFileEvents(connection);
            this.hookConfigurationChanged(connection);
            this.initializeFeatures(connection);
            return result;
        }
        catch (error) {
            if (this._clientOptions.initializationFailedHandler) {
                if (this._clientOptions.initializationFailedHandler(error)) {
                    void this.initialize(connection);
                }
                else {
                    void this.stop();
                }
            }
            else if (error instanceof vscode_languageserver_protocol_1.ResponseError && error.data && error.data.retry) {
                void vscode_1.window.showErrorMessage(error.message, { title: 'Retry', id: 'retry' }).then(item => {
                    if (item && item.id === 'retry') {
                        void this.initialize(connection);
                    }
                    else {
                        void this.stop();
                    }
                });
            }
            else {
                if (error && error.message) {
                    void vscode_1.window.showErrorMessage(error.message);
                }
                this.error('Server initialization failed.', error);
                void this.stop();
            }
            throw error;
        }
    }
    _clientGetRootPath() {
        let folders = vscode_1.workspace.workspaceFolders;
        if (!folders || folders.length === 0) {
            return undefined;
        }
        let folder = folders[0];
        if (folder.uri.scheme === 'file') {
            return folder.uri.fsPath;
        }
        return undefined;
    }
    stop(timeout = 2000) {
        // Wait 2 seconds on stop
        return this.shutdown('stop', timeout);
    }
    dispose(timeout = 2000) {
        try {
            this._disposed = 'disposing';
            return this.stop(timeout);
        }
        finally {
            this._disposed = 'disposed';
        }
    }
    async shutdown(mode, timeout) {
        // If the client is stopped or in its initial state return.
        if (this.$state === ClientState.Stopped || this.$state === ClientState.Initial) {
            return;
        }
        // If we are stopping the client and have a stop promise return it.
        if (this.$state === ClientState.Stopping) {
            if (this._onStop !== undefined) {
                return this._onStop;
            }
            else {
                throw new Error(`Client is stopping but no stop promise available.`);
            }
        }
        const connection = this.activeConnection();
        // We can't stop a client that is not running (e.g. has no connection). Especially not
        // on that us starting since it can't be correctly synchronized.
        if (connection === undefined || this.$state !== ClientState.Running) {
            throw new Error(`Client is not running and can't be stopped. It's current state is: ${this.$state}`);
        }
        this._initializeResult = undefined;
        this.$state = ClientState.Stopping;
        this.cleanUp(mode);
        const tp = new Promise(c => { (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(c, timeout); });
        const shutdown = (async (connection) => {
            await connection.shutdown();
            await connection.exit();
            return connection;
        })(connection);
        return this._onStop = Promise.race([tp, shutdown]).then((connection) => {
            // The connection won the race with the timeout.
            if (connection !== undefined) {
                connection.end();
                connection.dispose();
            }
            else {
                this.error(`Stopping server timed out`, undefined, false);
                throw new Error(`Stopping the server timed out`);
            }
        }, (error) => {
            this.error(`Stopping server failed`, error, false);
            throw error;
        }).finally(() => {
            this.$state = ClientState.Stopped;
            mode === 'stop' && this.cleanUpChannel();
            this._onStart = undefined;
            this._onStop = undefined;
            this._connection = undefined;
            this._ignoredRegistrations.clear();
        });
    }
    cleanUp(mode) {
        // purge outstanding file events.
        this._fileEvents = [];
        this._fileEventDelayer.cancel();
        const disposables = this._listeners.splice(0, this._listeners.length);
        for (const disposable of disposables) {
            disposable.dispose();
        }
        if (this._syncedDocuments) {
            this._syncedDocuments.clear();
        }
        // Dispose features in reverse order;
        for (const feature of Array.from(this._features.entries()).map(entry => entry[1]).reverse()) {
            feature.dispose();
        }
        if (mode === 'stop' && this._diagnostics !== undefined) {
            this._diagnostics.dispose();
            this._diagnostics = undefined;
        }
        if (this._idleInterval !== undefined) {
            this._idleInterval.dispose();
            this._idleInterval = undefined;
        }
        // this._idleStart = undefined;
    }
    cleanUpChannel() {
        if (this._outputChannel !== undefined && this._disposeOutputChannel) {
            this._outputChannel.dispose();
            this._outputChannel = undefined;
        }
    }
    notifyFileEvent(event) {
        const client = this;
        async function didChangeWatchedFile(event) {
            client._fileEvents.push(event);
            return client._fileEventDelayer.trigger(async () => {
                await client.sendNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, { changes: client._fileEvents });
                client._fileEvents = [];
            });
        }
        const workSpaceMiddleware = this.clientOptions.middleware?.workspace;
        (workSpaceMiddleware?.didChangeWatchedFile ? workSpaceMiddleware.didChangeWatchedFile(event, didChangeWatchedFile) : didChangeWatchedFile(event)).catch((error) => {
            client.error(`Notify file events failed.`, error);
        });
    }
    async sendPendingFullTextDocumentChanges(connection) {
        return this._pendingChangeSemaphore.lock(async () => {
            try {
                const changes = this._didChangeTextDocumentFeature.getPendingDocumentChanges(this._pendingOpenNotifications);
                if (changes.length === 0) {
                    return;
                }
                for (const document of changes) {
                    const params = this.code2ProtocolConverter.asChangeTextDocumentParams(document);
                    // We await the send and not the delivery since it is more or less the same for
                    // notifications.
                    await connection.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);
                    this._didChangeTextDocumentFeature.notificationSent(document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);
                }
            }
            catch (error) {
                this.error(`Sending pending changes failed`, error, false);
                throw error;
            }
        });
    }
    triggerPendingChangeDelivery() {
        this._pendingChangeDelayer.trigger(async () => {
            const connection = this.activeConnection();
            if (connection === undefined) {
                this.triggerPendingChangeDelivery();
                return;
            }
            await this.sendPendingFullTextDocumentChanges(connection);
        }).catch((error) => this.error(`Delivering pending changes failed`, error, false));
    }
    handleDiagnostics(params) {
        if (!this._diagnostics) {
            return;
        }
        const key = params.uri;
        if (this._diagnosticQueueState.state === 'busy' && this._diagnosticQueueState.document === key) {
            // Cancel the active run;
            this._diagnosticQueueState.tokenSource.cancel();
        }
        this._diagnosticQueue.set(params.uri, params.diagnostics);
        this.triggerDiagnosticQueue();
    }
    triggerDiagnosticQueue() {
        (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => { this.workDiagnosticQueue(); });
    }
    workDiagnosticQueue() {
        if (this._diagnosticQueueState.state === 'busy') {
            return;
        }
        const next = this._diagnosticQueue.entries().next();
        if (next.done === true) {
            // Nothing in the queue
            return;
        }
        const [document, diagnostics] = next.value;
        this._diagnosticQueue.delete(document);
        const tokenSource = new vscode_1.CancellationTokenSource();
        this._diagnosticQueueState = { state: 'busy', document: document, tokenSource };
        this._p2c.asDiagnostics(diagnostics, tokenSource.token).then((converted) => {
            if (!tokenSource.token.isCancellationRequested) {
                const uri = this._p2c.asUri(document);
                const middleware = this.clientOptions.middleware;
                if (middleware.handleDiagnostics) {
                    middleware.handleDiagnostics(uri, converted, (uri, diagnostics) => this.setDiagnostics(uri, diagnostics));
                }
                else {
                    this.setDiagnostics(uri, converted);
                }
            }
        }).finally(() => {
            this._diagnosticQueueState = { state: 'idle' };
            this.triggerDiagnosticQueue();
        });
    }
    setDiagnostics(uri, diagnostics) {
        if (!this._diagnostics) {
            return;
        }
        this._diagnostics.set(uri, diagnostics);
    }
    getLocale() {
        return vscode_1.env.language;
    }
    async $start() {
        if (this.$state === ClientState.StartFailed) {
            throw new Error(`Previous start failed. Can't restart server.`);
        }
        await this.start();
        const connection = this.activeConnection();
        if (connection === undefined) {
            throw new Error(`Starting server failed`);
        }
        return connection;
    }
    async createConnection() {
        let errorHandler = (error, message, count) => {
            this.handleConnectionError(error, message, count).catch((error) => this.error(`Handling connection error failed`, error));
        };
        let closeHandler = () => {
            this.handleConnectionClosed().catch((error) => this.error(`Handling connection close failed`, error));
        };
        const transports = await this.createMessageTransports(this._clientOptions.stdioEncoding || 'utf8');
        this._connection = createConnection(transports.reader, transports.writer, errorHandler, closeHandler, this._clientOptions.connectionOptions);
        return this._connection;
    }
    async handleConnectionClosed() {
        // Check whether this is a normal shutdown in progress or the client stopped normally.
        if (this.$state === ClientState.Stopped) {
            return;
        }
        try {
            if (this._connection !== undefined) {
                this._connection.dispose();
            }
        }
        catch (error) {
            // Disposing a connection could fail if error cases.
        }
        let handlerResult = { action: CloseAction.DoNotRestart };
        if (this.$state !== ClientState.Stopping) {
            try {
                handlerResult = await this._clientOptions.errorHandler.closed();
            }
            catch (error) {
                // Ignore errors coming from the error handler.
            }
        }
        this._connection = undefined;
        if (handlerResult.action === CloseAction.DoNotRestart) {
            this.error(handlerResult.message ?? 'Connection to server got closed. Server will not be restarted.', undefined, handlerResult.handled === true ? false : 'force');
            this.cleanUp('stop');
            if (this.$state === ClientState.Starting) {
                this.$state = ClientState.StartFailed;
            }
            else {
                this.$state = ClientState.Stopped;
            }
            this._onStop = Promise.resolve();
            this._onStart = undefined;
        }
        else if (handlerResult.action === CloseAction.Restart) {
            this.info(handlerResult.message ?? 'Connection to server got closed. Server will restart.', !handlerResult.handled);
            this.cleanUp('restart');
            this.$state = ClientState.Initial;
            this._onStop = Promise.resolve();
            this._onStart = undefined;
            this.start().catch((error) => this.error(`Restarting server failed`, error, 'force'));
        }
    }
    async handleConnectionError(error, message, count) {
        const handlerResult = await this._clientOptions.errorHandler.error(error, message, count);
        if (handlerResult.action === ErrorAction.Shutdown) {
            this.error(handlerResult.message ?? `Client ${this._name}: connection to server is erroring. Shutting down server.`, undefined, handlerResult.handled === true ? false : 'force');
            this.stop().catch((error) => {
                this.error(`Stopping server failed`, error, false);
            });
        }
    }
    hookConfigurationChanged(connection) {
        this._listeners.push(vscode_1.workspace.onDidChangeConfiguration(() => {
            this.refreshTrace(connection, true);
        }));
    }
    refreshTrace(connection, sendNotification = false) {
        const config = vscode_1.workspace.getConfiguration(this._id);
        let trace = vscode_languageserver_protocol_1.Trace.Off;
        let traceFormat = vscode_languageserver_protocol_1.TraceFormat.Text;
        if (config) {
            const traceConfig = config.get('trace.server', 'off');
            if (typeof traceConfig === 'string') {
                trace = vscode_languageserver_protocol_1.Trace.fromString(traceConfig);
            }
            else {
                trace = vscode_languageserver_protocol_1.Trace.fromString(config.get('trace.server.verbosity', 'off'));
                traceFormat = vscode_languageserver_protocol_1.TraceFormat.fromString(config.get('trace.server.format', 'text'));
            }
        }
        this._trace = trace;
        this._traceFormat = traceFormat;
        connection.trace(this._trace, this._tracer, {
            sendNotification,
            traceFormat: this._traceFormat
        }).catch((error) => { this.error(`Updating trace failed with error`, error, false); });
    }
    hookFileEvents(_connection) {
        let fileEvents = this._clientOptions.synchronize.fileEvents;
        if (!fileEvents) {
            return;
        }
        let watchers;
        if (Is.array(fileEvents)) {
            watchers = fileEvents;
        }
        else {
            watchers = [fileEvents];
        }
        if (!watchers) {
            return;
        }
        this._dynamicFeatures.get(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type.method).registerRaw(UUID.generateUuid(), watchers);
    }
    registerFeatures(features) {
        for (let feature of features) {
            this.registerFeature(feature);
        }
    }
    registerFeature(feature) {
        this._features.push(feature);
        if (features_1.DynamicFeature.is(feature)) {
            const registrationType = feature.registrationType;
            this._dynamicFeatures.set(registrationType.method, feature);
        }
    }
    getFeature(request) {
        return this._dynamicFeatures.get(request);
    }
    hasDedicatedTextSynchronizationFeature(textDocument) {
        const feature = this.getFeature(vscode_languageserver_protocol_1.NotebookDocumentSyncRegistrationType.method);
        if (feature === undefined || !(feature instanceof notebook_1.NotebookDocumentSyncFeature)) {
            return false;
        }
        return feature.handles(textDocument);
    }
    registerBuiltinFeatures() {
        const pendingFullTextDocumentChanges = new Map();
        this.registerFeature(new configuration_1.ConfigurationFeature(this));
        this.registerFeature(new textSynchronization_1.DidOpenTextDocumentFeature(this, this._syncedDocuments));
        this._didChangeTextDocumentFeature = new textSynchronization_1.DidChangeTextDocumentFeature(this, pendingFullTextDocumentChanges);
        this._didChangeTextDocumentFeature.onPendingChangeAdded(() => {
            this.triggerPendingChangeDelivery();
        });
        this.registerFeature(this._didChangeTextDocumentFeature);
        this.registerFeature(new textSynchronization_1.WillSaveFeature(this));
        this.registerFeature(new textSynchronization_1.WillSaveWaitUntilFeature(this));
        this.registerFeature(new textSynchronization_1.DidSaveTextDocumentFeature(this));
        this.registerFeature(new textSynchronization_1.DidCloseTextDocumentFeature(this, this._syncedDocuments, pendingFullTextDocumentChanges));
        this.registerFeature(new fileSystemWatcher_1.FileSystemWatcherFeature(this, (event) => this.notifyFileEvent(event)));
        this.registerFeature(new completion_1.CompletionItemFeature(this));
        this.registerFeature(new hover_1.HoverFeature(this));
        this.registerFeature(new signatureHelp_1.SignatureHelpFeature(this));
        this.registerFeature(new definition_1.DefinitionFeature(this));
        this.registerFeature(new reference_1.ReferencesFeature(this));
        this.registerFeature(new documentHighlight_1.DocumentHighlightFeature(this));
        this.registerFeature(new documentSymbol_1.DocumentSymbolFeature(this));
        this.registerFeature(new workspaceSymbol_1.WorkspaceSymbolFeature(this));
        this.registerFeature(new codeAction_1.CodeActionFeature(this));
        this.registerFeature(new codeLens_1.CodeLensFeature(this));
        this.registerFeature(new formatting_1.DocumentFormattingFeature(this));
        this.registerFeature(new formatting_1.DocumentRangeFormattingFeature(this));
        this.registerFeature(new formatting_1.DocumentOnTypeFormattingFeature(this));
        this.registerFeature(new rename_1.RenameFeature(this));
        this.registerFeature(new documentLink_1.DocumentLinkFeature(this));
        this.registerFeature(new executeCommand_1.ExecuteCommandFeature(this));
        this.registerFeature(new configuration_1.SyncConfigurationFeature(this));
        this.registerFeature(new typeDefinition_1.TypeDefinitionFeature(this));
        this.registerFeature(new implementation_1.ImplementationFeature(this));
        this.registerFeature(new colorProvider_1.ColorProviderFeature(this));
        // We only register the workspace folder feature if the client is not locked
        // to a specific workspace folder.
        if (this.clientOptions.workspaceFolder === undefined) {
            this.registerFeature(new workspaceFolder_1.WorkspaceFoldersFeature(this));
        }
        this.registerFeature(new foldingRange_1.FoldingRangeFeature(this));
        this.registerFeature(new declaration_1.DeclarationFeature(this));
        this.registerFeature(new selectionRange_1.SelectionRangeFeature(this));
        this.registerFeature(new progress_1.ProgressFeature(this));
        this.registerFeature(new callHierarchy_1.CallHierarchyFeature(this));
        this.registerFeature(new semanticTokens_1.SemanticTokensFeature(this));
        this.registerFeature(new linkedEditingRange_1.LinkedEditingFeature(this));
        this.registerFeature(new fileOperations_1.DidCreateFilesFeature(this));
        this.registerFeature(new fileOperations_1.DidRenameFilesFeature(this));
        this.registerFeature(new fileOperations_1.DidDeleteFilesFeature(this));
        this.registerFeature(new fileOperations_1.WillCreateFilesFeature(this));
        this.registerFeature(new fileOperations_1.WillRenameFilesFeature(this));
        this.registerFeature(new fileOperations_1.WillDeleteFilesFeature(this));
        this.registerFeature(new typeHierarchy_1.TypeHierarchyFeature(this));
        this.registerFeature(new inlineValue_1.InlineValueFeature(this));
        this.registerFeature(new inlayHint_1.InlayHintsFeature(this));
        this.registerFeature(new diagnostic_1.DiagnosticFeature(this));
        this.registerFeature(new notebook_1.NotebookDocumentSyncFeature(this));
    }
    registerProposedFeatures() {
        this.registerFeatures(ProposedFeatures.createAll(this));
    }
    fillInitializeParams(params) {
        for (let feature of this._features) {
            if (Is.func(feature.fillInitializeParams)) {
                feature.fillInitializeParams(params);
            }
        }
    }
    computeClientCapabilities() {
        const result = {};
        (0, features_1.ensure)(result, 'workspace').applyEdit = true;
        const workspaceEdit = (0, features_1.ensure)((0, features_1.ensure)(result, 'workspace'), 'workspaceEdit');
        workspaceEdit.documentChanges = true;
        workspaceEdit.resourceOperations = [vscode_languageserver_protocol_1.ResourceOperationKind.Create, vscode_languageserver_protocol_1.ResourceOperationKind.Rename, vscode_languageserver_protocol_1.ResourceOperationKind.Delete];
        workspaceEdit.failureHandling = vscode_languageserver_protocol_1.FailureHandlingKind.TextOnlyTransactional;
        workspaceEdit.normalizesLineEndings = true;
        workspaceEdit.changeAnnotationSupport = {
            groupsOnLabel: true
        };
        const diagnostics = (0, features_1.ensure)((0, features_1.ensure)(result, 'textDocument'), 'publishDiagnostics');
        diagnostics.relatedInformation = true;
        diagnostics.versionSupport = false;
        diagnostics.tagSupport = { valueSet: [vscode_languageserver_protocol_1.DiagnosticTag.Unnecessary, vscode_languageserver_protocol_1.DiagnosticTag.Deprecated] };
        diagnostics.codeDescriptionSupport = true;
        diagnostics.dataSupport = true;
        const windowCapabilities = (0, features_1.ensure)(result, 'window');
        const showMessage = (0, features_1.ensure)(windowCapabilities, 'showMessage');
        showMessage.messageActionItem = { additionalPropertiesSupport: true };
        const showDocument = (0, features_1.ensure)(windowCapabilities, 'showDocument');
        showDocument.support = true;
        const generalCapabilities = (0, features_1.ensure)(result, 'general');
        generalCapabilities.staleRequestSupport = {
            cancel: true,
            retryOnContentModified: Array.from(BaseLanguageClient.RequestsToCancelOnContentModified)
        };
        generalCapabilities.regularExpressions = { engine: 'ECMAScript', version: 'ES2020' };
        generalCapabilities.markdown = {
            parser: 'marked',
            version: '1.1.0',
        };
        generalCapabilities.positionEncodings = ['utf-16'];
        if (this._clientOptions.markdown.supportHtml) {
            generalCapabilities.markdown.allowedTags = ['ul', 'li', 'p', 'code', 'blockquote', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'em', 'pre', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'div', 'del', 'a', 'strong', 'br', 'img', 'span'];
        }
        for (let feature of this._features) {
            feature.fillClientCapabilities(result);
        }
        return result;
    }
    initializeFeatures(_connection) {
        const documentSelector = this._clientOptions.documentSelector;
        for (const feature of this._features) {
            if (Is.func(feature.preInitialize)) {
                feature.preInitialize(this._capabilities, documentSelector);
            }
        }
        for (const feature of this._features) {
            feature.initialize(this._capabilities, documentSelector);
        }
    }
    async handleRegistrationRequest(params) {
        // We will not receive a registration call before a client is running
        // from a server. However if we stop or shutdown we might which might
        // try to restart the server. So ignore registrations if we are not running
        if (!this.isRunning()) {
            for (const registration of params.registrations) {
                this._ignoredRegistrations.add(registration.id);
            }
            return;
        }
        for (const registration of params.registrations) {
            const feature = this._dynamicFeatures.get(registration.method);
            if (feature === undefined) {
                return Promise.reject(new Error(`No feature implementation for ${registration.method} found. Registration failed.`));
            }
            const options = registration.registerOptions ?? {};
            options.documentSelector = options.documentSelector ?? this._clientOptions.documentSelector;
            const data = {
                id: registration.id,
                registerOptions: options
            };
            try {
                feature.register(data);
            }
            catch (err) {
                return Promise.reject(err);
            }
        }
    }
    async handleUnregistrationRequest(params) {
        for (let unregistration of params.unregisterations) {
            if (this._ignoredRegistrations.has(unregistration.id)) {
                continue;
            }
            const feature = this._dynamicFeatures.get(unregistration.method);
            if (!feature) {
                return Promise.reject(new Error(`No feature implementation for ${unregistration.method} found. Unregistration failed.`));
            }
            feature.unregister(unregistration.id);
        }
    }
    async handleApplyWorkspaceEdit(params) {
        const workspaceEdit = params.edit;
        // Make sure we convert workspace edits one after the other. Otherwise
        // we might execute a workspace edit received first after we received another
        // one since the conversion might race.
        const converted = await this.workspaceEditLock.lock(() => {
            return this._p2c.asWorkspaceEdit(workspaceEdit);
        });
        // This is some sort of workaround since the version check should be done by VS Code in the Workspace.applyEdit.
        // However doing it here adds some safety since the server can lag more behind then an extension.
        const openTextDocuments = new Map();
        vscode_1.workspace.textDocuments.forEach((document) => openTextDocuments.set(document.uri.toString(), document));
        let versionMismatch = false;
        if (workspaceEdit.documentChanges) {
            for (const change of workspaceEdit.documentChanges) {
                if (vscode_languageserver_protocol_1.TextDocumentEdit.is(change) && change.textDocument.version && change.textDocument.version >= 0) {
                    const changeUri = this._p2c.asUri(change.textDocument.uri).toString();
                    const textDocument = openTextDocuments.get(changeUri);
                    if (textDocument && textDocument.version !== change.textDocument.version) {
                        versionMismatch = true;
                        break;
                    }
                }
            }
        }
        if (versionMismatch) {
            return Promise.resolve({ applied: false });
        }
        return Is.asPromise(vscode_1.workspace.applyEdit(converted).then((value) => { return { applied: value }; }));
    }
    handleFailedRequest(type, token, error, defaultValue, showNotification = true) {
        // If we get a request cancel or a content modified don't log anything.
        if (error instanceof vscode_languageserver_protocol_1.ResponseError) {
            // The connection got disposed while we were waiting for a response.
            // Simply return the default value. Is the best we can do.
            if (error.code === vscode_languageserver_protocol_1.ErrorCodes.PendingResponseRejected || error.code === vscode_languageserver_protocol_1.ErrorCodes.ConnectionInactive) {
                return defaultValue;
            }
            if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.RequestCancelled || error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ServerCancelled) {
                if (token !== undefined && token.isCancellationRequested) {
                    return defaultValue;
                }
                else {
                    if (error.data !== undefined) {
                        throw new features_1.LSPCancellationError(error.data);
                    }
                    else {
                        throw new vscode_1.CancellationError();
                    }
                }
            }
            else if (error.code === vscode_languageserver_protocol_1.LSPErrorCodes.ContentModified) {
                if (BaseLanguageClient.RequestsToCancelOnContentModified.has(type.method) || BaseLanguageClient.CancellableResolveCalls.has(type.method)) {
                    throw new vscode_1.CancellationError();
                }
                else {
                    return defaultValue;
                }
            }
        }
        this.error(`Request ${type.method} failed.`, error, showNotification);
        throw error;
    }
}
exports.BaseLanguageClient = BaseLanguageClient;
BaseLanguageClient.RequestsToCancelOnContentModified = new Set([
    vscode_languageserver_protocol_1.SemanticTokensRequest.method,
    vscode_languageserver_protocol_1.SemanticTokensRangeRequest.method,
    vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.method
]);
BaseLanguageClient.CancellableResolveCalls = new Set([
    vscode_languageserver_protocol_1.CompletionResolveRequest.method,
    vscode_languageserver_protocol_1.CodeLensResolveRequest.method,
    vscode_languageserver_protocol_1.CodeActionResolveRequest.method,
    vscode_languageserver_protocol_1.InlayHintResolveRequest.method,
    vscode_languageserver_protocol_1.DocumentLinkResolveRequest.method,
    vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.method
]);
class ConsoleLogger {
    error(message) {
        (0, vscode_languageserver_protocol_1.RAL)().console.error(message);
    }
    warn(message) {
        (0, vscode_languageserver_protocol_1.RAL)().console.warn(message);
    }
    info(message) {
        (0, vscode_languageserver_protocol_1.RAL)().console.info(message);
    }
    log(message) {
        (0, vscode_languageserver_protocol_1.RAL)().console.log(message);
    }
}
function createConnection(input, output, errorHandler, closeHandler, options) {
    const logger = new ConsoleLogger();
    const connection = (0, vscode_languageserver_protocol_1.createProtocolConnection)(input, output, logger, options);
    connection.onError((data) => { errorHandler(data[0], data[1], data[2]); });
    connection.onClose(closeHandler);
    const result = {
        listen: () => connection.listen(),
        sendRequest: connection.sendRequest,
        onRequest: connection.onRequest,
        hasPendingResponse: connection.hasPendingResponse,
        sendNotification: connection.sendNotification,
        onNotification: connection.onNotification,
        onProgress: connection.onProgress,
        sendProgress: connection.sendProgress,
        trace: (value, tracer, sendNotificationOrTraceOptions) => {
            const defaultTraceOptions = {
                sendNotification: false,
                traceFormat: vscode_languageserver_protocol_1.TraceFormat.Text
            };
            if (sendNotificationOrTraceOptions === undefined) {
                return connection.trace(value, tracer, defaultTraceOptions);
            }
            else if (Is.boolean(sendNotificationOrTraceOptions)) {
                return connection.trace(value, tracer, sendNotificationOrTraceOptions);
            }
            else {
                return connection.trace(value, tracer, sendNotificationOrTraceOptions);
            }
        },
        initialize: (params) => {
            // This needs to return and MUST not be await to avoid any async
            // scheduling. Otherwise messages might overtake each other.
            return connection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params);
        },
        shutdown: () => {
            // This needs to return and MUST not be await to avoid any async
            // scheduling. Otherwise messages might overtake each other.
            return connection.sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, undefined);
        },
        exit: () => {
            // This needs to return and MUST not be await to avoid any async
            // scheduling. Otherwise messages might overtake each other.
            return connection.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type);
        },
        end: () => connection.end(),
        dispose: () => connection.dispose()
    };
    return result;
}
// Exporting proposed protocol.
var ProposedFeatures;
(function (ProposedFeatures) {
    function createAll(_client) {
        let result = [];
        return result;
    }
    ProposedFeatures.createAll = createAll;
})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/codeAction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/codeAction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeActionFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class CodeActionFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.CodeActionRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const cap = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'codeAction');
        cap.dynamicRegistration = true;
        cap.isPreferredSupport = true;
        cap.disabledSupport = true;
        cap.dataSupport = true;
        // We can only resolve the edit property.
        cap.resolveSupport = {
            properties: ['edit']
        };
        cap.codeActionLiteralSupport = {
            codeActionKind: {
                valueSet: [
                    vscode_languageserver_protocol_1.CodeActionKind.Empty,
                    vscode_languageserver_protocol_1.CodeActionKind.QuickFix,
                    vscode_languageserver_protocol_1.CodeActionKind.Refactor,
                    vscode_languageserver_protocol_1.CodeActionKind.RefactorExtract,
                    vscode_languageserver_protocol_1.CodeActionKind.RefactorInline,
                    vscode_languageserver_protocol_1.CodeActionKind.RefactorRewrite,
                    vscode_languageserver_protocol_1.CodeActionKind.Source,
                    vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports
                ]
            }
        };
        cap.honorsChangeAnnotations = false;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.codeActionProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideCodeActions: (document, range, context, token) => {
                const client = this._client;
                const _provideCodeActions = async (document, range, context, token) => {
                    const params = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        range: client.code2ProtocolConverter.asRange(range),
                        context: await client.code2ProtocolConverter.asCodeActionContext(context, token)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, params, token).then((values) => {
                        if (token.isCancellationRequested || values === null || values === undefined) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asCodeActionResult(values, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideCodeActions
                    ? middleware.provideCodeActions(document, range, context, token, _provideCodeActions)
                    : _provideCodeActions(document, range, context, token);
            },
            resolveCodeAction: options.resolveProvider
                ? (item, token) => {
                    const client = this._client;
                    const middleware = this._client.middleware;
                    const resolveCodeAction = async (item, token) => {
                        return client.sendRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, await client.code2ProtocolConverter.asCodeAction(item, token), token).then((result) => {
                            if (token.isCancellationRequested) {
                                return item;
                            }
                            return client.protocol2CodeConverter.asCodeAction(result, token);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, token, error, item);
                        });
                    };
                    return middleware.resolveCodeAction
                        ? middleware.resolveCodeAction(item, token, resolveCodeAction)
                        : resolveCodeAction(item, token);
                }
                : undefined
        };
        return [vscode_1.languages.registerCodeActionsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, (options.codeActionKinds
                ? { providedCodeActionKinds: this._client.protocol2CodeConverter.asCodeActionKinds(options.codeActionKinds) }
                : undefined)), provider];
    }
}
exports.CodeActionFeature = CodeActionFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/codeConverter.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/codeConverter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConverter = void 0;
const code = __webpack_require__(/*! vscode */ "vscode");
const proto = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const async = __webpack_require__(/*! ./utils/async */ "./node_modules/vscode-languageclient/lib/common/utils/async.js");
const protocolCompletionItem_1 = __webpack_require__(/*! ./protocolCompletionItem */ "./node_modules/vscode-languageclient/lib/common/protocolCompletionItem.js");
const protocolCodeLens_1 = __webpack_require__(/*! ./protocolCodeLens */ "./node_modules/vscode-languageclient/lib/common/protocolCodeLens.js");
const protocolDocumentLink_1 = __webpack_require__(/*! ./protocolDocumentLink */ "./node_modules/vscode-languageclient/lib/common/protocolDocumentLink.js");
const protocolCodeAction_1 = __webpack_require__(/*! ./protocolCodeAction */ "./node_modules/vscode-languageclient/lib/common/protocolCodeAction.js");
const protocolDiagnostic_1 = __webpack_require__(/*! ./protocolDiagnostic */ "./node_modules/vscode-languageclient/lib/common/protocolDiagnostic.js");
const protocolCallHierarchyItem_1 = __webpack_require__(/*! ./protocolCallHierarchyItem */ "./node_modules/vscode-languageclient/lib/common/protocolCallHierarchyItem.js");
const protocolTypeHierarchyItem_1 = __webpack_require__(/*! ./protocolTypeHierarchyItem */ "./node_modules/vscode-languageclient/lib/common/protocolTypeHierarchyItem.js");
const protocolWorkspaceSymbol_1 = __webpack_require__(/*! ./protocolWorkspaceSymbol */ "./node_modules/vscode-languageclient/lib/common/protocolWorkspaceSymbol.js");
const protocolInlayHint_1 = __webpack_require__(/*! ./protocolInlayHint */ "./node_modules/vscode-languageclient/lib/common/protocolInlayHint.js");
var InsertReplaceRange;
(function (InsertReplaceRange) {
    function is(value) {
        const candidate = value;
        return candidate && !!candidate.inserting && !!candidate.replacing;
    }
    InsertReplaceRange.is = is;
})(InsertReplaceRange || (InsertReplaceRange = {}));
function createConverter(uriConverter) {
    const nullConverter = (value) => value.toString();
    const _uriConverter = uriConverter || nullConverter;
    function asUri(value) {
        return _uriConverter(value);
    }
    function asTextDocumentIdentifier(textDocument) {
        return {
            uri: _uriConverter(textDocument.uri)
        };
    }
    function asTextDocumentItem(textDocument) {
        return {
            uri: _uriConverter(textDocument.uri),
            languageId: textDocument.languageId,
            version: textDocument.version,
            text: textDocument.getText()
        };
    }
    function asVersionedTextDocumentIdentifier(textDocument) {
        return {
            uri: _uriConverter(textDocument.uri),
            version: textDocument.version
        };
    }
    function asOpenTextDocumentParams(textDocument) {
        return {
            textDocument: asTextDocumentItem(textDocument)
        };
    }
    function isTextDocumentChangeEvent(value) {
        const candidate = value;
        return !!candidate.document && !!candidate.contentChanges;
    }
    function isTextDocument(value) {
        const candidate = value;
        return !!candidate.uri && !!candidate.version;
    }
    function asChangeTextDocumentParams(arg0, arg1, arg2) {
        if (isTextDocument(arg0)) {
            const result = {
                textDocument: {
                    uri: _uriConverter(arg0.uri),
                    version: arg0.version
                },
                contentChanges: [{ text: arg0.getText() }]
            };
            return result;
        }
        else if (isTextDocumentChangeEvent(arg0)) {
            const uri = arg1;
            const version = arg2;
            const result = {
                textDocument: {
                    uri: _uriConverter(uri),
                    version: version
                },
                contentChanges: arg0.contentChanges.map((change) => {
                    const range = change.range;
                    return {
                        range: {
                            start: { line: range.start.line, character: range.start.character },
                            end: { line: range.end.line, character: range.end.character }
                        },
                        rangeLength: change.rangeLength,
                        text: change.text
                    };
                })
            };
            return result;
        }
        else {
            throw Error('Unsupported text document change parameter');
        }
    }
    function asCloseTextDocumentParams(textDocument) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument)
        };
    }
    function asSaveTextDocumentParams(textDocument, includeContent = false) {
        let result = {
            textDocument: asTextDocumentIdentifier(textDocument)
        };
        if (includeContent) {
            result.text = textDocument.getText();
        }
        return result;
    }
    function asTextDocumentSaveReason(reason) {
        switch (reason) {
            case code.TextDocumentSaveReason.Manual:
                return proto.TextDocumentSaveReason.Manual;
            case code.TextDocumentSaveReason.AfterDelay:
                return proto.TextDocumentSaveReason.AfterDelay;
            case code.TextDocumentSaveReason.FocusOut:
                return proto.TextDocumentSaveReason.FocusOut;
        }
        return proto.TextDocumentSaveReason.Manual;
    }
    function asWillSaveTextDocumentParams(event) {
        return {
            textDocument: asTextDocumentIdentifier(event.document),
            reason: asTextDocumentSaveReason(event.reason)
        };
    }
    function asDidCreateFilesParams(event) {
        return {
            files: event.files.map((fileUri) => ({
                uri: _uriConverter(fileUri),
            })),
        };
    }
    function asDidRenameFilesParams(event) {
        return {
            files: event.files.map((file) => ({
                oldUri: _uriConverter(file.oldUri),
                newUri: _uriConverter(file.newUri),
            })),
        };
    }
    function asDidDeleteFilesParams(event) {
        return {
            files: event.files.map((fileUri) => ({
                uri: _uriConverter(fileUri),
            })),
        };
    }
    function asWillCreateFilesParams(event) {
        return {
            files: event.files.map((fileUri) => ({
                uri: _uriConverter(fileUri),
            })),
        };
    }
    function asWillRenameFilesParams(event) {
        return {
            files: event.files.map((file) => ({
                oldUri: _uriConverter(file.oldUri),
                newUri: _uriConverter(file.newUri),
            })),
        };
    }
    function asWillDeleteFilesParams(event) {
        return {
            files: event.files.map((fileUri) => ({
                uri: _uriConverter(fileUri),
            })),
        };
    }
    function asTextDocumentPositionParams(textDocument, position) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument),
            position: asWorkerPosition(position)
        };
    }
    function asCompletionTriggerKind(triggerKind) {
        switch (triggerKind) {
            case code.CompletionTriggerKind.TriggerCharacter:
                return proto.CompletionTriggerKind.TriggerCharacter;
            case code.CompletionTriggerKind.TriggerForIncompleteCompletions:
                return proto.CompletionTriggerKind.TriggerForIncompleteCompletions;
            default:
                return proto.CompletionTriggerKind.Invoked;
        }
    }
    function asCompletionParams(textDocument, position, context) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument),
            position: asWorkerPosition(position),
            context: {
                triggerKind: asCompletionTriggerKind(context.triggerKind),
                triggerCharacter: context.triggerCharacter
            }
        };
    }
    function asSignatureHelpTriggerKind(triggerKind) {
        switch (triggerKind) {
            case code.SignatureHelpTriggerKind.Invoke:
                return proto.SignatureHelpTriggerKind.Invoked;
            case code.SignatureHelpTriggerKind.TriggerCharacter:
                return proto.SignatureHelpTriggerKind.TriggerCharacter;
            case code.SignatureHelpTriggerKind.ContentChange:
                return proto.SignatureHelpTriggerKind.ContentChange;
        }
    }
    function asParameterInformation(value) {
        // We leave the documentation out on purpose since it usually adds no
        // value for the server.
        return {
            label: value.label
        };
    }
    function asParameterInformations(values) {
        return values.map(asParameterInformation);
    }
    function asSignatureInformation(value) {
        // We leave the documentation out on purpose since it usually adds no
        // value for the server.
        return {
            label: value.label,
            parameters: asParameterInformations(value.parameters)
        };
    }
    function asSignatureInformations(values) {
        return values.map(asSignatureInformation);
    }
    function asSignatureHelp(value) {
        if (value === undefined) {
            return value;
        }
        return {
            signatures: asSignatureInformations(value.signatures),
            activeSignature: value.activeSignature,
            activeParameter: value.activeParameter
        };
    }
    function asSignatureHelpParams(textDocument, position, context) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument),
            position: asWorkerPosition(position),
            context: {
                isRetrigger: context.isRetrigger,
                triggerCharacter: context.triggerCharacter,
                triggerKind: asSignatureHelpTriggerKind(context.triggerKind),
                activeSignatureHelp: asSignatureHelp(context.activeSignatureHelp)
            }
        };
    }
    function asWorkerPosition(position) {
        return { line: position.line, character: position.character };
    }
    function asPosition(value) {
        if (value === undefined || value === null) {
            return value;
        }
        return { line: value.line > proto.uinteger.MAX_VALUE ? proto.uinteger.MAX_VALUE : value.line, character: value.character > proto.uinteger.MAX_VALUE ? proto.uinteger.MAX_VALUE : value.character };
    }
    function asPositions(value, token) {
        return async.map(value, asPosition, token);
    }
    function asRange(value) {
        if (value === undefined || value === null) {
            return value;
        }
        return { start: asPosition(value.start), end: asPosition(value.end) };
    }
    function asLocation(value) {
        if (value === undefined || value === null) {
            return value;
        }
        return proto.Location.create(asUri(value.uri), asRange(value.range));
    }
    function asDiagnosticSeverity(value) {
        switch (value) {
            case code.DiagnosticSeverity.Error:
                return proto.DiagnosticSeverity.Error;
            case code.DiagnosticSeverity.Warning:
                return proto.DiagnosticSeverity.Warning;
            case code.DiagnosticSeverity.Information:
                return proto.DiagnosticSeverity.Information;
            case code.DiagnosticSeverity.Hint:
                return proto.DiagnosticSeverity.Hint;
        }
    }
    function asDiagnosticTags(tags) {
        if (!tags) {
            return undefined;
        }
        let result = [];
        for (let tag of tags) {
            let converted = asDiagnosticTag(tag);
            if (converted !== undefined) {
                result.push(converted);
            }
        }
        return result.length > 0 ? result : undefined;
    }
    function asDiagnosticTag(tag) {
        switch (tag) {
            case code.DiagnosticTag.Unnecessary:
                return proto.DiagnosticTag.Unnecessary;
            case code.DiagnosticTag.Deprecated:
                return proto.DiagnosticTag.Deprecated;
            default:
                return undefined;
        }
    }
    function asRelatedInformation(item) {
        return {
            message: item.message,
            location: asLocation(item.location)
        };
    }
    function asRelatedInformations(items) {
        return items.map(asRelatedInformation);
    }
    function asDiagnosticCode(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        if (Is.number(value) || Is.string(value)) {
            return value;
        }
        return { value: value.value, target: asUri(value.target) };
    }
    function asDiagnostic(item) {
        const result = proto.Diagnostic.create(asRange(item.range), item.message);
        const protocolDiagnostic = item instanceof protocolDiagnostic_1.ProtocolDiagnostic ? item : undefined;
        if (protocolDiagnostic !== undefined && protocolDiagnostic.data !== undefined) {
            result.data = protocolDiagnostic.data;
        }
        const code = asDiagnosticCode(item.code);
        if (protocolDiagnostic_1.DiagnosticCode.is(code)) {
            if (protocolDiagnostic !== undefined && protocolDiagnostic.hasDiagnosticCode) {
                result.code = code;
            }
            else {
                result.code = code.value;
                result.codeDescription = { href: code.target };
            }
        }
        else {
            result.code = code;
        }
        if (Is.number(item.severity)) {
            result.severity = asDiagnosticSeverity(item.severity);
        }
        if (Array.isArray(item.tags)) {
            result.tags = asDiagnosticTags(item.tags);
        }
        if (item.relatedInformation) {
            result.relatedInformation = asRelatedInformations(item.relatedInformation);
        }
        if (item.source) {
            result.source = item.source;
        }
        return result;
    }
    function asDiagnostics(items, token) {
        if (items === undefined || items === null) {
            return items;
        }
        return async.map(items, asDiagnostic, token);
    }
    function asDocumentation(format, documentation) {
        switch (format) {
            case '$string':
                return documentation;
            case proto.MarkupKind.PlainText:
                return { kind: format, value: documentation };
            case proto.MarkupKind.Markdown:
                return { kind: format, value: documentation.value };
            default:
                return `Unsupported Markup content received. Kind is: ${format}`;
        }
    }
    function asCompletionItemTag(tag) {
        switch (tag) {
            case code.CompletionItemTag.Deprecated:
                return proto.CompletionItemTag.Deprecated;
        }
        return undefined;
    }
    function asCompletionItemTags(tags) {
        if (tags === undefined) {
            return tags;
        }
        const result = [];
        for (let tag of tags) {
            const converted = asCompletionItemTag(tag);
            if (converted !== undefined) {
                result.push(converted);
            }
        }
        return result;
    }
    function asCompletionItemKind(value, original) {
        if (original !== undefined) {
            return original;
        }
        return value + 1;
    }
    function asCompletionItem(item, labelDetailsSupport = false) {
        let label;
        let labelDetails;
        if (Is.string(item.label)) {
            label = item.label;
        }
        else {
            label = item.label.label;
            if (labelDetailsSupport && (item.label.detail !== undefined || item.label.description !== undefined)) {
                labelDetails = { detail: item.label.detail, description: item.label.description };
            }
        }
        let result = { label: label };
        if (labelDetails !== undefined) {
            result.labelDetails = labelDetails;
        }
        let protocolItem = item instanceof protocolCompletionItem_1.default ? item : undefined;
        if (item.detail) {
            result.detail = item.detail;
        }
        // We only send items back we created. So this can't be something else than
        // a string right now.
        if (item.documentation) {
            if (!protocolItem || protocolItem.documentationFormat === '$string') {
                result.documentation = item.documentation;
            }
            else {
                result.documentation = asDocumentation(protocolItem.documentationFormat, item.documentation);
            }
        }
        if (item.filterText) {
            result.filterText = item.filterText;
        }
        fillPrimaryInsertText(result, item);
        if (Is.number(item.kind)) {
            result.kind = asCompletionItemKind(item.kind, protocolItem && protocolItem.originalItemKind);
        }
        if (item.sortText) {
            result.sortText = item.sortText;
        }
        if (item.additionalTextEdits) {
            result.additionalTextEdits = asTextEdits(item.additionalTextEdits);
        }
        if (item.commitCharacters) {
            result.commitCharacters = item.commitCharacters.slice();
        }
        if (item.command) {
            result.command = asCommand(item.command);
        }
        if (item.preselect === true || item.preselect === false) {
            result.preselect = item.preselect;
        }
        const tags = asCompletionItemTags(item.tags);
        if (protocolItem) {
            if (protocolItem.data !== undefined) {
                result.data = protocolItem.data;
            }
            if (protocolItem.deprecated === true || protocolItem.deprecated === false) {
                if (protocolItem.deprecated === true && tags !== undefined && tags.length > 0) {
                    const index = tags.indexOf(code.CompletionItemTag.Deprecated);
                    if (index !== -1) {
                        tags.splice(index, 1);
                    }
                }
                result.deprecated = protocolItem.deprecated;
            }
            if (protocolItem.insertTextMode !== undefined) {
                result.insertTextMode = protocolItem.insertTextMode;
            }
        }
        if (tags !== undefined && tags.length > 0) {
            result.tags = tags;
        }
        if (result.insertTextMode === undefined && item.keepWhitespace === true) {
            result.insertTextMode = proto.InsertTextMode.adjustIndentation;
        }
        return result;
    }
    function fillPrimaryInsertText(target, source) {
        let format = proto.InsertTextFormat.PlainText;
        let text = undefined;
        let range = undefined;
        if (source.textEdit) {
            text = source.textEdit.newText;
            range = source.textEdit.range;
        }
        else if (source.insertText instanceof code.SnippetString) {
            format = proto.InsertTextFormat.Snippet;
            text = source.insertText.value;
        }
        else {
            text = source.insertText;
        }
        if (source.range) {
            range = source.range;
        }
        target.insertTextFormat = format;
        if (source.fromEdit && text !== undefined && range !== undefined) {
            target.textEdit = asCompletionTextEdit(text, range);
        }
        else {
            target.insertText = text;
        }
    }
    function asCompletionTextEdit(newText, range) {
        if (InsertReplaceRange.is(range)) {
            return proto.InsertReplaceEdit.create(newText, asRange(range.inserting), asRange(range.replacing));
        }
        else {
            return { newText, range: asRange(range) };
        }
    }
    function asTextEdit(edit) {
        return { range: asRange(edit.range), newText: edit.newText };
    }
    function asTextEdits(edits) {
        if (edits === undefined || edits === null) {
            return edits;
        }
        return edits.map(asTextEdit);
    }
    function asSymbolKind(item) {
        if (item <= code.SymbolKind.TypeParameter) {
            // Symbol kind is one based in the protocol and zero based in code.
            return (item + 1);
        }
        return proto.SymbolKind.Property;
    }
    function asSymbolTag(item) {
        return item;
    }
    function asSymbolTags(items) {
        return items.map(asSymbolTag);
    }
    function asReferenceParams(textDocument, position, options) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument),
            position: asWorkerPosition(position),
            context: { includeDeclaration: options.includeDeclaration }
        };
    }
    async function asCodeAction(item, token) {
        let result = proto.CodeAction.create(item.title);
        if (item instanceof protocolCodeAction_1.default && item.data !== undefined) {
            result.data = item.data;
        }
        if (item.kind !== undefined) {
            result.kind = asCodeActionKind(item.kind);
        }
        if (item.diagnostics !== undefined) {
            result.diagnostics = await asDiagnostics(item.diagnostics, token);
        }
        if (item.edit !== undefined) {
            throw new Error(`VS Code code actions can only be converted to a protocol code action without an edit.`);
        }
        if (item.command !== undefined) {
            result.command = asCommand(item.command);
        }
        if (item.isPreferred !== undefined) {
            result.isPreferred = item.isPreferred;
        }
        if (item.disabled !== undefined) {
            result.disabled = { reason: item.disabled.reason };
        }
        return result;
    }
    async function asCodeActionContext(context, token) {
        if (context === undefined || context === null) {
            return context;
        }
        let only;
        if (context.only && Is.string(context.only.value)) {
            only = [context.only.value];
        }
        return proto.CodeActionContext.create(await asDiagnostics(context.diagnostics, token), only, asCodeActionTriggerKind(context.triggerKind));
    }
    function asCodeActionTriggerKind(kind) {
        switch (kind) {
            case code.CodeActionTriggerKind.Invoke:
                return proto.CodeActionTriggerKind.Invoked;
            case code.CodeActionTriggerKind.Automatic:
                return proto.CodeActionTriggerKind.Automatic;
            default:
                return undefined;
        }
    }
    function asCodeActionKind(item) {
        if (item === undefined || item === null) {
            return undefined;
        }
        return item.value;
    }
    function asInlineValueContext(context) {
        if (context === undefined || context === null) {
            return context;
        }
        return proto.InlineValueContext.create(context.frameId, asRange(context.stoppedLocation));
    }
    function asCommand(item) {
        let result = proto.Command.create(item.title, item.command);
        if (item.arguments) {
            result.arguments = item.arguments;
        }
        return result;
    }
    function asCodeLens(item) {
        let result = proto.CodeLens.create(asRange(item.range));
        if (item.command) {
            result.command = asCommand(item.command);
        }
        if (item instanceof protocolCodeLens_1.default) {
            if (item.data) {
                result.data = item.data;
            }
        }
        return result;
    }
    function asFormattingOptions(options, fileOptions) {
        const result = { tabSize: options.tabSize, insertSpaces: options.insertSpaces };
        if (fileOptions.trimTrailingWhitespace) {
            result.trimTrailingWhitespace = true;
        }
        if (fileOptions.trimFinalNewlines) {
            result.trimFinalNewlines = true;
        }
        if (fileOptions.insertFinalNewline) {
            result.insertFinalNewline = true;
        }
        return result;
    }
    function asDocumentSymbolParams(textDocument) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument)
        };
    }
    function asCodeLensParams(textDocument) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument)
        };
    }
    function asDocumentLink(item) {
        let result = proto.DocumentLink.create(asRange(item.range));
        if (item.target) {
            result.target = asUri(item.target);
        }
        if (item.tooltip !== undefined) {
            result.tooltip = item.tooltip;
        }
        let protocolItem = item instanceof protocolDocumentLink_1.default ? item : undefined;
        if (protocolItem && protocolItem.data) {
            result.data = protocolItem.data;
        }
        return result;
    }
    function asDocumentLinkParams(textDocument) {
        return {
            textDocument: asTextDocumentIdentifier(textDocument)
        };
    }
    function asCallHierarchyItem(value) {
        const result = {
            name: value.name,
            kind: asSymbolKind(value.kind),
            uri: asUri(value.uri),
            range: asRange(value.range),
            selectionRange: asRange(value.selectionRange)
        };
        if (value.detail !== undefined && value.detail.length > 0) {
            result.detail = value.detail;
        }
        if (value.tags !== undefined) {
            result.tags = asSymbolTags(value.tags);
        }
        if (value instanceof protocolCallHierarchyItem_1.default && value.data !== undefined) {
            result.data = value.data;
        }
        return result;
    }
    function asTypeHierarchyItem(value) {
        const result = {
            name: value.name,
            kind: asSymbolKind(value.kind),
            uri: asUri(value.uri),
            range: asRange(value.range),
            selectionRange: asRange(value.selectionRange),
        };
        if (value.detail !== undefined && value.detail.length > 0) {
            result.detail = value.detail;
        }
        if (value.tags !== undefined) {
            result.tags = asSymbolTags(value.tags);
        }
        if (value instanceof protocolTypeHierarchyItem_1.default && value.data !== undefined) {
            result.data = value.data;
        }
        return result;
    }
    function asWorkspaceSymbol(item) {
        const result = item instanceof protocolWorkspaceSymbol_1.default
            ? { name: item.name, kind: asSymbolKind(item.kind), location: item.hasRange ? asLocation(item.location) : { uri: _uriConverter(item.location.uri) }, data: item.data }
            : { name: item.name, kind: asSymbolKind(item.kind), location: asLocation(item.location) };
        if (item.tags !== undefined) {
            result.tags = asSymbolTags(item.tags);
        }
        if (item.containerName !== '') {
            result.containerName = item.containerName;
        }
        return result;
    }
    function asInlayHint(item) {
        const label = typeof item.label === 'string'
            ? item.label
            : item.label.map(asInlayHintLabelPart);
        const result = proto.InlayHint.create(asPosition(item.position), label);
        if (item.kind !== undefined) {
            result.kind = item.kind;
        }
        if (item.textEdits !== undefined) {
            result.textEdits = asTextEdits(item.textEdits);
        }
        if (item.tooltip !== undefined) {
            result.tooltip = asTooltip(item.tooltip);
        }
        if (item.paddingLeft !== undefined) {
            result.paddingLeft = item.paddingLeft;
        }
        if (item.paddingRight !== undefined) {
            result.paddingRight = item.paddingRight;
        }
        if (item instanceof protocolInlayHint_1.default && item.data !== undefined) {
            result.data = item.data;
        }
        return result;
    }
    function asInlayHintLabelPart(item) {
        const result = proto.InlayHintLabelPart.create(item.value);
        if (item.location !== undefined) {
            result.location = asLocation(item.location);
        }
        if (item.command !== undefined) {
            result.command = asCommand(item.command);
        }
        if (item.tooltip !== undefined) {
            result.tooltip = asTooltip(item.tooltip);
        }
        return result;
    }
    function asTooltip(value) {
        if (typeof value === 'string') {
            return value;
        }
        const result = {
            kind: proto.MarkupKind.Markdown,
            value: value.value
        };
        return result;
    }
    return {
        asUri,
        asTextDocumentIdentifier,
        asTextDocumentItem,
        asVersionedTextDocumentIdentifier,
        asOpenTextDocumentParams,
        asChangeTextDocumentParams,
        asCloseTextDocumentParams,
        asSaveTextDocumentParams,
        asWillSaveTextDocumentParams,
        asDidCreateFilesParams,
        asDidRenameFilesParams,
        asDidDeleteFilesParams,
        asWillCreateFilesParams,
        asWillRenameFilesParams,
        asWillDeleteFilesParams,
        asTextDocumentPositionParams,
        asCompletionParams,
        asSignatureHelpParams,
        asWorkerPosition,
        asRange,
        asPosition,
        asPositions,
        asLocation,
        asDiagnosticSeverity,
        asDiagnosticTag,
        asDiagnostic,
        asDiagnostics,
        asCompletionItem,
        asTextEdit,
        asSymbolKind,
        asSymbolTag,
        asSymbolTags,
        asReferenceParams,
        asCodeAction,
        asCodeActionContext,
        asInlineValueContext,
        asCommand,
        asCodeLens,
        asFormattingOptions,
        asDocumentSymbolParams,
        asCodeLensParams,
        asDocumentLink,
        asDocumentLinkParams,
        asCallHierarchyItem,
        asTypeHierarchyItem,
        asInlayHint,
        asWorkspaceSymbol
    };
}
exports.createConverter = createConverter;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/codeLens.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/codeLens.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeLensFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class CodeLensFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.CodeLensRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'codeLens').dynamicRegistration = true;
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'codeLens').refreshSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.CodeLensRefreshRequest.type, async () => {
            for (const provider of this.getAllProviders()) {
                provider.onDidChangeCodeLensEmitter.fire();
            }
        });
        const options = this.getRegistrationOptions(documentSelector, capabilities.codeLensProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const eventEmitter = new vscode_1.EventEmitter();
        const provider = {
            onDidChangeCodeLenses: eventEmitter.event,
            provideCodeLenses: (document, token) => {
                const client = this._client;
                const provideCodeLenses = (document, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, client.code2ProtocolConverter.asCodeLensParams(document), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asCodeLenses(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideCodeLenses
                    ? middleware.provideCodeLenses(document, token, provideCodeLenses)
                    : provideCodeLenses(document, token);
            },
            resolveCodeLens: (options.resolveProvider)
                ? (codeLens, token) => {
                    const client = this._client;
                    const resolveCodeLens = (codeLens, token) => {
                        return client.sendRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, client.code2ProtocolConverter.asCodeLens(codeLens), token).then((result) => {
                            if (token.isCancellationRequested) {
                                return codeLens;
                            }
                            return client.protocol2CodeConverter.asCodeLens(result);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, token, error, codeLens);
                        });
                    };
                    const middleware = client.middleware;
                    return middleware.resolveCodeLens
                        ? middleware.resolveCodeLens(codeLens, token, resolveCodeLens)
                        : resolveCodeLens(codeLens, token);
                }
                : undefined
        };
        return [vscode_1.languages.registerCodeLensProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), { provider, onDidChangeCodeLensEmitter: eventEmitter }];
    }
}
exports.CodeLensFeature = CodeLensFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/colorProvider.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/colorProvider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorProviderFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class ColorProviderFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentColorRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'colorProvider').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.colorProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideColorPresentations: (color, context, token) => {
                const client = this._client;
                const provideColorPresentations = (color, context, token) => {
                    const requestParams = {
                        color,
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),
                        range: client.code2ProtocolConverter.asRange(context.range)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return this._client.protocol2CodeConverter.asColorPresentations(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideColorPresentations
                    ? middleware.provideColorPresentations(color, context, token, provideColorPresentations)
                    : provideColorPresentations(color, context, token);
            },
            provideDocumentColors: (document, token) => {
                const client = this._client;
                const provideDocumentColors = (document, token) => {
                    const requestParams = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return this._client.protocol2CodeConverter.asColorInformations(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDocumentColors
                    ? middleware.provideDocumentColors(document, token, provideDocumentColors)
                    : provideDocumentColors(document, token);
            }
        };
        return [vscode_1.languages.registerColorProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.ColorProviderFeature = ColorProviderFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/completion.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/completion.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompletionItemFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const SupportedCompletionItemKinds = [
    vscode_languageserver_protocol_1.CompletionItemKind.Text,
    vscode_languageserver_protocol_1.CompletionItemKind.Method,
    vscode_languageserver_protocol_1.CompletionItemKind.Function,
    vscode_languageserver_protocol_1.CompletionItemKind.Constructor,
    vscode_languageserver_protocol_1.CompletionItemKind.Field,
    vscode_languageserver_protocol_1.CompletionItemKind.Variable,
    vscode_languageserver_protocol_1.CompletionItemKind.Class,
    vscode_languageserver_protocol_1.CompletionItemKind.Interface,
    vscode_languageserver_protocol_1.CompletionItemKind.Module,
    vscode_languageserver_protocol_1.CompletionItemKind.Property,
    vscode_languageserver_protocol_1.CompletionItemKind.Unit,
    vscode_languageserver_protocol_1.CompletionItemKind.Value,
    vscode_languageserver_protocol_1.CompletionItemKind.Enum,
    vscode_languageserver_protocol_1.CompletionItemKind.Keyword,
    vscode_languageserver_protocol_1.CompletionItemKind.Snippet,
    vscode_languageserver_protocol_1.CompletionItemKind.Color,
    vscode_languageserver_protocol_1.CompletionItemKind.File,
    vscode_languageserver_protocol_1.CompletionItemKind.Reference,
    vscode_languageserver_protocol_1.CompletionItemKind.Folder,
    vscode_languageserver_protocol_1.CompletionItemKind.EnumMember,
    vscode_languageserver_protocol_1.CompletionItemKind.Constant,
    vscode_languageserver_protocol_1.CompletionItemKind.Struct,
    vscode_languageserver_protocol_1.CompletionItemKind.Event,
    vscode_languageserver_protocol_1.CompletionItemKind.Operator,
    vscode_languageserver_protocol_1.CompletionItemKind.TypeParameter
];
class CompletionItemFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.CompletionRequest.type);
        this.labelDetailsSupport = new Map();
    }
    fillClientCapabilities(capabilities) {
        let completion = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'completion');
        completion.dynamicRegistration = true;
        completion.contextSupport = true;
        completion.completionItem = {
            snippetSupport: true,
            commitCharactersSupport: true,
            documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText],
            deprecatedSupport: true,
            preselectSupport: true,
            tagSupport: { valueSet: [vscode_languageserver_protocol_1.CompletionItemTag.Deprecated] },
            insertReplaceSupport: true,
            resolveSupport: {
                properties: ['documentation', 'detail', 'additionalTextEdits']
            },
            insertTextModeSupport: { valueSet: [vscode_languageserver_protocol_1.InsertTextMode.asIs, vscode_languageserver_protocol_1.InsertTextMode.adjustIndentation] },
            labelDetailsSupport: true
        };
        completion.insertTextMode = vscode_languageserver_protocol_1.InsertTextMode.adjustIndentation;
        completion.completionItemKind = { valueSet: SupportedCompletionItemKinds };
        completion.completionList = {
            itemDefaults: [
                'commitCharacters', 'editRange', 'insertTextFormat', 'insertTextMode'
            ]
        };
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.completionProvider);
        if (!options) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: options
        });
    }
    registerLanguageProvider(options, id) {
        this.labelDetailsSupport.set(id, !!options.completionItem?.labelDetailsSupport);
        const triggerCharacters = options.triggerCharacters ?? [];
        const defaultCommitCharacters = options.allCommitCharacters;
        const selector = options.documentSelector;
        const provider = {
            provideCompletionItems: (document, position, token, context) => {
                const client = this._client;
                const middleware = this._client.middleware;
                const provideCompletionItems = (document, position, context, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.CompletionRequest.type, client.code2ProtocolConverter.asCompletionParams(document, position, context), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asCompletionResult(result, defaultCommitCharacters, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.CompletionRequest.type, token, error, null);
                    });
                };
                return middleware.provideCompletionItem
                    ? middleware.provideCompletionItem(document, position, context, token, provideCompletionItems)
                    : provideCompletionItems(document, position, context, token);
            },
            resolveCompletionItem: options.resolveProvider
                ? (item, token) => {
                    const client = this._client;
                    const middleware = this._client.middleware;
                    const resolveCompletionItem = (item, token) => {
                        return client.sendRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, client.code2ProtocolConverter.asCompletionItem(item, !!this.labelDetailsSupport.get(id)), token).then((result) => {
                            if (token.isCancellationRequested) {
                                return null;
                            }
                            return client.protocol2CodeConverter.asCompletionItem(result);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, token, error, item);
                        });
                    };
                    return middleware.resolveCompletionItem
                        ? middleware.resolveCompletionItem(item, token, resolveCompletionItem)
                        : resolveCompletionItem(item, token);
                }
                : undefined
        };
        return [vscode_1.languages.registerCompletionItemProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, ...triggerCharacters), provider];
    }
}
exports.CompletionItemFeature = CompletionItemFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/configuration.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/configuration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SyncConfigurationFeature = exports.toJSONObject = exports.ConfigurationFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
/**
 * Configuration pull model. From server to client.
 */
class ConfigurationFeature {
    constructor(client) {
        this._client = client;
    }
    getState() {
        return { kind: 'static' };
    }
    fillClientCapabilities(capabilities) {
        capabilities.workspace = capabilities.workspace || {};
        capabilities.workspace.configuration = true;
    }
    initialize() {
        let client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, (params, token) => {
            let configuration = (params) => {
                let result = [];
                for (let item of params.items) {
                    let resource = item.scopeUri !== void 0 && item.scopeUri !== null ? this._client.protocol2CodeConverter.asUri(item.scopeUri) : undefined;
                    result.push(this.getConfiguration(resource, item.section !== null ? item.section : undefined));
                }
                return result;
            };
            let middleware = client.middleware.workspace;
            return middleware && middleware.configuration
                ? middleware.configuration(params, token, configuration)
                : configuration(params, token);
        });
    }
    getConfiguration(resource, section) {
        let result = null;
        if (section) {
            let index = section.lastIndexOf('.');
            if (index === -1) {
                result = toJSONObject(vscode_1.workspace.getConfiguration(undefined, resource).get(section));
            }
            else {
                let config = vscode_1.workspace.getConfiguration(section.substr(0, index), resource);
                if (config) {
                    result = toJSONObject(config.get(section.substr(index + 1)));
                }
            }
        }
        else {
            let config = vscode_1.workspace.getConfiguration(undefined, resource);
            result = {};
            for (let key of Object.keys(config)) {
                if (config.has(key)) {
                    result[key] = toJSONObject(config.get(key));
                }
            }
        }
        if (result === undefined) {
            result = null;
        }
        return result;
    }
    dispose() {
    }
}
exports.ConfigurationFeature = ConfigurationFeature;
function toJSONObject(obj) {
    if (obj) {
        if (Array.isArray(obj)) {
            return obj.map(toJSONObject);
        }
        else if (typeof obj === 'object') {
            const res = Object.create(null);
            for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    res[key] = toJSONObject(obj[key]);
                }
            }
            return res;
        }
    }
    return obj;
}
exports.toJSONObject = toJSONObject;
class SyncConfigurationFeature {
    constructor(_client) {
        this._client = _client;
        this.isDisposed = false;
        this._listeners = new Map();
    }
    getState() {
        return { kind: 'workspace', id: this.registrationType.method, registrations: this._listeners.size > 0 };
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeConfiguration').dynamicRegistration = true;
    }
    initialize() {
        let section = this._client.clientOptions.synchronize?.configurationSection;
        if (section !== undefined) {
            this.register({
                id: UUID.generateUuid(),
                registerOptions: {
                    section: section
                }
            });
        }
    }
    register(data) {
        let disposable = vscode_1.workspace.onDidChangeConfiguration((event) => {
            this.onDidChangeConfiguration(data.registerOptions.section, event);
        });
        this._listeners.set(data.id, disposable);
        if (data.registerOptions.section !== undefined) {
            this.onDidChangeConfiguration(data.registerOptions.section, undefined);
        }
    }
    unregister(id) {
        let disposable = this._listeners.get(id);
        if (disposable) {
            this._listeners.delete(id);
            disposable.dispose();
        }
    }
    dispose() {
        for (const disposable of this._listeners.values()) {
            disposable.dispose();
        }
        this._listeners.clear();
        this.isDisposed = true;
    }
    onDidChangeConfiguration(configurationSection, event) {
        if (this.isDisposed) {
            return;
        }
        let sections;
        if (Is.string(configurationSection)) {
            sections = [configurationSection];
        }
        else {
            sections = configurationSection;
        }
        if (sections !== undefined && event !== undefined) {
            let affected = sections.some((section) => event.affectsConfiguration(section));
            if (!affected) {
                return;
            }
        }
        const didChangeConfiguration = async (sections) => {
            if (sections === undefined) {
                return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: null });
            }
            else {
                return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, { settings: this.extractSettingsInformation(sections) });
            }
        };
        let middleware = this._client.middleware.workspace?.didChangeConfiguration;
        (middleware ? middleware(sections, didChangeConfiguration) : didChangeConfiguration(sections)).catch((error) => {
            this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type.method} failed`, error);
        });
    }
    extractSettingsInformation(keys) {
        function ensurePath(config, path) {
            let current = config;
            for (let i = 0; i < path.length - 1; i++) {
                let obj = current[path[i]];
                if (!obj) {
                    obj = Object.create(null);
                    current[path[i]] = obj;
                }
                current = obj;
            }
            return current;
        }
        let resource = this._client.clientOptions.workspaceFolder
            ? this._client.clientOptions.workspaceFolder.uri
            : undefined;
        let result = Object.create(null);
        for (let i = 0; i < keys.length; i++) {
            let key = keys[i];
            let index = key.indexOf('.');
            let config = null;
            if (index >= 0) {
                config = vscode_1.workspace.getConfiguration(key.substr(0, index), resource).get(key.substr(index + 1));
            }
            else {
                config = vscode_1.workspace.getConfiguration(undefined, resource).get(key);
            }
            if (config) {
                let path = keys[i].split('.');
                ensurePath(result, path)[path[path.length - 1]] = toJSONObject(config);
            }
        }
        return result;
    }
}
exports.SyncConfigurationFeature = SyncConfigurationFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/declaration.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/declaration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class DeclarationFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DeclarationRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const declarationSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'declaration');
        declarationSupport.dynamicRegistration = true;
        declarationSupport.linkSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const [id, options] = this.getRegistration(documentSelector, capabilities.declarationProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDeclaration: (document, position, token) => {
                const client = this._client;
                const provideDeclaration = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDeclarationResult(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDeclaration
                    ? middleware.provideDeclaration(document, position, token, provideDeclaration)
                    : provideDeclaration(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerDeclarationProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.DeclarationFeature = DeclarationFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/definition.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/definition.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefinitionFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class DefinitionFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DefinitionRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let definitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'definition');
        definitionSupport.dynamicRegistration = true;
        definitionSupport.linkSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.definitionProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDefinition: (document, position, token) => {
                const client = this._client;
                const provideDefinition = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDefinitionResult(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDefinition
                    ? middleware.provideDefinition(document, position, token, provideDefinition)
                    : provideDefinition(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.DefinitionFeature = DefinitionFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/diagnostic.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/diagnostic.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticFeature = exports.DiagnosticPullMode = exports.vsdiag = void 0;
const minimatch = __webpack_require__(/*! minimatch */ "./node_modules/vscode-languageclient/node_modules/minimatch/minimatch.js");
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const uuid_1 = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
var vsdiag;
(function (vsdiag) {
    let DocumentDiagnosticReportKind;
    (function (DocumentDiagnosticReportKind) {
        DocumentDiagnosticReportKind["full"] = "full";
        DocumentDiagnosticReportKind["unChanged"] = "unChanged";
    })(DocumentDiagnosticReportKind = vsdiag.DocumentDiagnosticReportKind || (vsdiag.DocumentDiagnosticReportKind = {}));
})(vsdiag = exports.vsdiag || (exports.vsdiag = {}));
var DiagnosticPullMode;
(function (DiagnosticPullMode) {
    DiagnosticPullMode["onType"] = "onType";
    DiagnosticPullMode["onSave"] = "onSave";
})(DiagnosticPullMode = exports.DiagnosticPullMode || (exports.DiagnosticPullMode = {}));
var RequestStateKind;
(function (RequestStateKind) {
    RequestStateKind["active"] = "open";
    RequestStateKind["reschedule"] = "reschedule";
    RequestStateKind["outDated"] = "drop";
})(RequestStateKind || (RequestStateKind = {}));
/**
 * Manages the open tabs. We don't directly use the tab API since for
 * diagnostics we need to de-dupe tabs that show the same resources since
 * we pull on the model not the UI.
 */
class Tabs {
    constructor() {
        this.open = new Set();
        this._onOpen = new vscode_1.EventEmitter();
        this._onClose = new vscode_1.EventEmitter();
        Tabs.fillTabResources(this.open);
        const openTabsHandler = (event) => {
            if (event.closed.length === 0 && event.opened.length === 0) {
                return;
            }
            const oldTabs = this.open;
            const currentTabs = new Set();
            Tabs.fillTabResources(currentTabs);
            const closed = new Set();
            const opened = new Set(currentTabs);
            for (const tab of oldTabs.values()) {
                if (currentTabs.has(tab)) {
                    opened.delete(tab);
                }
                else {
                    closed.add(tab);
                }
            }
            this.open = currentTabs;
            if (closed.size > 0) {
                const toFire = new Set();
                for (const item of closed) {
                    toFire.add(vscode_1.Uri.parse(item));
                }
                this._onClose.fire(toFire);
            }
            if (opened.size > 0) {
                const toFire = new Set();
                for (const item of opened) {
                    toFire.add(vscode_1.Uri.parse(item));
                }
                this._onOpen.fire(toFire);
            }
        };
        if (vscode_1.window.tabGroups.onDidChangeTabs !== undefined) {
            this.disposable = vscode_1.window.tabGroups.onDidChangeTabs(openTabsHandler);
        }
        else {
            this.disposable = { dispose: () => { } };
        }
    }
    get onClose() {
        return this._onClose.event;
    }
    get onOpen() {
        return this._onOpen.event;
    }
    dispose() {
        this.disposable.dispose();
    }
    isActive(document) {
        return document instanceof vscode_1.Uri
            ? vscode_1.window.activeTextEditor?.document.uri === document
            : vscode_1.window.activeTextEditor?.document === document;
    }
    isVisible(document) {
        const uri = document instanceof vscode_1.Uri ? document : document.uri;
        return this.open.has(uri.toString());
    }
    getTabResources() {
        const result = new Set();
        Tabs.fillTabResources(new Set(), result);
        return result;
    }
    static fillTabResources(strings, uris) {
        const seen = strings ?? new Set();
        for (const group of vscode_1.window.tabGroups.all) {
            for (const tab of group.tabs) {
                const input = tab.input;
                let uri;
                if (input instanceof vscode_1.TabInputText) {
                    uri = input.uri;
                }
                else if (input instanceof vscode_1.TabInputTextDiff) {
                    uri = input.modified;
                }
                if (uri !== undefined && !seen.has(uri.toString())) {
                    seen.add(uri.toString());
                    uris !== undefined && uris.add(uri);
                }
            }
        }
    }
}
var PullState;
(function (PullState) {
    PullState[PullState["document"] = 1] = "document";
    PullState[PullState["workspace"] = 2] = "workspace";
})(PullState || (PullState = {}));
var DocumentOrUri;
(function (DocumentOrUri) {
    function asKey(document) {
        return document instanceof vscode_1.Uri ? document.toString() : document.uri.toString();
    }
    DocumentOrUri.asKey = asKey;
})(DocumentOrUri || (DocumentOrUri = {}));
class DocumentPullStateTracker {
    constructor() {
        this.documentPullStates = new Map();
        this.workspacePullStates = new Map();
    }
    track(kind, document, arg1) {
        const states = kind === PullState.document ? this.documentPullStates : this.workspacePullStates;
        const [key, uri, version] = document instanceof vscode_1.Uri
            ? [document.toString(), document, arg1]
            : [document.uri.toString(), document.uri, document.version];
        let state = states.get(key);
        if (state === undefined) {
            state = { document: uri, pulledVersion: version, resultId: undefined };
            states.set(key, state);
        }
        return state;
    }
    update(kind, document, arg1, arg2) {
        const states = kind === PullState.document ? this.documentPullStates : this.workspacePullStates;
        const [key, uri, version, resultId] = document instanceof vscode_1.Uri
            ? [document.toString(), document, arg1, arg2]
            : [document.uri.toString(), document.uri, document.version, arg1];
        let state = states.get(key);
        if (state === undefined) {
            state = { document: uri, pulledVersion: version, resultId };
            states.set(key, state);
        }
        else {
            state.pulledVersion = version;
            state.resultId = resultId;
        }
    }
    unTrack(kind, document) {
        const key = DocumentOrUri.asKey(document);
        const states = kind === PullState.document ? this.documentPullStates : this.workspacePullStates;
        states.delete(key);
    }
    tracks(kind, document) {
        const key = DocumentOrUri.asKey(document);
        const states = kind === PullState.document ? this.documentPullStates : this.workspacePullStates;
        return states.has(key);
    }
    getResultId(kind, document) {
        const key = DocumentOrUri.asKey(document);
        const states = kind === PullState.document ? this.documentPullStates : this.workspacePullStates;
        return states.get(key)?.resultId;
    }
    getAllResultIds() {
        const result = [];
        for (let [uri, value] of this.workspacePullStates) {
            if (this.documentPullStates.has(uri)) {
                value = this.documentPullStates.get(uri);
            }
            if (value.resultId !== undefined) {
                result.push({ uri, value: value.resultId });
            }
        }
        return result;
    }
}
class DiagnosticRequestor {
    constructor(client, tabs, options) {
        this.client = client;
        this.tabs = tabs;
        this.options = options;
        this.isDisposed = false;
        this.onDidChangeDiagnosticsEmitter = new vscode_1.EventEmitter();
        this.provider = this.createProvider();
        this.diagnostics = vscode_1.languages.createDiagnosticCollection(options.identifier);
        this.openRequests = new Map();
        this.documentStates = new DocumentPullStateTracker();
        this.workspaceErrorCounter = 0;
    }
    knows(kind, document) {
        const uri = document instanceof vscode_1.Uri ? document : document.uri;
        return this.documentStates.tracks(kind, document) || this.openRequests.has(uri.toString());
    }
    forget(kind, document) {
        this.documentStates.unTrack(kind, document);
    }
    pull(document, cb) {
        if (this.isDisposed) {
            return;
        }
        const uri = document instanceof vscode_1.Uri ? document : document.uri;
        this.pullAsync(document).then(() => {
            if (cb) {
                cb();
            }
        }, (error) => {
            this.client.error(`Document pull failed for text document ${uri.toString()}`, error, false);
        });
    }
    async pullAsync(document, version) {
        if (this.isDisposed) {
            return;
        }
        const isUri = document instanceof vscode_1.Uri;
        const uri = isUri ? document : document.uri;
        const key = uri.toString();
        version = isUri ? version : document.version;
        const currentRequestState = this.openRequests.get(key);
        const documentState = isUri
            ? this.documentStates.track(PullState.document, document, version)
            : this.documentStates.track(PullState.document, document);
        if (currentRequestState === undefined) {
            const tokenSource = new vscode_1.CancellationTokenSource();
            this.openRequests.set(key, { state: RequestStateKind.active, document: document, version: version, tokenSource });
            let report;
            let afterState;
            try {
                report = await this.provider.provideDiagnostics(document, documentState.resultId, tokenSource.token) ?? { kind: vsdiag.DocumentDiagnosticReportKind.full, items: [] };
            }
            catch (error) {
                if (error instanceof features_1.LSPCancellationError && vscode_languageserver_protocol_1.DiagnosticServerCancellationData.is(error.data) && error.data.retriggerRequest === false) {
                    afterState = { state: RequestStateKind.outDated, document };
                }
                if (afterState === undefined && error instanceof vscode_1.CancellationError) {
                    afterState = { state: RequestStateKind.reschedule, document };
                }
                else {
                    throw error;
                }
            }
            afterState = afterState ?? this.openRequests.get(key);
            if (afterState === undefined) {
                // This shouldn't happen. Log it
                this.client.error(`Lost request state in diagnostic pull model. Clearing diagnostics for ${key}`);
                this.diagnostics.delete(uri);
                return;
            }
            this.openRequests.delete(key);
            if (!this.tabs.isVisible(document)) {
                this.documentStates.unTrack(PullState.document, document);
                return;
            }
            if (afterState.state === RequestStateKind.outDated) {
                return;
            }
            // report is only undefined if the request has thrown.
            if (report !== undefined) {
                if (report.kind === vsdiag.DocumentDiagnosticReportKind.full) {
                    this.diagnostics.set(uri, report.items);
                }
                documentState.pulledVersion = version;
                documentState.resultId = report.resultId;
            }
            if (afterState.state === RequestStateKind.reschedule) {
                this.pull(document);
            }
        }
        else {
            if (currentRequestState.state === RequestStateKind.active) {
                // Cancel the current request and reschedule a new one when the old one returned.
                currentRequestState.tokenSource.cancel();
                this.openRequests.set(key, { state: RequestStateKind.reschedule, document: currentRequestState.document });
            }
            else if (currentRequestState.state === RequestStateKind.outDated) {
                this.openRequests.set(key, { state: RequestStateKind.reschedule, document: currentRequestState.document });
            }
        }
    }
    forgetDocument(document) {
        const uri = document instanceof vscode_1.Uri ? document : document.uri;
        const key = uri.toString();
        const request = this.openRequests.get(key);
        if (this.options.workspaceDiagnostics) {
            // If we run workspace diagnostic pull a last time for the diagnostics
            // and the rely on getting them from the workspace result.
            if (request !== undefined) {
                this.openRequests.set(key, { state: RequestStateKind.reschedule, document: document });
            }
            else {
                this.pull(document, () => {
                    this.forget(PullState.document, document);
                });
            }
        }
        else {
            // We have normal pull or inter file dependencies. In this case we
            // clear the diagnostics (to have the same start as after startup).
            // We also cancel outstanding requests.
            if (request !== undefined) {
                if (request.state === RequestStateKind.active) {
                    request.tokenSource.cancel();
                }
                this.openRequests.set(key, { state: RequestStateKind.outDated, document: document });
            }
            this.diagnostics.delete(uri);
            this.forget(PullState.document, document);
        }
    }
    pullWorkspace() {
        if (this.isDisposed) {
            return;
        }
        this.pullWorkspaceAsync().then(() => {
            this.workspaceTimeout = (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(() => {
                this.pullWorkspace();
            }, 2000);
        }, (error) => {
            if (!(error instanceof features_1.LSPCancellationError) && !vscode_languageserver_protocol_1.DiagnosticServerCancellationData.is(error.data)) {
                this.client.error(`Workspace diagnostic pull failed.`, error, false);
                this.workspaceErrorCounter++;
            }
            if (this.workspaceErrorCounter <= 5) {
                this.workspaceTimeout = (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(() => {
                    this.pullWorkspace();
                }, 2000);
            }
        });
    }
    async pullWorkspaceAsync() {
        if (!this.provider.provideWorkspaceDiagnostics || this.isDisposed) {
            return;
        }
        if (this.workspaceCancellation !== undefined) {
            this.workspaceCancellation.cancel();
            this.workspaceCancellation = undefined;
        }
        this.workspaceCancellation = new vscode_1.CancellationTokenSource();
        const previousResultIds = this.documentStates.getAllResultIds().map((item) => {
            return {
                uri: this.client.protocol2CodeConverter.asUri(item.uri),
                value: item.value
            };
        });
        await this.provider.provideWorkspaceDiagnostics(previousResultIds, this.workspaceCancellation.token, (chunk) => {
            if (!chunk || this.isDisposed) {
                return;
            }
            for (const item of chunk.items) {
                if (item.kind === vsdiag.DocumentDiagnosticReportKind.full) {
                    // Favour document pull result over workspace results. So skip if it is tracked
                    // as a document result.
                    if (!this.documentStates.tracks(PullState.document, item.uri)) {
                        this.diagnostics.set(item.uri, item.items);
                    }
                }
                this.documentStates.update(PullState.workspace, item.uri, item.version ?? undefined, item.resultId);
            }
        });
    }
    createProvider() {
        const result = {
            onDidChangeDiagnostics: this.onDidChangeDiagnosticsEmitter.event,
            provideDiagnostics: (document, previousResultId, token) => {
                const provideDiagnostics = (document, previousResultId, token) => {
                    const params = {
                        identifier: this.options.identifier,
                        textDocument: { uri: this.client.code2ProtocolConverter.asUri(document instanceof vscode_1.Uri ? document : document.uri) },
                        previousResultId: previousResultId
                    };
                    if (this.isDisposed === true || !this.client.isRunning()) {
                        return { kind: vsdiag.DocumentDiagnosticReportKind.full, items: [] };
                    }
                    return this.client.sendRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, params, token).then(async (result) => {
                        if (result === undefined || result === null || this.isDisposed || token.isCancellationRequested) {
                            return { kind: vsdiag.DocumentDiagnosticReportKind.full, items: [] };
                        }
                        if (result.kind === vscode_languageserver_protocol_1.DocumentDiagnosticReportKind.Full) {
                            return { kind: vsdiag.DocumentDiagnosticReportKind.full, resultId: result.resultId, items: await this.client.protocol2CodeConverter.asDiagnostics(result.items, token) };
                        }
                        else {
                            return { kind: vsdiag.DocumentDiagnosticReportKind.unChanged, resultId: result.resultId };
                        }
                    }, (error) => {
                        return this.client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, token, error, { kind: vsdiag.DocumentDiagnosticReportKind.full, items: [] });
                    });
                };
                const middleware = this.client.middleware;
                return middleware.provideDiagnostics
                    ? middleware.provideDiagnostics(document, previousResultId, token, provideDiagnostics)
                    : provideDiagnostics(document, previousResultId, token);
            }
        };
        if (this.options.workspaceDiagnostics) {
            result.provideWorkspaceDiagnostics = (resultIds, token, resultReporter) => {
                const convertReport = async (report) => {
                    if (report.kind === vscode_languageserver_protocol_1.DocumentDiagnosticReportKind.Full) {
                        return {
                            kind: vsdiag.DocumentDiagnosticReportKind.full,
                            uri: this.client.protocol2CodeConverter.asUri(report.uri),
                            resultId: report.resultId,
                            version: report.version,
                            items: await this.client.protocol2CodeConverter.asDiagnostics(report.items, token)
                        };
                    }
                    else {
                        return {
                            kind: vsdiag.DocumentDiagnosticReportKind.unChanged,
                            uri: this.client.protocol2CodeConverter.asUri(report.uri),
                            resultId: report.resultId,
                            version: report.version
                        };
                    }
                };
                const convertPreviousResultIds = (resultIds) => {
                    const converted = [];
                    for (const item of resultIds) {
                        converted.push({ uri: this.client.code2ProtocolConverter.asUri(item.uri), value: item.value });
                    }
                    return converted;
                };
                const provideDiagnostics = (resultIds, token) => {
                    const partialResultToken = (0, uuid_1.generateUuid)();
                    const disposable = this.client.onProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, partialResultToken, async (partialResult) => {
                        if (partialResult === undefined || partialResult === null) {
                            resultReporter(null);
                            return;
                        }
                        const converted = {
                            items: []
                        };
                        for (const item of partialResult.items) {
                            try {
                                converted.items.push(await convertReport(item));
                            }
                            catch (error) {
                                this.client.error(`Converting workspace diagnostics failed.`, error);
                            }
                        }
                        resultReporter(converted);
                    });
                    const params = {
                        identifier: this.options.identifier,
                        previousResultIds: convertPreviousResultIds(resultIds),
                        partialResultToken: partialResultToken
                    };
                    if (this.isDisposed === true || !this.client.isRunning()) {
                        return { items: [] };
                    }
                    return this.client.sendRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, params, token).then(async (result) => {
                        if (token.isCancellationRequested) {
                            return { items: [] };
                        }
                        const converted = {
                            items: []
                        };
                        for (const item of result.items) {
                            converted.items.push(await convertReport(item));
                        }
                        disposable.dispose();
                        resultReporter(converted);
                        return { items: [] };
                    }, (error) => {
                        disposable.dispose();
                        return this.client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, token, error, { items: [] });
                    });
                };
                const middleware = this.client.middleware;
                return middleware.provideWorkspaceDiagnostics
                    ? middleware.provideWorkspaceDiagnostics(resultIds, token, resultReporter, provideDiagnostics)
                    : provideDiagnostics(resultIds, token, resultReporter);
            };
        }
        return result;
    }
    dispose() {
        this.isDisposed = true;
        // Cancel and clear workspace pull if present.
        this.workspaceCancellation?.cancel();
        this.workspaceTimeout?.dispose();
        // Cancel all request and mark open requests as outdated.
        for (const [key, request] of this.openRequests) {
            if (request.state === RequestStateKind.active) {
                request.tokenSource.cancel();
            }
            this.openRequests.set(key, { state: RequestStateKind.outDated, document: request.document });
        }
        // cleanup old diagnostics
        this.diagnostics.dispose();
    }
}
class BackgroundScheduler {
    constructor(diagnosticRequestor) {
        this.diagnosticRequestor = diagnosticRequestor;
        this.documents = new vscode_languageserver_protocol_1.LinkedMap();
        this.isDisposed = false;
    }
    add(document) {
        if (this.isDisposed === true) {
            return;
        }
        const key = DocumentOrUri.asKey(document);
        if (this.documents.has(key)) {
            return;
        }
        this.documents.set(key, document, vscode_languageserver_protocol_1.Touch.Last);
        this.trigger();
    }
    remove(document) {
        const key = DocumentOrUri.asKey(document);
        this.documents.delete(key);
        // No more documents. Stop background activity.
        if (this.documents.size === 0) {
            this.stop();
        }
        else if (key === this.endDocumentKey()) {
            // Make sure we have a correct last document. It could have
            this.endDocument = this.documents.last;
        }
    }
    trigger() {
        if (this.isDisposed === true) {
            return;
        }
        // We have a round running. So simply make sure we run up to the
        // last document
        if (this.intervalHandle !== undefined) {
            this.endDocument = this.documents.last;
            return;
        }
        this.endDocument = this.documents.last;
        this.intervalHandle = (0, vscode_languageserver_protocol_1.RAL)().timer.setInterval(() => {
            const document = this.documents.first;
            if (document !== undefined) {
                const key = DocumentOrUri.asKey(document);
                this.diagnosticRequestor.pull(document);
                this.documents.set(key, document, vscode_languageserver_protocol_1.Touch.Last);
                if (key === this.endDocumentKey()) {
                    this.stop();
                }
            }
        }, 200);
    }
    dispose() {
        this.isDisposed = true;
        this.stop();
        this.documents.clear();
    }
    stop() {
        this.intervalHandle?.dispose();
        this.intervalHandle = undefined;
        this.endDocument = undefined;
    }
    endDocumentKey() {
        return this.endDocument !== undefined ? DocumentOrUri.asKey(this.endDocument) : undefined;
    }
}
class DiagnosticFeatureProviderImpl {
    constructor(client, tabs, options) {
        const diagnosticPullOptions = client.clientOptions.diagnosticPullOptions ?? { onChange: true, onSave: false };
        const documentSelector = client.protocol2CodeConverter.asDocumentSelector(options.documentSelector);
        const disposables = [];
        const matchResource = (resource) => {
            const selector = options.documentSelector;
            if (diagnosticPullOptions.match !== undefined) {
                return diagnosticPullOptions.match(selector, resource);
            }
            for (const filter of selector) {
                if (!vscode_languageserver_protocol_1.TextDocumentFilter.is(filter)) {
                    continue;
                }
                // The filter is a language id. We can't determine if it matches
                // so we return false.
                if (typeof filter === 'string') {
                    return false;
                }
                if (filter.language !== undefined && filter.language !== '*') {
                    return false;
                }
                if (filter.scheme !== undefined && filter.scheme !== '*' && filter.scheme !== resource.scheme) {
                    return false;
                }
                if (filter.pattern !== undefined) {
                    const matcher = new minimatch.Minimatch(filter.pattern, { noext: true });
                    if (!matcher.makeRe()) {
                        return false;
                    }
                    if (!matcher.match(resource.fsPath)) {
                        return false;
                    }
                }
            }
            return true;
        };
        const matches = (document) => {
            return document instanceof vscode_1.Uri
                ? matchResource(document)
                : vscode_1.languages.match(documentSelector, document) > 0 && tabs.isVisible(document);
        };
        const isActiveDocument = (document) => {
            return document instanceof vscode_1.Uri
                ? this.activeTextDocument?.uri.toString() === document.toString()
                : this.activeTextDocument === document;
        };
        this.diagnosticRequestor = new DiagnosticRequestor(client, tabs, options);
        this.backgroundScheduler = new BackgroundScheduler(this.diagnosticRequestor);
        const addToBackgroundIfNeeded = (document) => {
            if (!matches(document) || !options.interFileDependencies || isActiveDocument(document)) {
                return;
            }
            this.backgroundScheduler.add(document);
        };
        this.activeTextDocument = vscode_1.window.activeTextEditor?.document;
        vscode_1.window.onDidChangeActiveTextEditor((editor) => {
            const oldActive = this.activeTextDocument;
            this.activeTextDocument = editor?.document;
            if (oldActive !== undefined) {
                addToBackgroundIfNeeded(oldActive);
            }
            if (this.activeTextDocument !== undefined) {
                this.backgroundScheduler.remove(this.activeTextDocument);
            }
        });
        // For pull model diagnostics we pull for documents visible in the UI.
        // From an eventing point of view we still rely on open document events
        // and filter the documents that are not visible in the UI instead of
        // listening to Tab events. Major reason is event timing since we need
        // to ensure that the pull is send after the document open has reached
        // the server.
        // We always pull on open.
        const openFeature = client.getFeature(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.method);
        disposables.push(openFeature.onNotificationSent((event) => {
            const textDocument = event.textDocument;
            // We already know about this document. This can happen via a tab open.
            if (this.diagnosticRequestor.knows(PullState.document, textDocument)) {
                return;
            }
            if (matches(textDocument)) {
                this.diagnosticRequestor.pull(textDocument, () => { addToBackgroundIfNeeded(textDocument); });
            }
        }));
        tabs.onOpen((opened) => {
            for (const resource of opened) {
                // We already know about this document. This can happen via a document open.
                if (this.diagnosticRequestor.knows(PullState.document, resource)) {
                    continue;
                }
                const uriStr = resource.toString();
                let textDocument;
                for (const item of vscode_1.workspace.textDocuments) {
                    if (uriStr === item.uri.toString()) {
                        textDocument = item;
                        break;
                    }
                }
                // We have an open document for the resource behind the tab.
                if (textDocument !== undefined && matches(textDocument)) {
                    this.diagnosticRequestor.pull(textDocument, () => { addToBackgroundIfNeeded(textDocument); });
                }
                else if (matches(resource)) {
                    // Check if the resource matches
                    this.diagnosticRequestor.pull(resource, () => { addToBackgroundIfNeeded(resource); });
                }
            }
        });
        // Pull all diagnostics for documents that are already open
        const pulledTextDocuments = new Set();
        for (const textDocument of vscode_1.workspace.textDocuments) {
            if (matches(textDocument)) {
                this.diagnosticRequestor.pull(textDocument, () => { addToBackgroundIfNeeded(textDocument); });
                pulledTextDocuments.add(textDocument.uri.toString());
            }
        }
        // Pull all tabs if not already pulled as text document
        if (diagnosticPullOptions.onTabs === true) {
            for (const resource of tabs.getTabResources()) {
                if (!pulledTextDocuments.has(resource.toString()) && matches(resource)) {
                    this.diagnosticRequestor.pull(resource, () => { addToBackgroundIfNeeded(resource); });
                }
            }
        }
        // We don't need to pull on tab open since we will receive a document open as well later on
        // and that event allows us to use a document for a match check which will have a set
        // language id.
        if (diagnosticPullOptions.onChange === true) {
            const changeFeature = client.getFeature(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.method);
            disposables.push(changeFeature.onNotificationSent(async (event) => {
                const textDocument = event.textDocument;
                if ((diagnosticPullOptions.filter === undefined || !diagnosticPullOptions.filter(textDocument, DiagnosticPullMode.onType)) && this.diagnosticRequestor.knows(PullState.document, textDocument)) {
                    this.diagnosticRequestor.pull(textDocument, () => { this.backgroundScheduler.trigger(); });
                }
            }));
        }
        if (diagnosticPullOptions.onSave === true) {
            const saveFeature = client.getFeature(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.method);
            disposables.push(saveFeature.onNotificationSent((event) => {
                const textDocument = event.textDocument;
                if ((diagnosticPullOptions.filter === undefined || !diagnosticPullOptions.filter(textDocument, DiagnosticPullMode.onSave)) && this.diagnosticRequestor.knows(PullState.document, textDocument)) {
                    this.diagnosticRequestor.pull(event.textDocument, () => { this.backgroundScheduler.trigger(); });
                }
            }));
        }
        // When the document closes clear things up
        const closeFeature = client.getFeature(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.method);
        disposables.push(closeFeature.onNotificationSent((event) => {
            this.cleanUpDocument(event.textDocument);
        }));
        // Same when a tabs closes.
        tabs.onClose((closed) => {
            for (const document of closed) {
                this.cleanUpDocument(document);
            }
        });
        // We received a did change from the server.
        this.diagnosticRequestor.onDidChangeDiagnosticsEmitter.event(() => {
            for (const textDocument of vscode_1.workspace.textDocuments) {
                if (matches(textDocument)) {
                    this.diagnosticRequestor.pull(textDocument);
                }
            }
        });
        // da348dc5-c30a-4515-9d98-31ff3be38d14 is the test UUID to test the middle ware. So don't auto trigger pulls.
        if (options.workspaceDiagnostics === true && options.identifier !== 'da348dc5-c30a-4515-9d98-31ff3be38d14') {
            this.diagnosticRequestor.pullWorkspace();
        }
        this.disposable = vscode_1.Disposable.from(...disposables, this.backgroundScheduler, this.diagnosticRequestor);
    }
    get onDidChangeDiagnosticsEmitter() {
        return this.diagnosticRequestor.onDidChangeDiagnosticsEmitter;
    }
    get diagnostics() {
        return this.diagnosticRequestor.provider;
    }
    cleanUpDocument(document) {
        if (this.diagnosticRequestor.knows(PullState.document, document)) {
            this.diagnosticRequestor.forgetDocument(document);
            this.backgroundScheduler.remove(document);
        }
    }
}
class DiagnosticFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let capability = ensure(ensure(capabilities, 'textDocument'), 'diagnostic');
        capability.dynamicRegistration = true;
        // We first need to decide how a UI will look with related documents.
        // An easy implementation would be to only show related diagnostics for
        // the active editor.
        capability.relatedDocumentSupport = false;
        ensure(ensure(capabilities, 'workspace'), 'diagnostics').refreshSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type, async () => {
            for (const provider of this.getAllProviders()) {
                provider.onDidChangeDiagnosticsEmitter.fire();
            }
        });
        let [id, options] = this.getRegistration(documentSelector, capabilities.diagnosticProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    dispose() {
        if (this.tabs !== undefined) {
            this.tabs.dispose();
            this.tabs = undefined;
        }
        super.dispose();
    }
    registerLanguageProvider(options) {
        if (this.tabs === undefined) {
            this.tabs = new Tabs();
        }
        const provider = new DiagnosticFeatureProviderImpl(this._client, this.tabs, options);
        return [provider.disposable, provider];
    }
}
exports.DiagnosticFeature = DiagnosticFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/documentHighlight.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/documentHighlight.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentHighlightFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class DocumentHighlightFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentHighlightRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentHighlight').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentHighlightProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDocumentHighlights: (document, position, token) => {
                const client = this._client;
                const _provideDocumentHighlights = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDocumentHighlights(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDocumentHighlights
                    ? middleware.provideDocumentHighlights(document, position, token, _provideDocumentHighlights)
                    : _provideDocumentHighlights(document, position, token);
            }
        };
        return [vscode_1.languages.registerDocumentHighlightProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.DocumentHighlightFeature = DocumentHighlightFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/documentLink.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/documentLink.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentLinkFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class DocumentLinkFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentLinkRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const documentLinkCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentLink');
        documentLinkCapabilities.dynamicRegistration = true;
        documentLinkCapabilities.tooltipSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentLinkProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDocumentLinks: (document, token) => {
                const client = this._client;
                const provideDocumentLinks = (document, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, client.code2ProtocolConverter.asDocumentLinkParams(document), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDocumentLinks(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDocumentLinks
                    ? middleware.provideDocumentLinks(document, token, provideDocumentLinks)
                    : provideDocumentLinks(document, token);
            },
            resolveDocumentLink: options.resolveProvider
                ? (link, token) => {
                    const client = this._client;
                    let resolveDocumentLink = (link, token) => {
                        return client.sendRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, client.code2ProtocolConverter.asDocumentLink(link), token).then((result) => {
                            if (token.isCancellationRequested) {
                                return link;
                            }
                            return client.protocol2CodeConverter.asDocumentLink(result);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, token, error, link);
                        });
                    };
                    const middleware = client.middleware;
                    return middleware.resolveDocumentLink
                        ? middleware.resolveDocumentLink(link, token, resolveDocumentLink)
                        : resolveDocumentLink(link, token);
                }
                : undefined
        };
        return [vscode_1.languages.registerDocumentLinkProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.DocumentLinkFeature = DocumentLinkFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/documentSymbol.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/documentSymbol.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentSymbolFeature = exports.SupportedSymbolTags = exports.SupportedSymbolKinds = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
exports.SupportedSymbolKinds = [
    vscode_languageserver_protocol_1.SymbolKind.File,
    vscode_languageserver_protocol_1.SymbolKind.Module,
    vscode_languageserver_protocol_1.SymbolKind.Namespace,
    vscode_languageserver_protocol_1.SymbolKind.Package,
    vscode_languageserver_protocol_1.SymbolKind.Class,
    vscode_languageserver_protocol_1.SymbolKind.Method,
    vscode_languageserver_protocol_1.SymbolKind.Property,
    vscode_languageserver_protocol_1.SymbolKind.Field,
    vscode_languageserver_protocol_1.SymbolKind.Constructor,
    vscode_languageserver_protocol_1.SymbolKind.Enum,
    vscode_languageserver_protocol_1.SymbolKind.Interface,
    vscode_languageserver_protocol_1.SymbolKind.Function,
    vscode_languageserver_protocol_1.SymbolKind.Variable,
    vscode_languageserver_protocol_1.SymbolKind.Constant,
    vscode_languageserver_protocol_1.SymbolKind.String,
    vscode_languageserver_protocol_1.SymbolKind.Number,
    vscode_languageserver_protocol_1.SymbolKind.Boolean,
    vscode_languageserver_protocol_1.SymbolKind.Array,
    vscode_languageserver_protocol_1.SymbolKind.Object,
    vscode_languageserver_protocol_1.SymbolKind.Key,
    vscode_languageserver_protocol_1.SymbolKind.Null,
    vscode_languageserver_protocol_1.SymbolKind.EnumMember,
    vscode_languageserver_protocol_1.SymbolKind.Struct,
    vscode_languageserver_protocol_1.SymbolKind.Event,
    vscode_languageserver_protocol_1.SymbolKind.Operator,
    vscode_languageserver_protocol_1.SymbolKind.TypeParameter
];
exports.SupportedSymbolTags = [
    vscode_languageserver_protocol_1.SymbolTag.Deprecated
];
class DocumentSymbolFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentSymbolRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let symbolCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'documentSymbol');
        symbolCapabilities.dynamicRegistration = true;
        symbolCapabilities.symbolKind = {
            valueSet: exports.SupportedSymbolKinds
        };
        symbolCapabilities.hierarchicalDocumentSymbolSupport = true;
        symbolCapabilities.tagSupport = {
            valueSet: exports.SupportedSymbolTags
        };
        symbolCapabilities.labelSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentSymbolProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDocumentSymbols: (document, token) => {
                const client = this._client;
                const _provideDocumentSymbols = async (document, token) => {
                    try {
                        const data = await client.sendRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, client.code2ProtocolConverter.asDocumentSymbolParams(document), token);
                        if (token.isCancellationRequested || data === undefined || data === null) {
                            return null;
                        }
                        if (data.length === 0) {
                            return [];
                        }
                        else {
                            const first = data[0];
                            if (vscode_languageserver_protocol_1.DocumentSymbol.is(first)) {
                                return await client.protocol2CodeConverter.asDocumentSymbols(data, token);
                            }
                            else {
                                return await client.protocol2CodeConverter.asSymbolInformations(data, token);
                            }
                        }
                    }
                    catch (error) {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, token, error, null);
                    }
                };
                const middleware = client.middleware;
                return middleware.provideDocumentSymbols
                    ? middleware.provideDocumentSymbols(document, token, _provideDocumentSymbols)
                    : _provideDocumentSymbols(document, token);
            }
        };
        const metaData = options.label !== undefined ? { label: options.label } : undefined;
        return [vscode_1.languages.registerDocumentSymbolProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, metaData), provider];
    }
}
exports.DocumentSymbolFeature = DocumentSymbolFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/executeCommand.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/executeCommand.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecuteCommandFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class ExecuteCommandFeature {
    constructor(client) {
        this._client = client;
        this._commands = new Map();
    }
    getState() {
        return { kind: 'workspace', id: this.registrationType.method, registrations: this._commands.size > 0 };
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.ExecuteCommandRequest.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'executeCommand').dynamicRegistration = true;
    }
    initialize(capabilities) {
        if (!capabilities.executeCommandProvider) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: Object.assign({}, capabilities.executeCommandProvider)
        });
    }
    register(data) {
        const client = this._client;
        const middleware = client.middleware;
        const executeCommand = (command, args) => {
            let params = {
                command,
                arguments: args
            };
            return client.sendRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, params).then(undefined, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, undefined, error, undefined);
            });
        };
        if (data.registerOptions.commands) {
            const disposables = [];
            for (const command of data.registerOptions.commands) {
                disposables.push(vscode_1.commands.registerCommand(command, (...args) => {
                    return middleware.executeCommand
                        ? middleware.executeCommand(command, args, executeCommand)
                        : executeCommand(command, args);
                }));
            }
            this._commands.set(data.id, disposables);
        }
    }
    unregister(id) {
        let disposables = this._commands.get(id);
        if (disposables) {
            disposables.forEach(disposable => disposable.dispose());
        }
    }
    dispose() {
        this._commands.forEach((value) => {
            value.forEach(disposable => disposable.dispose());
        });
        this._commands.clear();
    }
}
exports.ExecuteCommandFeature = ExecuteCommandFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/features.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/features.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceFeature = exports.TextDocumentLanguageFeature = exports.TextDocumentEventFeature = exports.DynamicDocumentFeature = exports.DynamicFeature = exports.StaticFeature = exports.ensure = exports.LSPCancellationError = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class LSPCancellationError extends vscode_1.CancellationError {
    constructor(data) {
        super();
        this.data = data;
    }
}
exports.LSPCancellationError = LSPCancellationError;
function ensure(target, key) {
    if (target[key] === undefined) {
        target[key] = {};
    }
    return target[key];
}
exports.ensure = ensure;
var StaticFeature;
(function (StaticFeature) {
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null &&
            Is.func(candidate.fillClientCapabilities) && Is.func(candidate.initialize) && Is.func(candidate.getState) && Is.func(candidate.dispose) &&
            (candidate.fillInitializeParams === undefined || Is.func(candidate.fillInitializeParams));
    }
    StaticFeature.is = is;
})(StaticFeature = exports.StaticFeature || (exports.StaticFeature = {}));
var DynamicFeature;
(function (DynamicFeature) {
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null &&
            Is.func(candidate.fillClientCapabilities) && Is.func(candidate.initialize) && Is.func(candidate.getState) && Is.func(candidate.dispose) &&
            (candidate.fillInitializeParams === undefined || Is.func(candidate.fillInitializeParams)) && Is.func(candidate.register) &&
            Is.func(candidate.unregister) && candidate.registrationType !== undefined;
    }
    DynamicFeature.is = is;
})(DynamicFeature = exports.DynamicFeature || (exports.DynamicFeature = {}));
/**
 * An abstract dynamic feature implementation that operates on documents (e.g. text
 * documents or notebooks).
 */
class DynamicDocumentFeature {
    constructor(client) {
        this._client = client;
    }
    /**
     * Returns the state the feature is in.
     */
    getState() {
        const selectors = this.getDocumentSelectors();
        let count = 0;
        for (const selector of selectors) {
            count++;
            for (const document of vscode_1.workspace.textDocuments) {
                if (vscode_1.languages.match(selector, document) > 0) {
                    return { kind: 'document', id: this.registrationType.method, registrations: true, matches: true };
                }
            }
        }
        const registrations = count > 0;
        return { kind: 'document', id: this.registrationType.method, registrations, matches: false };
    }
}
exports.DynamicDocumentFeature = DynamicDocumentFeature;
/**
 * An abstract base class to implement features that react to events
 * emitted from text documents.
 */
class TextDocumentEventFeature extends DynamicDocumentFeature {
    constructor(client, event, type, middleware, createParams, textDocument, selectorFilter) {
        super(client);
        this._event = event;
        this._type = type;
        this._middleware = middleware;
        this._createParams = createParams;
        this._textDocument = textDocument;
        this._selectorFilter = selectorFilter;
        this._selectors = new Map();
        this._onNotificationSent = new vscode_1.EventEmitter();
    }
    static textDocumentFilter(selectors, textDocument) {
        for (const selector of selectors) {
            if (vscode_1.languages.match(selector, textDocument) > 0) {
                return true;
            }
        }
        return false;
    }
    getStateInfo() {
        return [this._selectors.values(), false];
    }
    getDocumentSelectors() {
        return this._selectors.values();
    }
    register(data) {
        if (!data.registerOptions.documentSelector) {
            return;
        }
        if (!this._listener) {
            this._listener = this._event((data) => {
                this.callback(data).catch((error) => {
                    this._client.error(`Sending document notification ${this._type.method} failed.`, error);
                });
            });
        }
        this._selectors.set(data.id, this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector));
    }
    async callback(data) {
        const doSend = async (data) => {
            const params = this._createParams(data);
            await this._client.sendNotification(this._type, params);
            this.notificationSent(this.getTextDocument(data), this._type, params);
        };
        if (this.matches(data)) {
            const middleware = this._middleware();
            return middleware ? middleware(data, (data) => doSend(data)) : doSend(data);
        }
    }
    matches(data) {
        if (this._client.hasDedicatedTextSynchronizationFeature(this._textDocument(data))) {
            return false;
        }
        return !this._selectorFilter || this._selectorFilter(this._selectors.values(), data);
    }
    get onNotificationSent() {
        return this._onNotificationSent.event;
    }
    notificationSent(textDocument, type, params) {
        this._onNotificationSent.fire({ textDocument, type, params });
    }
    unregister(id) {
        this._selectors.delete(id);
        if (this._selectors.size === 0 && this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    dispose() {
        this._selectors.clear();
        this._onNotificationSent.dispose();
        if (this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    getProvider(document) {
        for (const selector of this._selectors.values()) {
            if (vscode_1.languages.match(selector, document) > 0) {
                return {
                    send: (data) => {
                        return this.callback(data);
                    }
                };
            }
        }
        return undefined;
    }
}
exports.TextDocumentEventFeature = TextDocumentEventFeature;
/**
 * A abstract feature implementation that registers language providers
 * for text documents using a given document selector.
 */
class TextDocumentLanguageFeature extends DynamicDocumentFeature {
    constructor(client, registrationType) {
        super(client);
        this._registrationType = registrationType;
        this._registrations = new Map();
    }
    *getDocumentSelectors() {
        for (const registration of this._registrations.values()) {
            const selector = registration.data.registerOptions.documentSelector;
            if (selector === null) {
                continue;
            }
            yield this._client.protocol2CodeConverter.asDocumentSelector(selector);
        }
    }
    get registrationType() {
        return this._registrationType;
    }
    register(data) {
        if (!data.registerOptions.documentSelector) {
            return;
        }
        let registration = this.registerLanguageProvider(data.registerOptions, data.id);
        this._registrations.set(data.id, { disposable: registration[0], data, provider: registration[1] });
    }
    unregister(id) {
        let registration = this._registrations.get(id);
        if (registration !== undefined) {
            registration.disposable.dispose();
        }
    }
    dispose() {
        this._registrations.forEach((value) => {
            value.disposable.dispose();
        });
        this._registrations.clear();
    }
    getRegistration(documentSelector, capability) {
        if (!capability) {
            return [undefined, undefined];
        }
        else if (vscode_languageserver_protocol_1.TextDocumentRegistrationOptions.is(capability)) {
            const id = vscode_languageserver_protocol_1.StaticRegistrationOptions.hasId(capability) ? capability.id : UUID.generateUuid();
            const selector = capability.documentSelector ?? documentSelector;
            if (selector) {
                return [id, Object.assign({}, capability, { documentSelector: selector })];
            }
        }
        else if (Is.boolean(capability) && capability === true || vscode_languageserver_protocol_1.WorkDoneProgressOptions.is(capability)) {
            if (!documentSelector) {
                return [undefined, undefined];
            }
            const options = (Is.boolean(capability) && capability === true ? { documentSelector } : Object.assign({}, capability, { documentSelector }));
            return [UUID.generateUuid(), options];
        }
        return [undefined, undefined];
    }
    getRegistrationOptions(documentSelector, capability) {
        if (!documentSelector || !capability) {
            return undefined;
        }
        return (Is.boolean(capability) && capability === true ? { documentSelector } : Object.assign({}, capability, { documentSelector }));
    }
    getProvider(textDocument) {
        for (const registration of this._registrations.values()) {
            let selector = registration.data.registerOptions.documentSelector;
            if (selector !== null && vscode_1.languages.match(this._client.protocol2CodeConverter.asDocumentSelector(selector), textDocument) > 0) {
                return registration.provider;
            }
        }
        return undefined;
    }
    getAllProviders() {
        const result = [];
        for (const item of this._registrations.values()) {
            result.push(item.provider);
        }
        return result;
    }
}
exports.TextDocumentLanguageFeature = TextDocumentLanguageFeature;
class WorkspaceFeature {
    constructor(client, registrationType) {
        this._client = client;
        this._registrationType = registrationType;
        this._registrations = new Map();
    }
    getState() {
        const registrations = this._registrations.size > 0;
        return { kind: 'workspace', id: this._registrationType.method, registrations };
    }
    get registrationType() {
        return this._registrationType;
    }
    register(data) {
        const registration = this.registerLanguageProvider(data.registerOptions);
        this._registrations.set(data.id, { disposable: registration[0], provider: registration[1] });
    }
    unregister(id) {
        let registration = this._registrations.get(id);
        if (registration !== undefined) {
            registration.disposable.dispose();
        }
    }
    dispose() {
        this._registrations.forEach((registration) => {
            registration.disposable.dispose();
        });
        this._registrations.clear();
    }
    getProviders() {
        const result = [];
        for (const registration of this._registrations.values()) {
            result.push(registration.provider);
        }
        return result;
    }
}
exports.WorkspaceFeature = WorkspaceFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/fileOperations.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/fileOperations.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesFeature = exports.WillRenameFilesFeature = exports.WillCreateFilesFeature = exports.DidDeleteFilesFeature = exports.DidRenameFilesFeature = exports.DidCreateFilesFeature = void 0;
const code = __webpack_require__(/*! vscode */ "vscode");
const minimatch = __webpack_require__(/*! minimatch */ "./node_modules/vscode-languageclient/node_modules/minimatch/minimatch.js");
const proto = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
function access(target, key) {
    return target[key];
}
function assign(target, key, value) {
    target[key] = value;
}
class FileOperationFeature {
    constructor(client, event, registrationType, clientCapability, serverCapability) {
        this._client = client;
        this._event = event;
        this._registrationType = registrationType;
        this._clientCapability = clientCapability;
        this._serverCapability = serverCapability;
        this._filters = new Map();
    }
    getState() {
        return { kind: 'workspace', id: this._registrationType.method, registrations: this._filters.size > 0 };
    }
    filterSize() {
        return this._filters.size;
    }
    get registrationType() {
        return this._registrationType;
    }
    fillClientCapabilities(capabilities) {
        const value = ensure(ensure(capabilities, 'workspace'), 'fileOperations');
        // this happens n times but it is the same value so we tolerate this.
        assign(value, 'dynamicRegistration', true);
        assign(value, this._clientCapability, true);
    }
    initialize(capabilities) {
        const options = capabilities.workspace?.fileOperations;
        const capability = options !== undefined ? access(options, this._serverCapability) : undefined;
        if (capability?.filters !== undefined) {
            try {
                this.register({
                    id: UUID.generateUuid(),
                    registerOptions: { filters: capability.filters }
                });
            }
            catch (e) {
                this._client.warn(`Ignoring invalid glob pattern for ${this._serverCapability} registration: ${e}`);
            }
        }
    }
    register(data) {
        if (!this._listener) {
            this._listener = this._event(this.send, this);
        }
        const minimatchFilter = data.registerOptions.filters.map((filter) => {
            const matcher = new minimatch.Minimatch(filter.pattern.glob, FileOperationFeature.asMinimatchOptions(filter.pattern.options));
            if (!matcher.makeRe()) {
                throw new Error(`Invalid pattern ${filter.pattern.glob}!`);
            }
            return { scheme: filter.scheme, matcher, kind: filter.pattern.matches };
        });
        this._filters.set(data.id, minimatchFilter);
    }
    unregister(id) {
        this._filters.delete(id);
        if (this._filters.size === 0 && this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    dispose() {
        this._filters.clear();
        if (this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    getFileType(uri) {
        return FileOperationFeature.getFileType(uri);
    }
    async filter(event, prop) {
        // (Asynchronously) map each file onto a boolean of whether it matches
        // any of the globs.
        const fileMatches = await Promise.all(event.files.map(async (item) => {
            const uri = prop(item);
            // Use fsPath to make this consistent with file system watchers but help
            // minimatch to use '/' instead of `\\` if present.
            const path = uri.fsPath.replace(/\\/g, '/');
            for (const filters of this._filters.values()) {
                for (const filter of filters) {
                    if (filter.scheme !== undefined && filter.scheme !== uri.scheme) {
                        continue;
                    }
                    if (filter.matcher.match(path)) {
                        // The pattern matches. If kind is undefined then everything is ok
                        if (filter.kind === undefined) {
                            return true;
                        }
                        const fileType = await this.getFileType(uri);
                        // If we can't determine the file type than we treat it as a match.
                        // Dropping it would be another alternative.
                        if (fileType === undefined) {
                            this._client.error(`Failed to determine file type for ${uri.toString()}.`);
                            return true;
                        }
                        if ((fileType === code.FileType.File && filter.kind === proto.FileOperationPatternKind.file) || (fileType === code.FileType.Directory && filter.kind === proto.FileOperationPatternKind.folder)) {
                            return true;
                        }
                    }
                    else if (filter.kind === proto.FileOperationPatternKind.folder) {
                        const fileType = await FileOperationFeature.getFileType(uri);
                        if (fileType === code.FileType.Directory && filter.matcher.match(`${path}/`)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }));
        // Filter the files to those that matched.
        const files = event.files.filter((_, index) => fileMatches[index]);
        return { ...event, files };
    }
    static async getFileType(uri) {
        try {
            return (await code.workspace.fs.stat(uri)).type;
        }
        catch (e) {
            return undefined;
        }
    }
    static asMinimatchOptions(options) {
        if (options === undefined) {
            return undefined;
        }
        if (options.ignoreCase === true) {
            return { nocase: true };
        }
        return undefined;
    }
}
class NotificationFileOperationFeature extends FileOperationFeature {
    constructor(client, event, notificationType, clientCapability, serverCapability, accessUri, createParams) {
        super(client, event, notificationType, clientCapability, serverCapability);
        this._notificationType = notificationType;
        this._accessUri = accessUri;
        this._createParams = createParams;
    }
    async send(originalEvent) {
        // Create a copy of the event that has the files filtered to match what the
        // server wants.
        const filteredEvent = await this.filter(originalEvent, this._accessUri);
        if (filteredEvent.files.length) {
            const next = async (event) => {
                return this._client.sendNotification(this._notificationType, this._createParams(event));
            };
            return this.doSend(filteredEvent, next);
        }
    }
}
class CachingNotificationFileOperationFeature extends NotificationFileOperationFeature {
    constructor() {
        super(...arguments);
        this._fsPathFileTypes = new Map();
    }
    async getFileType(uri) {
        const fsPath = uri.fsPath;
        if (this._fsPathFileTypes.has(fsPath)) {
            return this._fsPathFileTypes.get(fsPath);
        }
        const type = await FileOperationFeature.getFileType(uri);
        if (type) {
            this._fsPathFileTypes.set(fsPath, type);
        }
        return type;
    }
    async cacheFileTypes(event, prop) {
        // Calling filter will force the matching logic to run. For any item
        // that requires a getFileType lookup, the overriden getFileType will
        // be called that will cache the result so that when onDidRename fires,
        // it can still be checked even though the item no longer exists on disk
        // in its original location.
        await this.filter(event, prop);
    }
    clearFileTypeCache() {
        this._fsPathFileTypes.clear();
    }
    unregister(id) {
        super.unregister(id);
        if (this.filterSize() === 0 && this._willListener) {
            this._willListener.dispose();
            this._willListener = undefined;
        }
    }
    dispose() {
        super.dispose();
        if (this._willListener) {
            this._willListener.dispose();
            this._willListener = undefined;
        }
    }
}
class DidCreateFilesFeature extends NotificationFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onDidCreateFiles, proto.DidCreateFilesNotification.type, 'didCreate', 'didCreate', (i) => i, client.code2ProtocolConverter.asDidCreateFilesParams);
    }
    doSend(event, next) {
        const middleware = this._client.middleware.workspace;
        return middleware?.didCreateFiles
            ? middleware.didCreateFiles(event, next)
            : next(event);
    }
}
exports.DidCreateFilesFeature = DidCreateFilesFeature;
class DidRenameFilesFeature extends CachingNotificationFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onDidRenameFiles, proto.DidRenameFilesNotification.type, 'didRename', 'didRename', (i) => i.oldUri, client.code2ProtocolConverter.asDidRenameFilesParams);
    }
    register(data) {
        if (!this._willListener) {
            this._willListener = code.workspace.onWillRenameFiles(this.willRename, this);
        }
        super.register(data);
    }
    willRename(e) {
        e.waitUntil(this.cacheFileTypes(e, (i) => i.oldUri));
    }
    doSend(event, next) {
        this.clearFileTypeCache();
        const middleware = this._client.middleware.workspace;
        return middleware?.didRenameFiles
            ? middleware.didRenameFiles(event, next)
            : next(event);
    }
}
exports.DidRenameFilesFeature = DidRenameFilesFeature;
class DidDeleteFilesFeature extends CachingNotificationFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onDidDeleteFiles, proto.DidDeleteFilesNotification.type, 'didDelete', 'didDelete', (i) => i, client.code2ProtocolConverter.asDidDeleteFilesParams);
    }
    register(data) {
        if (!this._willListener) {
            this._willListener = code.workspace.onWillDeleteFiles(this.willDelete, this);
        }
        super.register(data);
    }
    willDelete(e) {
        e.waitUntil(this.cacheFileTypes(e, (i) => i));
    }
    doSend(event, next) {
        this.clearFileTypeCache();
        const middleware = this._client.middleware.workspace;
        return middleware?.didDeleteFiles
            ? middleware.didDeleteFiles(event, next)
            : next(event);
    }
}
exports.DidDeleteFilesFeature = DidDeleteFilesFeature;
class RequestFileOperationFeature extends FileOperationFeature {
    constructor(client, event, requestType, clientCapability, serverCapability, accessUri, createParams) {
        super(client, event, requestType, clientCapability, serverCapability);
        this._requestType = requestType;
        this._accessUri = accessUri;
        this._createParams = createParams;
    }
    async send(originalEvent) {
        const waitUntil = this.waitUntil(originalEvent);
        originalEvent.waitUntil(waitUntil);
    }
    async waitUntil(originalEvent) {
        // Create a copy of the event that has the files filtered to match what the
        // server wants.
        const filteredEvent = await this.filter(originalEvent, this._accessUri);
        if (filteredEvent.files.length) {
            const next = (event) => {
                return this._client.sendRequest(this._requestType, this._createParams(event), event.token)
                    .then(this._client.protocol2CodeConverter.asWorkspaceEdit);
            };
            return this.doSend(filteredEvent, next);
        }
        else {
            return undefined;
        }
    }
}
class WillCreateFilesFeature extends RequestFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onWillCreateFiles, proto.WillCreateFilesRequest.type, 'willCreate', 'willCreate', (i) => i, client.code2ProtocolConverter.asWillCreateFilesParams);
    }
    doSend(event, next) {
        const middleware = this._client.middleware.workspace;
        return middleware?.willCreateFiles
            ? middleware.willCreateFiles(event, next)
            : next(event);
    }
}
exports.WillCreateFilesFeature = WillCreateFilesFeature;
class WillRenameFilesFeature extends RequestFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onWillRenameFiles, proto.WillRenameFilesRequest.type, 'willRename', 'willRename', (i) => i.oldUri, client.code2ProtocolConverter.asWillRenameFilesParams);
    }
    doSend(event, next) {
        const middleware = this._client.middleware.workspace;
        return middleware?.willRenameFiles
            ? middleware.willRenameFiles(event, next)
            : next(event);
    }
}
exports.WillRenameFilesFeature = WillRenameFilesFeature;
class WillDeleteFilesFeature extends RequestFileOperationFeature {
    constructor(client) {
        super(client, code.workspace.onWillDeleteFiles, proto.WillDeleteFilesRequest.type, 'willDelete', 'willDelete', (i) => i, client.code2ProtocolConverter.asWillDeleteFilesParams);
    }
    doSend(event, next) {
        const middleware = this._client.middleware.workspace;
        return middleware?.willDeleteFiles
            ? middleware.willDeleteFiles(event, next)
            : next(event);
    }
}
exports.WillDeleteFilesFeature = WillDeleteFilesFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/fileSystemWatcher.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/fileSystemWatcher.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileSystemWatcherFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class FileSystemWatcherFeature {
    constructor(client, notifyFileEvent) {
        this._client = client;
        this._notifyFileEvent = notifyFileEvent;
        this._watchers = new Map();
    }
    getState() {
        return { kind: 'workspace', id: this.registrationType.method, registrations: this._watchers.size > 0 };
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').dynamicRegistration = true;
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'didChangeWatchedFiles').relativePatternSupport = true;
    }
    initialize(_capabilities, _documentSelector) {
    }
    register(data) {
        if (!Array.isArray(data.registerOptions.watchers)) {
            return;
        }
        const disposables = [];
        for (const watcher of data.registerOptions.watchers) {
            const globPattern = this._client.protocol2CodeConverter.asGlobPattern(watcher.globPattern);
            if (globPattern === undefined) {
                continue;
            }
            let watchCreate = true, watchChange = true, watchDelete = true;
            if (watcher.kind !== undefined && watcher.kind !== null) {
                watchCreate = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Create) !== 0;
                watchChange = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Change) !== 0;
                watchDelete = (watcher.kind & vscode_languageserver_protocol_1.WatchKind.Delete) !== 0;
            }
            const fileSystemWatcher = vscode_1.workspace.createFileSystemWatcher(globPattern, !watchCreate, !watchChange, !watchDelete);
            this.hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, disposables);
            disposables.push(fileSystemWatcher);
        }
        this._watchers.set(data.id, disposables);
    }
    registerRaw(id, fileSystemWatchers) {
        let disposables = [];
        for (let fileSystemWatcher of fileSystemWatchers) {
            this.hookListeners(fileSystemWatcher, true, true, true, disposables);
        }
        this._watchers.set(id, disposables);
    }
    hookListeners(fileSystemWatcher, watchCreate, watchChange, watchDelete, listeners) {
        if (watchCreate) {
            fileSystemWatcher.onDidCreate((resource) => this._notifyFileEvent({
                uri: this._client.code2ProtocolConverter.asUri(resource),
                type: vscode_languageserver_protocol_1.FileChangeType.Created
            }), null, listeners);
        }
        if (watchChange) {
            fileSystemWatcher.onDidChange((resource) => this._notifyFileEvent({
                uri: this._client.code2ProtocolConverter.asUri(resource),
                type: vscode_languageserver_protocol_1.FileChangeType.Changed
            }), null, listeners);
        }
        if (watchDelete) {
            fileSystemWatcher.onDidDelete((resource) => this._notifyFileEvent({
                uri: this._client.code2ProtocolConverter.asUri(resource),
                type: vscode_languageserver_protocol_1.FileChangeType.Deleted
            }), null, listeners);
        }
    }
    unregister(id) {
        let disposables = this._watchers.get(id);
        if (disposables) {
            for (let disposable of disposables) {
                disposable.dispose();
            }
        }
    }
    dispose() {
        this._watchers.forEach((disposables) => {
            for (let disposable of disposables) {
                disposable.dispose();
            }
        });
        this._watchers.clear();
    }
}
exports.FileSystemWatcherFeature = FileSystemWatcherFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/foldingRange.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/foldingRange.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class FoldingRangeFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.FoldingRangeRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'foldingRange');
        capability.dynamicRegistration = true;
        capability.rangeLimit = 5000;
        capability.lineFoldingOnly = true;
        capability.foldingRangeKind = { valueSet: [vscode_languageserver_protocol_1.FoldingRangeKind.Comment, vscode_languageserver_protocol_1.FoldingRangeKind.Imports, vscode_languageserver_protocol_1.FoldingRangeKind.Region] };
        capability.foldingRange = { collapsedText: false };
    }
    initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.foldingRangeProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideFoldingRanges: (document, context, token) => {
                const client = this._client;
                const provideFoldingRanges = (document, _, token) => {
                    const requestParams = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, requestParams, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asFoldingRanges(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideFoldingRanges
                    ? middleware.provideFoldingRanges(document, context, token, provideFoldingRanges)
                    : provideFoldingRanges(document, context, token);
            }
        };
        return [vscode_1.languages.registerFoldingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.FoldingRangeFeature = FoldingRangeFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/formatting.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/formatting.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentOnTypeFormattingFeature = exports.DocumentRangeFormattingFeature = exports.DocumentFormattingFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
var FileFormattingOptions;
(function (FileFormattingOptions) {
    function fromConfiguration(document) {
        const filesConfig = vscode_1.workspace.getConfiguration('files', document);
        return {
            trimTrailingWhitespace: filesConfig.get('trimTrailingWhitespace'),
            trimFinalNewlines: filesConfig.get('trimFinalNewlines'),
            insertFinalNewline: filesConfig.get('insertFinalNewline'),
        };
    }
    FileFormattingOptions.fromConfiguration = fromConfiguration;
})(FileFormattingOptions || (FileFormattingOptions = {}));
class DocumentFormattingFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentFormattingRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'formatting').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentFormattingProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDocumentFormattingEdits: (document, options, token) => {
                const client = this._client;
                const provideDocumentFormattingEdits = (document, options, token) => {
                    const params = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, params, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asTextEdits(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDocumentFormattingEdits
                    ? middleware.provideDocumentFormattingEdits(document, options, token, provideDocumentFormattingEdits)
                    : provideDocumentFormattingEdits(document, options, token);
            }
        };
        return [vscode_1.languages.registerDocumentFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.DocumentFormattingFeature = DocumentFormattingFeature;
class DocumentRangeFormattingFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rangeFormatting').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentRangeFormattingProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideDocumentRangeFormattingEdits: (document, range, options, token) => {
                const client = this._client;
                const provideDocumentRangeFormattingEdits = (document, range, options, token) => {
                    const params = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        range: client.code2ProtocolConverter.asRange(range),
                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, params, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asTextEdits(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideDocumentRangeFormattingEdits
                    ? middleware.provideDocumentRangeFormattingEdits(document, range, options, token, provideDocumentRangeFormattingEdits)
                    : provideDocumentRangeFormattingEdits(document, range, options, token);
            }
        };
        return [vscode_1.languages.registerDocumentRangeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider), provider];
    }
}
exports.DocumentRangeFormattingFeature = DocumentRangeFormattingFeature;
class DocumentOnTypeFormattingFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'onTypeFormatting').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.documentOnTypeFormattingProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideOnTypeFormattingEdits: (document, position, ch, options, token) => {
                const client = this._client;
                const provideOnTypeFormattingEdits = (document, position, ch, options, token) => {
                    let params = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        position: client.code2ProtocolConverter.asPosition(position),
                        ch: ch,
                        options: client.code2ProtocolConverter.asFormattingOptions(options, FileFormattingOptions.fromConfiguration(document))
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, params, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asTextEdits(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideOnTypeFormattingEdits
                    ? middleware.provideOnTypeFormattingEdits(document, position, ch, options, token, provideOnTypeFormattingEdits)
                    : provideOnTypeFormattingEdits(document, position, ch, options, token);
            }
        };
        const moreTriggerCharacter = options.moreTriggerCharacter || [];
        return [vscode_1.languages.registerOnTypeFormattingEditProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider, options.firstTriggerCharacter, ...moreTriggerCharacter), provider];
    }
}
exports.DocumentOnTypeFormattingFeature = DocumentOnTypeFormattingFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/hover.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/hover.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoverFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class HoverFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.HoverRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const hoverCapability = ((0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'hover'));
        hoverCapability.dynamicRegistration = true;
        hoverCapability.contentFormat = [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText];
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.hoverProvider);
        if (!options) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: options
        });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideHover: (document, position, token) => {
                const client = this._client;
                const provideHover = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asHover(result);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.HoverRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideHover
                    ? middleware.provideHover(document, position, token, provideHover)
                    : provideHover(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerHoverProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.HoverFeature = HoverFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/implementation.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/implementation.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class ImplementationFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.ImplementationRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let implementationSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'implementation');
        implementationSupport.dynamicRegistration = true;
        implementationSupport.linkSupport = true;
    }
    initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.implementationProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideImplementation: (document, position, token) => {
                const client = this._client;
                const provideImplementation = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDefinitionResult(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideImplementation
                    ? middleware.provideImplementation(document, position, token, provideImplementation)
                    : provideImplementation(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerImplementationProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.ImplementationFeature = ImplementationFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/inlayHint.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/inlayHint.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintsFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class InlayHintsFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.InlayHintRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const inlayHint = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlayHint');
        inlayHint.dynamicRegistration = true;
        inlayHint.resolveSupport = {
            properties: ['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command']
        };
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlayHint').refreshSupport = true;
    }
    initialize(capabilities, documentSelector) {
        this._client.onRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type, async () => {
            for (const provider of this.getAllProviders()) {
                provider.onDidChangeInlayHints.fire();
            }
        });
        const [id, options] = this.getRegistration(documentSelector, capabilities.inlayHintProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const eventEmitter = new vscode_1.EventEmitter();
        const provider = {
            onDidChangeInlayHints: eventEmitter.event,
            provideInlayHints: (document, viewPort, token) => {
                const client = this._client;
                const provideInlayHints = async (document, viewPort, token) => {
                    const requestParams = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        range: client.code2ProtocolConverter.asRange(viewPort)
                    };
                    try {
                        const values = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, requestParams, token);
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asInlayHints(values, token);
                    }
                    catch (error) {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, token, error, null);
                    }
                };
                const middleware = client.middleware;
                return middleware.provideInlayHints
                    ? middleware.provideInlayHints(document, viewPort, token, provideInlayHints)
                    : provideInlayHints(document, viewPort, token);
            }
        };
        provider.resolveInlayHint = options.resolveProvider === true
            ? (hint, token) => {
                const client = this._client;
                const resolveInlayHint = async (item, token) => {
                    try {
                        const value = await client.sendRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, client.code2ProtocolConverter.asInlayHint(item), token);
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        const result = client.protocol2CodeConverter.asInlayHint(value, token);
                        return token.isCancellationRequested ? null : result;
                    }
                    catch (error) {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, token, error, null);
                    }
                };
                const middleware = client.middleware;
                return middleware.resolveInlayHint
                    ? middleware.resolveInlayHint(hint, token, resolveInlayHint)
                    : resolveInlayHint(hint, token);
            }
            : undefined;
        return [this.registerProvider(selector, provider), { provider: provider, onDidChangeInlayHints: eventEmitter }];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerInlayHintsProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.InlayHintsFeature = InlayHintsFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/inlineValue.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/inlineValue.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class InlineValueFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.InlineValueRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'inlineValue').dynamicRegistration = true;
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'inlineValue').refreshSupport = true;
    }
    initialize(capabilities, documentSelector) {
        this._client.onRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type, async () => {
            for (const provider of this.getAllProviders()) {
                provider.onDidChangeInlineValues.fire();
            }
        });
        const [id, options] = this.getRegistration(documentSelector, capabilities.inlineValueProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const eventEmitter = new vscode_1.EventEmitter();
        const provider = {
            onDidChangeInlineValues: eventEmitter.event,
            provideInlineValues: (document, viewPort, context, token) => {
                const client = this._client;
                const provideInlineValues = (document, viewPort, context, token) => {
                    const requestParams = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        range: client.code2ProtocolConverter.asRange(viewPort),
                        context: client.code2ProtocolConverter.asInlineValueContext(context)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, requestParams, token).then((values) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asInlineValues(values, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideInlineValues
                    ? middleware.provideInlineValues(document, viewPort, context, token, provideInlineValues)
                    : provideInlineValues(document, viewPort, context, token);
            }
        };
        return [this.registerProvider(selector, provider), { provider: provider, onDidChangeInlineValues: eventEmitter }];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerInlineValuesProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.InlineValueFeature = InlineValueFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/linkedEditingRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/linkedEditingRange.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingFeature = void 0;
const code = __webpack_require__(/*! vscode */ "vscode");
const proto = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class LinkedEditingFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, proto.LinkedEditingRangeRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const linkedEditingSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'linkedEditingRange');
        linkedEditingSupport.dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.linkedEditingRangeProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideLinkedEditingRanges: (document, position, token) => {
                const client = this._client;
                const provideLinkedEditing = (document, position, token) => {
                    return client.sendRequest(proto.LinkedEditingRangeRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asLinkedEditingRanges(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(proto.LinkedEditingRangeRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideLinkedEditingRange
                    ? middleware.provideLinkedEditingRange(document, position, token, provideLinkedEditing)
                    : provideLinkedEditing(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return code.languages.registerLinkedEditingRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.LinkedEditingFeature = LinkedEditingFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/notebook.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/notebook.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotebookDocumentSyncFeature = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const minimatch = __webpack_require__(/*! minimatch */ "./node_modules/vscode-languageclient/node_modules/minimatch/minimatch.js");
const proto = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
var Converter;
(function (Converter) {
    let c2p;
    (function (c2p) {
        function asVersionedNotebookDocumentIdentifier(notebookDocument, base) {
            return {
                version: notebookDocument.version,
                uri: base.asUri(notebookDocument.uri)
            };
        }
        c2p.asVersionedNotebookDocumentIdentifier = asVersionedNotebookDocumentIdentifier;
        function asNotebookDocument(notebookDocument, cells, base) {
            const result = proto.NotebookDocument.create(base.asUri(notebookDocument.uri), notebookDocument.notebookType, notebookDocument.version, asNotebookCells(cells, base));
            if (Object.keys(notebookDocument.metadata).length > 0) {
                result.metadata = asMetadata(notebookDocument.metadata);
            }
            return result;
        }
        c2p.asNotebookDocument = asNotebookDocument;
        function asNotebookCells(cells, base) {
            return cells.map(cell => asNotebookCell(cell, base));
        }
        c2p.asNotebookCells = asNotebookCells;
        function asMetadata(metadata) {
            const seen = new Set();
            return deepCopy(seen, metadata);
        }
        c2p.asMetadata = asMetadata;
        function asNotebookCell(cell, base) {
            const result = proto.NotebookCell.create(asNotebookCellKind(cell.kind), base.asUri(cell.document.uri));
            if (Object.keys(cell.metadata).length > 0) {
                result.metadata = asMetadata(cell.metadata);
            }
            if (cell.executionSummary !== undefined && (Is.number(cell.executionSummary.executionOrder) && Is.boolean(cell.executionSummary.success))) {
                result.executionSummary = {
                    executionOrder: cell.executionSummary.executionOrder,
                    success: cell.executionSummary.success
                };
            }
            return result;
        }
        c2p.asNotebookCell = asNotebookCell;
        function asNotebookCellKind(kind) {
            switch (kind) {
                case vscode.NotebookCellKind.Markup:
                    return proto.NotebookCellKind.Markup;
                case vscode.NotebookCellKind.Code:
                    return proto.NotebookCellKind.Code;
            }
        }
        function deepCopy(seen, value) {
            if (seen.has(value)) {
                throw new Error(`Can't deep copy cyclic structures.`);
            }
            if (Array.isArray(value)) {
                const result = [];
                for (const elem of value) {
                    if (elem !== null && typeof elem === 'object' || Array.isArray(elem)) {
                        result.push(deepCopy(seen, elem));
                    }
                    else {
                        if (elem instanceof RegExp) {
                            throw new Error(`Can't transfer regular expressions to the server`);
                        }
                        result.push(elem);
                    }
                }
                return result;
            }
            else {
                const props = Object.keys(value);
                const result = Object.create(null);
                for (const prop of props) {
                    const elem = value[prop];
                    if (elem !== null && typeof elem === 'object' || Array.isArray(elem)) {
                        result[prop] = deepCopy(seen, elem);
                    }
                    else {
                        if (elem instanceof RegExp) {
                            throw new Error(`Can't transfer regular expressions to the server`);
                        }
                        result[prop] = elem;
                    }
                }
                return result;
            }
        }
        function asTextContentChange(event, base) {
            const params = base.asChangeTextDocumentParams(event, event.document.uri, event.document.version);
            return { document: params.textDocument, changes: params.contentChanges };
        }
        c2p.asTextContentChange = asTextContentChange;
        function asNotebookDocumentChangeEvent(event, base) {
            const result = Object.create(null);
            if (event.metadata) {
                result.metadata = Converter.c2p.asMetadata(event.metadata);
            }
            if (event.cells !== undefined) {
                const cells = Object.create(null);
                const changedCells = event.cells;
                if (changedCells.structure) {
                    cells.structure = {
                        array: {
                            start: changedCells.structure.array.start,
                            deleteCount: changedCells.structure.array.deleteCount,
                            cells: changedCells.structure.array.cells !== undefined ? changedCells.structure.array.cells.map(cell => Converter.c2p.asNotebookCell(cell, base)) : undefined
                        },
                        didOpen: changedCells.structure.didOpen !== undefined
                            ? changedCells.structure.didOpen.map(cell => base.asOpenTextDocumentParams(cell.document).textDocument)
                            : undefined,
                        didClose: changedCells.structure.didClose !== undefined
                            ? changedCells.structure.didClose.map(cell => base.asCloseTextDocumentParams(cell.document).textDocument)
                            : undefined
                    };
                }
                if (changedCells.data !== undefined) {
                    cells.data = changedCells.data.map(cell => Converter.c2p.asNotebookCell(cell, base));
                }
                if (changedCells.textContent !== undefined) {
                    cells.textContent = changedCells.textContent.map(event => Converter.c2p.asTextContentChange(event, base));
                }
                if (Object.keys(cells).length > 0) {
                    result.cells = cells;
                }
            }
            return result;
        }
        c2p.asNotebookDocumentChangeEvent = asNotebookDocumentChangeEvent;
    })(c2p = Converter.c2p || (Converter.c2p = {}));
})(Converter || (Converter = {}));
var $NotebookCell;
(function ($NotebookCell) {
    function computeDiff(originalCells, modifiedCells, compareMetadata) {
        const originalLength = originalCells.length;
        const modifiedLength = modifiedCells.length;
        let startIndex = 0;
        while (startIndex < modifiedLength && startIndex < originalLength && equals(originalCells[startIndex], modifiedCells[startIndex], compareMetadata)) {
            startIndex++;
        }
        if (startIndex < modifiedLength && startIndex < originalLength) {
            let originalEndIndex = originalLength - 1;
            let modifiedEndIndex = modifiedLength - 1;
            while (originalEndIndex >= 0 && modifiedEndIndex >= 0 && equals(originalCells[originalEndIndex], modifiedCells[modifiedEndIndex], compareMetadata)) {
                originalEndIndex--;
                modifiedEndIndex--;
            }
            const deleteCount = (originalEndIndex + 1) - startIndex;
            const newCells = startIndex === modifiedEndIndex + 1 ? undefined : modifiedCells.slice(startIndex, modifiedEndIndex + 1);
            return newCells !== undefined ? { start: startIndex, deleteCount, cells: newCells } : { start: startIndex, deleteCount };
        }
        else if (startIndex < modifiedLength) {
            return { start: startIndex, deleteCount: 0, cells: modifiedCells.slice(startIndex) };
        }
        else if (startIndex < originalLength) {
            return { start: startIndex, deleteCount: originalLength - startIndex };
        }
        else {
            // The two arrays are the same.
            return undefined;
        }
    }
    $NotebookCell.computeDiff = computeDiff;
    /**
     * We only sync kind, document, execution and metadata to the server. So we only need to compare those.
     */
    function equals(one, other, compareMetaData = true) {
        if (one.kind !== other.kind || one.document.uri.toString() !== other.document.uri.toString() || one.document.languageId !== other.document.languageId ||
            !equalsExecution(one.executionSummary, other.executionSummary)) {
            return false;
        }
        return !compareMetaData || (compareMetaData && equalsMetadata(one.metadata, other.metadata));
    }
    function equalsExecution(one, other) {
        if (one === other) {
            return true;
        }
        if (one === undefined || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success && equalsTiming(one.timing, other.timing);
    }
    function equalsTiming(one, other) {
        if (one === other) {
            return true;
        }
        if (one === undefined || other === undefined) {
            return false;
        }
        return one.startTime === other.startTime && one.endTime === other.endTime;
    }
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (isObjectLiteral(one) && isObjectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    function isObjectLiteral(value) {
        return value !== null && typeof value === 'object';
    }
    $NotebookCell.isObjectLiteral = isObjectLiteral;
})($NotebookCell || ($NotebookCell = {}));
var $NotebookDocumentFilter;
(function ($NotebookDocumentFilter) {
    function matchNotebook(filter, notebookDocument) {
        if (typeof filter === 'string') {
            return filter === '*' || notebookDocument.notebookType === filter;
        }
        if (filter.notebookType !== undefined && filter.notebookType !== '*' && notebookDocument.notebookType !== filter.notebookType) {
            return false;
        }
        const uri = notebookDocument.uri;
        if (filter.scheme !== undefined && filter.scheme !== '*' && uri.scheme !== filter.scheme) {
            return false;
        }
        if (filter.pattern !== undefined) {
            const matcher = new minimatch.Minimatch(filter.pattern, { noext: true });
            if (!matcher.makeRe()) {
                return false;
            }
            if (!matcher.match(uri.fsPath)) {
                return false;
            }
        }
        return true;
    }
    $NotebookDocumentFilter.matchNotebook = matchNotebook;
})($NotebookDocumentFilter || ($NotebookDocumentFilter = {}));
var $NotebookDocumentSyncOptions;
(function ($NotebookDocumentSyncOptions) {
    function asDocumentSelector(options) {
        const selector = options.notebookSelector;
        const result = [];
        for (const element of selector) {
            const notebookType = (typeof element.notebook === 'string' ? element.notebook : element.notebook?.notebookType) ?? '*';
            const scheme = (typeof element.notebook === 'string') ? undefined : element.notebook?.scheme;
            const pattern = (typeof element.notebook === 'string') ? undefined : element.notebook?.pattern;
            if (element.cells !== undefined) {
                for (const cell of element.cells) {
                    result.push(asDocumentFilter(notebookType, scheme, pattern, cell.language));
                }
            }
            else {
                result.push(asDocumentFilter(notebookType, scheme, pattern, undefined));
            }
        }
        return result;
    }
    $NotebookDocumentSyncOptions.asDocumentSelector = asDocumentSelector;
    function asDocumentFilter(notebookType, scheme, pattern, language) {
        return scheme === undefined && pattern === undefined
            ? { notebook: notebookType, language }
            : { notebook: { notebookType, scheme, pattern }, language };
    }
})($NotebookDocumentSyncOptions || ($NotebookDocumentSyncOptions = {}));
var SyncInfo;
(function (SyncInfo) {
    function create(cells) {
        return {
            cells,
            uris: new Set(cells.map(cell => cell.document.uri.toString()))
        };
    }
    SyncInfo.create = create;
})(SyncInfo || (SyncInfo = {}));
class NotebookDocumentSyncFeatureProvider {
    constructor(client, options) {
        this.client = client;
        this.options = options;
        this.notebookSyncInfo = new Map();
        this.notebookDidOpen = new Set();
        this.disposables = [];
        this.selector = client.protocol2CodeConverter.asDocumentSelector($NotebookDocumentSyncOptions.asDocumentSelector(options));
        // open
        vscode.workspace.onDidOpenNotebookDocument((notebookDocument) => {
            this.notebookDidOpen.add(notebookDocument.uri.toString());
            this.didOpen(notebookDocument);
        }, undefined, this.disposables);
        for (const notebookDocument of vscode.workspace.notebookDocuments) {
            this.notebookDidOpen.add(notebookDocument.uri.toString());
            this.didOpen(notebookDocument);
        }
        // Notebook document changed.
        vscode.workspace.onDidChangeNotebookDocument(event => this.didChangeNotebookDocument(event), undefined, this.disposables);
        //save
        if (this.options.save === true) {
            vscode.workspace.onDidSaveNotebookDocument(notebookDocument => this.didSave(notebookDocument), undefined, this.disposables);
        }
        // close
        vscode.workspace.onDidCloseNotebookDocument((notebookDocument) => {
            this.didClose(notebookDocument);
            this.notebookDidOpen.delete(notebookDocument.uri.toString());
        }, undefined, this.disposables);
    }
    getState() {
        for (const notebook of vscode.workspace.notebookDocuments) {
            const matchingCells = this.getMatchingCells(notebook);
            if (matchingCells !== undefined) {
                return { kind: 'document', id: '$internal', registrations: true, matches: true };
            }
        }
        return { kind: 'document', id: '$internal', registrations: true, matches: false };
    }
    get mode() {
        return 'notebook';
    }
    handles(textDocument) {
        return vscode.languages.match(this.selector, textDocument) > 0;
    }
    didOpenNotebookCellTextDocument(notebookDocument, cell) {
        if (vscode.languages.match(this.selector, cell.document) === 0) {
            return;
        }
        if (!this.notebookDidOpen.has(notebookDocument.uri.toString())) {
            // We have never received an open notification for the notebook document.
            // VS Code guarantees that we first get cell document open and then
            // notebook open. So simply wait for the notebook open.
            return;
        }
        const syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString());
        // In VS Code we receive a notebook open before a cell document open.
        // The document and the cell is synced.
        const cellMatches = this.cellMatches(notebookDocument, cell);
        if (syncInfo !== undefined) {
            const cellIsSynced = syncInfo.uris.has(cell.document.uri.toString());
            if ((cellMatches && cellIsSynced) || (!cellMatches && !cellIsSynced)) {
                // The cell doesn't match and was not synced or it matches and is synced.
                // In both cases nothing to do.
                //
                // Note that if the language mode of a document changes we remove the
                // cell and add it back to update the language mode on the server side.
                return;
            }
            if (cellMatches) {
                // don't use cells from above since there might be more matching cells in the notebook
                // Since we had a matching cell above we will have matching cells now.
                const matchingCells = this.getMatchingCells(notebookDocument);
                if (matchingCells !== undefined) {
                    const event = this.asNotebookDocumentChangeEvent(notebookDocument, undefined, syncInfo, matchingCells);
                    if (event !== undefined) {
                        this.doSendChange(event, matchingCells).catch(() => { });
                    }
                }
            }
        }
        else {
            // No sync info. But we have a open event for the notebook document
            // itself. If the cell matches then we need to send an open with
            // exactly that cell.
            if (cellMatches) {
                this.doSendOpen(notebookDocument, [cell]).catch(() => { });
            }
        }
    }
    didChangeNotebookCellTextDocument(notebookDocument, event) {
        // No match with the selector
        if (vscode.languages.match(this.selector, event.document) === 0) {
            return;
        }
        this.doSendChange({
            notebook: notebookDocument,
            cells: { textContent: [event] }
        }, undefined).catch(() => { });
    }
    didCloseNotebookCellTextDocument(notebookDocument, cell) {
        const syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString());
        if (syncInfo === undefined) {
            // The notebook document got never synced. So it doesn't matter if a cell
            // document closes.
            return;
        }
        const cellUri = cell.document.uri;
        const index = syncInfo.cells.findIndex((item) => item.document.uri.toString() === cellUri.toString());
        if (index === -1) {
            // The cell never got synced or it got deleted and we now received the document
            // close event.
            return;
        }
        if (index === 0 && syncInfo.cells.length === 1) {
            // The last cell. Close the notebook document in the server.
            this.doSendClose(notebookDocument, syncInfo.cells).catch(() => { });
        }
        else {
            const newCells = syncInfo.cells.slice();
            const deleted = newCells.splice(index, 1);
            this.doSendChange({
                notebook: notebookDocument,
                cells: {
                    structure: {
                        array: { start: index, deleteCount: 1 },
                        didClose: deleted
                    }
                }
            }, newCells).catch(() => { });
        }
    }
    dispose() {
        for (const disposable of this.disposables) {
            disposable.dispose();
        }
    }
    didOpen(notebookDocument, matchingCells = this.getMatchingCells(notebookDocument), syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString())) {
        if (syncInfo !== undefined) {
            if (matchingCells !== undefined) {
                const event = this.asNotebookDocumentChangeEvent(notebookDocument, undefined, syncInfo, matchingCells);
                if (event !== undefined) {
                    this.doSendChange(event, matchingCells).catch(() => { });
                }
            }
            else {
                this.doSendClose(notebookDocument, []).catch(() => { });
            }
        }
        else {
            // Check if we need to sync the notebook document.
            if (matchingCells === undefined) {
                return;
            }
            this.doSendOpen(notebookDocument, matchingCells).catch(() => { });
        }
    }
    didChangeNotebookDocument(event) {
        const notebookDocument = event.notebook;
        const syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString());
        if (syncInfo === undefined) {
            // We have no changes to the cells. Since the notebook wasn't synced
            // it will not be synced now.
            if (event.contentChanges.length === 0) {
                return;
            }
            // Check if we have new matching cells.
            const cells = this.getMatchingCells(notebookDocument);
            // No matching cells and the notebook never synced. So still no need
            // to sync it.
            if (cells === undefined) {
                return;
            }
            // Open the notebook document and ignore the rest of the changes
            // this the notebooks will be synced with the correct settings.
            this.didOpen(notebookDocument, cells, syncInfo);
        }
        else {
            // The notebook is synced. First check if we have no matching
            // cells anymore and if so close the notebook
            const cells = this.getMatchingCells(notebookDocument);
            if (cells === undefined) {
                this.didClose(notebookDocument, syncInfo);
                return;
            }
            const newEvent = this.asNotebookDocumentChangeEvent(event.notebook, event, syncInfo, cells);
            if (newEvent !== undefined) {
                this.doSendChange(newEvent, cells).catch(() => { });
            }
        }
    }
    didSave(notebookDocument) {
        const syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString());
        if (syncInfo === undefined) {
            return;
        }
        this.doSendSave(notebookDocument).catch(() => { });
    }
    didClose(notebookDocument, syncInfo = this.notebookSyncInfo.get(notebookDocument.uri.toString())) {
        if (syncInfo === undefined) {
            return;
        }
        const syncedCells = notebookDocument.getCells().filter(cell => syncInfo.uris.has(cell.document.uri.toString()));
        this.doSendClose(notebookDocument, syncedCells).catch(() => { });
    }
    async sendDidOpenNotebookDocument(notebookDocument) {
        const cells = this.getMatchingCells(notebookDocument);
        if (cells === undefined) {
            return;
        }
        return this.doSendOpen(notebookDocument, cells);
    }
    async doSendOpen(notebookDocument, cells) {
        const send = async (notebookDocument, cells) => {
            const nb = Converter.c2p.asNotebookDocument(notebookDocument, cells, this.client.code2ProtocolConverter);
            const cellDocuments = cells.map(cell => this.client.code2ProtocolConverter.asTextDocumentItem(cell.document));
            try {
                await this.client.sendNotification(proto.DidOpenNotebookDocumentNotification.type, {
                    notebookDocument: nb,
                    cellTextDocuments: cellDocuments
                });
            }
            catch (error) {
                this.client.error('Sending DidOpenNotebookDocumentNotification failed', error);
                throw error;
            }
        };
        const middleware = this.client.middleware?.notebooks;
        this.notebookSyncInfo.set(notebookDocument.uri.toString(), SyncInfo.create(cells));
        return middleware?.didOpen !== undefined ? middleware.didOpen(notebookDocument, cells, send) : send(notebookDocument, cells);
    }
    async sendDidChangeNotebookDocument(event) {
        return this.doSendChange(event, undefined);
    }
    async doSendChange(event, cells = this.getMatchingCells(event.notebook)) {
        const send = async (event) => {
            try {
                await this.client.sendNotification(proto.DidChangeNotebookDocumentNotification.type, {
                    notebookDocument: Converter.c2p.asVersionedNotebookDocumentIdentifier(event.notebook, this.client.code2ProtocolConverter),
                    change: Converter.c2p.asNotebookDocumentChangeEvent(event, this.client.code2ProtocolConverter)
                });
            }
            catch (error) {
                this.client.error('Sending DidChangeNotebookDocumentNotification failed', error);
                throw error;
            }
        };
        const middleware = this.client.middleware?.notebooks;
        if (event.cells?.structure !== undefined) {
            this.notebookSyncInfo.set(event.notebook.uri.toString(), SyncInfo.create(cells ?? []));
        }
        return middleware?.didChange !== undefined ? middleware?.didChange(event, send) : send(event);
    }
    async sendDidSaveNotebookDocument(notebookDocument) {
        return this.doSendSave(notebookDocument);
    }
    async doSendSave(notebookDocument) {
        const send = async (notebookDocument) => {
            try {
                await this.client.sendNotification(proto.DidSaveNotebookDocumentNotification.type, {
                    notebookDocument: { uri: this.client.code2ProtocolConverter.asUri(notebookDocument.uri) }
                });
            }
            catch (error) {
                this.client.error('Sending DidSaveNotebookDocumentNotification failed', error);
                throw error;
            }
        };
        const middleware = this.client.middleware?.notebooks;
        return middleware?.didSave !== undefined ? middleware.didSave(notebookDocument, send) : send(notebookDocument);
    }
    async sendDidCloseNotebookDocument(notebookDocument) {
        return this.doSendClose(notebookDocument, this.getMatchingCells(notebookDocument) ?? []);
    }
    async doSendClose(notebookDocument, cells) {
        const send = async (notebookDocument, cells) => {
            try {
                await this.client.sendNotification(proto.DidCloseNotebookDocumentNotification.type, {
                    notebookDocument: { uri: this.client.code2ProtocolConverter.asUri(notebookDocument.uri) },
                    cellTextDocuments: cells.map(cell => this.client.code2ProtocolConverter.asTextDocumentIdentifier(cell.document))
                });
            }
            catch (error) {
                this.client.error('Sending DidCloseNotebookDocumentNotification failed', error);
                throw error;
            }
        };
        const middleware = this.client.middleware?.notebooks;
        this.notebookSyncInfo.delete(notebookDocument.uri.toString());
        return middleware?.didClose !== undefined ? middleware.didClose(notebookDocument, cells, send) : send(notebookDocument, cells);
    }
    asNotebookDocumentChangeEvent(notebook, event, syncInfo, matchingCells) {
        if (event !== undefined && event.notebook !== notebook) {
            throw new Error('Notebook must be identical');
        }
        const result = {
            notebook: notebook
        };
        if (event?.metadata !== undefined) {
            result.metadata = Converter.c2p.asMetadata(event.metadata);
        }
        let matchingCellsSet;
        if (event?.cellChanges !== undefined && event.cellChanges.length > 0) {
            const data = [];
            // Only consider the new matching cells.
            matchingCellsSet = new Set(matchingCells.map(cell => cell.document.uri.toString()));
            for (const cellChange of event.cellChanges) {
                if (matchingCellsSet.has(cellChange.cell.document.uri.toString()) && (cellChange.executionSummary !== undefined || cellChange.metadata !== undefined)) {
                    data.push(cellChange.cell);
                }
            }
            if (data.length > 0) {
                result.cells = result.cells ?? {};
                result.cells.data = data;
            }
        }
        if (((event?.contentChanges !== undefined && event.contentChanges.length > 0) || event === undefined) && syncInfo !== undefined && matchingCells !== undefined) {
            // We still have matching cells. Check if the cell changes
            // affect the notebook on the server side.
            const oldCells = syncInfo.cells;
            const newCells = matchingCells;
            // meta data changes are reported using on the cell itself. So we can ignore comparing
            // it which has a positive effect on performance.
            const diff = $NotebookCell.computeDiff(oldCells, newCells, false);
            let addedCells;
            let removedCells;
            if (diff !== undefined) {
                addedCells = diff.cells === undefined
                    ? new Map()
                    : new Map(diff.cells.map(cell => [cell.document.uri.toString(), cell]));
                removedCells = diff.deleteCount === 0
                    ? new Map()
                    : new Map(oldCells.slice(diff.start, diff.start + diff.deleteCount).map(cell => [cell.document.uri.toString(), cell]));
                // Remove the onces that got deleted and inserted again.
                for (const key of Array.from(removedCells.keys())) {
                    if (addedCells.has(key)) {
                        removedCells.delete(key);
                        addedCells.delete(key);
                    }
                }
                result.cells = result.cells ?? {};
                const didOpen = [];
                const didClose = [];
                if (addedCells.size > 0 || removedCells.size > 0) {
                    for (const cell of addedCells.values()) {
                        didOpen.push(cell);
                    }
                    for (const cell of removedCells.values()) {
                        didClose.push(cell);
                    }
                }
                result.cells.structure = {
                    array: diff,
                    didOpen,
                    didClose
                };
            }
        }
        // The notebook is a property as well.
        return Object.keys(result).length > 1 ? result : undefined;
    }
    getMatchingCells(notebookDocument, cells = notebookDocument.getCells()) {
        if (this.options.notebookSelector === undefined) {
            return undefined;
        }
        for (const item of this.options.notebookSelector) {
            if (item.notebook === undefined || $NotebookDocumentFilter.matchNotebook(item.notebook, notebookDocument)) {
                const filtered = this.filterCells(notebookDocument, cells, item.cells);
                return filtered.length === 0 ? undefined : filtered;
            }
        }
        return undefined;
    }
    cellMatches(notebookDocument, cell) {
        const cells = this.getMatchingCells(notebookDocument, [cell]);
        return cells !== undefined && cells[0] === cell;
    }
    filterCells(notebookDocument, cells, cellSelector) {
        const filtered = cellSelector !== undefined ? cells.filter((cell) => {
            const cellLanguage = cell.document.languageId;
            return cellSelector.some((filter => (filter.language === '*' || cellLanguage === filter.language)));
        }) : cells;
        return typeof this.client.clientOptions.notebookDocumentOptions?.filterCells === 'function'
            ? this.client.clientOptions.notebookDocumentOptions.filterCells(notebookDocument, filtered)
            : filtered;
    }
}
class NotebookDocumentSyncFeature {
    constructor(client) {
        this.client = client;
        this.registrations = new Map();
        this.registrationType = proto.NotebookDocumentSyncRegistrationType.type;
        // We don't receive an event for cells where the document changes its language mode
        // Since we allow servers to filter on the language mode we fire such an event ourselves.
        vscode.workspace.onDidOpenTextDocument((textDocument) => {
            if (textDocument.uri.scheme !== NotebookDocumentSyncFeature.CellScheme) {
                return;
            }
            const [notebookDocument, notebookCell] = this.findNotebookDocumentAndCell(textDocument);
            if (notebookDocument === undefined || notebookCell === undefined) {
                return;
            }
            for (const provider of this.registrations.values()) {
                if (provider instanceof NotebookDocumentSyncFeatureProvider) {
                    provider.didOpenNotebookCellTextDocument(notebookDocument, notebookCell);
                }
            }
        });
        vscode.workspace.onDidChangeTextDocument((event) => {
            if (event.contentChanges.length === 0) {
                return;
            }
            const textDocument = event.document;
            if (textDocument.uri.scheme !== NotebookDocumentSyncFeature.CellScheme) {
                return;
            }
            const [notebookDocument,] = this.findNotebookDocumentAndCell(textDocument);
            if (notebookDocument === undefined) {
                return;
            }
            for (const provider of this.registrations.values()) {
                if (provider instanceof NotebookDocumentSyncFeatureProvider) {
                    provider.didChangeNotebookCellTextDocument(notebookDocument, event);
                }
            }
        });
        vscode.workspace.onDidCloseTextDocument((textDocument) => {
            if (textDocument.uri.scheme !== NotebookDocumentSyncFeature.CellScheme) {
                return;
            }
            // There are two cases when we receive a close for a text document
            // 1: the cell got removed. This is handled in `onDidChangeNotebookCells`
            // 2: the language mode of a cell changed. This keeps the URI stable so
            //    we will still find the cell and the notebook document.
            const [notebookDocument, notebookCell] = this.findNotebookDocumentAndCell(textDocument);
            if (notebookDocument === undefined || notebookCell === undefined) {
                return;
            }
            for (const provider of this.registrations.values()) {
                if (provider instanceof NotebookDocumentSyncFeatureProvider) {
                    provider.didCloseNotebookCellTextDocument(notebookDocument, notebookCell);
                }
            }
        });
    }
    getState() {
        if (this.registrations.size === 0) {
            return { kind: 'document', id: this.registrationType.method, registrations: false, matches: false };
        }
        for (const provider of this.registrations.values()) {
            const state = provider.getState();
            if (state.kind === 'document' && state.registrations === true && state.matches === true) {
                return { kind: 'document', id: this.registrationType.method, registrations: true, matches: true };
            }
        }
        return { kind: 'document', id: this.registrationType.method, registrations: true, matches: false };
    }
    fillClientCapabilities(capabilities) {
        const synchronization = ensure(ensure(capabilities, 'notebookDocument'), 'synchronization');
        synchronization.dynamicRegistration = true;
        synchronization.executionSummarySupport = true;
    }
    preInitialize(capabilities) {
        const options = capabilities.notebookDocumentSync;
        if (options === undefined) {
            return;
        }
        this.dedicatedChannel = this.client.protocol2CodeConverter.asDocumentSelector($NotebookDocumentSyncOptions.asDocumentSelector(options));
    }
    initialize(capabilities) {
        const options = capabilities.notebookDocumentSync;
        if (options === undefined) {
            return;
        }
        const id = options.id ?? UUID.generateUuid();
        this.register({ id, registerOptions: options });
    }
    register(data) {
        const provider = new NotebookDocumentSyncFeatureProvider(this.client, data.registerOptions);
        this.registrations.set(data.id, provider);
    }
    unregister(id) {
        const provider = this.registrations.get(id);
        provider && provider.dispose();
    }
    dispose() {
        for (const provider of this.registrations.values()) {
            provider.dispose();
        }
        this.registrations.clear();
    }
    handles(textDocument) {
        if (textDocument.uri.scheme !== NotebookDocumentSyncFeature.CellScheme) {
            return false;
        }
        if (this.dedicatedChannel !== undefined && vscode.languages.match(this.dedicatedChannel, textDocument) > 0) {
            return true;
        }
        for (const provider of this.registrations.values()) {
            if (provider.handles(textDocument)) {
                return true;
            }
        }
        return false;
    }
    getProvider(notebookCell) {
        for (const provider of this.registrations.values()) {
            if (provider.handles(notebookCell.document)) {
                return provider;
            }
        }
        return undefined;
    }
    findNotebookDocumentAndCell(textDocument) {
        const uri = textDocument.uri.toString();
        for (const notebookDocument of vscode.workspace.notebookDocuments) {
            for (const cell of notebookDocument.getCells()) {
                if (cell.document.uri.toString() === uri) {
                    return [notebookDocument, cell];
                }
            }
        }
        return [undefined, undefined];
    }
}
exports.NotebookDocumentSyncFeature = NotebookDocumentSyncFeature;
NotebookDocumentSyncFeature.CellScheme = 'vscode-notebook-cell';


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/progress.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/progress.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const progressPart_1 = __webpack_require__(/*! ./progressPart */ "./node_modules/vscode-languageclient/lib/common/progressPart.js");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = Object.create(null);
    }
    return target[key];
}
class ProgressFeature {
    constructor(_client) {
        this._client = _client;
        this.activeParts = new Set();
    }
    getState() {
        return { kind: 'window', id: vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.method, registrations: this.activeParts.size > 0 };
    }
    fillClientCapabilities(capabilities) {
        ensure(capabilities, 'window').workDoneProgress = true;
    }
    initialize() {
        const client = this._client;
        const deleteHandler = (part) => {
            this.activeParts.delete(part);
        };
        const createHandler = (params) => {
            this.activeParts.add(new progressPart_1.ProgressPart(this._client, params.token, deleteHandler));
        };
        client.onRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, createHandler);
    }
    dispose() {
        for (const part of this.activeParts) {
            part.done();
        }
        this.activeParts.clear();
    }
}
exports.ProgressFeature = ProgressFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/progressPart.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/progressPart.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressPart = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
class ProgressPart {
    constructor(_client, _token, done) {
        this._client = _client;
        this._token = _token;
        this._reported = 0;
        this._infinite = false;
        this._lspProgressDisposable = this._client.onProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, (value) => {
            switch (value.kind) {
                case 'begin':
                    this.begin(value);
                    break;
                case 'report':
                    this.report(value);
                    break;
                case 'end':
                    this.done();
                    done && done(this);
                    break;
            }
        });
    }
    begin(params) {
        this._infinite = params.percentage === undefined;
        // the progress as already been marked as done / canceled. Ignore begin call
        if (this._lspProgressDisposable === undefined) {
            return;
        }
        // Since we don't use commands this will be a silent window progress with a hidden notification.
        void vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Window, cancellable: params.cancellable, title: params.title }, async (progress, cancellationToken) => {
            // the progress as already been marked as done / canceled. Ignore begin call
            if (this._lspProgressDisposable === undefined) {
                return;
            }
            this._progress = progress;
            this._cancellationToken = cancellationToken;
            this._tokenDisposable = this._cancellationToken.onCancellationRequested(() => {
                this._client.sendNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, { token: this._token });
            });
            this.report(params);
            return new Promise((resolve, reject) => {
                this._resolve = resolve;
                this._reject = reject;
            });
        });
    }
    report(params) {
        if (this._infinite && Is.string(params.message)) {
            this._progress !== undefined && this._progress.report({ message: params.message });
        }
        else if (Is.number(params.percentage)) {
            const percentage = Math.max(0, Math.min(params.percentage, 100));
            const delta = Math.max(0, percentage - this._reported);
            this._reported += delta;
            this._progress !== undefined && this._progress.report({ message: params.message, increment: delta });
        }
    }
    cancel() {
        this.cleanup();
        if (this._reject !== undefined) {
            this._reject();
            this._resolve = undefined;
            this._reject = undefined;
        }
    }
    done() {
        this.cleanup();
        if (this._resolve !== undefined) {
            this._resolve();
            this._resolve = undefined;
            this._reject = undefined;
        }
    }
    cleanup() {
        if (this._lspProgressDisposable !== undefined) {
            this._lspProgressDisposable.dispose();
            this._lspProgressDisposable = undefined;
        }
        if (this._tokenDisposable !== undefined) {
            this._tokenDisposable.dispose();
            this._tokenDisposable = undefined;
        }
        this._progress = undefined;
        this._cancellationToken = undefined;
    }
}
exports.ProgressPart = ProgressPart;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolCallHierarchyItem.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolCallHierarchyItem.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolCallHierarchyItem extends code.CallHierarchyItem {
    constructor(kind, name, detail, uri, range, selectionRange, data) {
        super(kind, name, detail, uri, range, selectionRange);
        if (data !== undefined) {
            this.data = data;
        }
    }
}
exports["default"] = ProtocolCallHierarchyItem;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolCodeAction.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolCodeAction.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const vscode = __webpack_require__(/*! vscode */ "vscode");
class ProtocolCodeAction extends vscode.CodeAction {
    constructor(title, data) {
        super(title);
        this.data = data;
    }
}
exports["default"] = ProtocolCodeAction;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolCodeLens.js":
/*!***************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolCodeLens.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolCodeLens extends code.CodeLens {
    constructor(range) {
        super(range);
    }
}
exports["default"] = ProtocolCodeLens;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolCompletionItem.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolCompletionItem.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolCompletionItem extends code.CompletionItem {
    constructor(label) {
        super(label);
    }
}
exports["default"] = ProtocolCompletionItem;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolConverter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolConverter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConverter = void 0;
const code = __webpack_require__(/*! vscode */ "vscode");
const ls = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const async = __webpack_require__(/*! ./utils/async */ "./node_modules/vscode-languageclient/lib/common/utils/async.js");
const protocolCompletionItem_1 = __webpack_require__(/*! ./protocolCompletionItem */ "./node_modules/vscode-languageclient/lib/common/protocolCompletionItem.js");
const protocolCodeLens_1 = __webpack_require__(/*! ./protocolCodeLens */ "./node_modules/vscode-languageclient/lib/common/protocolCodeLens.js");
const protocolDocumentLink_1 = __webpack_require__(/*! ./protocolDocumentLink */ "./node_modules/vscode-languageclient/lib/common/protocolDocumentLink.js");
const protocolCodeAction_1 = __webpack_require__(/*! ./protocolCodeAction */ "./node_modules/vscode-languageclient/lib/common/protocolCodeAction.js");
const protocolDiagnostic_1 = __webpack_require__(/*! ./protocolDiagnostic */ "./node_modules/vscode-languageclient/lib/common/protocolDiagnostic.js");
const protocolCallHierarchyItem_1 = __webpack_require__(/*! ./protocolCallHierarchyItem */ "./node_modules/vscode-languageclient/lib/common/protocolCallHierarchyItem.js");
const protocolTypeHierarchyItem_1 = __webpack_require__(/*! ./protocolTypeHierarchyItem */ "./node_modules/vscode-languageclient/lib/common/protocolTypeHierarchyItem.js");
const protocolWorkspaceSymbol_1 = __webpack_require__(/*! ./protocolWorkspaceSymbol */ "./node_modules/vscode-languageclient/lib/common/protocolWorkspaceSymbol.js");
const protocolInlayHint_1 = __webpack_require__(/*! ./protocolInlayHint */ "./node_modules/vscode-languageclient/lib/common/protocolInlayHint.js");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
var CodeBlock;
(function (CodeBlock) {
    function is(value) {
        let candidate = value;
        return candidate && Is.string(candidate.language) && Is.string(candidate.value);
    }
    CodeBlock.is = is;
})(CodeBlock || (CodeBlock = {}));
function createConverter(uriConverter, trustMarkdown, supportHtml) {
    const nullConverter = (value) => code.Uri.parse(value);
    const _uriConverter = uriConverter || nullConverter;
    function asUri(value) {
        return _uriConverter(value);
    }
    function asDocumentSelector(selector) {
        const result = [];
        for (const filter of selector) {
            if (typeof filter === 'string') {
                result.push(filter);
            }
            else if (vscode_languageserver_protocol_1.NotebookCellTextDocumentFilter.is(filter)) {
                // We first need to check for the notebook cell filter since a TextDocumentFilter would
                // match both (e.g. the notebook is optional).
                if (typeof filter.notebook === 'string') {
                    result.push({ notebookType: filter.notebook, language: filter.language });
                }
                else {
                    const notebookType = filter.notebook.notebookType ?? '*';
                    result.push({ notebookType: notebookType, scheme: filter.notebook.scheme, pattern: filter.notebook.pattern, language: filter.language });
                }
            }
            else if (vscode_languageserver_protocol_1.TextDocumentFilter.is(filter)) {
                result.push({ language: filter.language, scheme: filter.scheme, pattern: filter.pattern });
            }
        }
        return result;
    }
    async function asDiagnostics(diagnostics, token) {
        return async.map(diagnostics, asDiagnostic, token);
    }
    function asDiagnosticsSync(diagnostics) {
        const result = new Array(diagnostics.length);
        for (let i = 0; i < diagnostics.length; i++) {
            result[i] = asDiagnostic(diagnostics[i]);
        }
        return result;
    }
    function asDiagnostic(diagnostic) {
        let result = new protocolDiagnostic_1.ProtocolDiagnostic(asRange(diagnostic.range), diagnostic.message, asDiagnosticSeverity(diagnostic.severity), diagnostic.data);
        if (diagnostic.code !== undefined) {
            if (typeof diagnostic.code === 'string' || typeof diagnostic.code === 'number') {
                if (ls.CodeDescription.is(diagnostic.codeDescription)) {
                    result.code = {
                        value: diagnostic.code,
                        target: asUri(diagnostic.codeDescription.href)
                    };
                }
                else {
                    result.code = diagnostic.code;
                }
            }
            else if (protocolDiagnostic_1.DiagnosticCode.is(diagnostic.code)) {
                // This is for backwards compatibility of a proposed API.
                // We should remove this at some point.
                result.hasDiagnosticCode = true;
                const diagnosticCode = diagnostic.code;
                result.code = {
                    value: diagnosticCode.value,
                    target: asUri(diagnosticCode.target)
                };
            }
        }
        if (diagnostic.source) {
            result.source = diagnostic.source;
        }
        if (diagnostic.relatedInformation) {
            result.relatedInformation = asRelatedInformation(diagnostic.relatedInformation);
        }
        if (Array.isArray(diagnostic.tags)) {
            result.tags = asDiagnosticTags(diagnostic.tags);
        }
        return result;
    }
    function asRelatedInformation(relatedInformation) {
        const result = new Array(relatedInformation.length);
        for (let i = 0; i < relatedInformation.length; i++) {
            const info = relatedInformation[i];
            result[i] = new code.DiagnosticRelatedInformation(asLocation(info.location), info.message);
        }
        return result;
    }
    function asDiagnosticTags(tags) {
        if (!tags) {
            return undefined;
        }
        let result = [];
        for (let tag of tags) {
            let converted = asDiagnosticTag(tag);
            if (converted !== undefined) {
                result.push(converted);
            }
        }
        return result.length > 0 ? result : undefined;
    }
    function asDiagnosticTag(tag) {
        switch (tag) {
            case ls.DiagnosticTag.Unnecessary:
                return code.DiagnosticTag.Unnecessary;
            case ls.DiagnosticTag.Deprecated:
                return code.DiagnosticTag.Deprecated;
            default:
                return undefined;
        }
    }
    function asPosition(value) {
        return value ? new code.Position(value.line, value.character) : undefined;
    }
    function asRange(value) {
        return value ? new code.Range(value.start.line, value.start.character, value.end.line, value.end.character) : undefined;
    }
    async function asRanges(items, token) {
        return async.map(items, (range) => {
            return new code.Range(range.start.line, range.start.character, range.end.line, range.end.character);
        }, token);
    }
    function asDiagnosticSeverity(value) {
        if (value === undefined || value === null) {
            return code.DiagnosticSeverity.Error;
        }
        switch (value) {
            case ls.DiagnosticSeverity.Error:
                return code.DiagnosticSeverity.Error;
            case ls.DiagnosticSeverity.Warning:
                return code.DiagnosticSeverity.Warning;
            case ls.DiagnosticSeverity.Information:
                return code.DiagnosticSeverity.Information;
            case ls.DiagnosticSeverity.Hint:
                return code.DiagnosticSeverity.Hint;
        }
        return code.DiagnosticSeverity.Error;
    }
    function asHoverContent(value) {
        if (Is.string(value)) {
            return asMarkdownString(value);
        }
        else if (CodeBlock.is(value)) {
            let result = asMarkdownString();
            return result.appendCodeblock(value.value, value.language);
        }
        else if (Array.isArray(value)) {
            let result = [];
            for (let element of value) {
                let item = asMarkdownString();
                if (CodeBlock.is(element)) {
                    item.appendCodeblock(element.value, element.language);
                }
                else {
                    item.appendMarkdown(element);
                }
                result.push(item);
            }
            return result;
        }
        else {
            return asMarkdownString(value);
        }
    }
    function asDocumentation(value) {
        if (Is.string(value)) {
            return value;
        }
        else {
            switch (value.kind) {
                case ls.MarkupKind.Markdown:
                    return asMarkdownString(value.value);
                case ls.MarkupKind.PlainText:
                    return value.value;
                default:
                    return `Unsupported Markup content received. Kind is: ${value.kind}`;
            }
        }
    }
    function asMarkdownString(value) {
        let result;
        if (value === undefined || typeof value === 'string') {
            result = new code.MarkdownString(value);
        }
        else {
            switch (value.kind) {
                case ls.MarkupKind.Markdown:
                    result = new code.MarkdownString(value.value);
                    break;
                case ls.MarkupKind.PlainText:
                    result = new code.MarkdownString();
                    result.appendText(value.value);
                    break;
                default:
                    result = new code.MarkdownString();
                    result.appendText(`Unsupported Markup content received. Kind is: ${value.kind}`);
                    break;
            }
        }
        result.isTrusted = trustMarkdown;
        result.supportHtml = supportHtml;
        return result;
    }
    function asHover(hover) {
        if (!hover) {
            return undefined;
        }
        return new code.Hover(asHoverContent(hover.contents), asRange(hover.range));
    }
    async function asCompletionResult(value, allCommitCharacters, token) {
        if (!value) {
            return undefined;
        }
        if (Array.isArray(value)) {
            return async.map(value, (item) => asCompletionItem(item, allCommitCharacters), token);
        }
        const list = value;
        const { defaultRange, commitCharacters } = getCompletionItemDefaults(list, allCommitCharacters);
        const converted = await async.map(list.items, (item) => {
            return asCompletionItem(item, commitCharacters, defaultRange, list.itemDefaults?.insertTextMode, list.itemDefaults?.insertTextFormat, list.itemDefaults?.data);
        }, token);
        return new code.CompletionList(converted, list.isIncomplete);
    }
    function getCompletionItemDefaults(list, allCommitCharacters) {
        const rangeDefaults = list.itemDefaults?.editRange;
        const commitCharacters = list.itemDefaults?.commitCharacters ?? allCommitCharacters;
        return ls.Range.is(rangeDefaults)
            ? { defaultRange: asRange(rangeDefaults), commitCharacters }
            : rangeDefaults !== undefined
                ? { defaultRange: { inserting: asRange(rangeDefaults.insert), replacing: asRange(rangeDefaults.replace) }, commitCharacters }
                : { defaultRange: undefined, commitCharacters };
    }
    function asCompletionItemKind(value) {
        // Protocol item kind is 1 based, codes item kind is zero based.
        if (ls.CompletionItemKind.Text <= value && value <= ls.CompletionItemKind.TypeParameter) {
            return [value - 1, undefined];
        }
        return [code.CompletionItemKind.Text, value];
    }
    function asCompletionItemTag(tag) {
        switch (tag) {
            case ls.CompletionItemTag.Deprecated:
                return code.CompletionItemTag.Deprecated;
        }
        return undefined;
    }
    function asCompletionItemTags(tags) {
        if (tags === undefined || tags === null) {
            return [];
        }
        const result = [];
        for (const tag of tags) {
            const converted = asCompletionItemTag(tag);
            if (converted !== undefined) {
                result.push(converted);
            }
        }
        return result;
    }
    function asCompletionItem(item, defaultCommitCharacters, defaultRange, defaultInsertTextMode, defaultInsertTextFormat, defaultData) {
        const tags = asCompletionItemTags(item.tags);
        const label = asCompletionItemLabel(item);
        const result = new protocolCompletionItem_1.default(label);
        if (item.detail) {
            result.detail = item.detail;
        }
        if (item.documentation) {
            result.documentation = asDocumentation(item.documentation);
            result.documentationFormat = Is.string(item.documentation) ? '$string' : item.documentation.kind;
        }
        if (item.filterText) {
            result.filterText = item.filterText;
        }
        const insertText = asCompletionInsertText(item, defaultRange, defaultInsertTextFormat);
        if (insertText) {
            result.insertText = insertText.text;
            result.range = insertText.range;
            result.fromEdit = insertText.fromEdit;
        }
        if (Is.number(item.kind)) {
            let [itemKind, original] = asCompletionItemKind(item.kind);
            result.kind = itemKind;
            if (original) {
                result.originalItemKind = original;
            }
        }
        if (item.sortText) {
            result.sortText = item.sortText;
        }
        if (item.additionalTextEdits) {
            result.additionalTextEdits = asTextEditsSync(item.additionalTextEdits);
        }
        const commitCharacters = item.commitCharacters !== undefined
            ? Is.stringArray(item.commitCharacters) ? item.commitCharacters : undefined
            : defaultCommitCharacters;
        if (commitCharacters) {
            result.commitCharacters = commitCharacters.slice();
        }
        if (item.command) {
            result.command = asCommand(item.command);
        }
        if (item.deprecated === true || item.deprecated === false) {
            result.deprecated = item.deprecated;
            if (item.deprecated === true) {
                tags.push(code.CompletionItemTag.Deprecated);
            }
        }
        if (item.preselect === true || item.preselect === false) {
            result.preselect = item.preselect;
        }
        const data = item.data ?? defaultData;
        if (data !== undefined) {
            result.data = data;
        }
        if (tags.length > 0) {
            result.tags = tags;
        }
        const insertTextMode = item.insertTextMode ?? defaultInsertTextMode;
        if (insertTextMode !== undefined) {
            result.insertTextMode = insertTextMode;
            if (insertTextMode === ls.InsertTextMode.asIs) {
                result.keepWhitespace = true;
            }
        }
        return result;
    }
    function asCompletionItemLabel(item) {
        if (ls.CompletionItemLabelDetails.is(item.labelDetails)) {
            return {
                label: item.label,
                detail: item.labelDetails.detail,
                description: item.labelDetails.description
            };
        }
        else {
            return item.label;
        }
    }
    function asCompletionInsertText(item, defaultRange, defaultInsertTextFormat) {
        const insertTextFormat = item.insertTextFormat ?? defaultInsertTextFormat;
        if (item.textEdit !== undefined || defaultRange !== undefined) {
            const [range, newText] = item.textEdit !== undefined
                ? getCompletionRangeAndText(item.textEdit)
                : [defaultRange, item.textEditText ?? item.label];
            if (insertTextFormat === ls.InsertTextFormat.Snippet) {
                return { text: new code.SnippetString(newText), range: range, fromEdit: true };
            }
            else {
                return { text: newText, range: range, fromEdit: true };
            }
        }
        else if (item.insertText) {
            if (insertTextFormat === ls.InsertTextFormat.Snippet) {
                return { text: new code.SnippetString(item.insertText), fromEdit: false };
            }
            else {
                return { text: item.insertText, fromEdit: false };
            }
        }
        else {
            return undefined;
        }
    }
    function getCompletionRangeAndText(value) {
        if (ls.InsertReplaceEdit.is(value)) {
            return [{ inserting: asRange(value.insert), replacing: asRange(value.replace) }, value.newText];
        }
        else {
            return [asRange(value.range), value.newText];
        }
    }
    function asTextEdit(edit) {
        if (!edit) {
            return undefined;
        }
        return new code.TextEdit(asRange(edit.range), edit.newText);
    }
    async function asTextEdits(items, token) {
        if (!items) {
            return undefined;
        }
        return async.map(items, asTextEdit, token);
    }
    function asTextEditsSync(items) {
        if (!items) {
            return undefined;
        }
        const result = new Array(items.length);
        for (let i = 0; i < items.length; i++) {
            result[i] = asTextEdit(items[i]);
        }
        return result;
    }
    async function asSignatureHelp(item, token) {
        if (!item) {
            return undefined;
        }
        let result = new code.SignatureHelp();
        if (Is.number(item.activeSignature)) {
            result.activeSignature = item.activeSignature;
        }
        else {
            // activeSignature was optional in the past
            result.activeSignature = 0;
        }
        if (Is.number(item.activeParameter)) {
            result.activeParameter = item.activeParameter;
        }
        else {
            // activeParameter was optional in the past
            result.activeParameter = 0;
        }
        if (item.signatures) {
            result.signatures = await asSignatureInformations(item.signatures, token);
        }
        return result;
    }
    async function asSignatureInformations(items, token) {
        return async.mapAsync(items, asSignatureInformation, token);
    }
    async function asSignatureInformation(item, token) {
        let result = new code.SignatureInformation(item.label);
        if (item.documentation !== undefined) {
            result.documentation = asDocumentation(item.documentation);
        }
        if (item.parameters !== undefined) {
            result.parameters = await asParameterInformations(item.parameters, token);
        }
        if (item.activeParameter !== undefined) {
            result.activeParameter = item.activeParameter;
        }
        {
            return result;
        }
    }
    function asParameterInformations(items, token) {
        return async.map(items, asParameterInformation, token);
    }
    function asParameterInformation(item) {
        let result = new code.ParameterInformation(item.label);
        if (item.documentation) {
            result.documentation = asDocumentation(item.documentation);
        }
        return result;
    }
    function asLocation(item) {
        return item ? new code.Location(_uriConverter(item.uri), asRange(item.range)) : undefined;
    }
    async function asDeclarationResult(item, token) {
        if (!item) {
            return undefined;
        }
        return asLocationResult(item, token);
    }
    async function asDefinitionResult(item, token) {
        if (!item) {
            return undefined;
        }
        return asLocationResult(item, token);
    }
    function asLocationLink(item) {
        if (!item) {
            return undefined;
        }
        let result = {
            targetUri: _uriConverter(item.targetUri),
            targetRange: asRange(item.targetRange),
            originSelectionRange: asRange(item.originSelectionRange),
            targetSelectionRange: asRange(item.targetSelectionRange)
        };
        if (!result.targetSelectionRange) {
            throw new Error(`targetSelectionRange must not be undefined or null`);
        }
        return result;
    }
    async function asLocationResult(item, token) {
        if (!item) {
            return undefined;
        }
        if (Is.array(item)) {
            if (item.length === 0) {
                return [];
            }
            else if (ls.LocationLink.is(item[0])) {
                const links = item;
                return async.map(links, asLocationLink, token);
            }
            else {
                const locations = item;
                return async.map(locations, asLocation, token);
            }
        }
        else if (ls.LocationLink.is(item)) {
            return [asLocationLink(item)];
        }
        else {
            return asLocation(item);
        }
    }
    async function asReferences(values, token) {
        if (!values) {
            return undefined;
        }
        return async.map(values, asLocation, token);
    }
    async function asDocumentHighlights(values, token) {
        if (!values) {
            return undefined;
        }
        return async.map(values, asDocumentHighlight, token);
    }
    function asDocumentHighlight(item) {
        let result = new code.DocumentHighlight(asRange(item.range));
        if (Is.number(item.kind)) {
            result.kind = asDocumentHighlightKind(item.kind);
        }
        return result;
    }
    function asDocumentHighlightKind(item) {
        switch (item) {
            case ls.DocumentHighlightKind.Text:
                return code.DocumentHighlightKind.Text;
            case ls.DocumentHighlightKind.Read:
                return code.DocumentHighlightKind.Read;
            case ls.DocumentHighlightKind.Write:
                return code.DocumentHighlightKind.Write;
        }
        return code.DocumentHighlightKind.Text;
    }
    async function asSymbolInformations(values, token) {
        if (!values) {
            return undefined;
        }
        return async.map(values, asSymbolInformation, token);
    }
    function asSymbolKind(item) {
        if (item <= ls.SymbolKind.TypeParameter) {
            // Symbol kind is one based in the protocol and zero based in code.
            return item - 1;
        }
        return code.SymbolKind.Property;
    }
    function asSymbolTag(value) {
        switch (value) {
            case ls.SymbolTag.Deprecated:
                return code.SymbolTag.Deprecated;
            default:
                return undefined;
        }
    }
    function asSymbolTags(items) {
        if (items === undefined || items === null) {
            return undefined;
        }
        const result = [];
        for (const item of items) {
            const converted = asSymbolTag(item);
            if (converted !== undefined) {
                result.push(converted);
            }
        }
        return result.length === 0 ? undefined : result;
    }
    function asSymbolInformation(item) {
        const data = item.data;
        const location = item.location;
        const result = location.range === undefined || data !== undefined
            ? new protocolWorkspaceSymbol_1.default(item.name, asSymbolKind(item.kind), item.containerName ?? '', location.range === undefined ? _uriConverter(location.uri) : new code.Location(_uriConverter(item.location.uri), asRange(location.range)), data)
            : new code.SymbolInformation(item.name, asSymbolKind(item.kind), item.containerName ?? '', new code.Location(_uriConverter(item.location.uri), asRange(location.range)));
        fillTags(result, item);
        return result;
    }
    async function asDocumentSymbols(values, token) {
        if (values === undefined || values === null) {
            return undefined;
        }
        return async.map(values, asDocumentSymbol, token);
    }
    function asDocumentSymbol(value) {
        let result = new code.DocumentSymbol(value.name, value.detail || '', asSymbolKind(value.kind), asRange(value.range), asRange(value.selectionRange));
        fillTags(result, value);
        if (value.children !== undefined && value.children.length > 0) {
            let children = [];
            for (let child of value.children) {
                children.push(asDocumentSymbol(child));
            }
            result.children = children;
        }
        return result;
    }
    function fillTags(result, value) {
        result.tags = asSymbolTags(value.tags);
        if (value.deprecated) {
            if (!result.tags) {
                result.tags = [code.SymbolTag.Deprecated];
            }
            else {
                if (!result.tags.includes(code.SymbolTag.Deprecated)) {
                    result.tags = result.tags.concat(code.SymbolTag.Deprecated);
                }
            }
        }
    }
    function asCommand(item) {
        let result = { title: item.title, command: item.command };
        if (item.arguments) {
            result.arguments = item.arguments;
        }
        return result;
    }
    async function asCommands(items, token) {
        if (!items) {
            return undefined;
        }
        return async.map(items, asCommand, token);
    }
    const kindMapping = new Map();
    kindMapping.set(ls.CodeActionKind.Empty, code.CodeActionKind.Empty);
    kindMapping.set(ls.CodeActionKind.QuickFix, code.CodeActionKind.QuickFix);
    kindMapping.set(ls.CodeActionKind.Refactor, code.CodeActionKind.Refactor);
    kindMapping.set(ls.CodeActionKind.RefactorExtract, code.CodeActionKind.RefactorExtract);
    kindMapping.set(ls.CodeActionKind.RefactorInline, code.CodeActionKind.RefactorInline);
    kindMapping.set(ls.CodeActionKind.RefactorRewrite, code.CodeActionKind.RefactorRewrite);
    kindMapping.set(ls.CodeActionKind.Source, code.CodeActionKind.Source);
    kindMapping.set(ls.CodeActionKind.SourceOrganizeImports, code.CodeActionKind.SourceOrganizeImports);
    function asCodeActionKind(item) {
        if (item === undefined || item === null) {
            return undefined;
        }
        let result = kindMapping.get(item);
        if (result) {
            return result;
        }
        let parts = item.split('.');
        result = code.CodeActionKind.Empty;
        for (let part of parts) {
            result = result.append(part);
        }
        return result;
    }
    function asCodeActionKinds(items) {
        if (items === undefined || items === null) {
            return undefined;
        }
        return items.map(kind => asCodeActionKind(kind));
    }
    async function asCodeAction(item, token) {
        if (item === undefined || item === null) {
            return undefined;
        }
        let result = new protocolCodeAction_1.default(item.title, item.data);
        if (item.kind !== undefined) {
            result.kind = asCodeActionKind(item.kind);
        }
        if (item.diagnostics !== undefined) {
            result.diagnostics = asDiagnosticsSync(item.diagnostics);
        }
        if (item.edit !== undefined) {
            result.edit = await asWorkspaceEdit(item.edit, token);
        }
        if (item.command !== undefined) {
            result.command = asCommand(item.command);
        }
        if (item.isPreferred !== undefined) {
            result.isPreferred = item.isPreferred;
        }
        if (item.disabled !== undefined) {
            result.disabled = { reason: item.disabled.reason };
        }
        return result;
    }
    function asCodeActionResult(items, token) {
        return async.mapAsync(items, async (item) => {
            if (ls.Command.is(item)) {
                return asCommand(item);
            }
            else {
                return asCodeAction(item, token);
            }
        }, token);
    }
    function asCodeLens(item) {
        if (!item) {
            return undefined;
        }
        let result = new protocolCodeLens_1.default(asRange(item.range));
        if (item.command) {
            result.command = asCommand(item.command);
        }
        if (item.data !== undefined && item.data !== null) {
            result.data = item.data;
        }
        return result;
    }
    async function asCodeLenses(items, token) {
        if (!items) {
            return undefined;
        }
        return async.map(items, asCodeLens, token);
    }
    async function asWorkspaceEdit(item, token) {
        if (!item) {
            return undefined;
        }
        const sharedMetadata = new Map();
        if (item.changeAnnotations !== undefined) {
            const changeAnnotations = item.changeAnnotations;
            await async.forEach(Object.keys(changeAnnotations), (key) => {
                const metaData = asWorkspaceEditEntryMetadata(changeAnnotations[key]);
                sharedMetadata.set(key, metaData);
            }, token);
        }
        const asMetadata = (annotation) => {
            if (annotation === undefined) {
                return undefined;
            }
            else {
                return sharedMetadata.get(annotation);
            }
        };
        const result = new code.WorkspaceEdit();
        if (item.documentChanges) {
            const documentChanges = item.documentChanges;
            await async.forEach(documentChanges, (change) => {
                if (ls.CreateFile.is(change)) {
                    result.createFile(_uriConverter(change.uri), change.options, asMetadata(change.annotationId));
                }
                else if (ls.RenameFile.is(change)) {
                    result.renameFile(_uriConverter(change.oldUri), _uriConverter(change.newUri), change.options, asMetadata(change.annotationId));
                }
                else if (ls.DeleteFile.is(change)) {
                    result.deleteFile(_uriConverter(change.uri), change.options, asMetadata(change.annotationId));
                }
                else if (ls.TextDocumentEdit.is(change)) {
                    const uri = _uriConverter(change.textDocument.uri);
                    for (const edit of change.edits) {
                        if (ls.AnnotatedTextEdit.is(edit)) {
                            result.replace(uri, asRange(edit.range), edit.newText, asMetadata(edit.annotationId));
                        }
                        else {
                            result.replace(uri, asRange(edit.range), edit.newText);
                        }
                    }
                }
                else {
                    throw new Error(`Unknown workspace edit change received:\n${JSON.stringify(change, undefined, 4)}`);
                }
            }, token);
        }
        else if (item.changes) {
            const changes = item.changes;
            await async.forEach(Object.keys(changes), (key) => {
                result.set(_uriConverter(key), asTextEditsSync(changes[key]));
            }, token);
        }
        return result;
    }
    function asWorkspaceEditEntryMetadata(annotation) {
        if (annotation === undefined) {
            return undefined;
        }
        return { label: annotation.label, needsConfirmation: !!annotation.needsConfirmation, description: annotation.description };
    }
    function asDocumentLink(item) {
        let range = asRange(item.range);
        let target = item.target ? asUri(item.target) : undefined;
        // target must be optional in DocumentLink
        let link = new protocolDocumentLink_1.default(range, target);
        if (item.tooltip !== undefined) {
            link.tooltip = item.tooltip;
        }
        if (item.data !== undefined && item.data !== null) {
            link.data = item.data;
        }
        return link;
    }
    async function asDocumentLinks(items, token) {
        if (!items) {
            return undefined;
        }
        return async.map(items, asDocumentLink, token);
    }
    function asColor(color) {
        return new code.Color(color.red, color.green, color.blue, color.alpha);
    }
    function asColorInformation(ci) {
        return new code.ColorInformation(asRange(ci.range), asColor(ci.color));
    }
    async function asColorInformations(colorInformation, token) {
        if (!colorInformation) {
            return undefined;
        }
        return async.map(colorInformation, asColorInformation, token);
    }
    function asColorPresentation(cp) {
        let presentation = new code.ColorPresentation(cp.label);
        presentation.additionalTextEdits = asTextEditsSync(cp.additionalTextEdits);
        if (cp.textEdit) {
            presentation.textEdit = asTextEdit(cp.textEdit);
        }
        return presentation;
    }
    async function asColorPresentations(colorPresentations, token) {
        if (!colorPresentations) {
            return undefined;
        }
        return async.map(colorPresentations, asColorPresentation, token);
    }
    function asFoldingRangeKind(kind) {
        if (kind) {
            switch (kind) {
                case ls.FoldingRangeKind.Comment:
                    return code.FoldingRangeKind.Comment;
                case ls.FoldingRangeKind.Imports:
                    return code.FoldingRangeKind.Imports;
                case ls.FoldingRangeKind.Region:
                    return code.FoldingRangeKind.Region;
            }
        }
        return undefined;
    }
    function asFoldingRange(r) {
        return new code.FoldingRange(r.startLine, r.endLine, asFoldingRangeKind(r.kind));
    }
    async function asFoldingRanges(foldingRanges, token) {
        if (!foldingRanges) {
            return undefined;
        }
        return async.map(foldingRanges, asFoldingRange, token);
    }
    function asSelectionRange(selectionRange) {
        return new code.SelectionRange(asRange(selectionRange.range), selectionRange.parent ? asSelectionRange(selectionRange.parent) : undefined);
    }
    async function asSelectionRanges(selectionRanges, token) {
        if (!Array.isArray(selectionRanges)) {
            return [];
        }
        return async.map(selectionRanges, asSelectionRange, token);
    }
    function asInlineValue(inlineValue) {
        if (ls.InlineValueText.is(inlineValue)) {
            return new code.InlineValueText(asRange(inlineValue.range), inlineValue.text);
        }
        else if (ls.InlineValueVariableLookup.is(inlineValue)) {
            return new code.InlineValueVariableLookup(asRange(inlineValue.range), inlineValue.variableName, inlineValue.caseSensitiveLookup);
        }
        else {
            return new code.InlineValueEvaluatableExpression(asRange(inlineValue.range), inlineValue.expression);
        }
    }
    async function asInlineValues(inlineValues, token) {
        if (!Array.isArray(inlineValues)) {
            return [];
        }
        return async.map(inlineValues, asInlineValue, token);
    }
    async function asInlayHint(value, token) {
        const label = typeof value.label === 'string'
            ? value.label
            : await async.map(value.label, asInlayHintLabelPart, token);
        const result = new protocolInlayHint_1.default(asPosition(value.position), label);
        if (value.kind !== undefined) {
            result.kind = value.kind;
        }
        if (value.textEdits !== undefined) {
            result.textEdits = await asTextEdits(value.textEdits, token);
        }
        if (value.tooltip !== undefined) {
            result.tooltip = asTooltip(value.tooltip);
        }
        if (value.paddingLeft !== undefined) {
            result.paddingLeft = value.paddingLeft;
        }
        if (value.paddingRight !== undefined) {
            result.paddingRight = value.paddingRight;
        }
        if (value.data !== undefined) {
            result.data = value.data;
        }
        return result;
    }
    function asInlayHintLabelPart(part) {
        const result = new code.InlayHintLabelPart(part.value);
        if (part.location !== undefined) {
            result.location = asLocation(part.location);
        }
        if (part.tooltip !== undefined) {
            result.tooltip = asTooltip(part.tooltip);
        }
        if (part.command !== undefined) {
            result.command = asCommand(part.command);
        }
        return result;
    }
    function asTooltip(value) {
        if (typeof value === 'string') {
            return value;
        }
        return asMarkdownString(value);
    }
    async function asInlayHints(values, token) {
        if (!Array.isArray(values)) {
            return undefined;
        }
        return async.mapAsync(values, asInlayHint, token);
    }
    function asCallHierarchyItem(item) {
        if (item === null) {
            return undefined;
        }
        const result = new protocolCallHierarchyItem_1.default(asSymbolKind(item.kind), item.name, item.detail || '', asUri(item.uri), asRange(item.range), asRange(item.selectionRange), item.data);
        if (item.tags !== undefined) {
            result.tags = asSymbolTags(item.tags);
        }
        return result;
    }
    async function asCallHierarchyItems(items, token) {
        if (items === null) {
            return undefined;
        }
        return async.map(items, asCallHierarchyItem, token);
    }
    async function asCallHierarchyIncomingCall(item, token) {
        return new code.CallHierarchyIncomingCall(asCallHierarchyItem(item.from), await asRanges(item.fromRanges, token));
    }
    async function asCallHierarchyIncomingCalls(items, token) {
        if (items === null) {
            return undefined;
        }
        return async.mapAsync(items, asCallHierarchyIncomingCall, token);
    }
    async function asCallHierarchyOutgoingCall(item, token) {
        return new code.CallHierarchyOutgoingCall(asCallHierarchyItem(item.to), await asRanges(item.fromRanges, token));
    }
    async function asCallHierarchyOutgoingCalls(items, token) {
        if (items === null) {
            return undefined;
        }
        return async.mapAsync(items, asCallHierarchyOutgoingCall, token);
    }
    async function asSemanticTokens(value, _token) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return new code.SemanticTokens(new Uint32Array(value.data), value.resultId);
    }
    function asSemanticTokensEdit(value) {
        return new code.SemanticTokensEdit(value.start, value.deleteCount, value.data !== undefined ? new Uint32Array(value.data) : undefined);
    }
    async function asSemanticTokensEdits(value, _token) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return new code.SemanticTokensEdits(value.edits.map(asSemanticTokensEdit), value.resultId);
    }
    function asSemanticTokensLegend(value) {
        return value;
    }
    async function asLinkedEditingRanges(value, token) {
        if (value === null || value === undefined) {
            return undefined;
        }
        return new code.LinkedEditingRanges(await asRanges(value.ranges, token), asRegularExpression(value.wordPattern));
    }
    function asRegularExpression(value) {
        if (value === null || value === undefined) {
            return undefined;
        }
        return new RegExp(value);
    }
    function asTypeHierarchyItem(item) {
        if (item === null) {
            return undefined;
        }
        let result = new protocolTypeHierarchyItem_1.default(asSymbolKind(item.kind), item.name, item.detail || '', asUri(item.uri), asRange(item.range), asRange(item.selectionRange), item.data);
        if (item.tags !== undefined) {
            result.tags = asSymbolTags(item.tags);
        }
        return result;
    }
    async function asTypeHierarchyItems(items, token) {
        if (items === null) {
            return undefined;
        }
        return async.map(items, asTypeHierarchyItem, token);
    }
    function asGlobPattern(pattern) {
        if (Is.string(pattern)) {
            return pattern;
        }
        if (ls.RelativePattern.is(pattern)) {
            if (ls.URI.is(pattern.baseUri)) {
                return new code.RelativePattern(asUri(pattern.baseUri), pattern.pattern);
            }
            else if (ls.WorkspaceFolder.is(pattern.baseUri)) {
                const workspaceFolder = code.workspace.getWorkspaceFolder(asUri(pattern.baseUri.uri));
                return workspaceFolder !== undefined ? new code.RelativePattern(workspaceFolder, pattern.pattern) : undefined;
            }
        }
        return undefined;
    }
    return {
        asUri,
        asDocumentSelector,
        asDiagnostics,
        asDiagnostic,
        asRange,
        asRanges,
        asPosition,
        asDiagnosticSeverity,
        asDiagnosticTag,
        asHover,
        asCompletionResult,
        asCompletionItem,
        asTextEdit,
        asTextEdits,
        asSignatureHelp,
        asSignatureInformations,
        asSignatureInformation,
        asParameterInformations,
        asParameterInformation,
        asDeclarationResult,
        asDefinitionResult,
        asLocation,
        asReferences,
        asDocumentHighlights,
        asDocumentHighlight,
        asDocumentHighlightKind,
        asSymbolKind,
        asSymbolTag,
        asSymbolTags,
        asSymbolInformations,
        asSymbolInformation,
        asDocumentSymbols,
        asDocumentSymbol,
        asCommand,
        asCommands,
        asCodeAction,
        asCodeActionKind,
        asCodeActionKinds,
        asCodeActionResult,
        asCodeLens,
        asCodeLenses,
        asWorkspaceEdit,
        asDocumentLink,
        asDocumentLinks,
        asFoldingRangeKind,
        asFoldingRange,
        asFoldingRanges,
        asColor,
        asColorInformation,
        asColorInformations,
        asColorPresentation,
        asColorPresentations,
        asSelectionRange,
        asSelectionRanges,
        asInlineValue,
        asInlineValues,
        asInlayHint,
        asInlayHints,
        asSemanticTokensLegend,
        asSemanticTokens,
        asSemanticTokensEdit,
        asSemanticTokensEdits,
        asCallHierarchyItem,
        asCallHierarchyItems,
        asCallHierarchyIncomingCall,
        asCallHierarchyIncomingCalls,
        asCallHierarchyOutgoingCall,
        asCallHierarchyOutgoingCalls,
        asLinkedEditingRanges: asLinkedEditingRanges,
        asTypeHierarchyItem,
        asTypeHierarchyItems,
        asGlobPattern
    };
}
exports.createConverter = createConverter;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolDiagnostic.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolDiagnostic.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolDiagnostic = exports.DiagnosticCode = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
var DiagnosticCode;
(function (DiagnosticCode) {
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && (Is.number(candidate.value) || Is.string(candidate.value)) && Is.string(candidate.target);
    }
    DiagnosticCode.is = is;
})(DiagnosticCode = exports.DiagnosticCode || (exports.DiagnosticCode = {}));
class ProtocolDiagnostic extends vscode.Diagnostic {
    constructor(range, message, severity, data) {
        super(range, message, severity);
        this.data = data;
        this.hasDiagnosticCode = false;
    }
}
exports.ProtocolDiagnostic = ProtocolDiagnostic;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolDocumentLink.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolDocumentLink.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolDocumentLink extends code.DocumentLink {
    constructor(range, target) {
        super(range, target);
    }
}
exports["default"] = ProtocolDocumentLink;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolInlayHint.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolInlayHint.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolInlayHint extends code.InlayHint {
    constructor(position, label, kind) {
        super(position, label, kind);
    }
}
exports["default"] = ProtocolInlayHint;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolTypeHierarchyItem.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolTypeHierarchyItem.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class ProtocolTypeHierarchyItem extends code.TypeHierarchyItem {
    constructor(kind, name, detail, uri, range, selectionRange, data) {
        super(kind, name, detail, uri, range, selectionRange);
        if (data !== undefined) {
            this.data = data;
        }
    }
}
exports["default"] = ProtocolTypeHierarchyItem;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/protocolWorkspaceSymbol.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/protocolWorkspaceSymbol.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const code = __webpack_require__(/*! vscode */ "vscode");
class WorkspaceSymbol extends code.SymbolInformation {
    constructor(name, kind, containerName, locationOrUri, data) {
        const hasRange = !(locationOrUri instanceof code.Uri);
        super(name, kind, containerName, hasRange ? locationOrUri : new code.Location(locationOrUri, new code.Range(0, 0, 0, 0)));
        this.hasRange = hasRange;
        if (data !== undefined) {
            this.data = data;
        }
    }
}
exports["default"] = WorkspaceSymbol;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/reference.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/reference.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReferencesFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class ReferencesFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.ReferencesRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'references').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.referencesProvider);
        if (!options) {
            return;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideReferences: (document, position, options, token) => {
                const client = this._client;
                const _providerReferences = (document, position, options, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, client.code2ProtocolConverter.asReferenceParams(document, position, options), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asReferences(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideReferences
                    ? middleware.provideReferences(document, position, options, token, _providerReferences)
                    : _providerReferences(document, position, options, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerReferenceProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.ReferencesFeature = ReferencesFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/rename.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/rename.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class RenameFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.RenameRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let rename = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'rename');
        rename.dynamicRegistration = true;
        rename.prepareSupport = true;
        rename.prepareSupportDefaultBehavior = vscode_languageserver_protocol_1.PrepareSupportDefaultBehavior.Identifier;
        rename.honorsChangeAnnotations = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.renameProvider);
        if (!options) {
            return;
        }
        if (Is.boolean(capabilities.renameProvider)) {
            options.prepareProvider = false;
        }
        this.register({ id: UUID.generateUuid(), registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideRenameEdits: (document, position, newName, token) => {
                const client = this._client;
                const provideRenameEdits = (document, position, newName, token) => {
                    let params = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        position: client.code2ProtocolConverter.asPosition(position),
                        newName: newName
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.RenameRequest.type, params, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asWorkspaceEdit(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.RenameRequest.type, token, error, null, false);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideRenameEdits
                    ? middleware.provideRenameEdits(document, position, newName, token, provideRenameEdits)
                    : provideRenameEdits(document, position, newName, token);
            },
            prepareRename: options.prepareProvider
                ? (document, position, token) => {
                    const client = this._client;
                    const prepareRename = (document, position, token) => {
                        let params = {
                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                            position: client.code2ProtocolConverter.asPosition(position),
                        };
                        return client.sendRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, params, token).then((result) => {
                            if (token.isCancellationRequested) {
                                return null;
                            }
                            if (vscode_languageserver_protocol_1.Range.is(result)) {
                                return client.protocol2CodeConverter.asRange(result);
                            }
                            else if (this.isDefaultBehavior(result)) {
                                return result.defaultBehavior === true
                                    ? null
                                    : Promise.reject(new Error(`The element can't be renamed.`));
                            }
                            else if (result && vscode_languageserver_protocol_1.Range.is(result.range)) {
                                return {
                                    range: client.protocol2CodeConverter.asRange(result.range),
                                    placeholder: result.placeholder
                                };
                            }
                            // To cancel the rename vscode API expects a rejected promise.
                            return Promise.reject(new Error(`The element can't be renamed.`));
                        }, (error) => {
                            if (typeof error.message === 'string') {
                                throw new Error(error.message);
                            }
                            else {
                                throw new Error(`The element can't be renamed.`);
                            }
                        });
                    };
                    const middleware = client.middleware;
                    return middleware.prepareRename
                        ? middleware.prepareRename(document, position, token, prepareRename)
                        : prepareRename(document, position, token);
                }
                : undefined
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerRenameProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
    isDefaultBehavior(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.defaultBehavior);
    }
}
exports.RenameFeature = RenameFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/selectionRange.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/selectionRange.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class SelectionRangeFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.SelectionRangeRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'selectionRange');
        capability.dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const [id, options] = this.getRegistration(documentSelector, capabilities.selectionRangeProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideSelectionRanges: (document, positions, token) => {
                const client = this._client;
                const provideSelectionRanges = async (document, positions, token) => {
                    const requestParams = {
                        textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                        positions: await client.code2ProtocolConverter.asPositions(positions, token)
                    };
                    return client.sendRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, requestParams, token).then((ranges) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asSelectionRanges(ranges, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideSelectionRanges
                    ? middleware.provideSelectionRanges(document, positions, token, provideSelectionRanges)
                    : provideSelectionRanges(document, positions, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerSelectionRangeProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.SelectionRangeFeature = SelectionRangeFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/semanticTokens.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/semanticTokens.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensFeature = void 0;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
class SemanticTokensFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.SemanticTokensRegistrationType.type);
    }
    fillClientCapabilities(capabilities) {
        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'semanticTokens');
        capability.dynamicRegistration = true;
        capability.tokenTypes = [
            vscode_languageserver_protocol_1.SemanticTokenTypes.namespace,
            vscode_languageserver_protocol_1.SemanticTokenTypes.type,
            vscode_languageserver_protocol_1.SemanticTokenTypes.class,
            vscode_languageserver_protocol_1.SemanticTokenTypes.enum,
            vscode_languageserver_protocol_1.SemanticTokenTypes.interface,
            vscode_languageserver_protocol_1.SemanticTokenTypes.struct,
            vscode_languageserver_protocol_1.SemanticTokenTypes.typeParameter,
            vscode_languageserver_protocol_1.SemanticTokenTypes.parameter,
            vscode_languageserver_protocol_1.SemanticTokenTypes.variable,
            vscode_languageserver_protocol_1.SemanticTokenTypes.property,
            vscode_languageserver_protocol_1.SemanticTokenTypes.enumMember,
            vscode_languageserver_protocol_1.SemanticTokenTypes.event,
            vscode_languageserver_protocol_1.SemanticTokenTypes.function,
            vscode_languageserver_protocol_1.SemanticTokenTypes.method,
            vscode_languageserver_protocol_1.SemanticTokenTypes.macro,
            vscode_languageserver_protocol_1.SemanticTokenTypes.keyword,
            vscode_languageserver_protocol_1.SemanticTokenTypes.modifier,
            vscode_languageserver_protocol_1.SemanticTokenTypes.comment,
            vscode_languageserver_protocol_1.SemanticTokenTypes.string,
            vscode_languageserver_protocol_1.SemanticTokenTypes.number,
            vscode_languageserver_protocol_1.SemanticTokenTypes.regexp,
            vscode_languageserver_protocol_1.SemanticTokenTypes.operator,
            vscode_languageserver_protocol_1.SemanticTokenTypes.decorator
        ];
        capability.tokenModifiers = [
            vscode_languageserver_protocol_1.SemanticTokenModifiers.declaration,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.definition,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.readonly,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.static,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.deprecated,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.abstract,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.async,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.modification,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.documentation,
            vscode_languageserver_protocol_1.SemanticTokenModifiers.defaultLibrary
        ];
        capability.formats = [vscode_languageserver_protocol_1.TokenFormat.Relative];
        capability.requests = {
            range: true,
            full: {
                delta: true
            }
        };
        capability.multilineTokenSupport = false;
        capability.overlappingTokenSupport = false;
        capability.serverCancelSupport = true;
        capability.augmentsSyntaxTokens = true;
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'semanticTokens').refreshSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type, async () => {
            for (const provider of this.getAllProviders()) {
                provider.onDidChangeSemanticTokensEmitter.fire();
            }
        });
        const [id, options] = this.getRegistration(documentSelector, capabilities.semanticTokensProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const fullProvider = Is.boolean(options.full) ? options.full : options.full !== undefined;
        const hasEditProvider = options.full !== undefined && typeof options.full !== 'boolean' && options.full.delta === true;
        const eventEmitter = new vscode.EventEmitter();
        const documentProvider = fullProvider
            ? {
                onDidChangeSemanticTokens: eventEmitter.event,
                provideDocumentSemanticTokens: (document, token) => {
                    const client = this._client;
                    const middleware = client.middleware;
                    const provideDocumentSemanticTokens = (document, token) => {
                        const params = {
                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
                        };
                        return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, params, token).then((result) => {
                            if (token.isCancellationRequested) {
                                return null;
                            }
                            return client.protocol2CodeConverter.asSemanticTokens(result, token);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRequest.type, token, error, null);
                        });
                    };
                    return middleware.provideDocumentSemanticTokens
                        ? middleware.provideDocumentSemanticTokens(document, token, provideDocumentSemanticTokens)
                        : provideDocumentSemanticTokens(document, token);
                },
                provideDocumentSemanticTokensEdits: hasEditProvider
                    ? (document, previousResultId, token) => {
                        const client = this._client;
                        const middleware = client.middleware;
                        const provideDocumentSemanticTokensEdits = (document, previousResultId, token) => {
                            const params = {
                                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                                previousResultId
                            };
                            return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, params, token).then(async (result) => {
                                if (token.isCancellationRequested) {
                                    return null;
                                }
                                if (vscode_languageserver_protocol_1.SemanticTokens.is(result)) {
                                    return await client.protocol2CodeConverter.asSemanticTokens(result, token);
                                }
                                else {
                                    return await client.protocol2CodeConverter.asSemanticTokensEdits(result, token);
                                }
                            }, (error) => {
                                return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type, token, error, null);
                            });
                        };
                        return middleware.provideDocumentSemanticTokensEdits
                            ? middleware.provideDocumentSemanticTokensEdits(document, previousResultId, token, provideDocumentSemanticTokensEdits)
                            : provideDocumentSemanticTokensEdits(document, previousResultId, token);
                    }
                    : undefined
            }
            : undefined;
        const hasRangeProvider = options.range === true;
        const rangeProvider = hasRangeProvider
            ? {
                provideDocumentRangeSemanticTokens: (document, range, token) => {
                    const client = this._client;
                    const middleware = client.middleware;
                    const provideDocumentRangeSemanticTokens = (document, range, token) => {
                        const params = {
                            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                            range: client.code2ProtocolConverter.asRange(range)
                        };
                        return client.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, params, token).then((result) => {
                            if (token.isCancellationRequested) {
                                return null;
                            }
                            return client.protocol2CodeConverter.asSemanticTokens(result, token);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type, token, error, null);
                        });
                    };
                    return middleware.provideDocumentRangeSemanticTokens
                        ? middleware.provideDocumentRangeSemanticTokens(document, range, token, provideDocumentRangeSemanticTokens)
                        : provideDocumentRangeSemanticTokens(document, range, token);
                }
            }
            : undefined;
        const disposables = [];
        const client = this._client;
        const legend = client.protocol2CodeConverter.asSemanticTokensLegend(options.legend);
        const documentSelector = client.protocol2CodeConverter.asDocumentSelector(selector);
        if (documentProvider !== undefined) {
            disposables.push(vscode.languages.registerDocumentSemanticTokensProvider(documentSelector, documentProvider, legend));
        }
        if (rangeProvider !== undefined) {
            disposables.push(vscode.languages.registerDocumentRangeSemanticTokensProvider(documentSelector, rangeProvider, legend));
        }
        return [new vscode.Disposable(() => disposables.forEach(item => item.dispose())), { range: rangeProvider, full: documentProvider, onDidChangeSemanticTokensEmitter: eventEmitter }];
    }
}
exports.SemanticTokensFeature = SemanticTokensFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/signatureHelp.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/signatureHelp.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignatureHelpFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class SignatureHelpFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.SignatureHelpRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let config = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'signatureHelp');
        config.dynamicRegistration = true;
        config.signatureInformation = { documentationFormat: [vscode_languageserver_protocol_1.MarkupKind.Markdown, vscode_languageserver_protocol_1.MarkupKind.PlainText] };
        config.signatureInformation.parameterInformation = { labelOffsetSupport: true };
        config.signatureInformation.activeParameterSupport = true;
        config.contextSupport = true;
    }
    initialize(capabilities, documentSelector) {
        const options = this.getRegistrationOptions(documentSelector, capabilities.signatureHelpProvider);
        if (!options) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: options
        });
    }
    registerLanguageProvider(options) {
        const provider = {
            provideSignatureHelp: (document, position, token, context) => {
                const client = this._client;
                const providerSignatureHelp = (document, position, context, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, client.code2ProtocolConverter.asSignatureHelpParams(document, position, context), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asSignatureHelp(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideSignatureHelp
                    ? middleware.provideSignatureHelp(document, position, context, token, providerSignatureHelp)
                    : providerSignatureHelp(document, position, context, token);
            }
        };
        return [this.registerProvider(options, provider), provider];
    }
    registerProvider(options, provider) {
        const selector = this._client.protocol2CodeConverter.asDocumentSelector(options.documentSelector);
        if (options.retriggerCharacters === undefined) {
            const triggerCharacters = options.triggerCharacters || [];
            return vscode_1.languages.registerSignatureHelpProvider(selector, provider, ...triggerCharacters);
        }
        else {
            const metaData = {
                triggerCharacters: options.triggerCharacters || [],
                retriggerCharacters: options.retriggerCharacters || []
            };
            return vscode_1.languages.registerSignatureHelpProvider(selector, provider, metaData);
        }
    }
}
exports.SignatureHelpFeature = SignatureHelpFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/textSynchronization.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/textSynchronization.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidSaveTextDocumentFeature = exports.WillSaveWaitUntilFeature = exports.WillSaveFeature = exports.DidChangeTextDocumentFeature = exports.DidCloseTextDocumentFeature = exports.DidOpenTextDocumentFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class DidOpenTextDocumentFeature extends features_1.TextDocumentEventFeature {
    constructor(client, syncedDocuments) {
        super(client, vscode_1.workspace.onDidOpenTextDocument, vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, () => client.middleware.didOpen, (textDocument) => client.code2ProtocolConverter.asOpenTextDocumentParams(textDocument), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);
        this._syncedDocuments = syncedDocuments;
    }
    get openDocuments() {
        return this._syncedDocuments.values();
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {
            this.register({ id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });
        }
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type;
    }
    register(data) {
        super.register(data);
        if (!data.registerOptions.documentSelector) {
            return;
        }
        const documentSelector = this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector);
        vscode_1.workspace.textDocuments.forEach((textDocument) => {
            const uri = textDocument.uri.toString();
            if (this._syncedDocuments.has(uri)) {
                return;
            }
            if (vscode_1.languages.match(documentSelector, textDocument) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {
                const middleware = this._client.middleware;
                const didOpen = (textDocument) => {
                    return this._client.sendNotification(this._type, this._createParams(textDocument));
                };
                (middleware.didOpen ? middleware.didOpen(textDocument, didOpen) : didOpen(textDocument)).catch((error) => {
                    this._client.error(`Sending document notification ${this._type.method} failed`, error);
                });
                this._syncedDocuments.set(uri, textDocument);
            }
        });
    }
    getTextDocument(data) {
        return data;
    }
    notificationSent(textDocument, type, params) {
        this._syncedDocuments.set(textDocument.uri.toString(), textDocument);
        super.notificationSent(textDocument, type, params);
    }
}
exports.DidOpenTextDocumentFeature = DidOpenTextDocumentFeature;
class DidCloseTextDocumentFeature extends features_1.TextDocumentEventFeature {
    constructor(client, syncedDocuments, pendingTextDocumentChanges) {
        super(client, vscode_1.workspace.onDidCloseTextDocument, vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, () => client.middleware.didClose, (textDocument) => client.code2ProtocolConverter.asCloseTextDocumentParams(textDocument), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);
        this._syncedDocuments = syncedDocuments;
        this._pendingTextDocumentChanges = pendingTextDocumentChanges;
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.openClose) {
            this.register({ id: UUID.generateUuid(), registerOptions: { documentSelector: documentSelector } });
        }
    }
    async callback(data) {
        await super.callback(data);
        this._pendingTextDocumentChanges.delete(data.uri.toString());
    }
    getTextDocument(data) {
        return data;
    }
    notificationSent(textDocument, type, params) {
        this._syncedDocuments.delete(textDocument.uri.toString());
        super.notificationSent(textDocument, type, params);
    }
    unregister(id) {
        const selector = this._selectors.get(id);
        // The super call removed the selector from the map
        // of selectors.
        super.unregister(id);
        const selectors = this._selectors.values();
        this._syncedDocuments.forEach((textDocument) => {
            if (vscode_1.languages.match(selector, textDocument) > 0 && !this._selectorFilter(selectors, textDocument) && !this._client.hasDedicatedTextSynchronizationFeature(textDocument)) {
                let middleware = this._client.middleware;
                let didClose = (textDocument) => {
                    return this._client.sendNotification(this._type, this._createParams(textDocument));
                };
                this._syncedDocuments.delete(textDocument.uri.toString());
                (middleware.didClose ? middleware.didClose(textDocument, didClose) : didClose(textDocument)).catch((error) => {
                    this._client.error(`Sending document notification ${this._type.method} failed`, error);
                });
            }
        });
    }
}
exports.DidCloseTextDocumentFeature = DidCloseTextDocumentFeature;
class DidChangeTextDocumentFeature extends features_1.DynamicDocumentFeature {
    constructor(client, pendingTextDocumentChanges) {
        super(client);
        this._changeData = new Map();
        this._onNotificationSent = new vscode_1.EventEmitter();
        this._onPendingChangeAdded = new vscode_1.EventEmitter();
        this._pendingTextDocumentChanges = pendingTextDocumentChanges;
        this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
    }
    get onNotificationSent() {
        return this._onNotificationSent.event;
    }
    get onPendingChangeAdded() {
        return this._onPendingChangeAdded.event;
    }
    get syncKind() {
        return this._syncKind;
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.change !== undefined && textDocumentSyncOptions.change !== vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {
            this.register({
                id: UUID.generateUuid(),
                registerOptions: Object.assign({}, { documentSelector: documentSelector }, { syncKind: textDocumentSyncOptions.change })
            });
        }
    }
    register(data) {
        if (!data.registerOptions.documentSelector) {
            return;
        }
        if (!this._listener) {
            this._listener = vscode_1.workspace.onDidChangeTextDocument(this.callback, this);
        }
        this._changeData.set(data.id, {
            syncKind: data.registerOptions.syncKind,
            documentSelector: this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector),
        });
        this.updateSyncKind(data.registerOptions.syncKind);
    }
    *getDocumentSelectors() {
        for (const data of this._changeData.values()) {
            yield data.documentSelector;
        }
    }
    async callback(event) {
        // Text document changes are send for dirty changes as well. We don't
        // have dirty / un-dirty events in the LSP so we ignore content changes
        // with length zero.
        if (event.contentChanges.length === 0) {
            return;
        }
        // We need to capture the URI and version here since they might change on the text document
        // until we reach did `didChange` call since the middleware support async execution.
        const uri = event.document.uri;
        const version = event.document.version;
        const promises = [];
        for (const changeData of this._changeData.values()) {
            if (vscode_1.languages.match(changeData.documentSelector, event.document) > 0 && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {
                const middleware = this._client.middleware;
                if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental) {
                    const didChange = async (event) => {
                        const params = this._client.code2ProtocolConverter.asChangeTextDocumentParams(event, uri, version);
                        await this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);
                        this.notificationSent(event.document, vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, params);
                    };
                    promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));
                }
                else if (changeData.syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {
                    const didChange = async (event) => {
                        const eventUri = event.document.uri.toString();
                        this._pendingTextDocumentChanges.set(eventUri, event.document);
                        this._onPendingChangeAdded.fire();
                    };
                    promises.push(middleware.didChange ? middleware.didChange(event, event => didChange(event)) : didChange(event));
                }
            }
        }
        return Promise.all(promises).then(undefined, (error) => {
            this._client.error(`Sending document notification ${vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type.method} failed`, error);
            throw error;
        });
    }
    notificationSent(textDocument, type, params) {
        this._onNotificationSent.fire({ textDocument, type, params });
    }
    unregister(id) {
        this._changeData.delete(id);
        if (this._changeData.size === 0) {
            if (this._listener) {
                this._listener.dispose();
                this._listener = undefined;
            }
            this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
        }
        else {
            this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
            for (const changeData of this._changeData.values()) {
                this.updateSyncKind(changeData.syncKind);
                if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {
                    break;
                }
            }
        }
    }
    dispose() {
        this._pendingTextDocumentChanges.clear();
        this._changeData.clear();
        this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
        if (this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    getPendingDocumentChanges(excludes) {
        if (this._pendingTextDocumentChanges.size === 0) {
            return [];
        }
        let result;
        if (excludes.size === 0) {
            result = Array.from(this._pendingTextDocumentChanges.values());
            this._pendingTextDocumentChanges.clear();
        }
        else {
            result = [];
            for (const entry of this._pendingTextDocumentChanges) {
                if (!excludes.has(entry[0])) {
                    result.push(entry[1]);
                    this._pendingTextDocumentChanges.delete(entry[0]);
                }
            }
        }
        return result;
    }
    getProvider(document) {
        for (const changeData of this._changeData.values()) {
            if (vscode_1.languages.match(changeData.documentSelector, document) > 0) {
                return {
                    send: (event) => {
                        return this.callback(event);
                    }
                };
            }
        }
        return undefined;
    }
    updateSyncKind(syncKind) {
        if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.Full) {
            return;
        }
        switch (syncKind) {
            case vscode_languageserver_protocol_1.TextDocumentSyncKind.Full:
                this._syncKind = syncKind;
                break;
            case vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental:
                if (this._syncKind === vscode_languageserver_protocol_1.TextDocumentSyncKind.None) {
                    this._syncKind = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
                }
                break;
        }
    }
}
exports.DidChangeTextDocumentFeature = DidChangeTextDocumentFeature;
class WillSaveFeature extends features_1.TextDocumentEventFeature {
    constructor(client) {
        super(client, vscode_1.workspace.onWillSaveTextDocument, vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, () => client.middleware.willSave, (willSaveEvent) => client.code2ProtocolConverter.asWillSaveTextDocumentParams(willSaveEvent), (event) => event.document, (selectors, willSaveEvent) => features_1.TextDocumentEventFeature.textDocumentFilter(selectors, willSaveEvent.document));
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type;
    }
    fillClientCapabilities(capabilities) {
        let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');
        value.willSave = true;
    }
    initialize(capabilities, documentSelector) {
        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSave) {
            this.register({
                id: UUID.generateUuid(),
                registerOptions: { documentSelector: documentSelector }
            });
        }
    }
    getTextDocument(data) {
        return data.document;
    }
}
exports.WillSaveFeature = WillSaveFeature;
class WillSaveWaitUntilFeature extends features_1.DynamicDocumentFeature {
    constructor(client) {
        super(client);
        this._selectors = new Map();
    }
    getDocumentSelectors() {
        return this._selectors.values();
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type;
    }
    fillClientCapabilities(capabilities) {
        let value = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization');
        value.willSaveWaitUntil = true;
    }
    initialize(capabilities, documentSelector) {
        let textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.willSaveWaitUntil) {
            this.register({
                id: UUID.generateUuid(),
                registerOptions: { documentSelector: documentSelector }
            });
        }
    }
    register(data) {
        if (!data.registerOptions.documentSelector) {
            return;
        }
        if (!this._listener) {
            this._listener = vscode_1.workspace.onWillSaveTextDocument(this.callback, this);
        }
        this._selectors.set(data.id, this._client.protocol2CodeConverter.asDocumentSelector(data.registerOptions.documentSelector));
    }
    callback(event) {
        if (features_1.TextDocumentEventFeature.textDocumentFilter(this._selectors.values(), event.document) && !this._client.hasDedicatedTextSynchronizationFeature(event.document)) {
            let middleware = this._client.middleware;
            let willSaveWaitUntil = (event) => {
                return this._client.sendRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, this._client.code2ProtocolConverter.asWillSaveTextDocumentParams(event)).then(async (edits) => {
                    let vEdits = await this._client.protocol2CodeConverter.asTextEdits(edits);
                    return vEdits === undefined ? [] : vEdits;
                });
            };
            event.waitUntil(middleware.willSaveWaitUntil
                ? middleware.willSaveWaitUntil(event, willSaveWaitUntil)
                : willSaveWaitUntil(event));
        }
    }
    unregister(id) {
        this._selectors.delete(id);
        if (this._selectors.size === 0 && this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
    dispose() {
        this._selectors.clear();
        if (this._listener) {
            this._listener.dispose();
            this._listener = undefined;
        }
    }
}
exports.WillSaveWaitUntilFeature = WillSaveWaitUntilFeature;
class DidSaveTextDocumentFeature extends features_1.TextDocumentEventFeature {
    constructor(client) {
        super(client, vscode_1.workspace.onDidSaveTextDocument, vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, () => client.middleware.didSave, (textDocument) => client.code2ProtocolConverter.asSaveTextDocumentParams(textDocument, this._includeText), (data) => data, features_1.TextDocumentEventFeature.textDocumentFilter);
        this._includeText = false;
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type;
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'synchronization').didSave = true;
    }
    initialize(capabilities, documentSelector) {
        const textDocumentSyncOptions = capabilities.resolvedTextDocumentSync;
        if (documentSelector && textDocumentSyncOptions && textDocumentSyncOptions.save) {
            const saveOptions = typeof textDocumentSyncOptions.save === 'boolean'
                ? { includeText: false }
                : { includeText: !!textDocumentSyncOptions.save.includeText };
            this.register({
                id: UUID.generateUuid(),
                registerOptions: Object.assign({}, { documentSelector: documentSelector }, saveOptions)
            });
        }
    }
    register(data) {
        this._includeText = !!data.registerOptions.includeText;
        super.register(data);
    }
    getTextDocument(data) {
        return data;
    }
}
exports.DidSaveTextDocumentFeature = DidSaveTextDocumentFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/typeDefinition.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/typeDefinition.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class TypeDefinitionFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.TypeDefinitionRequest.type);
    }
    fillClientCapabilities(capabilities) {
        (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition').dynamicRegistration = true;
        let typeDefinitionSupport = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeDefinition');
        typeDefinitionSupport.dynamicRegistration = true;
        typeDefinitionSupport.linkSupport = true;
    }
    initialize(capabilities, documentSelector) {
        let [id, options] = this.getRegistration(documentSelector, capabilities.typeDefinitionProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const selector = options.documentSelector;
        const provider = {
            provideTypeDefinition: (document, position, token) => {
                const client = this._client;
                const provideTypeDefinition = (document, position, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asDefinitionResult(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideTypeDefinition
                    ? middleware.provideTypeDefinition(document, position, token, provideTypeDefinition)
                    : provideTypeDefinition(document, position, token);
            }
        };
        return [this.registerProvider(selector, provider), provider];
    }
    registerProvider(selector, provider) {
        return vscode_1.languages.registerTypeDefinitionProvider(this._client.protocol2CodeConverter.asDocumentSelector(selector), provider);
    }
}
exports.TypeDefinitionFeature = TypeDefinitionFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/typeHierarchy.js":
/*!************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/typeHierarchy.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchyFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
class TypeHierarchyProvider {
    constructor(client) {
        this.client = client;
        this.middleware = client.middleware;
    }
    prepareTypeHierarchy(document, position, token) {
        const client = this.client;
        const middleware = this.middleware;
        const prepareTypeHierarchy = (document, position, token) => {
            const params = client.code2ProtocolConverter.asTextDocumentPositionParams(document, position);
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asTypeHierarchyItems(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, token, error, null);
            });
        };
        return middleware.prepareTypeHierarchy
            ? middleware.prepareTypeHierarchy(document, position, token, prepareTypeHierarchy)
            : prepareTypeHierarchy(document, position, token);
    }
    provideTypeHierarchySupertypes(item, token) {
        const client = this.client;
        const middleware = this.middleware;
        const provideTypeHierarchySupertypes = (item, token) => {
            const params = {
                item: client.code2ProtocolConverter.asTypeHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asTypeHierarchyItems(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type, token, error, null);
            });
        };
        return middleware.provideTypeHierarchySupertypes
            ? middleware.provideTypeHierarchySupertypes(item, token, provideTypeHierarchySupertypes)
            : provideTypeHierarchySupertypes(item, token);
    }
    provideTypeHierarchySubtypes(item, token) {
        const client = this.client;
        const middleware = this.middleware;
        const provideTypeHierarchySubtypes = (item, token) => {
            const params = {
                item: client.code2ProtocolConverter.asTypeHierarchyItem(item)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type, params, token).then((result) => {
                if (token.isCancellationRequested) {
                    return null;
                }
                return client.protocol2CodeConverter.asTypeHierarchyItems(result, token);
            }, (error) => {
                return client.handleFailedRequest(vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type, token, error, null);
            });
        };
        return middleware.provideTypeHierarchySubtypes
            ? middleware.provideTypeHierarchySubtypes(item, token, provideTypeHierarchySubtypes)
            : provideTypeHierarchySubtypes(item, token);
    }
}
class TypeHierarchyFeature extends features_1.TextDocumentLanguageFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type);
    }
    fillClientCapabilities(capabilities) {
        const capability = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'textDocument'), 'typeHierarchy');
        capability.dynamicRegistration = true;
    }
    initialize(capabilities, documentSelector) {
        const [id, options] = this.getRegistration(documentSelector, capabilities.typeHierarchyProvider);
        if (!id || !options) {
            return;
        }
        this.register({ id: id, registerOptions: options });
    }
    registerLanguageProvider(options) {
        const client = this._client;
        const provider = new TypeHierarchyProvider(client);
        return [vscode_1.languages.registerTypeHierarchyProvider(client.protocol2CodeConverter.asDocumentSelector(options.documentSelector), provider), provider];
    }
}
exports.TypeHierarchyFeature = TypeHierarchyFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/utils/async.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/utils/async.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.forEach = exports.mapAsync = exports.map = exports.clearTestMode = exports.setTestMode = exports.Semaphore = exports.Delayer = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
class Delayer {
    constructor(defaultDelay) {
        this.defaultDelay = defaultDelay;
        this.timeout = undefined;
        this.completionPromise = undefined;
        this.onSuccess = undefined;
        this.task = undefined;
    }
    trigger(task, delay = this.defaultDelay) {
        this.task = task;
        if (delay >= 0) {
            this.cancelTimeout();
        }
        if (!this.completionPromise) {
            this.completionPromise = new Promise((resolve) => {
                this.onSuccess = resolve;
            }).then(() => {
                this.completionPromise = undefined;
                this.onSuccess = undefined;
                var result = this.task();
                this.task = undefined;
                return result;
            });
        }
        if (delay >= 0 || this.timeout === void 0) {
            this.timeout = (0, vscode_languageserver_protocol_1.RAL)().timer.setTimeout(() => {
                this.timeout = undefined;
                this.onSuccess(undefined);
            }, delay >= 0 ? delay : this.defaultDelay);
        }
        return this.completionPromise;
    }
    forceDelivery() {
        if (!this.completionPromise) {
            return undefined;
        }
        this.cancelTimeout();
        let result = this.task();
        this.completionPromise = undefined;
        this.onSuccess = undefined;
        this.task = undefined;
        return result;
    }
    isTriggered() {
        return this.timeout !== undefined;
    }
    cancel() {
        this.cancelTimeout();
        this.completionPromise = undefined;
    }
    cancelTimeout() {
        if (this.timeout !== undefined) {
            this.timeout.dispose();
            this.timeout = undefined;
        }
    }
}
exports.Delayer = Delayer;
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;
let $test = false;
function setTestMode() {
    $test = true;
}
exports.setTestMode = setTestMode;
function clearTestMode() {
    $test = false;
}
exports.clearTestMode = clearTestMode;
const defaultYieldTimeout = 15 /*ms*/;
class Timer {
    constructor(yieldAfter = defaultYieldTimeout) {
        this.yieldAfter = $test === true ? Math.max(yieldAfter, 2) : Math.max(yieldAfter, defaultYieldTimeout);
        this.startTime = Date.now();
        this.counter = 0;
        this.total = 0;
        // start with a counter interval of 1.
        this.counterInterval = 1;
    }
    start() {
        this.counter = 0;
        this.total = 0;
        this.counterInterval = 1;
        this.startTime = Date.now();
    }
    shouldYield() {
        if (++this.counter >= this.counterInterval) {
            const timeTaken = Date.now() - this.startTime;
            const timeLeft = Math.max(0, this.yieldAfter - timeTaken);
            this.total += this.counter;
            this.counter = 0;
            if (timeTaken >= this.yieldAfter || timeLeft <= 1) {
                // Yield also if time left <= 1 since we compute the counter
                // for max < 2 ms.
                // Start with interval 1 again. We could do some calculation
                // with using 80% of the last counter however other things (GC)
                // affect the timing heavily since we have small timings (1 - 15ms).
                this.counterInterval = 1;
                this.total = 0;
                return true;
            }
            else {
                // Only increase the counter until we have spent <= 2 ms. Increasing
                // the counter further is very fragile since timing is influenced
                // by other things and can increase the counter too much. This will result
                // that we yield in average after [14 - 16]ms.
                switch (timeTaken) {
                    case 0:
                    case 1:
                        this.counterInterval = this.total * 2;
                        break;
                }
            }
        }
        return false;
    }
}
async function map(items, func, token, options) {
    if (items.length === 0) {
        return [];
    }
    const result = new Array(items.length);
    const timer = new Timer(options?.yieldAfter);
    function convertBatch(start) {
        timer.start();
        for (let i = start; i < items.length; i++) {
            result[i] = func(items[i]);
            if (timer.shouldYield()) {
                options?.yieldCallback && options.yieldCallback();
                return i + 1;
            }
        }
        return -1;
    }
    // Convert the first batch sync on the same frame.
    let index = convertBatch(0);
    while (index !== -1) {
        if (token !== undefined && token.isCancellationRequested) {
            break;
        }
        index = await new Promise((resolve) => {
            (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => {
                resolve(convertBatch(index));
            });
        });
    }
    return result;
}
exports.map = map;
async function mapAsync(items, func, token, options) {
    if (items.length === 0) {
        return [];
    }
    const result = new Array(items.length);
    const timer = new Timer(options?.yieldAfter);
    async function convertBatch(start) {
        timer.start();
        for (let i = start; i < items.length; i++) {
            result[i] = await func(items[i], token);
            if (timer.shouldYield()) {
                options?.yieldCallback && options.yieldCallback();
                return i + 1;
            }
        }
        return -1;
    }
    let index = await convertBatch(0);
    while (index !== -1) {
        if (token !== undefined && token.isCancellationRequested) {
            break;
        }
        index = await new Promise((resolve) => {
            (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => {
                resolve(convertBatch(index));
            });
        });
    }
    return result;
}
exports.mapAsync = mapAsync;
async function forEach(items, func, token, options) {
    if (items.length === 0) {
        return;
    }
    const timer = new Timer(options?.yieldAfter);
    function runBatch(start) {
        timer.start();
        for (let i = start; i < items.length; i++) {
            func(items[i]);
            if (timer.shouldYield()) {
                options?.yieldCallback && options.yieldCallback();
                return i + 1;
            }
        }
        return -1;
    }
    // Convert the first batch sync on the same frame.
    let index = runBatch(0);
    while (index !== -1) {
        if (token !== undefined && token.isCancellationRequested) {
            break;
        }
        index = await new Promise((resolve) => {
            (0, vscode_languageserver_protocol_1.RAL)().timer.setImmediate(() => {
                resolve(runBatch(index));
            });
        });
    }
}
exports.forEach = forEach;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/utils/is.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/utils/is.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asPromise = exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;
function asPromise(value) {
    if (value instanceof Promise) {
        return value;
    }
    else if (thenable(value)) {
        return new Promise((resolve, reject) => {
            value.then((resolved) => resolve(resolved), (error) => reject(error));
        });
    }
    else {
        return Promise.resolve(value);
    }
}
exports.asPromise = asPromise;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/utils/uuid.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
class ValueUUID {
    constructor(_value) {
        this._value = _value;
        // empty
    }
    asHex() {
        return this._value;
    }
    equals(other) {
        return this.asHex() === other.asHex();
    }
}
class V4UUID extends ValueUUID {
    constructor() {
        super([
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            '4',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._oneOf(V4UUID._timeHighBits),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
        ].join(''));
    }
    static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
        return V4UUID._oneOf(V4UUID._chars);
    }
}
V4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
V4UUID._timeHighBits = ['8', '9', 'a', 'b'];
/**
 * An empty UUID that contains only zeros.
 */
exports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');
function v4() {
    return new V4UUID();
}
exports.v4 = v4;
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
/**
 * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
 * @param value A uuid string.
 */
function parse(value) {
    if (!isUUID(value)) {
        throw new Error('invalid uuid');
    }
    return new ValueUUID(value);
}
exports.parse = parse;
function generateUuid() {
    return v4().asHex();
}
exports.generateUuid = generateUuid;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/workspaceFolder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/workspaceFolder.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceFoldersFeature = exports.arrayDiff = void 0;
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
function access(target, key) {
    if (target === undefined || target === null) {
        return undefined;
    }
    return target[key];
}
function arrayDiff(left, right) {
    return left.filter(element => right.indexOf(element) < 0);
}
exports.arrayDiff = arrayDiff;
class WorkspaceFoldersFeature {
    constructor(client) {
        this._client = client;
        this._listeners = new Map();
    }
    getState() {
        return { kind: 'workspace', id: this.registrationType.method, registrations: this._listeners.size > 0 };
    }
    get registrationType() {
        return vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type;
    }
    fillInitializeParams(params) {
        const folders = vscode_1.workspace.workspaceFolders;
        this.initializeWithFolders(folders);
        if (folders === void 0) {
            params.workspaceFolders = null;
        }
        else {
            params.workspaceFolders = folders.map(folder => this.asProtocol(folder));
        }
    }
    initializeWithFolders(currentWorkspaceFolders) {
        this._initialFolders = currentWorkspaceFolders;
    }
    fillClientCapabilities(capabilities) {
        capabilities.workspace = capabilities.workspace || {};
        capabilities.workspace.workspaceFolders = true;
    }
    initialize(capabilities) {
        const client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type, (token) => {
            const workspaceFolders = () => {
                const folders = vscode_1.workspace.workspaceFolders;
                if (folders === undefined) {
                    return null;
                }
                const result = folders.map((folder) => {
                    return this.asProtocol(folder);
                });
                return result;
            };
            const middleware = client.middleware.workspace;
            return middleware && middleware.workspaceFolders
                ? middleware.workspaceFolders(token, workspaceFolders)
                : workspaceFolders(token);
        });
        const value = access(access(access(capabilities, 'workspace'), 'workspaceFolders'), 'changeNotifications');
        let id;
        if (typeof value === 'string') {
            id = value;
        }
        else if (value === true) {
            id = UUID.generateUuid();
        }
        if (id) {
            this.register({ id: id, registerOptions: undefined });
        }
    }
    sendInitialEvent(currentWorkspaceFolders) {
        let promise;
        if (this._initialFolders && currentWorkspaceFolders) {
            const removed = arrayDiff(this._initialFolders, currentWorkspaceFolders);
            const added = arrayDiff(currentWorkspaceFolders, this._initialFolders);
            if (added.length > 0 || removed.length > 0) {
                promise = this.doSendEvent(added, removed);
            }
        }
        else if (this._initialFolders) {
            promise = this.doSendEvent([], this._initialFolders);
        }
        else if (currentWorkspaceFolders) {
            promise = this.doSendEvent(currentWorkspaceFolders, []);
        }
        if (promise !== undefined) {
            promise.catch((error) => {
                this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);
            });
        }
    }
    doSendEvent(addedFolders, removedFolders) {
        let params = {
            event: {
                added: addedFolders.map(folder => this.asProtocol(folder)),
                removed: removedFolders.map(folder => this.asProtocol(folder))
            }
        };
        return this._client.sendNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params);
    }
    register(data) {
        let id = data.id;
        let client = this._client;
        let disposable = vscode_1.workspace.onDidChangeWorkspaceFolders((event) => {
            let didChangeWorkspaceFolders = (event) => {
                return this.doSendEvent(event.added, event.removed);
            };
            let middleware = client.middleware.workspace;
            const promise = middleware && middleware.didChangeWorkspaceFolders
                ? middleware.didChangeWorkspaceFolders(event, didChangeWorkspaceFolders)
                : didChangeWorkspaceFolders(event);
            promise.catch((error) => {
                this._client.error(`Sending notification ${vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type.method} failed`, error);
            });
        });
        this._listeners.set(id, disposable);
        this.sendInitialEvent(vscode_1.workspace.workspaceFolders);
    }
    unregister(id) {
        let disposable = this._listeners.get(id);
        if (disposable === void 0) {
            return;
        }
        this._listeners.delete(id);
        disposable.dispose();
    }
    dispose() {
        for (let disposable of this._listeners.values()) {
            disposable.dispose();
        }
        this._listeners.clear();
    }
    asProtocol(workspaceFolder) {
        if (workspaceFolder === void 0) {
            return null;
        }
        return { uri: this._client.code2ProtocolConverter.asUri(workspaceFolder.uri), name: workspaceFolder.name };
    }
}
exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/common/workspaceSymbol.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/common/workspaceSymbol.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolFeature = void 0;
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");
const features_1 = __webpack_require__(/*! ./features */ "./node_modules/vscode-languageclient/lib/common/features.js");
const documentSymbol_1 = __webpack_require__(/*! ./documentSymbol */ "./node_modules/vscode-languageclient/lib/common/documentSymbol.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "./node_modules/vscode-languageclient/lib/common/utils/uuid.js");
class WorkspaceSymbolFeature extends features_1.WorkspaceFeature {
    constructor(client) {
        super(client, vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type);
    }
    fillClientCapabilities(capabilities) {
        let symbolCapabilities = (0, features_1.ensure)((0, features_1.ensure)(capabilities, 'workspace'), 'symbol');
        symbolCapabilities.dynamicRegistration = true;
        symbolCapabilities.symbolKind = {
            valueSet: documentSymbol_1.SupportedSymbolKinds
        };
        symbolCapabilities.tagSupport = {
            valueSet: documentSymbol_1.SupportedSymbolTags
        };
        symbolCapabilities.resolveSupport = { properties: ['location.range'] };
    }
    initialize(capabilities) {
        if (!capabilities.workspaceSymbolProvider) {
            return;
        }
        this.register({
            id: UUID.generateUuid(),
            registerOptions: capabilities.workspaceSymbolProvider === true ? { workDoneProgress: false } : capabilities.workspaceSymbolProvider
        });
    }
    registerLanguageProvider(options) {
        const provider = {
            provideWorkspaceSymbols: (query, token) => {
                const client = this._client;
                const provideWorkspaceSymbols = (query, token) => {
                    return client.sendRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, { query }, token).then((result) => {
                        if (token.isCancellationRequested) {
                            return null;
                        }
                        return client.protocol2CodeConverter.asSymbolInformations(result, token);
                    }, (error) => {
                        return client.handleFailedRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, token, error, null);
                    });
                };
                const middleware = client.middleware;
                return middleware.provideWorkspaceSymbols
                    ? middleware.provideWorkspaceSymbols(query, token, provideWorkspaceSymbols)
                    : provideWorkspaceSymbols(query, token);
            },
            resolveWorkspaceSymbol: options.resolveProvider === true
                ? (item, token) => {
                    const client = this._client;
                    const resolveWorkspaceSymbol = (item, token) => {
                        return client.sendRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, client.code2ProtocolConverter.asWorkspaceSymbol(item), token).then((result) => {
                            if (token.isCancellationRequested) {
                                return null;
                            }
                            return client.protocol2CodeConverter.asSymbolInformation(result);
                        }, (error) => {
                            return client.handleFailedRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, token, error, null);
                        });
                    };
                    const middleware = client.middleware;
                    return middleware.resolveWorkspaceSymbol
                        ? middleware.resolveWorkspaceSymbol(item, token, resolveWorkspaceSymbol)
                        : resolveWorkspaceSymbol(item, token);
                }
                : undefined
        };
        return [vscode_1.languages.registerWorkspaceSymbolProvider(provider), provider];
    }
}
exports.WorkspaceSymbolFeature = WorkspaceSymbolFeature;


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/node/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/node/main.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingMonitor = exports.LanguageClient = exports.TransportKind = void 0;
const cp = __webpack_require__(/*! child_process */ "child_process");
const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const Is = __webpack_require__(/*! ../common/utils/is */ "./node_modules/vscode-languageclient/lib/common/utils/is.js");
const client_1 = __webpack_require__(/*! ../common/client */ "./node_modules/vscode-languageclient/lib/common/client.js");
const processes_1 = __webpack_require__(/*! ./processes */ "./node_modules/vscode-languageclient/lib/node/processes.js");
const node_1 = __webpack_require__(/*! vscode-languageserver-protocol/node */ "./node_modules/vscode-languageserver-protocol/node.js");
// Import SemVer functions individually to avoid circular dependencies in SemVer
const semverParse = __webpack_require__(/*! semver/functions/parse */ "./node_modules/semver/functions/parse.js");
const semverSatisfies = __webpack_require__(/*! semver/functions/satisfies */ "./node_modules/semver/functions/satisfies.js");
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/node */ "./node_modules/vscode-languageserver-protocol/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageclient/lib/common/api.js"), exports);
const REQUIRED_VSCODE_VERSION = '^1.67.0'; // do not change format, updated by `updateVSCode` script
var TransportKind;
(function (TransportKind) {
    TransportKind[TransportKind["stdio"] = 0] = "stdio";
    TransportKind[TransportKind["ipc"] = 1] = "ipc";
    TransportKind[TransportKind["pipe"] = 2] = "pipe";
    TransportKind[TransportKind["socket"] = 3] = "socket";
})(TransportKind = exports.TransportKind || (exports.TransportKind = {}));
var Transport;
(function (Transport) {
    function isSocket(value) {
        const candidate = value;
        return candidate && candidate.kind === TransportKind.socket && Is.number(candidate.port);
    }
    Transport.isSocket = isSocket;
})(Transport || (Transport = {}));
var Executable;
(function (Executable) {
    function is(value) {
        return Is.string(value.command);
    }
    Executable.is = is;
})(Executable || (Executable = {}));
var NodeModule;
(function (NodeModule) {
    function is(value) {
        return Is.string(value.module);
    }
    NodeModule.is = is;
})(NodeModule || (NodeModule = {}));
var StreamInfo;
(function (StreamInfo) {
    function is(value) {
        let candidate = value;
        return candidate && candidate.writer !== undefined && candidate.reader !== undefined;
    }
    StreamInfo.is = is;
})(StreamInfo || (StreamInfo = {}));
var ChildProcessInfo;
(function (ChildProcessInfo) {
    function is(value) {
        let candidate = value;
        return candidate && candidate.process !== undefined && typeof candidate.detached === 'boolean';
    }
    ChildProcessInfo.is = is;
})(ChildProcessInfo || (ChildProcessInfo = {}));
class LanguageClient extends client_1.BaseLanguageClient {
    constructor(arg1, arg2, arg3, arg4, arg5) {
        let id;
        let name;
        let serverOptions;
        let clientOptions;
        let forceDebug;
        if (Is.string(arg2)) {
            id = arg1;
            name = arg2;
            serverOptions = arg3;
            clientOptions = arg4;
            forceDebug = !!arg5;
        }
        else {
            id = arg1.toLowerCase();
            name = arg1;
            serverOptions = arg2;
            clientOptions = arg3;
            forceDebug = arg4;
        }
        if (forceDebug === undefined) {
            forceDebug = false;
        }
        super(id, name, clientOptions);
        this._serverOptions = serverOptions;
        this._forceDebug = forceDebug;
        this._isInDebugMode = forceDebug;
        try {
            this.checkVersion();
        }
        catch (error) {
            if (Is.string(error.message)) {
                this.outputChannel.appendLine(error.message);
            }
            throw error;
        }
    }
    checkVersion() {
        const codeVersion = semverParse(vscode_1.version);
        if (!codeVersion) {
            throw new Error(`No valid VS Code version detected. Version string is: ${vscode_1.version}`);
        }
        // Remove the insider pre-release since we stay API compatible.
        if (codeVersion.prerelease && codeVersion.prerelease.length > 0) {
            codeVersion.prerelease = [];
        }
        if (!semverSatisfies(codeVersion, REQUIRED_VSCODE_VERSION)) {
            throw new Error(`The language client requires VS Code version ${REQUIRED_VSCODE_VERSION} but received version ${vscode_1.version}`);
        }
    }
    get isInDebugMode() {
        return this._isInDebugMode;
    }
    async restart() {
        await this.stop();
        // We are in debug mode. Wait a little before we restart
        // so that the debug port can be freed. We can safely ignore
        // the disposable returned from start since it will call
        // stop on the same client instance.
        if (this.isInDebugMode) {
            await new Promise((resolve) => setTimeout(resolve, 1000));
            await this.start();
        }
        else {
            await this.start();
        }
    }
    stop(timeout = 2000) {
        return super.stop(timeout).finally(() => {
            if (this._serverProcess) {
                const toCheck = this._serverProcess;
                this._serverProcess = undefined;
                if (this._isDetached === undefined || !this._isDetached) {
                    this.checkProcessDied(toCheck);
                }
                this._isDetached = undefined;
            }
        });
    }
    checkProcessDied(childProcess) {
        if (!childProcess || childProcess.pid === undefined) {
            return;
        }
        setTimeout(() => {
            // Test if the process is still alive. Throws an exception if not
            try {
                if (childProcess.pid !== undefined) {
                    process.kill(childProcess.pid, 0);
                    (0, processes_1.terminate)(childProcess);
                }
            }
            catch (error) {
                // All is fine.
            }
        }, 2000);
    }
    handleConnectionClosed() {
        this._serverProcess = undefined;
        return super.handleConnectionClosed();
    }
    fillInitializeParams(params) {
        super.fillInitializeParams(params);
        if (params.processId === null) {
            params.processId = process.pid;
        }
    }
    createMessageTransports(encoding) {
        function getEnvironment(env, fork) {
            if (!env && !fork) {
                return undefined;
            }
            const result = Object.create(null);
            Object.keys(process.env).forEach(key => result[key] = process.env[key]);
            if (fork) {
                result['ELECTRON_RUN_AS_NODE'] = '1';
                result['ELECTRON_NO_ASAR'] = '1';
            }
            if (env) {
                Object.keys(env).forEach(key => result[key] = env[key]);
            }
            return result;
        }
        const debugStartWith = ['--debug=', '--debug-brk=', '--inspect=', '--inspect-brk='];
        const debugEquals = ['--debug', '--debug-brk', '--inspect', '--inspect-brk'];
        function startedInDebugMode() {
            let args = process.execArgv;
            if (args) {
                return args.some((arg) => {
                    return debugStartWith.some(value => arg.startsWith(value)) ||
                        debugEquals.some(value => arg === value);
                });
            }
            return false;
        }
        function assertStdio(process) {
            if (process.stdin === null || process.stdout === null || process.stderr === null) {
                throw new Error('Process created without stdio streams');
            }
        }
        const server = this._serverOptions;
        // We got a function.
        if (Is.func(server)) {
            return server().then((result) => {
                if (client_1.MessageTransports.is(result)) {
                    this._isDetached = !!result.detached;
                    return result;
                }
                else if (StreamInfo.is(result)) {
                    this._isDetached = !!result.detached;
                    return { reader: new node_1.StreamMessageReader(result.reader), writer: new node_1.StreamMessageWriter(result.writer) };
                }
                else {
                    let cp;
                    if (ChildProcessInfo.is(result)) {
                        cp = result.process;
                        this._isDetached = result.detached;
                    }
                    else {
                        cp = result;
                        this._isDetached = false;
                    }
                    cp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                    return { reader: new node_1.StreamMessageReader(cp.stdout), writer: new node_1.StreamMessageWriter(cp.stdin) };
                }
            });
        }
        let json;
        let runDebug = server;
        if (runDebug.run || runDebug.debug) {
            if (this._forceDebug || startedInDebugMode()) {
                json = runDebug.debug;
                this._isInDebugMode = true;
            }
            else {
                json = runDebug.run;
                this._isInDebugMode = false;
            }
        }
        else {
            json = server;
        }
        return this._getServerWorkingDir(json.options).then(serverWorkingDir => {
            if (NodeModule.is(json) && json.module) {
                let node = json;
                let transport = node.transport || TransportKind.stdio;
                if (node.runtime) {
                    const args = [];
                    const options = node.options ?? Object.create(null);
                    if (options.execArgv) {
                        options.execArgv.forEach(element => args.push(element));
                    }
                    args.push(node.module);
                    if (node.args) {
                        node.args.forEach(element => args.push(element));
                    }
                    const execOptions = Object.create(null);
                    execOptions.cwd = serverWorkingDir;
                    execOptions.env = getEnvironment(options.env, false);
                    const runtime = this._getRuntimePath(node.runtime, serverWorkingDir);
                    let pipeName = undefined;
                    if (transport === TransportKind.ipc) {
                        // exec options not correctly typed in lib
                        execOptions.stdio = [null, null, null, 'ipc'];
                        args.push('--node-ipc');
                    }
                    else if (transport === TransportKind.stdio) {
                        args.push('--stdio');
                    }
                    else if (transport === TransportKind.pipe) {
                        pipeName = (0, node_1.generateRandomPipeName)();
                        args.push(`--pipe=${pipeName}`);
                    }
                    else if (Transport.isSocket(transport)) {
                        args.push(`--socket=${transport.port}`);
                    }
                    args.push(`--clientProcessId=${process.pid.toString()}`);
                    if (transport === TransportKind.ipc || transport === TransportKind.stdio) {
                        const serverProcess = cp.spawn(runtime, args, execOptions);
                        if (!serverProcess || !serverProcess.pid) {
                            return handleChildProcessStartError(serverProcess, `Launching server using runtime ${runtime} failed.`);
                        }
                        this._serverProcess = serverProcess;
                        serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                        if (transport === TransportKind.ipc) {
                            serverProcess.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            return Promise.resolve({ reader: new node_1.IPCMessageReader(serverProcess), writer: new node_1.IPCMessageWriter(serverProcess) });
                        }
                        else {
                            return Promise.resolve({ reader: new node_1.StreamMessageReader(serverProcess.stdout), writer: new node_1.StreamMessageWriter(serverProcess.stdin) });
                        }
                    }
                    else if (transport === TransportKind.pipe) {
                        return (0, node_1.createClientPipeTransport)(pipeName).then((transport) => {
                            const process = cp.spawn(runtime, args, execOptions);
                            if (!process || !process.pid) {
                                return handleChildProcessStartError(process, `Launching server using runtime ${runtime} failed.`);
                            }
                            this._serverProcess = process;
                            process.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            process.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            return transport.onConnected().then((protocol) => {
                                return { reader: protocol[0], writer: protocol[1] };
                            });
                        });
                    }
                    else if (Transport.isSocket(transport)) {
                        return (0, node_1.createClientSocketTransport)(transport.port).then((transport) => {
                            const process = cp.spawn(runtime, args, execOptions);
                            if (!process || !process.pid) {
                                return handleChildProcessStartError(process, `Launching server using runtime ${runtime} failed.`);
                            }
                            this._serverProcess = process;
                            process.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            process.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            return transport.onConnected().then((protocol) => {
                                return { reader: protocol[0], writer: protocol[1] };
                            });
                        });
                    }
                }
                else {
                    let pipeName = undefined;
                    return new Promise((resolve, reject) => {
                        const args = (node.args && node.args.slice()) ?? [];
                        if (transport === TransportKind.ipc) {
                            args.push('--node-ipc');
                        }
                        else if (transport === TransportKind.stdio) {
                            args.push('--stdio');
                        }
                        else if (transport === TransportKind.pipe) {
                            pipeName = (0, node_1.generateRandomPipeName)();
                            args.push(`--pipe=${pipeName}`);
                        }
                        else if (Transport.isSocket(transport)) {
                            args.push(`--socket=${transport.port}`);
                        }
                        args.push(`--clientProcessId=${process.pid.toString()}`);
                        const options = node.options ?? Object.create(null);
                        options.env = getEnvironment(options.env, true);
                        options.execArgv = options.execArgv || [];
                        options.cwd = serverWorkingDir;
                        options.silent = true;
                        if (transport === TransportKind.ipc || transport === TransportKind.stdio) {
                            const sp = cp.fork(node.module, args || [], options);
                            assertStdio(sp);
                            this._serverProcess = sp;
                            sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                            if (transport === TransportKind.ipc) {
                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                                resolve({ reader: new node_1.IPCMessageReader(this._serverProcess), writer: new node_1.IPCMessageWriter(this._serverProcess) });
                            }
                            else {
                                resolve({ reader: new node_1.StreamMessageReader(sp.stdout), writer: new node_1.StreamMessageWriter(sp.stdin) });
                            }
                        }
                        else if (transport === TransportKind.pipe) {
                            (0, node_1.createClientPipeTransport)(pipeName).then((transport) => {
                                const sp = cp.fork(node.module, args || [], options);
                                assertStdio(sp);
                                this._serverProcess = sp;
                                sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                                transport.onConnected().then((protocol) => {
                                    resolve({ reader: protocol[0], writer: protocol[1] });
                                }, reject);
                            }, reject);
                        }
                        else if (Transport.isSocket(transport)) {
                            (0, node_1.createClientSocketTransport)(transport.port).then((transport) => {
                                const sp = cp.fork(node.module, args || [], options);
                                assertStdio(sp);
                                this._serverProcess = sp;
                                sp.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                                sp.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                                transport.onConnected().then((protocol) => {
                                    resolve({ reader: protocol[0], writer: protocol[1] });
                                }, reject);
                            }, reject);
                        }
                    });
                }
            }
            else if (Executable.is(json) && json.command) {
                const command = json;
                const args = json.args !== undefined ? json.args.slice(0) : [];
                let pipeName = undefined;
                const transport = json.transport;
                if (transport === TransportKind.stdio) {
                    args.push('--stdio');
                }
                else if (transport === TransportKind.pipe) {
                    pipeName = (0, node_1.generateRandomPipeName)();
                    args.push(`--pipe=${pipeName}`);
                }
                else if (Transport.isSocket(transport)) {
                    args.push(`--socket=${transport.port}`);
                }
                else if (transport === TransportKind.ipc) {
                    throw new Error(`Transport kind ipc is not support for command executable`);
                }
                const options = Object.assign({}, command.options);
                options.cwd = options.cwd || serverWorkingDir;
                if (transport === undefined || transport === TransportKind.stdio) {
                    const serverProcess = cp.spawn(command.command, args, options);
                    if (!serverProcess || !serverProcess.pid) {
                        return handleChildProcessStartError(serverProcess, `Launching server using command ${command.command} failed.`);
                    }
                    serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                    this._serverProcess = serverProcess;
                    this._isDetached = !!options.detached;
                    return Promise.resolve({ reader: new node_1.StreamMessageReader(serverProcess.stdout), writer: new node_1.StreamMessageWriter(serverProcess.stdin) });
                }
                else if (transport === TransportKind.pipe) {
                    return (0, node_1.createClientPipeTransport)(pipeName).then((transport) => {
                        const serverProcess = cp.spawn(command.command, args, options);
                        if (!serverProcess || !serverProcess.pid) {
                            return handleChildProcessStartError(serverProcess, `Launching server using command ${command.command} failed.`);
                        }
                        this._serverProcess = serverProcess;
                        this._isDetached = !!options.detached;
                        serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                        serverProcess.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                        return transport.onConnected().then((protocol) => {
                            return { reader: protocol[0], writer: protocol[1] };
                        });
                    });
                }
                else if (Transport.isSocket(transport)) {
                    return (0, node_1.createClientSocketTransport)(transport.port).then((transport) => {
                        const serverProcess = cp.spawn(command.command, args, options);
                        if (!serverProcess || !serverProcess.pid) {
                            return handleChildProcessStartError(serverProcess, `Launching server using command ${command.command} failed.`);
                        }
                        this._serverProcess = serverProcess;
                        this._isDetached = !!options.detached;
                        serverProcess.stderr.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                        serverProcess.stdout.on('data', data => this.outputChannel.append(Is.string(data) ? data : data.toString(encoding)));
                        return transport.onConnected().then((protocol) => {
                            return { reader: protocol[0], writer: protocol[1] };
                        });
                    });
                }
            }
            return Promise.reject(new Error(`Unsupported server configuration ` + JSON.stringify(server, null, 4)));
        });
    }
    _getRuntimePath(runtime, serverWorkingDirectory) {
        if (path.isAbsolute(runtime)) {
            return runtime;
        }
        const mainRootPath = this._mainGetRootPath();
        if (mainRootPath !== undefined) {
            const result = path.join(mainRootPath, runtime);
            if (fs.existsSync(result)) {
                return result;
            }
        }
        if (serverWorkingDirectory !== undefined) {
            const result = path.join(serverWorkingDirectory, runtime);
            if (fs.existsSync(result)) {
                return result;
            }
        }
        return runtime;
    }
    _mainGetRootPath() {
        let folders = vscode_1.workspace.workspaceFolders;
        if (!folders || folders.length === 0) {
            return undefined;
        }
        let folder = folders[0];
        if (folder.uri.scheme === 'file') {
            return folder.uri.fsPath;
        }
        return undefined;
    }
    _getServerWorkingDir(options) {
        let cwd = options && options.cwd;
        if (!cwd) {
            cwd = this.clientOptions.workspaceFolder
                ? this.clientOptions.workspaceFolder.uri.fsPath
                : this._mainGetRootPath();
        }
        if (cwd) {
            // make sure the folder exists otherwise creating the process will fail
            return new Promise(s => {
                fs.lstat(cwd, (err, stats) => {
                    s(!err && stats.isDirectory() ? cwd : undefined);
                });
            });
        }
        return Promise.resolve(undefined);
    }
}
exports.LanguageClient = LanguageClient;
class SettingMonitor {
    constructor(_client, _setting) {
        this._client = _client;
        this._setting = _setting;
        this._listeners = [];
    }
    start() {
        vscode_1.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, this._listeners);
        this.onDidChangeConfiguration();
        return new vscode_1.Disposable(() => {
            if (this._client.needsStop()) {
                void this._client.stop();
            }
        });
    }
    onDidChangeConfiguration() {
        let index = this._setting.indexOf('.');
        let primary = index >= 0 ? this._setting.substr(0, index) : this._setting;
        let rest = index >= 0 ? this._setting.substr(index + 1) : undefined;
        let enabled = rest ? vscode_1.workspace.getConfiguration(primary).get(rest, false) : vscode_1.workspace.getConfiguration(primary);
        if (enabled && this._client.needsStart()) {
            this._client.start().catch((error) => this._client.error('Start failed after configuration change', error, 'force'));
        }
        else if (!enabled && this._client.needsStop()) {
            void this._client.stop().catch((error) => this._client.error('Stop failed after configuration change', error, 'force'));
        }
    }
}
exports.SettingMonitor = SettingMonitor;
function handleChildProcessStartError(process, message) {
    if (process === null) {
        return Promise.reject(message);
    }
    return new Promise((_, reject) => {
        process.on('error', (err) => {
            reject(`${message} ${err}`);
        });
        // the error event should always be run immediately,
        // but race on it just in case
        setImmediate(() => reject(message));
    });
}


/***/ }),

/***/ "./node_modules/vscode-languageclient/lib/node/processes.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageclient/lib/node/processes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.terminate = void 0;
const cp = __webpack_require__(/*! child_process */ "child_process");
const path_1 = __webpack_require__(/*! path */ "path");
const isWindows = (process.platform === 'win32');
const isMacintosh = (process.platform === 'darwin');
const isLinux = (process.platform === 'linux');
function terminate(process, cwd) {
    if (isWindows) {
        try {
            // This we run in Atom execFileSync is available.
            // Ignore stderr since this is otherwise piped to parent.stderr
            // which might be already closed.
            let options = {
                stdio: ['pipe', 'pipe', 'ignore']
            };
            if (cwd) {
                options.cwd = cwd;
            }
            cp.execFileSync('taskkill', ['/T', '/F', '/PID', process.pid.toString()], options);
            return true;
        }
        catch (err) {
            return false;
        }
    }
    else if (isLinux || isMacintosh) {
        try {
            var cmd = (0, path_1.join)(__dirname, 'terminateProcess.sh');
            var result = cp.spawnSync(cmd, [process.pid.toString()]);
            return result.error ? false : true;
        }
        catch (err) {
            return false;
        }
    }
    else {
        process.kill('SIGKILL');
        return true;
    }
}
exports.terminate = terminate;


/***/ }),

/***/ "./node_modules/vscode-languageclient/node.js":
/*!****************************************************!*\
  !*** ./node_modules/vscode-languageclient/node.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-languageclient/lib/node/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageclient/node_modules/minimatch/lib/path.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/node_modules/minimatch/lib/path.js ***!
  \*******************************************************************************/
/***/ ((module) => {

const isWindows = typeof process === 'object' &&
  process &&
  process.platform === 'win32'
module.exports = isWindows ? { sep: '\\' } : { sep: '/' }


/***/ }),

/***/ "./node_modules/vscode-languageclient/node_modules/minimatch/minimatch.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode-languageclient/node_modules/minimatch/minimatch.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const minimatch = module.exports = (p, pattern, options = {}) => {
  assertValidPattern(pattern)

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

module.exports = minimatch

const path = __webpack_require__(/*! ./lib/path.js */ "./node_modules/vscode-languageclient/node_modules/minimatch/lib/path.js")
minimatch.sep = path.sep

const GLOBSTAR = Symbol('globstar **')
minimatch.GLOBSTAR = GLOBSTAR
const expand = __webpack_require__(/*! brace-expansion */ "./node_modules/brace-expansion/index.js")

const plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
const qmark = '[^/]'

// * => any number of characters
const star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
const twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
const twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// "abc" -> { a:true, b:true, c:true }
const charSet = s => s.split('').reduce((set, c) => {
  set[c] = true
  return set
}, {})

// characters that need to be escaped in RegExp.
const reSpecials = charSet('().*{}+?[]^$\\!')

// characters that indicate we have to add the pattern start
const addPatternStartSet = charSet('[.(')

// normalizes slashes.
const slashSplit = /\/+/

minimatch.filter = (pattern, options = {}) =>
  (p, i, list) => minimatch(p, pattern, options)

const ext = (a, b = {}) => {
  const t = {}
  Object.keys(a).forEach(k => t[k] = a[k])
  Object.keys(b).forEach(k => t[k] = b[k])
  return t
}

minimatch.defaults = def => {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  const orig = minimatch

  const m = (p, pattern, options) => orig(p, pattern, ext(def, options))
  m.Minimatch = class Minimatch extends orig.Minimatch {
    constructor (pattern, options) {
      super(pattern, ext(def, options))
    }
  }
  m.Minimatch.defaults = options => orig.defaults(ext(def, options)).Minimatch
  m.filter = (pattern, options) => orig.filter(pattern, ext(def, options))
  m.defaults = options => orig.defaults(ext(def, options))
  m.makeRe = (pattern, options) => orig.makeRe(pattern, ext(def, options))
  m.braceExpand = (pattern, options) => orig.braceExpand(pattern, ext(def, options))
  m.match = (list, pattern, options) => orig.match(list, pattern, ext(def, options))

  return m
}





// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = (pattern, options) => braceExpand(pattern, options)

const braceExpand = (pattern, options = {}) => {
  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

const MAX_PATTERN_LENGTH = 1024 * 64
const assertValidPattern = pattern => {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
const SUBPARSE = Symbol('subparse')

minimatch.makeRe = (pattern, options) =>
  new Minimatch(pattern, options || {}).makeRe()

minimatch.match = (list, pattern, options = {}) => {
  const mm = new Minimatch(pattern, options)
  list = list.filter(f => mm.match(f))
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

// replace stuff like \* with *
const globUnescape = s => s.replace(/\\(.)/g, '$1')
const charUnescape = s => s.replace(/\\([^-\]])/g, '$1')
const regExpEscape = s => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
const braExpEscape = s => s.replace(/[[\]\\]/g, '\\$&')

class Minimatch {
  constructor (pattern, options) {
    assertValidPattern(pattern)

    if (!options) options = {}

    this.options = options
    this.set = []
    this.pattern = pattern
    this.windowsPathsNoEscape = !!options.windowsPathsNoEscape ||
      options.allowWindowsEscape === false
    if (this.windowsPathsNoEscape) {
      this.pattern = this.pattern.replace(/\\/g, '/')
    }
    this.regexp = null
    this.negate = false
    this.comment = false
    this.empty = false
    this.partial = !!options.partial

    // make the set of regexps etc.
    this.make()
  }

  debug () {}

  make () {
    const pattern = this.pattern
    const options = this.options

    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true
      return
    }
    if (!pattern) {
      this.empty = true
      return
    }

    // step 1: figure out negation, etc.
    this.parseNegate()

    // step 2: expand braces
    let set = this.globSet = this.braceExpand()

    if (options.debug) this.debug = (...args) => console.error(...args)

    this.debug(this.pattern, set)

    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(s => s.split(slashSplit))

    this.debug(this.pattern, set)

    // glob --> regexps
    set = set.map((s, si, set) => s.map(this.parse, this))

    this.debug(this.pattern, set)

    // filter out everything that didn't compile properly.
    set = set.filter(s => s.indexOf(false) === -1)

    this.debug(this.pattern, set)

    this.set = set
  }

  parseNegate () {
    if (this.options.nonegate) return

    const pattern = this.pattern
    let negate = false
    let negateOffset = 0

    for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
      negate = !negate
      negateOffset++
    }

    if (negateOffset) this.pattern = pattern.slice(negateOffset)
    this.negate = negate
  }

  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  matchOne (file, pattern, partial) {
    var options = this.options

    this.debug('matchOne',
      { 'this': this, file: file, pattern: pattern })

    this.debug('matchOne', file.length, pattern.length)

    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length
        ; (fi < fl) && (pi < pl)
        ; fi++, pi++) {
      this.debug('matchOne loop')
      var p = pattern[pi]
      var f = file[fi]

      this.debug(pattern, p, f)

      // should be impossible.
      // some invalid regexp stuff in the set.
      /* istanbul ignore if */
      if (p === false) return false

      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f])

        // "**"
        // a/**/b/**/c would match the following:
        // a/b/x/y/z/c
        // a/x/y/z/b/c
        // a/b/x/b/x/c
        // a/b/c
        // To do this, take the rest of the pattern after
        // the **, and see if it would match the file remainder.
        // If so, return success.
        // If not, the ** "swallows" a segment, and try again.
        // This is recursively awful.
        //
        // a/**/b/**/c matching a/b/x/y/z/c
        // - a matches a
        // - doublestar
        //   - matchOne(b/x/y/z/c, b/**/c)
        //     - b matches b
        //     - doublestar
        //       - matchOne(x/y/z/c, c) -> no
        //       - matchOne(y/z/c, c) -> no
        //       - matchOne(z/c, c) -> no
        //       - matchOne(c, c) yes, hit
        var fr = fi
        var pr = pi + 1
        if (pr === pl) {
          this.debug('** at the end')
          // a ** at the end will just swallow the rest.
          // We have found a match.
          // however, it will not swallow /.x, unless
          // options.dot is set.
          // . and .. are *never* matched by **, for explosively
          // exponential reasons.
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' ||
              (!options.dot && file[fi].charAt(0) === '.')) return false
          }
          return true
        }

        // ok, let's see if we can swallow whatever we can.
        while (fr < fl) {
          var swallowee = file[fr]

          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

          // XXX remove this slice.  Just pass the start index.
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee)
            // found a match.
            return true
          } else {
            // can't swallow "." or ".." ever.
            // can only swallow ".foo" when explicitly asked.
            if (swallowee === '.' || swallowee === '..' ||
              (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr)
              break
            }

            // ** swallows a segment, and continue.
            this.debug('globstar swallow a segment, and continue')
            fr++
          }
        }

        // no match was found.
        // However, in partial mode, we can't say this is necessarily over.
        // If there's more *pattern* left, then
        /* istanbul ignore if */
        if (partial) {
          // ran out of file
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
          if (fr === fl) return true
        }
        return false
      }

      // something other than **
      // non-magic patterns just have to match exactly
      // patterns with magic have been turned into regexps.
      var hit
      if (typeof p === 'string') {
        hit = f === p
        this.debug('string match', p, f, hit)
      } else {
        hit = f.match(p)
        this.debug('pattern match', p, f, hit)
      }

      if (!hit) return false
    }

    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*

    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) {
      // ran out of pattern and filename at the same time.
      // an exact hit!
      return true
    } else if (fi === fl) {
      // ran out of file, but still had pattern left.
      // this is ok if we're doing the match as part of
      // a glob fs traversal.
      return partial
    } else /* istanbul ignore else */ if (pi === pl) {
      // ran out of pattern, still have file left.
      // this is only acceptable if we're on the very last
      // empty segment of a file with a trailing slash.
      // a/* should match a/b/
      return (fi === fl - 1) && (file[fi] === '')
    }

    // should be unreachable.
    /* istanbul ignore next */
    throw new Error('wtf?')
  }

  braceExpand () {
    return braceExpand(this.pattern, this.options)
  }

  parse (pattern, isSub) {
    assertValidPattern(pattern)

    const options = this.options

    // shortcuts
    if (pattern === '**') {
      if (!options.noglobstar)
        return GLOBSTAR
      else
        pattern = '*'
    }
    if (pattern === '') return ''

    let re = ''
    let hasMagic = false
    let escaping = false
    // ? => one single character
    const patternListStack = []
    const negativeLists = []
    let stateChar
    let inClass = false
    let reClassStart = -1
    let classStart = -1
    let cs
    let pl
    let sp
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.  However, if the pattern
    // starts with ., then traversal patterns can match.
    let dotTravAllowed = pattern.charAt(0) === '.'
    let dotFileAllowed = options.dot || dotTravAllowed
    const patternStart = () =>
      dotTravAllowed
        ? ''
        : dotFileAllowed
        ? '(?!(?:^|\\/)\\.{1,2}(?:$|\\/))'
        : '(?!\\.)'
    const subPatternStart = (p) =>
      p.charAt(0) === '.'
        ? ''
        : options.dot
        ? '(?!(?:^|\\/)\\.{1,2}(?:$|\\/))'
        : '(?!\\.)'


    const clearStateChar = () => {
      if (stateChar) {
        // we had some state-tracking character
        // that wasn't consumed by this pass.
        switch (stateChar) {
          case '*':
            re += star
            hasMagic = true
          break
          case '?':
            re += qmark
            hasMagic = true
          break
          default:
            re += '\\' + stateChar
          break
        }
        this.debug('clearStateChar %j %j', stateChar, re)
        stateChar = false
      }
    }

    for (let i = 0, c; (i < pattern.length) && (c = pattern.charAt(i)); i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c)

      // skip over any that are escaped.
      if (escaping) {
        /* istanbul ignore next - completely not allowed, even escaped. */
        if (c === '/') {
          return false
        }

        if (reSpecials[c]) {
          re += '\\'
        }
        re += c
        escaping = false
        continue
      }

      switch (c) {
        /* istanbul ignore next */
        case '/': {
          // Should already be path-split by now.
          return false
        }

        case '\\':
          if (inClass && pattern.charAt(i + 1) === '-') {
            re += c
            continue
          }

          clearStateChar()
          escaping = true
        continue

        // the various stateChar values
        // for the "extglob" stuff.
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

          // all of those are literals inside a class, except that
          // the glob [!a] means [^a] in regexp
          if (inClass) {
            this.debug('  in class')
            if (c === '!' && i === classStart + 1) c = '^'
            re += c
            continue
          }

          // if we already have a stateChar, then it means
          // that there was something like ** or +? in there.
          // Handle the stateChar, then proceed with this one.
          this.debug('call clearStateChar %j', stateChar)
          clearStateChar()
          stateChar = c
          // if extglob is disabled, then +(asdf|foo) isn't a thing.
          // just clear the statechar *now*, rather than even diving into
          // the patternList stuff.
          if (options.noext) clearStateChar()
        continue

        case '(': {
          if (inClass) {
            re += '('
            continue
          }

          if (!stateChar) {
            re += '\\('
            continue
          }

          const plEntry = {
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close,
          }
          this.debug(this.pattern, '\t', plEntry)
          patternListStack.push(plEntry)
          // negation is (?:(?!(?:js)(?:<rest>))[^/]*)
          re += plEntry.open
          // next entry starts with a dot maybe?
          if (plEntry.start === 0 && plEntry.type !== '!') {
            dotTravAllowed = true
            re += subPatternStart(pattern.slice(i + 1))
          }
          this.debug('plType %j %j', stateChar, re)
          stateChar = false
          continue
        }

        case ')': {
          const plEntry = patternListStack[patternListStack.length - 1]
          if (inClass || !plEntry) {
            re += '\\)'
            continue
          }
          patternListStack.pop()

          // closing an extglob
          clearStateChar()
          hasMagic = true
          pl = plEntry
          // negation is (?:(?!js)[^/]*)
          // The others are (?:<pattern>)<type>
          re += pl.close
          if (pl.type === '!') {
            negativeLists.push(Object.assign(pl, { reEnd: re.length }))
          }
          continue
        }

        case '|': {
          const plEntry = patternListStack[patternListStack.length - 1]
          if (inClass || !plEntry) {
            re += '\\|'
            continue
          }

          clearStateChar()
          re += '|'
          // next subpattern can start with a dot?
          if (plEntry.start === 0 && plEntry.type !== '!') {
            dotTravAllowed = true
            re += subPatternStart(pattern.slice(i + 1))
          }
          continue
        }

        // these are mostly the same in regexp and glob
        case '[':
          // swallow any state-tracking char before the [
          clearStateChar()

          if (inClass) {
            re += '\\' + c
            continue
          }

          inClass = true
          classStart = i
          reClassStart = re.length
          re += c
        continue

        case ']':
          //  a right bracket shall lose its special
          //  meaning and represent itself in
          //  a bracket expression if it occurs
          //  first in the list.  -- POSIX.2 2.8.3.2
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c
            continue
          }

          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + braExpEscape(charUnescape(cs)) + ']')
            // looks good, finish up the class.
            re += c
          } catch (er) {
            // out of order ranges in JS are errors, but in glob syntax,
            // they're just a range that matches nothing.
            re = re.substring(0, reClassStart) + '(?:$.)' // match nothing ever
          }
          hasMagic = true
          inClass = false
        continue

        default:
          // swallow any state char that wasn't consumed
          clearStateChar()

          if (reSpecials[c] && !(c === '^' && inClass)) {
            re += '\\'
          }

          re += c
          break

      } // switch
    } // for

    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
      // split where the last [ was, and escape it
      // this is a huge pita.  We now have to re-walk
      // the contents of the would-be class to re-translate
      // any characters that were passed through as-is
      cs = pattern.slice(classStart + 1)
      sp = this.parse(cs, SUBPARSE)
      re = re.substring(0, reClassStart) + '\\[' + sp[0]
      hasMagic = hasMagic || sp[1]
    }

    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      let tail
      tail = re.slice(pl.reStart + pl.open.length)
      this.debug('setting tail', re, pl)
      // maybe some even number of \, then maybe 1 \, followed by a |
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, (_, $1, $2) => {
        /* istanbul ignore else - should already be done */
        if (!$2) {
          // the | isn't already escaped, so escape it.
          $2 = '\\'
        }

        // need to escape all those slashes *again*, without escaping the
        // one that we need for escaping the | character.  As it works out,
        // escaping an even number of slashes can be done by simply repeating
        // it exactly after itself.  That's why this trick works.
        //
        // I am sorry that you have to see this.
        return $1 + $1 + $2 + '|'
      })

      this.debug('tail=%j\n   %s', tail, tail, pl, re)
      const t = pl.type === '*' ? star
        : pl.type === '?' ? qmark
        : '\\' + pl.type

      hasMagic = true
      re = re.slice(0, pl.reStart) + t + '\\(' + tail
    }

    // handle trailing things that only matter at the very end.
    clearStateChar()
    if (escaping) {
      // trailing \\
      re += '\\\\'
    }

    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    const addPatternStart = addPatternStartSet[re.charAt(0)]

    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for (let n = negativeLists.length - 1; n > -1; n--) {
      const nl = negativeLists[n]

      const nlBefore = re.slice(0, nl.reStart)
      const nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
      let nlAfter = re.slice(nl.reEnd)
      const nlLast = re.slice(nl.reEnd - 8, nl.reEnd) + nlAfter

      // Handle nested stuff like *(*.js|!(*.json)), where open parens
      // mean that we should *not* include the ) in the bit that is considered
      // "after" the negated section.
      const closeParensBefore = nlBefore.split(')').length
      const openParensBefore = nlBefore.split('(').length - closeParensBefore
      let cleanAfter = nlAfter
      for (let i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
      }
      nlAfter = cleanAfter

      const dollar = nlAfter === '' && isSub !== SUBPARSE ? '(?:$|\\/)' : ''

      re = nlBefore + nlFirst + nlAfter + dollar + nlLast
    }

    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re
    }

    if (addPatternStart) {
      re = patternStart() + re
    }

    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) {
      return [re, hasMagic]
    }

    // if it's nocase, and the lcase/uppercase don't match, it's magic
    if (options.nocase && !hasMagic) {
      hasMagic = pattern.toUpperCase() !== pattern.toLowerCase()
    }

    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) {
      return globUnescape(pattern)
    }

    const flags = options.nocase ? 'i' : ''
    try {
      return Object.assign(new RegExp('^' + re + '$', flags), {
        _glob: pattern,
        _src: re,
      })
    } catch (er) /* istanbul ignore next - should be impossible */ {
      // If it was an invalid regular expression, then it can't match
      // anything.  This trick looks for a character after the end of
      // the string, which is of course impossible, except in multi-line
      // mode, but it's not a /m regex.
      return new RegExp('$.')
    }
  }

  makeRe () {
    if (this.regexp || this.regexp === false) return this.regexp

    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    const set = this.set

    if (!set.length) {
      this.regexp = false
      return this.regexp
    }
    const options = this.options

    const twoStar = options.noglobstar ? star
      : options.dot ? twoStarDot
      : twoStarNoDot
    const flags = options.nocase ? 'i' : ''

    // coalesce globstars and regexpify non-globstar patterns
    // if it's the only item, then we just do one twoStar
    // if it's the first, and there are more, prepend (\/|twoStar\/)? to next
    // if it's the last, append (\/twoStar|) to previous
    // if it's in the middle, append (\/|\/twoStar\/) to previous
    // then filter out GLOBSTAR symbols
    let re = set.map(pattern => {
      pattern = pattern.map(p =>
        typeof p === 'string' ? regExpEscape(p)
        : p === GLOBSTAR ? GLOBSTAR
        : p._src
      ).reduce((set, p) => {
        if (!(set[set.length - 1] === GLOBSTAR && p === GLOBSTAR)) {
          set.push(p)
        }
        return set
      }, [])
      pattern.forEach((p, i) => {
        if (p !== GLOBSTAR || pattern[i-1] === GLOBSTAR) {
          return
        }
        if (i === 0) {
          if (pattern.length > 1) {
            pattern[i+1] = '(?:\\\/|' + twoStar + '\\\/)?' + pattern[i+1]
          } else {
            pattern[i] = twoStar
          }
        } else if (i === pattern.length - 1) {
          pattern[i-1] += '(?:\\\/|' + twoStar + ')?'
        } else {
          pattern[i-1] += '(?:\\\/|\\\/' + twoStar + '\\\/)' + pattern[i+1]
          pattern[i+1] = GLOBSTAR
        }
      })
      return pattern.filter(p => p !== GLOBSTAR).join('/')
    }).join('|')

    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = '^(?:' + re + ')$'

    // can match anything, as long as it's not this.
    if (this.negate) re = '^(?!' + re + ').*$'

    try {
      this.regexp = new RegExp(re, flags)
    } catch (ex) /* istanbul ignore next - should be impossible */ {
      this.regexp = false
    }
    return this.regexp
  }

  match (f, partial = this.partial) {
    this.debug('match', f, this.pattern)
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false
    if (this.empty) return f === ''

    if (f === '/' && partial) return true

    const options = this.options

    // windows: need to use /, not \
    if (path.sep !== '/') {
      f = f.split(path.sep).join('/')
    }

    // treat the test path as a set of pathparts.
    f = f.split(slashSplit)
    this.debug(this.pattern, 'split', f)

    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.

    const set = this.set
    this.debug(this.pattern, 'set', set)

    // Find the basename of the path by looking for the last non-empty segment
    let filename
    for (let i = f.length - 1; i >= 0; i--) {
      filename = f[i]
      if (filename) break
    }

    for (let i = 0; i < set.length; i++) {
      const pattern = set[i]
      let file = f
      if (options.matchBase && pattern.length === 1) {
        file = [filename]
      }
      const hit = this.matchOne(file, pattern, partial)
      if (hit) {
        if (options.flipNegate) return true
        return !this.negate
      }
    }

    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false
    return this.negate
  }

  static defaults (def) {
    return minimatch.defaults(def).Minimatch
  }
}

minimatch.Minimatch = Minimatch


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/browser.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/browser/main */ "./node_modules/vscode-languageserver-protocol/lib/browser/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/browser/main.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/browser/main.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const browser_1 = __webpack_require__(/*! vscode-jsonrpc/browser */ "./node_modules/vscode-jsonrpc/browser.js");
__exportStar(__webpack_require__(/*! vscode-jsonrpc/browser */ "./node_modules/vscode-jsonrpc/browser.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageserver-protocol/lib/common/api.js"), exports);
function createProtocolConnection(reader, writer, logger, options) {
    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/api.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js"), exports);
__exportStar(__webpack_require__(/*! vscode-languageserver-types */ "./node_modules/vscode-languageserver-types/lib/esm/main.js"), exports);
__exportStar(__webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js"), exports);
__exportStar(__webpack_require__(/*! ./protocol */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.js"), exports);
var connection_1 = __webpack_require__(/*! ./connection */ "./node_modules/vscode-languageserver-protocol/lib/common/connection.js");
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/connection.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/connection.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/messages.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Declaration}
 * or a typed array of {@link DeclarationLink} or a Thenable that resolves
 * to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind = exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest = exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest = exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest = exports.InlayHintRequest || (exports.InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest = exports.InlayHintResolveRequest || (exports.InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest = exports.InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest = exports.InlineValueRequest || (exports.InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest = exports.InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "./node_modules/vscode-languageserver-types/lib/esm/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const protocol_implementation_1 = __webpack_require__(/*! ./protocol.implementation */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js");
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(/*! ./protocol.typeDefinition */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js");
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(/*! ./protocol.workspaceFolder */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js");
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(/*! ./protocol.configuration */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js");
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(/*! ./protocol.colorProvider */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js");
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(/*! ./protocol.foldingRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js");
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
const protocol_declaration_1 = __webpack_require__(/*! ./protocol.declaration */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js");
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(/*! ./protocol.selectionRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js");
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(/*! ./protocol.progress */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js");
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(/*! ./protocol.callHierarchy */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js");
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(/*! ./protocol.semanticTokens */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js");
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(/*! ./protocol.showDocument */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js");
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(/*! ./protocol.linkedEditingRange */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js");
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(/*! ./protocol.fileOperations */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js");
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(/*! ./protocol.moniker */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js");
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(/*! ./protocol.typeHierarchy */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js");
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(/*! ./protocol.inlineValue */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js");
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(/*! ./protocol.inlayHint */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js");
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(/*! ./protocol.diagnostic */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js");
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(/*! ./protocol.notebook */ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js");
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter = exports.TextDocumentFilter || (exports.TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter = exports.NotebookDocumentFilter || (exports.NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter = exports.NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind = exports.PositionEncodingKind || (exports.PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes = exports.InitializeErrorCodes || (exports.InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern = exports.RelativePattern || (exports.RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type {@link Definition}
 * or a typed array of {@link DefinitionLink} or a Thenable that resolves
 * to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
/**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest = exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "./node_modules/vscode-languageserver-types/lib/esm/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind = exports.NotebookCellKind || (exports.NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary = exports.ExecutionSummary || (exports.ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell = exports.NotebookCell || (exports.NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument = exports.NotebookDocument || (exports.NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType = exports.NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification = exports.DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange = exports.NotebookCellArrayChange || (exports.NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification = exports.DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "./node_modules/vscode-jsonrpc/lib/node/main.js");
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest = exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest = exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest = exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "./node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/common/utils/is.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/lib/node/main.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/lib/node/main.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const node_1 = __webpack_require__(/*! vscode-jsonrpc/node */ "./node_modules/vscode-jsonrpc/node.js");
__exportStar(__webpack_require__(/*! vscode-jsonrpc/node */ "./node_modules/vscode-jsonrpc/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "./node_modules/vscode-languageserver-protocol/lib/common/api.js"), exports);
function createProtocolConnection(input, output, logger, options) {
    return (0, node_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ "./node_modules/vscode-languageserver-protocol/node.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode-languageserver-protocol/node.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "./node_modules/vscode-languageserver-protocol/lib/node/main.js");

/***/ }),

/***/ "./node_modules/vscode-languageserver-types/lib/esm/main.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode-languageserver-types/lib/esm/main.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotatedTextEdit: () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   ChangeAnnotation: () => (/* binding */ ChangeAnnotation),
/* harmony export */   ChangeAnnotationIdentifier: () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionContext: () => (/* binding */ CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeDescription: () => (/* binding */ CodeDescription),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemLabelDetails: () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CreateFile: () => (/* binding */ CreateFile),
/* harmony export */   DeleteFile: () => (/* binding */ DeleteFile),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* binding */ DocumentUri),
/* harmony export */   EOL: () => (/* binding */ EOL),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FormattingOptions: () => (/* binding */ FormattingOptions),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InsertReplaceEdit: () => (/* binding */ InsertReplaceEdit),
/* harmony export */   InsertTextFormat: () => (/* binding */ InsertTextFormat),
/* harmony export */   InsertTextMode: () => (/* binding */ InsertTextMode),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   LocationLink: () => (/* binding */ LocationLink),
/* harmony export */   MarkedString: () => (/* binding */ MarkedString),
/* harmony export */   MarkupContent: () => (/* binding */ MarkupContent),
/* harmony export */   MarkupKind: () => (/* binding */ MarkupKind),
/* harmony export */   OptionalVersionedTextDocumentIdentifier: () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RenameFile: () => (/* binding */ RenameFile),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokenModifiers: () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   SemanticTokenTypes: () => (/* binding */ SemanticTokenTypes),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextDocument: () => (/* binding */ TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* binding */ TextDocumentEdit),
/* harmony export */   TextDocumentIdentifier: () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   TextDocumentItem: () => (/* binding */ TextDocumentItem),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceChange: () => (/* binding */ WorkspaceChange),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   integer: () => (/* binding */ integer),
/* harmony export */   uinteger: () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        var result = { label: label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        var candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range: range, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range: range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
        if (value === undefined) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl;
}());
/**
 * A helper class
 */
var ChangeAnnotations = /** @class */ (function () {
    function ChangeAnnotations(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === undefined) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying {@link WorkspaceEdit} literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== undefined) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = undefined;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name: name, kind: kind, location: { uri: uri, range: range } }
            : { name: name, kind: kind, location: { uri: uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        var result = { diagnostics: diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title: title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range: range, text: text };
    }
    InlineValueText.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range: range, variableName: variableName, caseSensitiveLookup: caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range: range, expression: expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId: frameId, stoppedLocation: stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value: value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        var result = { position: position, label: label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ "./node_modules/vscode-uri/lib/umd/index.js":
/*!**************************************************!*\
  !*** ./node_modules/vscode-uri/lib/umd/index.js ***!
  \**************************************************/
/***/ (function(module) {

!function(t,e){if(true)module.exports=e();else { var n, r; }}(this,(()=>(()=>{"use strict";var t={470:t=>{function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",i=0,o=-1,s=0,a=0;a<=t.length;++a){if(a<t.length)r=t.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var h=n.lastIndexOf("/");if(h!==n.length-1){-1===h?(n="",i=0):i=(n=n.slice(0,h)).length-1-n.lastIndexOf("/"),o=a,s=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=a,s=0;continue}e&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+t.slice(o+1,a):n=t.slice(o+1,a),i=a-o-1;o=a,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+"/"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&i&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+="/"+i)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,a=1;a<r.length&&47===r.charCodeAt(a);++a);for(var h=r.length-a,c=s<h?s:h,f=-1,u=0;u<=c;++u){if(u===c){if(h>c){if(47===r.charCodeAt(a+u))return r.slice(a+u+1);if(0===u)return r.slice(a+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(a+u))break;47===l&&(f=u)}var d="";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===d.length?d+="..":d+="/..");return d.length>0?d+r.slice(a+f):(a+=f,47===r.charCodeAt(a)&&++a,r.slice(a))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?"/":".":n&&1===i?"//":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var a=r.length-1,h=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===h&&(s=!1,h=n+1),a>=0&&(c===r.charCodeAt(a)?-1==--a&&(o=n):(a=-1,o=h))}return i===o?o=h:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,a=t.length-1;a>=0;--a){var h=t.charCodeAt(a);if(47!==h)-1===i&&(o=!1,i=a+1),46===h?-1===r?r=a:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=a+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?"":t.slice(r,i)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root="/",n=1):n=0;for(var s=-1,a=0,h=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===h&&(c=!1,h=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){a=f+1;break}return-1===s||-1===h||0===u||1===u&&s===h-1&&s===a+1?-1!==h&&(r.base=r.name=0===a&&o?t.slice(1,h):t.slice(a,h)):(0===a&&o?(r.name=t.slice(1,s),r.base=t.slice(1,h)):(r.name=t.slice(a,s),r.base=t.slice(a,h)),r.ext=t.slice(s,h)),a>0?r.dir=t.slice(0,a-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n},674:(t,e)=>{if(Object.defineProperty(e,"__esModule",{value:!0}),e.isWindows=void 0,"object"==typeof process)e.isWindows="win32"===process.platform;else if("object"==typeof navigator){let t=navigator.userAgent;e.isWindows=t.indexOf("Windows")>=0}},796:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.uriToFsPath=e.URI=void 0;const n=r(674),i=/^\w[\w\d+.-]*$/,o=/^\//,s=/^\/\//;function a(t,e){if(!t.scheme&&e)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t.authority}", path: "${t.path}", query: "${t.query}", fragment: "${t.fragment}"}`);if(t.scheme&&!i.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!o.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(s.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}const h="",c="/",f=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class u{static isUri(t){return t instanceof u||!!t&&"string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme&&"string"==typeof t.fsPath&&"function"==typeof t.with&&"function"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){"object"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:"file"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case"https":case"http":case"file":e?e[0]!==c&&(e=c+e):e=c}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,a(this,o))}get fsPath(){return v(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new d(e,r,n,i,o)}static parse(t,e=!1){const r=f.exec(t);return r?new d(r[2]||h,w(r[4]||h),w(r[5]||h),w(r[7]||h),w(r[9]||h),e):new d(h,h,h,h,h)}static file(t){let e=h;if(n.isWindows&&(t=t.replace(/\\/g,c)),t[0]===c&&t[1]===c){const r=t.indexOf(c,2);-1===r?(e=t.substring(2),t=c):(e=t.substring(2,r),t=t.substring(r)||c)}return new d("file",e,t,h,h)}static from(t){const e=new d(t.scheme,t.authority,t.path,t.query,t.fragment);return a(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof u)return t;{const e=new d(t);return e._formatted=t.external,e._fsPath=t._sep===l?t.fsPath:null,e}}return t}}e.URI=u;const l=n.isWindows?1:void 0;class d extends u{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=v(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=l),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const p={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function g(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=p[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function m(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=p[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function v(t,e){let r;return r=t.authority&&t.path.length>1&&"file"===t.scheme?`//${t.authority}${t.path}`:47===t.path.charCodeAt(0)&&(t.path.charCodeAt(1)>=65&&t.path.charCodeAt(1)<=90||t.path.charCodeAt(1)>=97&&t.path.charCodeAt(1)<=122)&&58===t.path.charCodeAt(2)?e?t.path.substr(1):t.path[1].toLowerCase()+t.path.substr(2):t.path,n.isWindows&&(r=r.replace(/\//g,"\\")),r}function y(t,e){const r=e?m:g;let n="",{scheme:i,authority:o,path:s,query:a,fragment:h}=t;if(i&&(n+=i,n+=":"),(o||"file"===i)&&(n+=c,n+=c),o){let t=o.indexOf("@");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(":"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=":",n+=r(e.substr(t+1),!1,!0)),n+="@"}o=o.toLowerCase(),t=o.lastIndexOf(":"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return a&&(n+="?",n+=r(a,!1,!1)),h&&(n+="#",n+=e?h:g(h,!1,!1)),n}function b(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+b(t.substr(3)):t}}e.uriToFsPath=v;const C=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function w(t){return t.match(C)?t.replace(C,(t=>b(t))):t}},679:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Utils=void 0;const s=o(r(470)),a=s.posix||s,h="/";var c;!function(t){t.joinPath=function(t,...e){return t.with({path:a.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==h&&(r=h+r,n=!0);let i=a.resolve(r,...e);return n&&i[0]===h&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===h)return t;let e=a.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=""),t.with({path:e})},t.basename=function(t){return a.basename(t.path)},t.extname=function(t){return a.extname(t.path)}}(c||(e.Utils=c={}))}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}var n={};return(()=>{var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=t.URI=void 0;const e=r(796);Object.defineProperty(t,"URI",{enumerable:!0,get:function(){return e.URI}});const i=r(679);Object.defineProperty(t,"Utils",{enumerable:!0,get:function(){return i.Utils}})})(),n})()));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "vscode":
/*!*************************!*\
  !*** external "vscode" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("vscode");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "./node_modules/@tact-lang/opcode/dist/spec/cp0.json":
/*!***********************************************************!*\
  !*** ./node_modules/@tact-lang/opcode/dist/spec/cp0.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"$schema":"./schema.json","instructions":[{"mnemonic":"NOP","since_version":0,"doc":{"category":"stack_basic","description":"Does nothing.","gas":"18","fift":"NOP","fift_examples":[],"opcode":"00","stack":"-"},"bytecode":{"tlb":"#00","prefix":"00","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG_0I","since_version":0,"doc":{"category":"stack_basic","description":"Interchanges `s0` with `s[i]`, `1 <= i <= 15`.","gas":"18","fift":"s[i] XCHG0","fift_examples":[],"opcode":"0i","stack":""},"bytecode":{"tlb":"#0 i:(## 4) {1 <= i}","prefix":"0","operands_range_check":{"length":4,"from":1,"to":15},"operands":[{"name":"i","type":"uint","size":4,"min_value":1,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG_IJ","since_version":0,"doc":{"category":"stack_basic","description":"Interchanges `s[i]` with `s[j]`, `1 <= i < j <= 15`.","gas":"26","fift":"s[i] s[j] XCHG","fift_examples":[],"opcode":"10ij","stack":""},"bytecode":{"tlb":"#10 i:(## 4) j:(## 4) {1 <= i} {i + 1 <= j}","prefix":"10","operands_range_check":{"length":4,"from":1,"to":15},"operands":[{"name":"i","type":"uint","size":4,"min_value":1,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG_0I_LONG","since_version":0,"doc":{"category":"stack_basic","description":"Interchanges `s0` with `s[ii]`, `0 <= ii <= 255`.","gas":"26","fift":"s0 [ii] s() XCHG","fift_examples":[],"opcode":"11ii","stack":""},"bytecode":{"tlb":"#11 ii:uint8","prefix":"11","operands":[{"name":"i","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG_1I","since_version":0,"doc":{"category":"stack_basic","description":"Interchanges `s1` with `s[i]`, `2 <= i <= 15`.","gas":"18","fift":"s1 s[i] XCHG","fift_examples":[],"opcode":"1i","stack":""},"bytecode":{"tlb":"#1 i:(## 4) {2 <= i}","prefix":"1","operands_range_check":{"length":4,"from":2,"to":15},"operands":[{"name":"i","type":"uint","size":4,"min_value":2,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSH","since_version":0,"doc":{"category":"stack_basic","description":"Pushes a copy of the old `s[i]` into the stack.","gas":"18","fift":"s[i] PUSH","fift_examples":[],"opcode":"2i","stack":""},"bytecode":{"tlb":"#2 i:uint4","prefix":"2","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POP","since_version":0,"doc":{"category":"stack_basic","description":"Pops the old `s0` value into the old `s[i]`.","gas":"18","fift":"s[i] POP","fift_examples":[],"opcode":"3i","stack":""},"bytecode":{"tlb":"#3 i:uint4","prefix":"3","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG3","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`.","gas":"26","fift":"s[i] s[j] s[k] XCHG3","fift_examples":[],"opcode":"4ijk","stack":""},"bytecode":{"tlb":"#4 i:uint4 j:uint4 k:uint4","prefix":"4","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`.","gas":"26","fift":"s[i] s[j] XCHG2","fift_examples":[],"opcode":"50ij","stack":""},"bytecode":{"tlb":"#50 i:uint4 j:uint4","prefix":"50","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCPU","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] XCHG0` `s[j] PUSH`.","gas":"26","fift":"s[i] s[j] XCPU","fift_examples":[],"opcode":"51ij","stack":""},"bytecode":{"tlb":"#51 i:uint4 j:uint4","prefix":"51","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUXC","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`.","gas":"26","fift":"s[i] s[j-1] PUXC","fift_examples":[],"opcode":"52ij","stack":""},"bytecode":{"tlb":"#52 i:uint4 j:uint4","prefix":"52","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSH2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] PUSH` `s[j+1] PUSH`.","gas":"26","fift":"s[i] s[j] PUSH2","fift_examples":[],"opcode":"53ij","stack":""},"bytecode":{"tlb":"#53 i:uint4 j:uint4","prefix":"53","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHG3_ALT","since_version":0,"doc":{"category":"stack_complex","description":"Long form of `XCHG3`.","gas":"34","fift":"s[i] s[j] s[k] XCHG3_l","fift_examples":[],"opcode":"540ijk","stack":""},"bytecode":{"tlb":"#540 i:uint4 j:uint4 k:uint4","prefix":"540","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XC2PU","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`.","gas":"34","fift":"s[i] s[j] s[k] XC2PU","fift_examples":[],"opcode":"541ijk","stack":""},"bytecode":{"tlb":"#541 i:uint4 j:uint4 k:uint4","prefix":"541","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCPUXC","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`.","gas":"34","fift":"s[i] s[j] s[k-1] XCPUXC","fift_examples":[],"opcode":"542ijk","stack":""},"bytecode":{"tlb":"#542 i:uint4 j:uint4 k:uint4","prefix":"542","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCPU2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`.","gas":"34","fift":"s[i] s[j] s[k] XCPU2","fift_examples":[],"opcode":"543ijk","stack":""},"bytecode":{"tlb":"#543 i:uint4 j:uint4 k:uint4","prefix":"543","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUXC2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`.","gas":"34","fift":"s[i] s[j-1] s[k-1] PUXC2","fift_examples":[],"opcode":"544ijk","stack":""},"bytecode":{"tlb":"#544 i:uint4 j:uint4 k:uint4","prefix":"544","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUXCPU","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`.","gas":"34","fift":"s[i] s[j-1] s[k-1] PUXCPU","fift_examples":[],"opcode":"545ijk","stack":""},"bytecode":{"tlb":"#545 i:uint4 j:uint4 k:uint4","prefix":"545","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PU2XC","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`.","gas":"34","fift":"s[i] s[j-1] s[k-2] PU2XC","fift_examples":[],"opcode":"546ijk","stack":""},"bytecode":{"tlb":"#546 i:uint4 j:uint4 k:uint4","prefix":"546","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-1}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"},{"type":"add","value":-2}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSH3","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`.","gas":"34","fift":"s[i] s[j] s[k] PUSH3","fift_examples":[],"opcode":"547ijk","stack":""},"bytecode":{"tlb":"#547 i:uint4 j:uint4 k:uint4","prefix":"547","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]},{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLKSWAP","since_version":0,"doc":{"category":"stack_complex","description":"Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.\\n`0 <= i,j <= 15`\\nEquivalent to `[i+1] [j+1] REVERSE` `[j+1] 0 REVERSE` `[i+j+2] 0 REVERSE`.","gas":"26","fift":"[i+1] [j+1] BLKSWAP","fift_examples":[],"opcode":"55ij","stack":""},"bytecode":{"tlb":"#55 i:uint4 j:uint4","prefix":"55","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"add","value":1}]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSH_LONG","since_version":0,"doc":{"category":"stack_complex","description":"Pushes a copy of the old `s[ii]` into the stack.\\n`0 <= ii <= 255`","gas":"26","fift":"[ii] s() PUSH","fift_examples":[],"opcode":"56ii","stack":""},"bytecode":{"tlb":"#56 ii:uint8","prefix":"56","operands":[{"name":"i","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POP_LONG","since_version":0,"doc":{"category":"stack_complex","description":"Pops the old `s0` value into the old `s[ii]`.\\n`0 <= ii <= 255`","gas":"26","fift":"[ii] s() POP","fift_examples":[],"opcode":"57ii","stack":""},"bytecode":{"tlb":"#57 ii:uint8","prefix":"57","operands":[{"name":"i","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"stack"}]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ROT","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `1 2 BLKSWAP` or to `s2 s1 XCHG2`.","gas":"18","fift":"ROT","fift_examples":[],"opcode":"58","stack":"a b c - b c a"},"bytecode":{"tlb":"#58","prefix":"58","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ROTREV","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `2 1 BLKSWAP` or to `s2 s2 XCHG2`.","gas":"18","fift":"ROTREV\\n-ROT","fift_examples":[],"opcode":"59","stack":"a b c - c a b"},"bytecode":{"tlb":"#59","prefix":"59","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SWAP2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `2 2 BLKSWAP` or to `s3 s2 XCHG2`.","gas":"18","fift":"SWAP2\\n2SWAP","fift_examples":[],"opcode":"5A","stack":"a b c d - c d a b"},"bytecode":{"tlb":"#5A","prefix":"5A","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DROP2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `DROP` `DROP`.","gas":"18","fift":"DROP2\\n2DROP","fift_examples":[],"opcode":"5B","stack":"a b - "},"bytecode":{"tlb":"#5B","prefix":"5B","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DUP2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s1 s0 PUSH2`.","gas":"18","fift":"DUP2\\n2DUP","fift_examples":[],"opcode":"5C","stack":"a b - a b a b"},"bytecode":{"tlb":"#5C","prefix":"5C","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"OVER2","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `s3 s2 PUSH2`.","gas":"18","fift":"OVER2\\n2OVER","fift_examples":[],"opcode":"5D","stack":"a b c d - a b c d a b"},"bytecode":{"tlb":"#5D","prefix":"5D","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REVERSE","since_version":0,"doc":{"category":"stack_complex","description":"Reverses the order of `s[j+i+1] ... s[j]`.","gas":"26","fift":"[i+2] [j] REVERSE","fift_examples":[],"opcode":"5Eij","stack":""},"bytecode":{"tlb":"#5E i:uint4 j:uint4","prefix":"5E","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLKDROP","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `DROP` performed `i` times.","gas":"26","fift":"[i] BLKDROP","fift_examples":[],"opcode":"5F0i","stack":""},"bytecode":{"tlb":"#5F0 i:uint4","prefix":"5F0","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLKPUSH","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `PUSH s(j)` performed `i` times.\\n`1 <= i <= 15`, `0 <= j <= 15`.","gas":"26","fift":"[i] [j] BLKPUSH","fift_examples":[],"opcode":"5Fij","stack":""},"bytecode":{"tlb":"#5F i:(## 4) j:uint4 {1 <= i}","prefix":"5F","operands_range_check":{"length":4,"from":1,"to":15},"operands":[{"name":"i","type":"uint","size":4,"min_value":1,"max_value":15,"display_hints":[]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PICK","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then performs `s[i] PUSH`.","gas":"18","fift":"PICK\\nPUSHX","fift_examples":[],"opcode":"60","stack":""},"bytecode":{"tlb":"#60","prefix":"60","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ROLLX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then performs `1 [i] BLKSWAP`.","gas":"18","fift":"ROLLX","fift_examples":[],"opcode":"61","stack":""},"bytecode":{"tlb":"#61","prefix":"61","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"-ROLLX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then performs `[i] 1 BLKSWAP`.","gas":"18","fift":"-ROLLX\\nROLLREVX","fift_examples":[],"opcode":"62","stack":""},"bytecode":{"tlb":"#62","prefix":"62","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLKSWX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`.","gas":"18","fift":"BLKSWX","fift_examples":[],"opcode":"63","stack":""},"bytecode":{"tlb":"#63","prefix":"63","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REVX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integers `i`,`j` from the stack, then performs `[i] [j] REVERSE`.","gas":"18","fift":"REVX","fift_examples":[],"opcode":"64","stack":""},"bytecode":{"tlb":"#64","prefix":"64","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DROPX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then performs `[i] BLKDROP`.","gas":"18","fift":"DROPX","fift_examples":[],"opcode":"65","stack":""},"bytecode":{"tlb":"#65","prefix":"65","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TUCK","since_version":0,"doc":{"category":"stack_complex","description":"Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`.","gas":"18","fift":"TUCK","fift_examples":[],"opcode":"66","stack":"a b - b a b"},"bytecode":{"tlb":"#66","prefix":"66","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCHGX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then performs `s[i] XCHG`.","gas":"18","fift":"XCHGX","fift_examples":[],"opcode":"67","stack":""},"bytecode":{"tlb":"#67","prefix":"67","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DEPTH","since_version":0,"doc":{"category":"stack_complex","description":"Pushes the current depth of the stack.","gas":"18","fift":"DEPTH","fift_examples":[],"opcode":"68","stack":"- depth"},"bytecode":{"tlb":"#68","prefix":"68","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"depth","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHKDEPTH","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then checks whether there are at least `i` elements, generating a stack underflow exception otherwise.","gas":"18/58","fift":"CHKDEPTH","fift_examples":[],"opcode":"69","stack":"i -"},"bytecode":{"tlb":"#69","prefix":"69","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ONLYTOPX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then removes all but the top `i` elements.","gas":"18","fift":"ONLYTOPX","fift_examples":[],"opcode":"6A","stack":""},"bytecode":{"tlb":"#6A","prefix":"6A","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ONLYX","since_version":0,"doc":{"category":"stack_complex","description":"Pops integer `i` from the stack, then leaves only the bottom `i` elements. Approximately equivalent to `DEPTH` `SWAP` `SUB` `DROPX`.","gas":"18","fift":"ONLYX","fift_examples":[],"opcode":"6B","stack":""},"bytecode":{"tlb":"#6B","prefix":"6B","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLKDROP2","since_version":0,"doc":{"category":"stack_complex","description":"Drops `i` stack elements under the top `j` elements.\\n`1 <= i <= 15`, `0 <= j <= 15`\\nEquivalent to `[i+j] 0 REVERSE` `[i] BLKDROP` `[j] 0 REVERSE`.","gas":"26","fift":"[i] [j] BLKDROP2","fift_examples":[],"opcode":"6Cij","stack":""},"bytecode":{"tlb":"#6C i:(## 4) j:uint4 {1 <= i}","prefix":"6C","operands_range_check":{"length":4,"from":1,"to":15},"operands":[{"name":"i","type":"uint","size":4,"min_value":1,"max_value":15,"display_hints":[]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULL","since_version":0,"doc":{"category":"tuple","description":"Pushes the only value of type _Null_.","gas":"18","fift":"NULL\\nPUSHNULL","fift_examples":[],"opcode":"6D","stack":" - null"},"bytecode":{"tlb":"#6D","prefix":"6D","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"const","value":null,"value_type":"Null"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ISNULL","since_version":0,"doc":{"category":"tuple","description":"Checks whether `x` is a _Null_, and returns `-1` or `0` accordingly.","gas":"18","fift":"ISNULL","fift_examples":[],"opcode":"6E","stack":"x - ?"},"bytecode":{"tlb":"#6E","prefix":"6E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TUPLE","since_version":0,"doc":{"category":"tuple","description":"Creates a new _Tuple_ `t=(x_1, ... ,x_n)` containing `n` values `x_1`,..., `x_n`.\\n`0 <= n <= 15`","gas":"26+n","fift":"[n] TUPLE","fift_examples":[],"opcode":"6F0n","stack":"x_1 ... x_n - t"},"bytecode":{"tlb":"#6F0 n:uint4","prefix":"6F0","operands":[{"name":"n","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"n","array_entry":[{"type":"simple","name":"x"}]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEX","since_version":0,"doc":{"category":"tuple","description":"Returns the `k`-th element of a _Tuple_ `t`.\\n`0 <= k <= 15`.","gas":"26","fift":"[k] INDEX","fift_examples":[],"opcode":"6F1k","stack":"t - x"},"bytecode":{"tlb":"#6F1 k:uint4","prefix":"6F1","operands":[{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UNTUPLE","since_version":0,"doc":{"category":"tuple","description":"Unpacks a _Tuple_ `t=(x_1,...,x_n)` of length equal to `0 <= n <= 15`.\\nIf `t` is not a _Tuple_, or if `|t| != n`, a type check exception is thrown.","gas":"26+n","fift":"[n] UNTUPLE","fift_examples":[],"opcode":"6F2n","stack":"t - x_1 ... x_n"},"bytecode":{"tlb":"#6F2 n:uint4","prefix":"6F2","operands":[{"name":"n","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"n","array_entry":[{"type":"simple","name":"x"}]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UNPACKFIRST","since_version":0,"doc":{"category":"tuple","description":"Unpacks first `0 <= k <= 15` elements of a _Tuple_ `t`.\\nIf `|t|<k`, throws a type check exception.","gas":"26+k","fift":"[k] UNPACKFIRST","fift_examples":[],"opcode":"6F3k","stack":"t - x_1 ... x_k"},"bytecode":{"tlb":"#6F3 k:uint4","prefix":"6F3","operands":[{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"k","array_entry":[{"type":"simple","name":"x"}]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"EXPLODE","since_version":0,"doc":{"category":"tuple","description":"Unpacks a _Tuple_ `t=(x_1,...,x_m)` and returns its length `m`, but only if `m <= n <= 15`. Otherwise throws a type check exception.","gas":"26+m","fift":"[n] EXPLODE","fift_examples":[],"opcode":"6F4n","stack":"t - x_1 ... x_m m"},"bytecode":{"tlb":"#6F4 n:uint4","prefix":"6F4","operands":[{"name":"n","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"m","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"m","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETINDEX","since_version":0,"doc":{"category":"tuple","description":"Computes _Tuple_ `t\'` that differs from `t` only at position `t\'_{k+1}`, which is set to `x`.\\n`0 <= k <= 15`\\nIf `k >= |t|`, throws a range check exception.","gas":"26+|t|","fift":"[k] SETINDEX","fift_examples":[],"opcode":"6F5k","stack":"t x - t\'"},"bytecode":{"tlb":"#6F5 k:uint4","prefix":"6F5","operands":[{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"x"}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEXQ","since_version":0,"doc":{"category":"tuple","description":"Returns the `k`-th element of a _Tuple_ `t`, where `0 <= k <= 15`. In other words, returns `x_{k+1}` if `t=(x_1,...,x_n)`. If `k>=n`, or if `t` is _Null_, returns a _Null_ instead of `x`.","gas":"26","fift":"[k] INDEXQ","fift_examples":[],"opcode":"6F6k","stack":"t - x"},"bytecode":{"tlb":"#6F6 k:uint4","prefix":"6F6","operands":[{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple","Null"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETINDEXQ","since_version":0,"doc":{"category":"tuple","description":"Sets the `k`-th component of _Tuple_ `t` to `x`, where `0 <= k < 16`, and returns the resulting _Tuple_ `t\'`.\\nIf `|t| <= k`, first extends the original _Tuple_ to length `n\'=k+1` by setting all new components to _Null_. If the original value of `t` is _Null_, treats it as an empty _Tuple_. If `t` is not _Null_ or _Tuple_, throws an exception. If `x` is _Null_ and either `|t| <= k` or `t` is _Null_, then always returns `t\'=t` (and does not consume tuple creation gas).","gas":"26+|t\'|","fift":"[k] SETINDEXQ","fift_examples":[],"opcode":"6F7k","stack":"t x - t\'"},"bytecode":{"tlb":"#6F7 k:uint4","prefix":"6F7","operands":[{"name":"k","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple","Null"]},{"type":"simple","name":"x"}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TUPLEVAR","since_version":0,"doc":{"category":"tuple","description":"Creates a new _Tuple_ `t` of length `n` similarly to `TUPLE`, but with `0 <= n <= 255` taken from the stack.","gas":"26+n","fift":"TUPLEVAR","fift_examples":[],"opcode":"6F80","stack":"x_1 ... x_n n - t"},"bytecode":{"tlb":"#6F80","prefix":"6F80","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"n","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEXVAR","since_version":0,"doc":{"category":"tuple","description":"Similar to `k INDEX`, but with `0 <= k <= 254` taken from the stack.","gas":"26","fift":"INDEXVAR","fift_examples":[],"opcode":"6F81","stack":"t k - x"},"bytecode":{"tlb":"#6F81","prefix":"6F81","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UNTUPLEVAR","since_version":0,"doc":{"category":"tuple","description":"Similar to `n UNTUPLE`, but with `0 <= n <= 255` taken from the stack.","gas":"26+n","fift":"UNTUPLEVAR","fift_examples":[],"opcode":"6F82","stack":"t n - x_1 ... x_n"},"bytecode":{"tlb":"#6F82","prefix":"6F82","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"n","array_entry":[{"type":"simple","name":"x"}]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UNPACKFIRSTVAR","since_version":0,"doc":{"category":"tuple","description":"Similar to `n UNPACKFIRST`, but with `0 <= n <= 255` taken from the stack.","gas":"26+n","fift":"UNPACKFIRSTVAR","fift_examples":[],"opcode":"6F83","stack":"t n - x_1 ... x_n"},"bytecode":{"tlb":"#6F83","prefix":"6F83","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"n","array_entry":[{"type":"simple","name":"x"}]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"EXPLODEVAR","since_version":0,"doc":{"category":"tuple","description":"Similar to `n EXPLODE`, but with `0 <= n <= 255` taken from the stack.","gas":"26+m","fift":"EXPLODEVAR","fift_examples":[],"opcode":"6F84","stack":"t n - x_1 ... x_m m"},"bytecode":{"tlb":"#6F84","prefix":"6F84","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"array","name":"tuple_elements","length_var":"m","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"m","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETINDEXVAR","since_version":0,"doc":{"category":"tuple","description":"Similar to `k SETINDEX`, but with `0 <= k <= 254` taken from the stack.","gas":"26+|t\'|","fift":"SETINDEXVAR","fift_examples":[],"opcode":"6F85","stack":"t x k - t\'"},"bytecode":{"tlb":"#6F85","prefix":"6F85","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"x"},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEXVARQ","since_version":0,"doc":{"category":"tuple","description":"Similar to `n INDEXQ`, but with `0 <= k <= 254` taken from the stack.","gas":"26","fift":"INDEXVARQ","fift_examples":[],"opcode":"6F86","stack":"t k - x"},"bytecode":{"tlb":"#6F86","prefix":"6F86","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple","Null"]},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETINDEXVARQ","since_version":0,"doc":{"category":"tuple","description":"Similar to `k SETINDEXQ`, but with `0 <= k <= 254` taken from the stack.","gas":"26+|t\'|","fift":"SETINDEXVARQ","fift_examples":[],"opcode":"6F87","stack":"t x k - t\'"},"bytecode":{"tlb":"#6F87","prefix":"6F87","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple","Null"]},{"type":"simple","name":"x"},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TLEN","since_version":0,"doc":{"category":"tuple","description":"Returns the length of a _Tuple_.","gas":"26","fift":"TLEN","fift_examples":[],"opcode":"6F88","stack":"t - n"},"bytecode":{"tlb":"#6F88","prefix":"6F88","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QTLEN","since_version":0,"doc":{"category":"tuple","description":"Similar to `TLEN`, but returns `-1` if `t` is not a _Tuple_.","gas":"26","fift":"QTLEN","fift_examples":[],"opcode":"6F89","stack":"t - n or -1"},"bytecode":{"tlb":"#6F89","prefix":"6F89","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ISTUPLE","since_version":0,"doc":{"category":"tuple","description":"Returns `-1` or `0` depending on whether `t` is a _Tuple_.","gas":"26","fift":"ISTUPLE","fift_examples":[],"opcode":"6F8A","stack":"t - ?"},"bytecode":{"tlb":"#6F8A","prefix":"6F8A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LAST","since_version":0,"doc":{"category":"tuple","description":"Returns the last element of a non-empty _Tuple_ `t`.","gas":"26","fift":"LAST","fift_examples":[],"opcode":"6F8B","stack":"t - x"},"bytecode":{"tlb":"#6F8B","prefix":"6F8B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TPUSH","since_version":0,"doc":{"category":"tuple","description":"Appends a value `x` to a _Tuple_ `t=(x_1,...,x_n)`, but only if the resulting _Tuple_ `t\'=(x_1,...,x_n,x)` is of length at most 255. Otherwise throws a type check exception.","gas":"26+|t\'|","fift":"TPUSH\\nCOMMA","fift_examples":[],"opcode":"6F8C","stack":"t x - t\'"},"bytecode":{"tlb":"#6F8C","prefix":"6F8C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]},{"type":"simple","name":"x"}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TPOP","since_version":0,"doc":{"category":"tuple","description":"Detaches the last element `x=x_n` from a non-empty _Tuple_ `t=(x_1,...,x_n)`, and returns both the resulting _Tuple_ `t\'=(x_1,...,x_{n-1})` and the original last element `x`.","gas":"26+|t\'|","fift":"TPOP","fift_examples":[],"opcode":"6F8D","stack":"t - t\' x"},"bytecode":{"tlb":"#6F8D","prefix":"6F8D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t2","value_types":["Tuple"]},{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLSWAPIF","since_version":0,"doc":{"category":"tuple","description":"Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x!=0`.","gas":"26","fift":"NULLSWAPIF","fift_examples":[],"opcode":"6FA0","stack":"x - x or null x"},"bytecode":{"tlb":"#6FA0","prefix":"6FA0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"x","match":[{"value":0,"stack":[]}],"else":[{"type":"const","value":null,"value_type":"Null"}]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLSWAPIFNOT","since_version":0,"doc":{"category":"tuple","description":"Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x=0`. May be used for stack alignment after quiet primitives such as `PLDUXQ`.","gas":"26","fift":"NULLSWAPIFNOT","fift_examples":[],"opcode":"6FA1","stack":"x - x or null x"},"bytecode":{"tlb":"#6FA1","prefix":"6FA1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"x","match":[{"value":0,"stack":[{"type":"const","value":null,"value_type":"Null"}]}],"else":[]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLROTRIF","since_version":0,"doc":{"category":"tuple","description":"Pushes a _Null_ under the second stack entry from the top, but only if the topmost _Integer_ `y` is non-zero.","gas":"26","fift":"NULLROTRIF","fift_examples":[],"opcode":"6FA2","stack":"x y - x y or null x y"},"bytecode":{"tlb":"#6FA2","prefix":"6FA2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"y","match":[{"value":0,"stack":[]}],"else":[{"type":"const","value":null,"value_type":"Null"}]},{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLROTRIFNOT","since_version":0,"doc":{"category":"tuple","description":"Pushes a _Null_ under the second stack entry from the top, but only if the topmost _Integer_ `y` is zero. May be used for stack alignment after quiet primitives such as `LDUXQ`.","gas":"26","fift":"NULLROTRIFNOT","fift_examples":[],"opcode":"6FA3","stack":"x y - x y or null x y"},"bytecode":{"tlb":"#6FA3","prefix":"6FA3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"y","match":[{"value":0,"stack":[{"type":"const","value":null,"value_type":"Null"}]}],"else":[]},{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLSWAPIF2","since_version":0,"doc":{"category":"tuple","description":"Pushes two nulls under the topmost _Integer_ `x`, but only if `x!=0`.\\nEquivalent to `NULLSWAPIF` `NULLSWAPIF`.","gas":"26","fift":"NULLSWAPIF2","fift_examples":[],"opcode":"6FA4","stack":"x - x or null null x"},"bytecode":{"tlb":"#6FA4","prefix":"6FA4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"x","match":[{"value":0,"stack":[]}],"else":[{"type":"const","value":null,"value_type":"Null"},{"type":"const","value":null,"value_type":"Null"}]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLSWAPIFNOT2","since_version":0,"doc":{"category":"tuple","description":"Pushes two nulls under the topmost _Integer_ `x`, but only if `x=0`.\\nEquivalent to `NULLSWAPIFNOT` `NULLSWAPIFNOT`.","gas":"26","fift":"NULLSWAPIFNOT2","fift_examples":[],"opcode":"6FA5","stack":"x - x or null null x"},"bytecode":{"tlb":"#6FA5","prefix":"6FA5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"x","match":[{"value":0,"stack":[{"type":"const","value":null,"value_type":"Null"},{"type":"const","value":null,"value_type":"Null"}]}],"else":[]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLROTRIF2","since_version":0,"doc":{"category":"tuple","description":"Pushes two nulls under the second stack entry from the top, but only if the topmost _Integer_ `y` is non-zero.\\nEquivalent to `NULLROTRIF` `NULLROTRIF`.","gas":"26","fift":"NULLROTRIF2","fift_examples":[],"opcode":"6FA6","stack":"x y - x y or null null x y"},"bytecode":{"tlb":"#6FA6","prefix":"6FA6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"y","match":[{"value":0,"stack":[]}],"else":[{"type":"const","value":null,"value_type":"Null"},{"type":"const","value":null,"value_type":"Null"}]},{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NULLROTRIFNOT2","since_version":0,"doc":{"category":"tuple","description":"Pushes two nulls under the second stack entry from the top, but only if the topmost _Integer_ `y` is zero.\\nEquivalent to `NULLROTRIFNOT` `NULLROTRIFNOT`.","gas":"26","fift":"NULLROTRIFNOT2","fift_examples":[],"opcode":"6FA7","stack":"x y - x y or null null x y"},"bytecode":{"tlb":"#6FA7","prefix":"6FA7","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"y","match":[{"value":0,"stack":[{"type":"const","value":null,"value_type":"Null"},{"type":"const","value":null,"value_type":"Null"}]}],"else":[]},{"type":"simple","name":"x"},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEX2","since_version":0,"doc":{"category":"tuple","description":"Recovers `x=(t_{i+1})_{j+1}` for `0 <= i,j <= 3`.\\nEquivalent to `[i] INDEX` `[j] INDEX`.","gas":"26","fift":"[i] [j] INDEX2","fift_examples":[],"opcode":"6FBij","stack":"t - x"},"bytecode":{"tlb":"#6FB i:uint2 j:uint2","prefix":"6FB","operands":[{"name":"i","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]},{"name":"j","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INDEX3","since_version":0,"doc":{"category":"tuple","description":"Recovers `x=t_{i+1}_{j+1}_{k+1}`.\\n`0 <= i,j,k <= 3`\\nEquivalent to `[i] [j] INDEX2` `[k] INDEX`.","gas":"26","fift":"[i] [j] [k] INDEX3","fift_examples":[],"opcode":"6FE_ijk","stack":"t - x"},"bytecode":{"tlb":"#6FE_ i:uint2 j:uint2 k:uint2","prefix":"6FE_","operands":[{"name":"i","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]},{"name":"j","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]},{"name":"k","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHINT_4","since_version":0,"doc":{"category":"const_int","description":"Pushes integer `x` into the stack. `-5 <= x <= 10`.\\nHere `i` equals four lower-order bits of `x` (`i=x mod 16`).","gas":"18","fift":"[x] PUSHINT\\n[x] INT","fift_examples":[],"opcode":"7i","stack":"- x"},"bytecode":{"tlb":"#7 i:uint4","prefix":"7","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"pushint4"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHINT_8","since_version":0,"doc":{"category":"const_int","description":"Pushes integer `xx`. `-128 <= xx <= 127`.","gas":"26","fift":"[xx] PUSHINT\\n[xx] INT","fift_examples":[],"opcode":"80xx","stack":"- xx"},"bytecode":{"tlb":"#80 xx:int8","prefix":"80","operands":[{"name":"x","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHINT_16","since_version":0,"doc":{"category":"const_int","description":"Pushes integer `xxxx`. `-2^15 <= xx < 2^15`.","gas":"34","fift":"[xxxx] PUSHINT\\n[xxxx] INT","fift_examples":[],"opcode":"81xxxx","stack":"- xxxx"},"bytecode":{"tlb":"#81 xxxx:int16","prefix":"81","operands":[{"name":"x","type":"int","size":16,"min_value":-32768,"max_value":32767,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHINT_LONG","since_version":0,"doc":{"category":"const_int","description":"Pushes integer `xxx`.\\n_Details:_ 5-bit `0 <= l <= 30` determines the length `n=8l+19` of signed big-endian integer `xxx`.\\nThe total length of this instruction is `l+4` bytes or `n+13=8l+32` bits.","gas":"23","fift":"[xxx] PUSHINT\\n[xxx] INT","fift_examples":[],"opcode":"82lxxx","stack":"- xxx"},"bytecode":{"tlb":"#82 l:(## 5) xxx:(int (8 * l + 19))","prefix":"82","operands_range_check":{"length":5,"from":0,"to":30},"operands":[{"name":"x","type":"pushint_long"}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHPOW2","since_version":0,"doc":{"category":"const_int","description":"(Quietly) pushes `2^(xx+1)` for `0 <= xx <= 255`.\\n`2^256` is a `NaN`.","gas":"26","fift":"[xx+1] PUSHPOW2","fift_examples":[],"opcode":"83xx","stack":"- 2^(xx+1)"},"bytecode":{"tlb":"#83 xx:uint8","prefix":"83","operands_range_check":{"length":8,"from":0,"to":254},"operands":[{"name":"x","type":"uint","size":8,"min_value":0,"max_value":254,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHNAN","since_version":0,"doc":{"category":"const_int","description":"Pushes a `NaN`.","gas":"26","fift":"PUSHNAN","fift_examples":[],"opcode":"83FF","stack":"- NaN"},"bytecode":{"tlb":"#83FF","prefix":"83FF","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"const","value_type":"Integer","value":null}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHPOW2DEC","since_version":0,"doc":{"category":"const_int","description":"Pushes `2^(xx+1)-1` for `0 <= xx <= 255`.","gas":"26","fift":"[xx+1] PUSHPOW2DEC","fift_examples":[],"opcode":"84xx","stack":"- 2^(xx+1)-1"},"bytecode":{"tlb":"#84 xx:uint8","prefix":"84","operands":[{"name":"x","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHNEGPOW2","since_version":0,"doc":{"category":"const_int","description":"Pushes `-2^(xx+1)` for `0 <= xx <= 255`.","gas":"26","fift":"[xx+1] PUSHNEGPOW2","fift_examples":[],"opcode":"85xx","stack":"- -2^(xx+1)"},"bytecode":{"tlb":"#85 xx:uint8","prefix":"85","operands":[{"name":"x","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHREF","since_version":0,"doc":{"category":"const_data","description":"Pushes the reference `ref` into the stack.\\n_Details:_ Pushes the first reference of `cc.code` into the stack as a _Cell_ (and removes this reference from the current continuation).","gas":"18","fift":"[ref] PUSHREF","fift_examples":[],"opcode":"88","stack":"- c"},"bytecode":{"tlb":"#88 c:^Cell","prefix":"88","operands":[{"name":"c","type":"ref","display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHREFSLICE","since_version":0,"doc":{"category":"const_data","description":"Similar to `PUSHREF`, but converts the cell into a _Slice_.","gas":"118/43","fift":"[ref] PUSHREFSLICE","fift_examples":[],"opcode":"89","stack":"- s"},"bytecode":{"tlb":"#89 c:^Cell","prefix":"89","operands":[{"name":"c","type":"ref","display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHREFCONT","since_version":0,"doc":{"category":"const_data","description":"Similar to `PUSHREFSLICE`, but makes a simple ordinary _Continuation_ out of the cell.","gas":"118/43","fift":"[ref] PUSHREFCONT","fift_examples":[],"opcode":"8A","stack":"- cont"},"bytecode":{"tlb":"#8A c:^Cell","prefix":"8A","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHSLICE","since_version":0,"doc":{"category":"const_data","description":"Pushes the slice `slice` into the stack.\\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `8x+4` bits and no references (i.e., essentially a bitstring), where `0 <= x <= 15`.\\nA completion tag is assumed, meaning that all trailing zeroes and the last binary one (if present) are removed from this bitstring.\\nIf the original bitstring consists only of zeroes, an empty slice will be pushed.","gas":"22","fift":"[slice] PUSHSLICE\\n[slice] SLICE","fift_examples":[],"opcode":"8Bxsss","stack":"- s"},"bytecode":{"tlb":"#8B x:(## 4) sss:((8 * x + 4) * Bit)","prefix":"8B","operands":[{"name":"s","type":"subslice","bits_length_var_size":4,"bits_padding":4,"completion_tag":true,"max_bits":123,"min_bits":0,"max_refs":0,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHSLICE_REFS","since_version":0,"doc":{"category":"const_data","description":"Pushes the slice `slice` into the stack.\\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `1 <= r+1 <= 4` references and up to first `8xx+1` bits of data, with `0 <= xx <= 31`.\\nA completion tag is also assumed.","gas":"25","fift":"[slice] PUSHSLICE\\n[slice] SLICE","fift_examples":[],"opcode":"8Crxxssss","stack":"- s"},"bytecode":{"tlb":"#8C r:(## 2) xx:(## 5) c:((r + 1) * ^Cell) ssss:((8 * xx + 1) * Bit)","prefix":"8C","operands":[{"name":"slice","type":"subslice","bits_length_var_size":5,"refs_length_var_size":2,"bits_padding":1,"refs_add":1,"completion_tag":true,"max_bits":248,"min_bits":0,"max_refs":4,"min_refs":1,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHSLICE_LONG","since_version":0,"doc":{"category":"const_data","description":"Pushes the slice `slice` into the stack.\\n_Details:_ Pushes the subslice of `cc.code` consisting of `0 <= r <= 4` references and up to `8xx+6` bits of data, with `0 <= xx <= 127`.\\nA completion tag is assumed.","gas":"28","fift":"[slice] PUSHSLICE\\n[slice] SLICE","fift_examples":[{"fift":"x{} PUSHSLICE x{ABCD1234} PUSHSLICE b{01101} PUSHSLICE","description":"Examples of `PUSHSLICE`. `x{}` is an empty slice. `x{...}` is a hexadecimal literal. `b{...}` is a binary literal. More on slice literals [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-51-slice-literals). Note that the assembler can replace `PUSHSLICE` with `PUSHREFSLICE` in certain situations (e.g. if there\'s not enough space in the current continuation)."},{"fift":"<b x{AB12} s, b> PUSHREF <b x{AB12} s, b> PUSHREFSLICE","description":"Examples of `PUSHREF` and `PUSHREFSLICE`. More on building cells in fift [here](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-52-builder-primitives)."}],"opcode":"8Drxxsssss","stack":"- s"},"bytecode":{"tlb":"#8D r:(#<= 4) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx + 6) * Bit)","prefix":"8D","operands_range_check":{"length":3,"from":0,"to":4},"operands":[{"name":"slice","type":"subslice","bits_length_var_size":7,"refs_length_var_size":3,"bits_padding":6,"refs_add":0,"completion_tag":true,"max_bits":1021,"min_bits":0,"max_refs":4,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHCONT","since_version":0,"doc":{"category":"const_data","description":"Pushes a continuation made from `builder`.\\n_Details:_ Pushes the simple ordinary continuation `cccc` made from the first `0 <= r <= 3` references and the first `0 <= xx <= 127` bytes of `cc.code`.","gas":"26","fift":"[builder] PUSHCONT\\n[builder] CONT","fift_examples":[],"opcode":"8F_rxxcccc","stack":"- c"},"bytecode":{"tlb":"#8F_ r:(## 2) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx) * Bit)","prefix":"8F_","operands":[{"name":"c","type":"subslice","bits_length_var_size":7,"refs_length_var_size":2,"bits_padding":0,"refs_add":0,"completion_tag":false,"max_bits":1016,"min_bits":0,"max_refs":3,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHCONT_SHORT","since_version":0,"doc":{"category":"const_data","description":"Pushes a continuation made from `builder`.\\n_Details:_ Pushes an `x`-byte continuation for `0 <= x <= 15`.","gas":"18","fift":"[builder] PUSHCONT\\n[builder] CONT","fift_examples":[{"fift":"<{ code }> PUSHCONT <{ code }> CONT CONT:<{ code }>","description":"Pushes a continuation with code `code`. Note that the assembler can replace `PUSHCONT` with `PUSHREFCONT` in certain situations (e.g. if there\'s not enough space in the current continuation)."}],"opcode":"9xccc","stack":"- c"},"bytecode":{"tlb":"#9 x:(## 4) ssss:((8 * x) * Bit)","prefix":"9","operands":[{"name":"c","type":"subslice","bits_length_var_size":4,"bits_padding":0,"completion_tag":false,"max_bits":120,"min_bits":0,"max_refs":0,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADD","since_version":0,"doc":{"category":"arithm_basic","description":"","gas":"18","fift":"ADD","fift_examples":[],"opcode":"A0","stack":"x y - x+y"},"bytecode":{"tlb":"#A0","prefix":"A0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUB","since_version":0,"doc":{"category":"arithm_basic","description":"","gas":"18","fift":"SUB","fift_examples":[],"opcode":"A1","stack":"x y - x-y"},"bytecode":{"tlb":"#A1","prefix":"A1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBR","since_version":0,"doc":{"category":"arithm_basic","description":"Equivalent to `SWAP` `SUB`.","gas":"18","fift":"SUBR","fift_examples":[],"opcode":"A2","stack":"x y - y-x"},"bytecode":{"tlb":"#A2","prefix":"A2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NEGATE","since_version":0,"doc":{"category":"arithm_basic","description":"Equivalent to `-1 MULCONST` or to `ZERO SUBR`.\\nNotice that it triggers an integer overflow exception if `x=-2^256`.","gas":"18","fift":"NEGATE","fift_examples":[],"opcode":"A3","stack":"x - -x"},"bytecode":{"tlb":"#A3","prefix":"A3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INC","since_version":0,"doc":{"category":"arithm_basic","description":"Equivalent to `1 ADDCONST`.","gas":"18","fift":"INC","fift_examples":[],"opcode":"A4","stack":"x - x+1"},"bytecode":{"tlb":"#A4","prefix":"A4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DEC","since_version":0,"doc":{"category":"arithm_basic","description":"Equivalent to `-1 ADDCONST`.","gas":"18","fift":"DEC","fift_examples":[],"opcode":"A5","stack":"x - x-1"},"bytecode":{"tlb":"#A5","prefix":"A5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDCONST","since_version":0,"doc":{"category":"arithm_basic","description":"`-128 <= cc <= 127`.","gas":"26","fift":"[cc] ADDCONST\\n[cc] ADDINT\\n[-cc] SUBCONST\\n[-cc] SUBINT","fift_examples":[],"opcode":"A6cc","stack":"x - x+cc"},"bytecode":{"tlb":"#A6 cc:int8","prefix":"A6","operands":[{"name":"c","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULCONST","since_version":0,"doc":{"category":"arithm_basic","description":"`-128 <= cc <= 127`.","gas":"26","fift":"[cc] MULCONST\\n[cc] MULINT","fift_examples":[],"opcode":"A7cc","stack":"x - x*cc"},"bytecode":{"tlb":"#A7 cc:int8","prefix":"A7","operands":[{"name":"c","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MUL","since_version":0,"doc":{"category":"arithm_basic","description":"","gas":"18","fift":"MUL","fift_examples":[],"opcode":"A8","stack":"x y - x*y"},"bytecode":{"tlb":"#A8","prefix":"A8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDDIVMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDDIVMOD","fift_examples":[],"opcode":"A900","stack":"x w z - q=floor((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#A900","prefix":"A900","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDDIVMODR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDDIVMODR","fift_examples":[],"opcode":"A901","stack":"x w z - q=round((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#A901","prefix":"A901","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDDIVMODC","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDDIVMODC","fift_examples":[],"opcode":"A902","stack":"x w y - q=ceil((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#A902","prefix":"A902","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIV","since_version":0,"doc":{"category":"arithm_div","description":"`q=floor(x/y)`, `r=x-y*q`","gas":"26","fift":"DIV","fift_examples":[],"opcode":"A904","stack":"x y - q"},"bytecode":{"tlb":"#A904","prefix":"A904","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIVR","since_version":0,"doc":{"category":"arithm_div","description":"`q\'=round(x/y)`, `r\'=x-y*q\'`","gas":"26","fift":"DIVR","fift_examples":[],"opcode":"A905","stack":"x y - q\'"},"bytecode":{"tlb":"#A905","prefix":"A905","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIVC","since_version":0,"doc":{"category":"arithm_div","description":"`q\'\'=ceil(x/y)`, `r\'\'=x-y*q\'\'`","gas":"26","fift":"DIVC","fift_examples":[],"opcode":"A906","stack":"x y - q\'\'"},"bytecode":{"tlb":"#A906","prefix":"A906","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MOD","fift_examples":[],"opcode":"A908","stack":"x y - r"},"bytecode":{"tlb":"#A908","prefix":"A908","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MODR","fift_examples":[],"opcode":"A909","stack":"x y - r"},"bytecode":{"tlb":"#A909","prefix":"A909","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MODC","fift_examples":[],"opcode":"A90A","stack":"x y - r"},"bytecode":{"tlb":"#A90A","prefix":"A90A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIVMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"DIVMOD","fift_examples":[],"opcode":"A90C","stack":"x y - q r"},"bytecode":{"tlb":"#A90C","prefix":"A90C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIVMODR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"DIVMODR","fift_examples":[],"opcode":"A90D","stack":"x y - q\' r\'"},"bytecode":{"tlb":"#A90D","prefix":"A90D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DIVMODC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"DIVMODC","fift_examples":[],"opcode":"A90E","stack":"x y - q\'\' r\'\'"},"bytecode":{"tlb":"#A90E","prefix":"A90E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTMOD_VAR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDRSHIFTMOD","fift_examples":[],"opcode":"A920","stack":"x w z - q=floor((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#A920","prefix":"A920","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTMODR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDRSHIFTMODR","fift_examples":[],"opcode":"A921","stack":"x w z - q=round((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#A921","prefix":"A921","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTMODC","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"ADDRSHIFTMODC","fift_examples":[],"opcode":"A922","stack":"x w z - q=ceil((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#A922","prefix":"A922","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"RSHIFTR","fift_examples":[],"opcode":"A925","stack":"x y - round(x/2^y)"},"bytecode":{"tlb":"#A925","prefix":"A925","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"RSHIFTC","fift_examples":[],"opcode":"A926","stack":"x y - ceil(x/2^y)"},"bytecode":{"tlb":"#A926","prefix":"A926","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MODPOW2","fift_examples":[],"opcode":"A928","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#A928","prefix":"A928","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2R_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MODPOW2R","fift_examples":[],"opcode":"A929","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#A929","prefix":"A929","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2C_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MODPOW2C","fift_examples":[],"opcode":"A92A","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#A92A","prefix":"A92A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"RSHIFTMOD","fift_examples":[],"opcode":"A92C","stack":"x y - q=floor(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#A92C","prefix":"A92C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTMODR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"RSHIFTMODR","fift_examples":[],"opcode":"A92D","stack":"x y - q=round(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#A92D","prefix":"A92D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTMODC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"RSHIFTMODC","fift_examples":[],"opcode":"A92E","stack":"x y - q=ceil(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#A92E","prefix":"A92E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] ADDRSHIFT#MOD","fift_examples":[],"opcode":"A930tt","stack":"x w - q=floor((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#A930 tt:uint8","prefix":"A930","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTRMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] ADDRSHIFTR#MOD","fift_examples":[],"opcode":"A931tt","stack":"x w - q=round((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#A931 tt:uint8","prefix":"A931","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRSHIFTCMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] ADDRSHIFTC#MOD","fift_examples":[],"opcode":"A932tt","stack":"x w - q=round((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#A932 tt:uint8","prefix":"A932","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] RSHIFTR#","fift_examples":[],"opcode":"A935tt","stack":"x - round(x/2^(tt+1))"},"bytecode":{"tlb":"#A935 tt:uint8","prefix":"A935","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] RSHIFTC#","fift_examples":[],"opcode":"A936tt","stack":"x - ceil(x/2^(tt+1))"},"bytecode":{"tlb":"#A936 tt:uint8","prefix":"A936","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MODPOW2#","fift_examples":[],"opcode":"A938tt","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#A938 tt:uint8","prefix":"A938","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2R","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MODPOW2R#","fift_examples":[],"opcode":"A939tt","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#A939 tt:uint8","prefix":"A939","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MODPOW2C","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MODPOW2C#","fift_examples":[],"opcode":"A93Att","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#A93A tt:uint8","prefix":"A93A","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] RSHIFT#MOD","fift_examples":[],"opcode":"A93Ctt","stack":"x - q=floor(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#A93C tt:uint8","prefix":"A93C","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTRMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] RSHIFTR#MOD","fift_examples":[],"opcode":"A93Dtt","stack":"x - q=round(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#A93D tt:uint8","prefix":"A93D","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFTCMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] RSHIFTC#MOD","fift_examples":[],"opcode":"A93Ett","stack":"x - q=ceil(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#A93E tt:uint8","prefix":"A93E","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDDIVMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDDIVMOD","fift_examples":[],"opcode":"A980","stack":"x y w z - q=floor((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#A980","prefix":"A980","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDDIVMODR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDDIVMODR","fift_examples":[],"opcode":"A981","stack":"x y w z - q=round((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#A981","prefix":"A981","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDDIVMODC","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDDIVMODC","fift_examples":[],"opcode":"A982","stack":"x y w z - q=ceil((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#A982","prefix":"A982","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIV","since_version":0,"doc":{"category":"arithm_div","description":"`q=floor(x*y/z)`","gas":"26","fift":"MULDIV","fift_examples":[],"opcode":"A984","stack":"x y z - q"},"bytecode":{"tlb":"#A984","prefix":"A984","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIVR","since_version":0,"doc":{"category":"arithm_div","description":"`q\'=round(x*y/z)`","gas":"26","fift":"MULDIVR","fift_examples":[],"opcode":"A985","stack":"x y z - q\'"},"bytecode":{"tlb":"#A985","prefix":"A985","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIVC","since_version":0,"doc":{"category":"arithm_div","description":"`q\'=ceil(x*y/z)`","gas":"26","fift":"MULDIVC","fift_examples":[],"opcode":"A986","stack":"x y z - q\'"},"bytecode":{"tlb":"#A986","prefix":"A986","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMOD","fift_examples":[],"opcode":"A988","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#A988","prefix":"A988","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMODR","fift_examples":[],"opcode":"A989","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#A989","prefix":"A989","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMODC","fift_examples":[],"opcode":"A98A","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#A98A","prefix":"A98A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIVMOD","since_version":0,"doc":{"category":"arithm_div","description":"`q=floor(x*y/z)`, `r=x*y-z*q`","gas":"26","fift":"MULDIVMOD","fift_examples":[],"opcode":"A98C","stack":"x y z - q r"},"bytecode":{"tlb":"#A98C","prefix":"A98C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIVMODR","since_version":0,"doc":{"category":"arithm_div","description":"`q=round(x*y/z)`, `r=x*y-z*q`","gas":"26","fift":"MULDIVMODR","fift_examples":[],"opcode":"A98D","stack":"x y z - q r"},"bytecode":{"tlb":"#A98D","prefix":"A98D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULDIVMODC","since_version":0,"doc":{"category":"arithm_div","description":"`q=ceil(x*y/z)`, `r=x*y-z*q`","gas":"26","fift":"MULDIVMODC","fift_examples":[],"opcode":"A98E","stack":"x y z - q r"},"bytecode":{"tlb":"#A98E","prefix":"A98E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDRSHIFTMOD","fift_examples":[],"opcode":"A9A0","stack":"x y w z - q=floor((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9A0","prefix":"A9A0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTRMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDRSHIFTRMOD","fift_examples":[],"opcode":"A9A1","stack":"x y w z - q=round((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9A1","prefix":"A9A1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTCMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULADDRSHIFTCMOD","fift_examples":[],"opcode":"A9A2","stack":"x y w z - q=ceil((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9A2","prefix":"A9A2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFT_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"MULRSHIFT","fift_examples":[],"opcode":"A9A4","stack":"x y z - floor(x*y/2^z)"},"bytecode":{"tlb":"#A9A4","prefix":"A9A4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"MULRSHIFTR","fift_examples":[],"opcode":"A9A5","stack":"x y z - round(x*y/2^z)"},"bytecode":{"tlb":"#A9A5","prefix":"A9A5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"MULRSHIFTC","fift_examples":[],"opcode":"A9A6","stack":"x y z - ceil(x*y/2^z)"},"bytecode":{"tlb":"#A9A6","prefix":"A9A6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMODPOW2_VAR","fift_examples":[],"opcode":"A9A8","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#A9A8","prefix":"A9A8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2R_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMODPOW2R_VAR","fift_examples":[],"opcode":"A9A9","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#A9A9","prefix":"A9A9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2C_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULMODPOW2C_VAR","fift_examples":[],"opcode":"A9AA","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#A9AA","prefix":"A9AA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULRSHIFTMOD_VAR","fift_examples":[],"opcode":"A9AC","stack":"x y z - q=floor(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#A9AC","prefix":"A9AC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTRMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULRSHIFTRMOD_VAR","fift_examples":[],"opcode":"A9AD","stack":"x y z - q=round(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#A9AD","prefix":"A9AD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTCMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"MULRSHIFTCMOD_VAR","fift_examples":[],"opcode":"A9AE","stack":"x y z - q=ceil(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#A9AE","prefix":"A9AE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULADDRSHIFT#MOD","fift_examples":[],"opcode":"A9B0tt","stack":"x y w - q=floor((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9B0 tt:uint8","prefix":"A9B0","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTRMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULADDRSHIFTR#MOD","fift_examples":[],"opcode":"A9B1tt","stack":"x y w - q=round((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9B1 tt:uint8","prefix":"A9B1","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULADDRSHIFTCMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULADDRSHIFTC#MOD","fift_examples":[],"opcode":"A9B2tt","stack":"x y w - q=ceil((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#A9B2 tt:uint8","prefix":"A9B2","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFT","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULRSHIFT#","fift_examples":[],"opcode":"A9B4tt","stack":"x y - floor(x*y/2^(tt+1))"},"bytecode":{"tlb":"#A9B4 tt:uint8","prefix":"A9B4","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULRSHIFTR#","fift_examples":[],"opcode":"A9B5tt","stack":"x y - round(x*y/2^(tt+1))"},"bytecode":{"tlb":"#A9B5 tt:uint8","prefix":"A9B5","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULRSHIFTC#","fift_examples":[],"opcode":"A9B6tt","stack":"x y - ceil(x*y/2^(tt+1))"},"bytecode":{"tlb":"#A9B6 tt:uint8","prefix":"A9B6","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULMODPOW2#","fift_examples":[],"opcode":"A9B8tt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#A9B8 tt:uint8","prefix":"A9B8","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2R","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULMODPOW2R#","fift_examples":[],"opcode":"A9B9tt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#A9B9 tt:uint8","prefix":"A9B9","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULMODPOW2C","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] MULMODPOW2C#","fift_examples":[],"opcode":"A9BAtt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#A9BA tt:uint8","prefix":"A9BA","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"MULRSHIFT#MOD","fift_examples":[],"opcode":"A9BC","stack":"x y - q=floor(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#A9BC","prefix":"A9BC","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTRMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"MULRSHIFTR#MOD","fift_examples":[],"opcode":"A9BD","stack":"x y - q=round(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#A9BD","prefix":"A9BD","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MULRSHIFTCMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"MULRSHIFTC#MOD","fift_examples":[],"opcode":"A9BE","stack":"x y - q=ceil(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#A9BE","prefix":"A9BE","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMOD_VAR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTADDDIVMOD","fift_examples":[],"opcode":"A9C0","stack":"x w z y - q=floor((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9C0","prefix":"A9C0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMODR_VAR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTADDDIVMODR","fift_examples":[],"opcode":"A9C1","stack":"x w z y - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9C1","prefix":"A9C1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMODC_VAR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTADDDIVMODC","fift_examples":[],"opcode":"A9C2","stack":"x w z y - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9C2","prefix":"A9C2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIV_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"LSHIFTDIV","fift_examples":[],"opcode":"A9C4","stack":"x y z - floor(2^z*x/y)"},"bytecode":{"tlb":"#A9C4","prefix":"A9C4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"LSHIFTDIVR","fift_examples":[],"opcode":"A9C5","stack":"x y z - round(2^z*x/y)"},"bytecode":{"tlb":"#A9C5","prefix":"A9C5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"`0 <= z <= 256`","gas":"26","fift":"LSHIFTDIVC","fift_examples":[],"opcode":"A9C6","stack":"x y z - ceil(2^z*x/y)"},"bytecode":{"tlb":"#A9C6","prefix":"A9C6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTMOD","fift_examples":[],"opcode":"A9C8","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#A9C8","prefix":"A9C8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMODR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTMODR","fift_examples":[],"opcode":"A9C9","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#A9C9","prefix":"A9C9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMODC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTMODC","fift_examples":[],"opcode":"A9CA","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#A9CA","prefix":"A9CA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMOD_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTDIVMOD","fift_examples":[],"opcode":"A9CC","stack":"x y z - q=floor(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#A9CC","prefix":"A9CC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMODR_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTDIVMODR","fift_examples":[],"opcode":"A9CD","stack":"x y z - q=round(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#A9CD","prefix":"A9CD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMODC_VAR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"26","fift":"LSHIFTDIVMODC","fift_examples":[],"opcode":"A9CE","stack":"x y z - q=ceil(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#A9CE","prefix":"A9CE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMOD","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#ADDDIVMOD","fift_examples":[],"opcode":"A9D0tt","stack":"x w z - q=floor((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9D0 tt:uint8","prefix":"A9D0","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMODR","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#ADDDIVMODR","fift_examples":[],"opcode":"A9D1tt","stack":"x w z - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9D1 tt:uint8","prefix":"A9D1","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTADDDIVMODC","since_version":4,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#ADDDIVMODC","fift_examples":[],"opcode":"A9D2tt","stack":"x w z - q=ceil((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#A9D2 tt:uint8","prefix":"A9D2","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIV","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIV","fift_examples":[],"opcode":"A9D4tt","stack":"x y - floor(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#A9D4 tt:uint8","prefix":"A9D4","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIVR","fift_examples":[],"opcode":"A9D5tt","stack":"x y - round(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#A9D5 tt:uint8","prefix":"A9D5","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIVC","fift_examples":[],"opcode":"A9D6tt","stack":"x y - ceil(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#A9D6 tt:uint8","prefix":"A9D6","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#MOD","fift_examples":[],"opcode":"A9D8tt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#A9D8 tt:uint8","prefix":"A9D8","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMODR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#MODR","fift_examples":[],"opcode":"A9D9tt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#A9D9 tt:uint8","prefix":"A9D9","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTMODC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#MODC","fift_examples":[],"opcode":"A9DAtt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#A9DA tt:uint8","prefix":"A9DA","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMOD","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIVMOD","fift_examples":[],"opcode":"A9DCtt","stack":"x y - q=floor(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#A9DC tt:uint8","prefix":"A9DC","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMODR","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIVMODR","fift_examples":[],"opcode":"A9DDtt","stack":"x y - q=round(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#A9DD tt:uint8","prefix":"A9DD","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFTDIVMODC","since_version":0,"doc":{"category":"arithm_div","description":"","gas":"34","fift":"[tt+1] LSHIFT#DIVMODC","fift_examples":[],"opcode":"A9DEtt","stack":"x y - q=ceil(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#A9DE tt:uint8","prefix":"A9DE","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFT","since_version":0,"doc":{"category":"arithm_logical","description":"`0 <= cc <= 255`","gas":"26","fift":"[cc+1] LSHIFT#","fift_examples":[],"opcode":"AAcc","stack":"x - x*2^(cc+1)"},"bytecode":{"tlb":"#AA cc:uint8","prefix":"AA","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFT","since_version":0,"doc":{"category":"arithm_logical","description":"`0 <= cc <= 255`","gas":"18","fift":"[cc+1] RSHIFT#","fift_examples":[],"opcode":"ABcc","stack":"x - floor(x/2^(cc+1))"},"bytecode":{"tlb":"#AB cc:uint8","prefix":"AB","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LSHIFT_VAR","since_version":0,"doc":{"category":"arithm_logical","description":"`0 <= y <= 1023`","gas":"18","fift":"LSHIFT","fift_examples":[],"opcode":"AC","stack":"x y - x*2^y"},"bytecode":{"tlb":"#AC","prefix":"AC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RSHIFT_VAR","since_version":0,"doc":{"category":"arithm_logical","description":"`0 <= y <= 1023`","gas":"18","fift":"RSHIFT","fift_examples":[],"opcode":"AD","stack":"x y - floor(x/2^y)"},"bytecode":{"tlb":"#AD","prefix":"AD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POW2","since_version":0,"doc":{"category":"arithm_logical","description":"`0 <= y <= 1023`\\nEquivalent to `ONE` `SWAP` `LSHIFT`.","gas":"18","fift":"POW2","fift_examples":[],"opcode":"AE","stack":"y - 2^y"},"bytecode":{"tlb":"#AE","prefix":"AE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"AND","since_version":0,"doc":{"category":"arithm_logical","description":"Bitwise and of two signed integers `x` and `y`, sign-extended to infinity.","gas":"18","fift":"AND","fift_examples":[],"opcode":"B0","stack":"x y - x&y"},"bytecode":{"tlb":"#B0","prefix":"B0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"OR","since_version":0,"doc":{"category":"arithm_logical","description":"Bitwise or of two integers.","gas":"18","fift":"OR","fift_examples":[],"opcode":"B1","stack":"x y - x|y"},"bytecode":{"tlb":"#B1","prefix":"B1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XOR","since_version":0,"doc":{"category":"arithm_logical","description":"Bitwise xor of two integers.","gas":"18","fift":"XOR","fift_examples":[],"opcode":"B2","stack":"x y - x xor y"},"bytecode":{"tlb":"#B2","prefix":"B2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NOT","since_version":0,"doc":{"category":"arithm_logical","description":"Bitwise not of an integer.","gas":"26","fift":"NOT","fift_examples":[],"opcode":"B3","stack":"x - ~x"},"bytecode":{"tlb":"#B3","prefix":"B3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"FITS","since_version":0,"doc":{"category":"arithm_logical","description":"Checks whether `x` is a `cc+1`-bit signed integer for `0 <= cc <= 255` (i.e., whether `-2^cc <= x < 2^cc`).\\nIf not, either triggers an integer overflow exception, or replaces `x` with a `NaN` (quiet version).","gas":"26/76","fift":"[cc+1] FITS","fift_examples":[],"opcode":"B4cc","stack":"x - x"},"bytecode":{"tlb":"#B4 cc:uint8","prefix":"B4","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UFITS","since_version":0,"doc":{"category":"arithm_logical","description":"Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`).","gas":"26/76","fift":"[cc+1] UFITS","fift_examples":[],"opcode":"B5cc","stack":"x - x"},"bytecode":{"tlb":"#B5 cc:uint8","prefix":"B5","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"FITSX","since_version":0,"doc":{"category":"arithm_logical","description":"Checks whether `x` is a `c`-bit signed integer for `0 <= c <= 1023`.","gas":"26/76","fift":"FITSX","fift_examples":[],"opcode":"B600","stack":"x c - x"},"bytecode":{"tlb":"#B600","prefix":"B600","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UFITSX","since_version":0,"doc":{"category":"arithm_logical","description":"Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`.","gas":"26/76","fift":"UFITSX","fift_examples":[],"opcode":"B601","stack":"x c - x"},"bytecode":{"tlb":"#B601","prefix":"B601","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BITSIZE","since_version":0,"doc":{"category":"arithm_logical","description":"Computes smallest `c >= 0` such that `x` fits into a `c`-bit signed integer (`-2^(c-1) <= c < 2^(c-1)`).","gas":"26","fift":"BITSIZE","fift_examples":[],"opcode":"B602","stack":"x - c"},"bytecode":{"tlb":"#B602","prefix":"B602","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"UBITSIZE","since_version":0,"doc":{"category":"arithm_logical","description":"Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception.","gas":"26","fift":"UBITSIZE","fift_examples":[],"opcode":"B603","stack":"x - c"},"bytecode":{"tlb":"#B603","prefix":"B603","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MIN","since_version":0,"doc":{"category":"arithm_logical","description":"Computes the minimum of two integers `x` and `y`.","gas":"26","fift":"MIN","fift_examples":[],"opcode":"B608","stack":"x y - x or y"},"bytecode":{"tlb":"#B608","prefix":"B608","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MAX","since_version":0,"doc":{"category":"arithm_logical","description":"Computes the maximum of two integers `x` and `y`.","gas":"26","fift":"MAX","fift_examples":[],"opcode":"B609","stack":"x y - x or y"},"bytecode":{"tlb":"#B609","prefix":"B609","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"MINMAX","since_version":0,"doc":{"category":"arithm_logical","description":"Sorts two integers. Quiet version of this operation returns two `NaN`s if any of the arguments are `NaN`s.","gas":"26","fift":"MINMAX\\nINTSORT2","fift_examples":[],"opcode":"B60A","stack":"x y - x y or y x"},"bytecode":{"tlb":"#B60A","prefix":"B60A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"r1","value_types":["Integer"]},{"type":"simple","name":"r2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ABS","since_version":0,"doc":{"category":"arithm_logical","description":"Computes the absolute value of an integer `x`.","gas":"26","fift":"ABS","fift_examples":[],"opcode":"B60B","stack":"x - |x|"},"bytecode":{"tlb":"#B60B","prefix":"B60B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QADD","fift_examples":[],"opcode":"B7A0","stack":"x y - x+y"},"bytecode":{"tlb":"#B7A0","prefix":"B7A0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QSUB","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QSUB","fift_examples":[],"opcode":"B7A1","stack":"x y - x-y"},"bytecode":{"tlb":"#B7A1","prefix":"B7A1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QSUBR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QSUBR","fift_examples":[],"opcode":"B7A2","stack":"x y - y-x"},"bytecode":{"tlb":"#B7A2","prefix":"B7A2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QNEGATE","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QNEGATE","fift_examples":[],"opcode":"B7A3","stack":"x - -x"},"bytecode":{"tlb":"#B7A3","prefix":"B7A3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QINC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QINC","fift_examples":[],"opcode":"B7A4","stack":"x - x+1"},"bytecode":{"tlb":"#B7A4","prefix":"B7A4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDEC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QDEC","fift_examples":[],"opcode":"B7A5","stack":"x - x-1"},"bytecode":{"tlb":"#B7A5","prefix":"B7A5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMUL","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QMUL","fift_examples":[],"opcode":"B7A8","stack":"x y - x*y"},"bytecode":{"tlb":"#B7A8","prefix":"B7A8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDDIVMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDDIVMOD","fift_examples":[],"opcode":"B7A900","stack":"x w z - q=floor((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#B7A900","prefix":"B7A900","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDDIVMODR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDDIVMODR","fift_examples":[],"opcode":"B7A901","stack":"x w z - q=round((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#B7A901","prefix":"B7A901","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDDIVMODC","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDDIVMODC","fift_examples":[],"opcode":"B7A902","stack":"x w y - q=ceil((x+w)/z) r=(x+w)-zq"},"bytecode":{"tlb":"#B7A902","prefix":"B7A902","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIV","since_version":0,"doc":{"category":"arithm_quiet","description":"Division returns `NaN` if `y=0`.","gas":"34","fift":"QDIV","fift_examples":[],"opcode":"B7A904","stack":"x y - q"},"bytecode":{"tlb":"#B7A904","prefix":"B7A904","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIVR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QDIVR","fift_examples":[],"opcode":"B7A905","stack":"x y - q\'"},"bytecode":{"tlb":"#B7A905","prefix":"B7A905","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIVC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QDIVC","fift_examples":[],"opcode":"B7A906","stack":"x y - q\'\'"},"bytecode":{"tlb":"#B7A906","prefix":"B7A906","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMOD","fift_examples":[],"opcode":"B7A908","stack":"x y - r"},"bytecode":{"tlb":"#B7A908","prefix":"B7A908","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMODR","fift_examples":[],"opcode":"B7A909","stack":"x y - r"},"bytecode":{"tlb":"#B7A909","prefix":"B7A909","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMODC","fift_examples":[],"opcode":"B7A90A","stack":"x y - r"},"bytecode":{"tlb":"#B7A90A","prefix":"B7A90A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIVMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QDIVMOD","fift_examples":[],"opcode":"B7A90C","stack":"x y - q r"},"bytecode":{"tlb":"#B7A90C","prefix":"B7A90C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIVMODR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QDIVMODR","fift_examples":[],"opcode":"B7A90D","stack":"x y - q\' r\'"},"bytecode":{"tlb":"#B7A90D","prefix":"B7A90D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QDIVMODC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QDIVMODC","fift_examples":[],"opcode":"B7A90E","stack":"x y - q\'\' r\'\'"},"bytecode":{"tlb":"#B7A90E","prefix":"B7A90E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDRSHIFTMOD","fift_examples":[],"opcode":"B7A920","stack":"x w z - q=floor((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#B7A920","prefix":"B7A920","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTMODR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDRSHIFTMODR","fift_examples":[],"opcode":"B7A921","stack":"x w z - q=round((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#B7A921","prefix":"B7A921","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTMODC","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QADDRSHIFTMODC","fift_examples":[],"opcode":"B7A922","stack":"x w z - q=ceil((x+w)/2^z) r=(x+w)-q*2^z"},"bytecode":{"tlb":"#B7A922","prefix":"B7A922","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QRSHIFTR","fift_examples":[],"opcode":"B7A925","stack":"x y - round(x/2^y)"},"bytecode":{"tlb":"#B7A925","prefix":"B7A925","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QRSHIFTC","fift_examples":[],"opcode":"B7A926","stack":"x y - ceil(x/2^y)"},"bytecode":{"tlb":"#B7A926","prefix":"B7A926","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMODPOW2","fift_examples":[],"opcode":"B7A928","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#B7A928","prefix":"B7A928","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2R_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMODPOW2R","fift_examples":[],"opcode":"B7A929","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#B7A929","prefix":"B7A929","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2C_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMODPOW2C","fift_examples":[],"opcode":"B7A92A","stack":"x y - x mod 2^y"},"bytecode":{"tlb":"#B7A92A","prefix":"B7A92A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QRSHIFTMOD","fift_examples":[],"opcode":"B7A92C","stack":"x y - q=floor(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#B7A92C","prefix":"B7A92C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTMODR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QRSHIFTMODR","fift_examples":[],"opcode":"B7A92D","stack":"x y - q=round(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#B7A92D","prefix":"B7A92D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTMODC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QRSHIFTMODC","fift_examples":[],"opcode":"B7A92E","stack":"x y - q=ceil(x/2^y) r=x-q*2^y"},"bytecode":{"tlb":"#B7A92E","prefix":"B7A92E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QADDRSHIFT#MOD","fift_examples":[],"opcode":"B7A930tt","stack":"x w - q=floor((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A930 tt:uint8","prefix":"B7A930","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTRMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QADDRSHIFTR#MOD","fift_examples":[],"opcode":"B7A931tt","stack":"x w - q=round((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A931 tt:uint8","prefix":"B7A931","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QADDRSHIFTCMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QADDRSHIFTC#MOD","fift_examples":[],"opcode":"B7A932tt","stack":"x w - q=round((x+w)/2^(tt+1)) r=(x+w)-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A932 tt:uint8","prefix":"B7A932","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QRSHIFTR#","fift_examples":[],"opcode":"B7A935tt","stack":"x - round(x/2^(tt+1))"},"bytecode":{"tlb":"#B7A935 tt:uint8","prefix":"B7A935","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QRSHIFTC#","fift_examples":[],"opcode":"B7A936tt","stack":"x - ceil(x/2^(tt+1))"},"bytecode":{"tlb":"#B7A936 tt:uint8","prefix":"B7A936","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMODPOW2#","fift_examples":[],"opcode":"B7A938tt","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A938 tt:uint8","prefix":"B7A938","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2R","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMODPOW2R#","fift_examples":[],"opcode":"B7A939tt","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A939 tt:uint8","prefix":"B7A939","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMODPOW2C","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMODPOW2C#","fift_examples":[],"opcode":"B7A93Att","stack":"x - x mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A93A tt:uint8","prefix":"B7A93A","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QRSHIFT#MOD","fift_examples":[],"opcode":"B7A93Ctt","stack":"x - q=floor(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A93C tt:uint8","prefix":"B7A93C","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTRMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QRSHIFTR#MOD","fift_examples":[],"opcode":"B7A93Dtt","stack":"x - q=round(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A93D tt:uint8","prefix":"B7A93D","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFTCMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QRSHIFTC#MOD","fift_examples":[],"opcode":"B7A93Ett","stack":"x - q=ceil(x/2^(tt+1)) r=x-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A93E tt:uint8","prefix":"B7A93E","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDDIVMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDDIVMOD","fift_examples":[],"opcode":"B7A980","stack":"x y w z - q=floor((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#B7A980","prefix":"B7A980","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDDIVMODR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDDIVMODR","fift_examples":[],"opcode":"B7A981","stack":"x y w z - q=round((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#B7A981","prefix":"B7A981","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDDIVMODC","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDDIVMODC","fift_examples":[],"opcode":"B7A982","stack":"x y w z - q=ceil((xy+w)/z) r=(xy+w)-zq"},"bytecode":{"tlb":"#B7A982","prefix":"B7A982","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIV","since_version":0,"doc":{"category":"arithm_quiet","description":"`q=floor(x*y/z)`","gas":"34","fift":"QMULDIV","fift_examples":[],"opcode":"B7A984","stack":"x y z - q"},"bytecode":{"tlb":"#B7A984","prefix":"B7A984","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIVR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULDIVR","fift_examples":[],"opcode":"B7A985","stack":"x y z - q\'"},"bytecode":{"tlb":"#B7A985","prefix":"B7A985","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIVC","since_version":0,"doc":{"category":"arithm_quiet","description":"`q\'=ceil(x*y/z)`","gas":"34","fift":"QMULDIVC","fift_examples":[],"opcode":"B7A986","stack":"x y z - q\'"},"bytecode":{"tlb":"#B7A986","prefix":"B7A986","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMOD","fift_examples":[],"opcode":"B7A988","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#B7A988","prefix":"B7A988","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMODR","fift_examples":[],"opcode":"B7A989","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#B7A989","prefix":"B7A989","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODC","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMODC","fift_examples":[],"opcode":"B7A98A","stack":"x y z - x*y mod z"},"bytecode":{"tlb":"#B7A98A","prefix":"B7A98A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIVMOD","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULDIVMOD","fift_examples":[],"opcode":"B7A98C","stack":"x y z - q r"},"bytecode":{"tlb":"#B7A98C","prefix":"B7A98C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIVMODR","since_version":0,"doc":{"category":"arithm_quiet","description":"`q=round(x*y/z)`, `r=x*y-z*q`","gas":"34","fift":"QMULDIVMODR","fift_examples":[],"opcode":"B7A98D","stack":"x y z - q r"},"bytecode":{"tlb":"#B7A98D","prefix":"B7A98D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULDIVMODC","since_version":0,"doc":{"category":"arithm_quiet","description":"`q=ceil(x*y/z)`, `r=x*y-z*q`","gas":"34","fift":"QMULDIVMODC","fift_examples":[],"opcode":"B7A98E","stack":"x y z - q r"},"bytecode":{"tlb":"#B7A98E","prefix":"B7A98E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDRSHIFTMOD","fift_examples":[],"opcode":"B7A9A0","stack":"x y w z - q=floor((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9A0","prefix":"B7A9A0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTRMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDRSHIFTRMOD","fift_examples":[],"opcode":"B7A9A1","stack":"x y w z - q=round((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9A1","prefix":"B7A9A1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTCMOD","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULADDRSHIFTCMOD","fift_examples":[],"opcode":"B7A9A2","stack":"x y w z - q=ceil((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9A2","prefix":"B7A9A2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"q","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFT_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QMULRSHIFT","fift_examples":[],"opcode":"B7A9A4","stack":"x y z - floor(x*y/2^z)"},"bytecode":{"tlb":"#B7A9A4","prefix":"B7A9A4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QMULRSHIFTR","fift_examples":[],"opcode":"B7A9A5","stack":"x y z - round(x*y/2^z)"},"bytecode":{"tlb":"#B7A9A5","prefix":"B7A9A5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QMULRSHIFTC","fift_examples":[],"opcode":"B7A9A6","stack":"x y z - ceil(x*y/2^z)"},"bytecode":{"tlb":"#B7A9A6","prefix":"B7A9A6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMODPOW2_VAR","fift_examples":[],"opcode":"B7A9A8","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#B7A9A8","prefix":"B7A9A8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2R_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMODPOW2R_VAR","fift_examples":[],"opcode":"B7A9A9","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#B7A9A9","prefix":"B7A9A9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2C_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULMODPOW2C_VAR","fift_examples":[],"opcode":"B7A9AA","stack":"x y z - x*y mod 2^z"},"bytecode":{"tlb":"#B7A9AA","prefix":"B7A9AA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULRSHIFTMOD_VAR","fift_examples":[],"opcode":"B7A9AC","stack":"x y z - q=floor(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#B7A9AC","prefix":"B7A9AC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTRMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULRSHIFTRMOD_VAR","fift_examples":[],"opcode":"B7A9AD","stack":"x y z - q=round(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#B7A9AD","prefix":"B7A9AD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTCMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QMULRSHIFTCMOD_VAR","fift_examples":[],"opcode":"B7A9AE","stack":"x y z - q=ceil(x*y/2^z) r=xy-q*2^z"},"bytecode":{"tlb":"#B7A9AE","prefix":"B7A9AE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULADDRSHIFT#MOD","fift_examples":[],"opcode":"B7A9B0tt","stack":"x y w - q=floor((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9B0 tt:uint8","prefix":"B7A9B0","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTRMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULADDRSHIFTR#MOD","fift_examples":[],"opcode":"B7A9B1tt","stack":"x y w - q=round((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9B1 tt:uint8","prefix":"B7A9B1","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULADDRSHIFTCMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULADDRSHIFTC#MOD","fift_examples":[],"opcode":"B7A9B2tt","stack":"x y w - q=ceil((xy+w)/2^z) r=(xy+w)-q*2^z"},"bytecode":{"tlb":"#B7A9B2 tt:uint8","prefix":"B7A9B2","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFT","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULRSHIFT#","fift_examples":[],"opcode":"B7A9B4tt","stack":"x y - floor(x*y/2^(tt+1))"},"bytecode":{"tlb":"#B7A9B4 tt:uint8","prefix":"B7A9B4","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULRSHIFTR#","fift_examples":[],"opcode":"B7A9B5tt","stack":"x y - round(x*y/2^(tt+1))"},"bytecode":{"tlb":"#B7A9B5 tt:uint8","prefix":"B7A9B5","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULRSHIFTC#","fift_examples":[],"opcode":"B7A9B6tt","stack":"x y - ceil(x*y/2^(tt+1))"},"bytecode":{"tlb":"#B7A9B6 tt:uint8","prefix":"B7A9B6","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULMODPOW2#","fift_examples":[],"opcode":"B7A9B8tt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A9B8 tt:uint8","prefix":"B7A9B8","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2R","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULMODPOW2R#","fift_examples":[],"opcode":"B7A9B9tt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A9B9 tt:uint8","prefix":"B7A9B9","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULMODPOW2C","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QMULMODPOW2C#","fift_examples":[],"opcode":"B7A9BAtt","stack":"x y - x*y mod 2^(tt+1)"},"bytecode":{"tlb":"#B7A9BA tt:uint8","prefix":"B7A9BA","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"QMULRSHIFT#MOD","fift_examples":[],"opcode":"B7A9BC","stack":"x y - q=floor(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A9BC","prefix":"B7A9BC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTRMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"QMULRSHIFTR#MOD","fift_examples":[],"opcode":"B7A9BD","stack":"x y - q=round(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A9BD","prefix":"B7A9BD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QMULRSHIFTCMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"QMULRSHIFTC#MOD","fift_examples":[],"opcode":"B7A9BE","stack":"x y - q=ceil(x*y/2^(tt+1)) r=xy-q*2^(tt+1)"},"bytecode":{"tlb":"#B7A9BE","prefix":"B7A9BE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMOD_VAR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTADDDIVMOD","fift_examples":[],"opcode":"B7A9C0","stack":"x w z y - q=floor((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#B7A9C0","prefix":"B7A9C0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMODR_VAR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTADDDIVMODR","fift_examples":[],"opcode":"B7A9C1","stack":"x w z y - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#B7A9C1","prefix":"B7A9C1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMODC_VAR","since_version":4,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTADDDIVMODC","fift_examples":[],"opcode":"B7A9C2","stack":"x w z y - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq"},"bytecode":{"tlb":"#B7A9C2","prefix":"B7A9C2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIV_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QLSHIFTDIV","fift_examples":[],"opcode":"B7A9C4","stack":"x y z - floor(2^z*x/y)"},"bytecode":{"tlb":"#B7A9C4","prefix":"B7A9C4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QLSHIFTDIVR","fift_examples":[],"opcode":"B7A9C5","stack":"x y z - round(2^z*x/y)"},"bytecode":{"tlb":"#B7A9C5","prefix":"B7A9C5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= z <= 256`","gas":"34","fift":"QLSHIFTDIVC","fift_examples":[],"opcode":"B7A9C6","stack":"x y z - ceil(2^z*x/y)"},"bytecode":{"tlb":"#B7A9C6","prefix":"B7A9C6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTMOD","fift_examples":[],"opcode":"B7A9C8","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#B7A9C8","prefix":"B7A9C8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMODR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTMODR","fift_examples":[],"opcode":"B7A9C9","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#B7A9C9","prefix":"B7A9C9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMODC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTMODC","fift_examples":[],"opcode":"B7A9CA","stack":"x y z - 2^z*x mod y"},"bytecode":{"tlb":"#B7A9CA","prefix":"B7A9CA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMOD_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTDIVMOD","fift_examples":[],"opcode":"B7A9CC","stack":"x y z - q=floor(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#B7A9CC","prefix":"B7A9CC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMODR_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTDIVMODR","fift_examples":[],"opcode":"B7A9CD","stack":"x y z - q=round(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#B7A9CD","prefix":"B7A9CD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMODC_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"QLSHIFTDIVMODC","fift_examples":[],"opcode":"B7A9CE","stack":"x y z - q=ceil(2^z*x/y) r=2^z*x-q*y"},"bytecode":{"tlb":"#B7A9CE","prefix":"B7A9CE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#ADDDIVMOD","fift_examples":[],"opcode":"B7A9D0tt","stack":"x w z - q=floor((x*2^(tt+1)+w)/z) r=(x*2^(tt+1)+w)-zq"},"bytecode":{"tlb":"#B7A9D0 tt:uint8","prefix":"B7A9D0","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMODR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#ADDDIVMODR","fift_examples":[],"opcode":"B7A9D1tt","stack":"x w z - q=round((x*2^(tt+1)+w)/z) r=(x*2^(tt+1)+w)-zq"},"bytecode":{"tlb":"#B7A9D1 tt:uint8","prefix":"B7A9D1","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTADDDIVMODC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#ADDDIVMODC","fift_examples":[],"opcode":"B7A9D2tt","stack":"x w z - q=ceil((x*2^(tt+1)+w)/z) r=(x*2^(tt+1)+w)-zq"},"bytecode":{"tlb":"#B7A9D2 tt:uint8","prefix":"B7A9D2","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"w","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIV","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#DIV","fift_examples":[],"opcode":"B7A9D4tt","stack":"x y - floor(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#B7A9D4 tt:uint8","prefix":"B7A9D4","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#DIVR","fift_examples":[],"opcode":"B7A9D5tt","stack":"x y - round(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#B7A9D5 tt:uint8","prefix":"B7A9D5","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"34","fift":"[tt+1] QLSHIFT#DIVC","fift_examples":[],"opcode":"B7A9D6tt","stack":"x y - ceil(2^(tt+1)*x/y)"},"bytecode":{"tlb":"#B7A9D6 tt:uint8","prefix":"B7A9D6","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#MOD","fift_examples":[],"opcode":"B7A9D8tt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#B7A9D8 tt:uint8","prefix":"B7A9D8","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMODR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] LSHIFT#MODR","fift_examples":[],"opcode":"B7A9D9tt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#B7A9D9 tt:uint8","prefix":"B7A9D9","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTMODC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#MODC","fift_examples":[],"opcode":"B7A9DAtt","stack":"x y - 2^(tt+1)*x mod y"},"bytecode":{"tlb":"#B7A9DA tt:uint8","prefix":"B7A9DA","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMOD","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#DIVMOD","fift_examples":[],"opcode":"B7A9DCtt","stack":"x y - q=floor(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#B7A9DC tt:uint8","prefix":"B7A9DC","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMODR","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#DIVMODR","fift_examples":[],"opcode":"B7A9DDtt","stack":"x y - q=round(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#B7A9DD tt:uint8","prefix":"B7A9DD","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFTDIVMODC","since_version":9999,"doc":{"category":"arithm_quiet","description":"","gas":"42","fift":"[tt+1] QLSHIFT#DIVMODC","fift_examples":[],"opcode":"B7A9DEtt","stack":"x y - q=ceil(2^(tt+1)*x/y) r=2^(tt+1)*x-q*y"},"bytecode":{"tlb":"#B7A9DE tt:uint8","prefix":"B7A9DE","operands":[{"name":"t","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFT","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= cc <= 255`","gas":"34","fift":"[cc+1] QLSHIFT#","fift_examples":[],"opcode":"B7AAcc","stack":"x - x*2^(cc+1)"},"bytecode":{"tlb":"#B7AA cc:uint8","prefix":"B7AA","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFT","since_version":0,"doc":{"category":"arithm_quiet","description":"`0 <= cc <= 255`","gas":"26","fift":"[cc+1] RSHIFT#","fift_examples":[],"opcode":"B7ABcc","stack":"x - floor(x/2^(cc+1))"},"bytecode":{"tlb":"#B7AB cc:uint8","prefix":"B7AB","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QLSHIFT_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QLSHIFT","fift_examples":[],"opcode":"B7AC","stack":"x y - x*2^y"},"bytecode":{"tlb":"#B7AC","prefix":"B7AC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QRSHIFT_VAR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QRSHIFT","fift_examples":[],"opcode":"B7AD","stack":"x y - floor(x/2^y)"},"bytecode":{"tlb":"#B7AD","prefix":"B7AD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QPOW2","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QPOW2","fift_examples":[],"opcode":"B7AE","stack":"y - 2^y"},"bytecode":{"tlb":"#B7AE","prefix":"B7AE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QAND","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QAND","fift_examples":[],"opcode":"B7B0","stack":"x y - x&y"},"bytecode":{"tlb":"#B7B0","prefix":"B7B0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QOR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QOR","fift_examples":[],"opcode":"B7B1","stack":"x y - x|y"},"bytecode":{"tlb":"#B7B1","prefix":"B7B1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QXOR","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QXOR","fift_examples":[],"opcode":"B7B2","stack":"x y - x xor y"},"bytecode":{"tlb":"#B7B2","prefix":"B7B2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QNOT","since_version":0,"doc":{"category":"arithm_quiet","description":"","gas":"26","fift":"QNOT","fift_examples":[],"opcode":"B7B3","stack":"x - ~x"},"bytecode":{"tlb":"#B7B3","prefix":"B7B3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QFITS","since_version":0,"doc":{"category":"arithm_quiet","description":"Replaces `x` with a `NaN` if x is not a `cc+1`-bit signed integer, leaves it intact otherwise.","gas":"34","fift":"[cc+1] QFITS","fift_examples":[],"opcode":"B7B4cc","stack":"x - x"},"bytecode":{"tlb":"#B7B4 cc:uint8","prefix":"B7B4","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QUFITS","since_version":0,"doc":{"category":"arithm_quiet","description":"Replaces `x` with a `NaN` if x is not a `cc+1`-bit unsigned integer, leaves it intact otherwise.","gas":"34","fift":"[cc+1] QUFITS","fift_examples":[],"opcode":"B7B5cc","stack":"x - x"},"bytecode":{"tlb":"#B7B5 cc:uint8","prefix":"B7B5","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QFITSX","since_version":0,"doc":{"category":"arithm_quiet","description":"Replaces `x` with a `NaN` if x is not a c-bit signed integer, leaves it intact otherwise.","gas":"34","fift":"QFITSX","fift_examples":[],"opcode":"B7B600","stack":"x c - x"},"bytecode":{"tlb":"#B7B600","prefix":"B7B600","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"QUFITSX","since_version":0,"doc":{"category":"arithm_quiet","description":"Replaces `x` with a `NaN` if x is not a c-bit unsigned integer, leaves it intact otherwise.","gas":"34","fift":"QUFITSX","fift_examples":[],"opcode":"B7B601","stack":"x c - x"},"bytecode":{"tlb":"#B7B601","prefix":"B7B601","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SGN","since_version":0,"doc":{"category":"compare_int","description":"Computes the sign of an integer `x`:\\n`-1` if `x<0`, `0` if `x=0`, `1` if `x>0`.","gas":"18","fift":"SGN","fift_examples":[],"opcode":"B8","stack":"x - sgn(x)"},"bytecode":{"tlb":"#B8","prefix":"B8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LESS","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x<y`, `0` otherwise.","gas":"18","fift":"LESS","fift_examples":[],"opcode":"B9","stack":"x y - x<y"},"bytecode":{"tlb":"#B9","prefix":"B9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"EQUAL","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x=y`, `0` otherwise.","gas":"18","fift":"EQUAL","fift_examples":[],"opcode":"BA","stack":"x y - x=y"},"bytecode":{"tlb":"#BA","prefix":"BA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LEQ","since_version":0,"doc":{"category":"compare_int","description":"","gas":"18","fift":"LEQ","fift_examples":[],"opcode":"BB","stack":"x y - x<=y"},"bytecode":{"tlb":"#BB","prefix":"BB","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GREATER","since_version":0,"doc":{"category":"compare_int","description":"","gas":"18","fift":"GREATER","fift_examples":[],"opcode":"BC","stack":"x y - x>y"},"bytecode":{"tlb":"#BC","prefix":"BC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NEQ","since_version":0,"doc":{"category":"compare_int","description":"Equivalent to `EQUAL` `NOT`.","gas":"18","fift":"NEQ","fift_examples":[],"opcode":"BD","stack":"x y - x!=y"},"bytecode":{"tlb":"#BD","prefix":"BD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GEQ","since_version":0,"doc":{"category":"compare_int","description":"Equivalent to `LESS` `NOT`.","gas":"18","fift":"GEQ","fift_examples":[],"opcode":"BE","stack":"x y - x>=y"},"bytecode":{"tlb":"#BE","prefix":"BE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CMP","since_version":0,"doc":{"category":"compare_int","description":"Computes the sign of `x-y`:\\n`-1` if `x<y`, `0` if `x=y`, `1` if `x>y`.\\nNo integer overflow can occur here unless `x` or `y` is a `NaN`.","gas":"18","fift":"CMP","fift_examples":[],"opcode":"BF","stack":"x y - sgn(x-y)"},"bytecode":{"tlb":"#BF","prefix":"BF","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"EQINT","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x=yy`, `0` otherwise.\\n`-2^7 <= yy < 2^7`.","gas":"26","fift":"[yy] EQINT","fift_examples":[],"opcode":"C0yy","stack":"x - x=yy"},"bytecode":{"tlb":"#C0 yy:int8","prefix":"C0","operands":[{"name":"y","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LESSINT","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x<yy`, `0` otherwise.\\n`-2^7 <= yy < 2^7`.","gas":"26","fift":"[yy] LESSINT\\n[yy-1] LEQINT","fift_examples":[],"opcode":"C1yy","stack":"x - x<yy"},"bytecode":{"tlb":"#C1 yy:int8","prefix":"C1","operands":[{"name":"y","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GTINT","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x>yy`, `0` otherwise.\\n`-2^7 <= yy < 2^7`.","gas":"26","fift":"[yy] GTINT\\n[yy+1] GEQINT","fift_examples":[],"opcode":"C2yy","stack":"x - x>yy"},"bytecode":{"tlb":"#C2 yy:int8","prefix":"C2","operands":[{"name":"y","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NEQINT","since_version":0,"doc":{"category":"compare_int","description":"Returns `-1` if `x!=yy`, `0` otherwise.\\n`-2^7 <= yy < 2^7`.","gas":"26","fift":"[yy] NEQINT","fift_examples":[],"opcode":"C3yy","stack":"x - x!=yy"},"bytecode":{"tlb":"#C3 yy:int8","prefix":"C3","operands":[{"name":"y","type":"int","size":8,"min_value":-128,"max_value":127,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ISNAN","since_version":0,"doc":{"category":"compare_int","description":"Checks whether `x` is a `NaN`.","gas":"18","fift":"ISNAN","fift_examples":[],"opcode":"C4","stack":"x - x=NaN"},"bytecode":{"tlb":"#C4","prefix":"C4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHKNAN","since_version":0,"doc":{"category":"compare_int","description":"Throws an arithmetic overflow exception if `x` is a `NaN`.","gas":"18/68","fift":"CHKNAN","fift_examples":[],"opcode":"C5","stack":"x - x"},"bytecode":{"tlb":"#C5","prefix":"C5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SEMPTY","since_version":0,"doc":{"category":"compare_other","description":"Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references).","gas":"26","fift":"SEMPTY","fift_examples":[],"opcode":"C700","stack":"s - ?"},"bytecode":{"tlb":"#C700","prefix":"C700","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDEMPTY","since_version":0,"doc":{"category":"compare_other","description":"Checks whether _Slice_ `s` has no bits of data.","gas":"26","fift":"SDEMPTY","fift_examples":[],"opcode":"C701","stack":"s - ?"},"bytecode":{"tlb":"#C701","prefix":"C701","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SREMPTY","since_version":0,"doc":{"category":"compare_other","description":"Checks whether _Slice_ `s` has no references.","gas":"26","fift":"SREMPTY","fift_examples":[],"opcode":"C702","stack":"s - ?"},"bytecode":{"tlb":"#C702","prefix":"C702","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDFIRST","since_version":0,"doc":{"category":"compare_other","description":"Checks whether the first bit of _Slice_ `s` is a one.","gas":"26","fift":"SDFIRST","fift_examples":[],"opcode":"C703","stack":"s - ?"},"bytecode":{"tlb":"#C703","prefix":"C703","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDLEXCMP","since_version":0,"doc":{"category":"compare_other","description":"Compares the data of `s` lexicographically with the data of `s\'`, returning `-1`, 0, or 1 depending on the result.","gas":"26","fift":"SDLEXCMP","fift_examples":[],"opcode":"C704","stack":"s s\' - x"},"bytecode":{"tlb":"#C704","prefix":"C704","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDEQ","since_version":0,"doc":{"category":"compare_other","description":"Checks whether the data parts of `s` and `s\'` coincide, equivalent to `SDLEXCMP` `ISZERO`.","gas":"26","fift":"SDEQ","fift_examples":[],"opcode":"C705","stack":"s s\' - ?"},"bytecode":{"tlb":"#C705","prefix":"C705","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPFX","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s` is a prefix of `s\'`.","gas":"26","fift":"SDPFX","fift_examples":[],"opcode":"C708","stack":"s s\' - ?"},"bytecode":{"tlb":"#C708","prefix":"C708","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPFXREV","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s\'` is a prefix of `s`, equivalent to `SWAP` `SDPFX`.","gas":"26","fift":"SDPFXREV","fift_examples":[],"opcode":"C709","stack":"s s\' - ?"},"bytecode":{"tlb":"#C709","prefix":"C709","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPPFX","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s` is a proper prefix of `s\'` (i.e., a prefix distinct from `s\'`).","gas":"26","fift":"SDPPFX","fift_examples":[],"opcode":"C70A","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70A","prefix":"C70A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPPFXREV","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s\'` is a proper prefix of `s`.","gas":"26","fift":"SDPPFXREV","fift_examples":[],"opcode":"C70B","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70B","prefix":"C70B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDSFX","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s` is a suffix of `s\'`.","gas":"26","fift":"SDSFX","fift_examples":[],"opcode":"C70C","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70C","prefix":"C70C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDSFXREV","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s\'` is a suffix of `s`.","gas":"26","fift":"SDSFXREV","fift_examples":[],"opcode":"C70D","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70D","prefix":"C70D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPSFX","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s` is a proper suffix of `s\'`.","gas":"26","fift":"SDPSFX","fift_examples":[],"opcode":"C70E","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70E","prefix":"C70E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDPSFXREV","since_version":0,"doc":{"category":"compare_other","description":"Checks whether `s\'` is a proper suffix of `s`.","gas":"26","fift":"SDPSFXREV","fift_examples":[],"opcode":"C70F","stack":"s s\' - ?"},"bytecode":{"tlb":"#C70F","prefix":"C70F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCNTLEAD0","since_version":0,"doc":{"category":"compare_other","description":"Returns the number of leading zeroes in `s`.","gas":"26","fift":"SDCNTLEAD0","fift_examples":[],"opcode":"C710","stack":"s - n"},"bytecode":{"tlb":"#C710","prefix":"C710","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCNTLEAD1","since_version":0,"doc":{"category":"compare_other","description":"Returns the number of leading ones in `s`.","gas":"26","fift":"SDCNTLEAD1","fift_examples":[],"opcode":"C711","stack":"s - n"},"bytecode":{"tlb":"#C711","prefix":"C711","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCNTTRAIL0","since_version":0,"doc":{"category":"compare_other","description":"Returns the number of trailing zeroes in `s`.","gas":"26","fift":"SDCNTTRAIL0","fift_examples":[],"opcode":"C712","stack":"s - n"},"bytecode":{"tlb":"#C712","prefix":"C712","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCNTTRAIL1","since_version":0,"doc":{"category":"compare_other","description":"Returns the number of trailing ones in `s`.","gas":"26","fift":"SDCNTTRAIL1","fift_examples":[],"opcode":"C713","stack":"s - n"},"bytecode":{"tlb":"#C713","prefix":"C713","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"NEWC","since_version":0,"doc":{"category":"cell_build","description":"Creates a new empty _Builder_.","gas":"18","fift":"NEWC","fift_examples":[],"opcode":"C8","stack":"- b"},"bytecode":{"tlb":"#C8","prefix":"C8","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ENDC","since_version":0,"doc":{"category":"cell_build","description":"Converts a _Builder_ into an ordinary _Cell_.","gas":"518","fift":"ENDC","fift_examples":[],"opcode":"C9","stack":"b - c"},"bytecode":{"tlb":"#C9","prefix":"C9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STI","since_version":0,"doc":{"category":"cell_build","description":"Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits.","gas":"26","fift":"[cc+1] STI","fift_examples":[],"opcode":"CAcc","stack":"x b - b\'"},"bytecode":{"tlb":"#CA cc:uint8","prefix":"CA","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STU","since_version":0,"doc":{"category":"cell_build","description":"Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`.","gas":"26","fift":"[cc+1] STU","fift_examples":[],"opcode":"CBcc","stack":"x b - b\'"},"bytecode":{"tlb":"#CB cc:uint8","prefix":"CB","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREF","since_version":0,"doc":{"category":"cell_build","description":"Stores a reference to _Cell_ `c` into _Builder_ `b`.","gas":"18","fift":"STREF","fift_examples":[],"opcode":"CC","stack":"c b - b\'"},"bytecode":{"tlb":"#CC","prefix":"CC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBREFR","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `ENDC` `SWAP` `STREF`.","gas":"518","fift":"STBREFR\\nENDCST","fift_examples":[],"opcode":"CD","stack":"b b\'\' - b"},"bytecode":{"tlb":"#CD","prefix":"CD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"child","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICE","since_version":0,"doc":{"category":"cell_build","description":"Stores _Slice_ `s` into _Builder_ `b`.","gas":"18","fift":"STSLICE","fift_examples":[],"opcode":"CE","stack":"s b - b\'"},"bytecode":{"tlb":"#CE","prefix":"CE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIX","since_version":0,"doc":{"category":"cell_build","description":"Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`.","gas":"26","fift":"STIX","fift_examples":[],"opcode":"CF00","stack":"x b l - b\'"},"bytecode":{"tlb":"#CF00","prefix":"CF00","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUX","since_version":0,"doc":{"category":"cell_build","description":"Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`.","gas":"26","fift":"STUX","fift_examples":[],"opcode":"CF01","stack":"x b l - b\'"},"bytecode":{"tlb":"#CF01","prefix":"CF01","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIXR","since_version":0,"doc":{"category":"cell_build","description":"Similar to `STIX`, but with arguments in a different order.","gas":"26","fift":"STIXR","fift_examples":[],"opcode":"CF02","stack":"b x l - b\'"},"bytecode":{"tlb":"#CF02","prefix":"CF02","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUXR","since_version":0,"doc":{"category":"cell_build","description":"Similar to `STUX`, but with arguments in a different order.","gas":"26","fift":"STUXR","fift_examples":[],"opcode":"CF03","stack":"b x l - b\'"},"bytecode":{"tlb":"#CF03","prefix":"CF03","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIXQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STIX`. If there is no space in `b`, sets `b\'=b` and `f=-1`.\\nIf `x` does not fit into `l` bits, sets `b\'=b` and `f=1`.\\nIf the operation succeeds, `b\'` is the new _Builder_ and `f=0`.\\nHowever, `0 <= l <= 257`, with a range check exception if this is not so.","gas":"26","fift":"STIXQ","fift_examples":[],"opcode":"CF04","stack":"x b l - x b f or b\' 0"},"bytecode":{"tlb":"#CF04","prefix":"CF04","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]},{"value":1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUXQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STUX`.","gas":"26","fift":"STUXQ","fift_examples":[],"opcode":"CF05","stack":"x b l - x b f or b\' 0"},"bytecode":{"tlb":"#CF05","prefix":"CF05","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]},{"value":1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIXRQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STIXR`.","gas":"26","fift":"STIXRQ","fift_examples":[],"opcode":"CF06","stack":"b x l - b x f or b\' 0"},"bytecode":{"tlb":"#CF06","prefix":"CF06","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]},{"value":1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUXRQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STUXR`.","gas":"26","fift":"STUXRQ","fift_examples":[],"opcode":"CF07","stack":"b x l - b x f or b\' 0"},"bytecode":{"tlb":"#CF07","prefix":"CF07","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]},{"value":1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STI_ALT","since_version":0,"doc":{"category":"cell_build","description":"A longer version of `[cc+1] STI`.","gas":"34","fift":"[cc+1] STI_l","fift_examples":[],"opcode":"CF08cc","stack":"x b - b\'"},"bytecode":{"tlb":"#CF08 cc:uint8","prefix":"CF08","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STU_ALT","since_version":0,"doc":{"category":"cell_build","description":"A longer version of `[cc+1] STU`.","gas":"34","fift":"[cc+1] STU_l","fift_examples":[],"opcode":"CF09cc","stack":"x b - b\'"},"bytecode":{"tlb":"#CF09 cc:uint8","prefix":"CF09","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIR","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `SWAP` `[cc+1] STI`.","gas":"34","fift":"[cc+1] STIR","fift_examples":[],"opcode":"CF0Acc","stack":"b x - b\'"},"bytecode":{"tlb":"#CF0A cc:uint8","prefix":"CF0A","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUR","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `SWAP` `[cc+1] STU`.","gas":"34","fift":"[cc+1] STUR","fift_examples":[],"opcode":"CF0Bcc","stack":"b x - b\'"},"bytecode":{"tlb":"#CF0B cc:uint8","prefix":"CF0B","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STI`.","gas":"34","fift":"[cc+1] STIQ","fift_examples":[],"opcode":"CF0Ccc","stack":"x b - x b f or b\' 0"},"bytecode":{"tlb":"#CF0C cc:uint8","prefix":"CF0C","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]},{"value":1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STUQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STU`.","gas":"34","fift":"[cc+1] STUQ","fift_examples":[],"opcode":"CF0Dcc","stack":"x b - x b f or b\' 0"},"bytecode":{"tlb":"#CF0D cc:uint8","prefix":"CF0D","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]},{"value":1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STIRQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STIR`.","gas":"34","fift":"[cc+1] STIRQ","fift_examples":[],"opcode":"CF0Ecc","stack":"b x - b x f or b\' 0"},"bytecode":{"tlb":"#CF0E cc:uint8","prefix":"CF0E","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]},{"value":1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STURQ","since_version":0,"doc":{"category":"cell_build","description":"A quiet version of `STUR`.","gas":"34","fift":"[cc+1] STURQ","fift_examples":[],"opcode":"CF0Fcc","stack":"b x - b x f or b\' 0"},"bytecode":{"tlb":"#CF0F cc:uint8","prefix":"CF0F","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]},{"value":1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREF_ALT","since_version":0,"doc":{"category":"cell_build","description":"A longer version of `STREF`.","gas":"26","fift":"STREF_l","fift_examples":[],"opcode":"CF10","stack":"c b - b\'"},"bytecode":{"tlb":"#CF10","prefix":"CF10","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBREF","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `SWAP` `STBREFR`.","gas":"526","fift":"STBREF","fift_examples":[],"opcode":"CF11","stack":"b\' b - b\'\'"},"bytecode":{"tlb":"#CF11","prefix":"CF11","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"child","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICE_ALT","since_version":0,"doc":{"category":"cell_build","description":"A longer version of `STSLICE`.","gas":"26","fift":"STSLICE_l","fift_examples":[],"opcode":"CF12","stack":"s b - b\'"},"bytecode":{"tlb":"#CF12","prefix":"CF12","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STB","since_version":0,"doc":{"category":"cell_build","description":"Appends all data from _Builder_ `b\'` to _Builder_ `b`.","gas":"26","fift":"STB","fift_examples":[],"opcode":"CF13","stack":"b\' b - b\'\'"},"bytecode":{"tlb":"#CF13","prefix":"CF13","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREFR","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `SWAP` `STREF`.","gas":"26","fift":"STREFR","fift_examples":[],"opcode":"CF14","stack":"b c - b\'"},"bytecode":{"tlb":"#CF14","prefix":"CF14","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBREFR_ALT","since_version":0,"doc":{"category":"cell_build","description":"A longer encoding of `STBREFR`.","gas":"526","fift":"STBREFR_l","fift_examples":[],"opcode":"CF15","stack":"b b\' - b\'\'"},"bytecode":{"tlb":"#CF15","prefix":"CF15","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICER","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `SWAP` `STSLICE`.","gas":"26","fift":"STSLICER","fift_examples":[],"opcode":"CF16","stack":"b s - b\'"},"bytecode":{"tlb":"#CF16","prefix":"CF16","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBR","since_version":0,"doc":{"category":"cell_build","description":"Concatenates two builders.\\nEquivalent to `SWAP` `STB`.","gas":"26","fift":"STBR\\nBCONCAT","fift_examples":[],"opcode":"CF17","stack":"b b\' - b\'\'"},"bytecode":{"tlb":"#CF17","prefix":"CF17","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREFQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STREF`.","gas":"26","fift":"STREFQ","fift_examples":[],"opcode":"CF18","stack":"c b - c b -1 or b\' 0"},"bytecode":{"tlb":"#CF18","prefix":"CF18","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBREFQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STBREF`.","gas":"526","fift":"STBREFQ","fift_examples":[],"opcode":"CF19","stack":"b\' b - b\' b -1 or b\'\' 0"},"bytecode":{"tlb":"#CF19","prefix":"CF19","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICEQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STSLICE`.","gas":"26","fift":"STSLICEQ","fift_examples":[],"opcode":"CF1A","stack":"s b - s b -1 or b\' 0"},"bytecode":{"tlb":"#CF1A","prefix":"CF1A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STB`.","gas":"26","fift":"STBQ","fift_examples":[],"opcode":"CF1B","stack":"b\' b - b\' b -1 or b\'\' 0"},"bytecode":{"tlb":"#CF1B","prefix":"CF1B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREFRQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STREFR`.","gas":"26","fift":"STREFRQ","fift_examples":[],"opcode":"CF1C","stack":"b c - b c -1 or b\' 0"},"bytecode":{"tlb":"#CF1C","prefix":"CF1C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBREFRQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STBREFR`.","gas":"526","fift":"STBREFRQ","fift_examples":[],"opcode":"CF1D","stack":"b b\' - b b\' -1 or b\'\' 0"},"bytecode":{"tlb":"#CF1D","prefix":"CF1D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b2","value_types":["Builder"]},{"type":"simple","name":"b","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICERQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STSLICER`.","gas":"26","fift":"STSLICERQ","fift_examples":[],"opcode":"CF1E","stack":"b s - b s -1 or b\'\' 0"},"bytecode":{"tlb":"#CF1E","prefix":"CF1E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"s","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STBRQ","since_version":0,"doc":{"category":"cell_build","description":"Quiet version of `STBR`.","gas":"26","fift":"STBRQ\\nBCONCATQ","fift_examples":[],"opcode":"CF1F","stack":"b b\' - b b\' -1 or b\'\' 0"},"bytecode":{"tlb":"#CF1F","prefix":"CF1F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"b3","value_types":["Builder"]}]},{"value":-1,"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"b2","value_types":["Builder"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREFCONST","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `PUSHREF` `STREFR`.","gas":"26","fift":"[ref] STREFCONST","fift_examples":[],"opcode":"CF20","stack":"b - b\'"},"bytecode":{"tlb":"#CF20 c:^Cell","prefix":"CF20","operands":[{"name":"c","type":"ref","display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STREF2CONST","since_version":0,"doc":{"category":"cell_build","description":"Equivalent to `STREFCONST` `STREFCONST`.","gas":"26","fift":"[ref] [ref] STREF2CONST","fift_examples":[],"opcode":"CF21","stack":"b - b\'"},"bytecode":{"tlb":"#CF21 c1:^Cell c2:^Cell","prefix":"CF21","operands":[{"name":"c1","type":"ref","display_hints":[]},{"name":"c2","type":"ref","display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ENDXC","since_version":0,"doc":{"category":"cell_build","description":"If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell.","gas":"526","fift":"ENDXC","fift_examples":[],"opcode":"CF23","stack":"b x - c"},"bytecode":{"tlb":"#CF23","prefix":"CF23","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STILE4","since_version":0,"doc":{"category":"cell_build","description":"Stores a little-endian signed 32-bit integer.","gas":"26","fift":"STILE4","fift_examples":[],"opcode":"CF28","stack":"x b - b\'"},"bytecode":{"tlb":"#CF28","prefix":"CF28","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STULE4","since_version":0,"doc":{"category":"cell_build","description":"Stores a little-endian unsigned 32-bit integer.","gas":"26","fift":"STULE4","fift_examples":[],"opcode":"CF29","stack":"x b - b\'"},"bytecode":{"tlb":"#CF29","prefix":"CF29","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STILE8","since_version":0,"doc":{"category":"cell_build","description":"Stores a little-endian signed 64-bit integer.","gas":"26","fift":"STILE8","fift_examples":[],"opcode":"CF2A","stack":"x b - b\'"},"bytecode":{"tlb":"#CF2A","prefix":"CF2A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STULE8","since_version":0,"doc":{"category":"cell_build","description":"Stores a little-endian unsigned 64-bit integer.","gas":"26","fift":"STULE8","fift_examples":[],"opcode":"CF2B","stack":"x b - b\'"},"bytecode":{"tlb":"#CF2B","prefix":"CF2B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BDEPTH","since_version":0,"doc":{"category":"cell_build","description":"Returns the depth of _Builder_ `b`. If no cell references are stored in `b`, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `b`.","gas":"26","fift":"BDEPTH","fift_examples":[],"opcode":"CF30","stack":"b - x"},"bytecode":{"tlb":"#CF30","prefix":"CF30","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BBITS","since_version":0,"doc":{"category":"cell_build","description":"Returns the number of data bits already stored in _Builder_ `b`.","gas":"26","fift":"BBITS","fift_examples":[],"opcode":"CF31","stack":"b - x"},"bytecode":{"tlb":"#CF31","prefix":"CF31","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BREFS","since_version":0,"doc":{"category":"cell_build","description":"Returns the number of cell references already stored in `b`.","gas":"26","fift":"BREFS","fift_examples":[],"opcode":"CF32","stack":"b - y"},"bytecode":{"tlb":"#CF32","prefix":"CF32","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BBITREFS","since_version":0,"doc":{"category":"cell_build","description":"Returns the numbers of both data bits and cell references in `b`.","gas":"26","fift":"BBITREFS","fift_examples":[],"opcode":"CF33","stack":"b - x y"},"bytecode":{"tlb":"#CF33","prefix":"CF33","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BREMBITS","since_version":0,"doc":{"category":"cell_build","description":"Returns the number of data bits that can still be stored in `b`.","gas":"26","fift":"BREMBITS","fift_examples":[],"opcode":"CF35","stack":"b - x\'"},"bytecode":{"tlb":"#CF35","prefix":"CF35","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BREMREFS","since_version":0,"doc":{"category":"cell_build","description":"Returns the number of references that can still be stored in `b`.","gas":"26","fift":"BREMREFS","fift_examples":[],"opcode":"CF36","stack":"b - y\'"},"bytecode":{"tlb":"#CF36","prefix":"CF36","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"y2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BREMBITREFS","since_version":0,"doc":{"category":"cell_build","description":"Returns the numbers of both data bits and references that can still be stored in `b`.","gas":"26","fift":"BREMBITREFS","fift_examples":[],"opcode":"CF37","stack":"b - x\' y\'"},"bytecode":{"tlb":"#CF37","prefix":"CF37","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x2","value_types":["Integer"]},{"type":"simple","name":"y2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITS","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`.","gas":"34/84","fift":"[cc+1] BCHKBITS#","fift_examples":[],"opcode":"CF38cc","stack":"b -"},"bytecode":{"tlb":"#CF38 cc:uint8","prefix":"CF38","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITS_VAR","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`. If there is no space for `x` more bits in `b`, or if `x` is not within the range `0...1023`, throws an exception.","gas":"26/76","fift":"BCHKBITS","fift_examples":[],"opcode":"CF39","stack":"b x - "},"bytecode":{"tlb":"#CF39","prefix":"CF39","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKREFS","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `y` references can be stored into `b`, `0 <= y <= 7`.","gas":"26/76","fift":"BCHKREFS","fift_examples":[],"opcode":"CF3A","stack":"b y - "},"bytecode":{"tlb":"#CF3A","prefix":"CF3A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITREFS","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`.","gas":"26/76","fift":"BCHKBITREFS","fift_examples":[],"opcode":"CF3B","stack":"b x y - "},"bytecode":{"tlb":"#CF3B","prefix":"CF3B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITSQ","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`.","gas":"34","fift":"[cc+1] BCHKBITSQ#","fift_examples":[],"opcode":"CF3Ccc","stack":"b - ?"},"bytecode":{"tlb":"#CF3C cc:uint8","prefix":"CF3C","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITSQ_VAR","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`.","gas":"26","fift":"BCHKBITSQ","fift_examples":[],"opcode":"CF3D","stack":"b x - ?"},"bytecode":{"tlb":"#CF3D","prefix":"CF3D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKREFSQ","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `y` references can be stored into `b`, `0 <= y <= 7`.","gas":"26","fift":"BCHKREFSQ","fift_examples":[],"opcode":"CF3E","stack":"b y - ?"},"bytecode":{"tlb":"#CF3E","prefix":"CF3E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BCHKBITREFSQ","since_version":0,"doc":{"category":"cell_build","description":"Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`.","gas":"26","fift":"BCHKBITREFSQ","fift_examples":[],"opcode":"CF3F","stack":"b x y - ?"},"bytecode":{"tlb":"#CF3F","prefix":"CF3F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STZEROES","since_version":0,"doc":{"category":"cell_build","description":"Stores `n` binary zeroes into _Builder_ `b`.","gas":"26","fift":"STZEROES","fift_examples":[],"opcode":"CF40","stack":"b n - b\'"},"bytecode":{"tlb":"#CF40","prefix":"CF40","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STONES","since_version":0,"doc":{"category":"cell_build","description":"Stores `n` binary ones into _Builder_ `b`.","gas":"26","fift":"STONES","fift_examples":[],"opcode":"CF41","stack":"b n - b\'"},"bytecode":{"tlb":"#CF41","prefix":"CF41","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSAME","since_version":0,"doc":{"category":"cell_build","description":"Stores `n` binary `x`es (`0 <= x <= 1`) into _Builder_ `b`.","gas":"26","fift":"STSAME","fift_examples":[],"opcode":"CF42","stack":"b n x - b\'"},"bytecode":{"tlb":"#CF42","prefix":"CF42","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STSLICECONST","since_version":0,"doc":{"category":"cell_build","description":"Stores a constant subslice `sss`.\\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big.","gas":"24","fift":"[slice] STSLICECONST","fift_examples":[],"opcode":"CFC0_xysss","stack":"b - b\'"},"bytecode":{"tlb":"#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)","prefix":"CFC0_","operands":[{"name":"s","type":"subslice","bits_length_var_size":3,"refs_length_var_size":2,"bits_padding":2,"refs_add":0,"completion_tag":true,"max_bits":57,"min_bits":0,"max_refs":3,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CTOS","since_version":0,"doc":{"category":"cell_parse","description":"Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c\'`, converted into a _Slice_ afterwards.","gas":"118/43","fift":"CTOS","fift_examples":[],"opcode":"D0","stack":"c - s"},"bytecode":{"tlb":"#D0","prefix":"D0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ENDS","since_version":0,"doc":{"category":"cell_parse","description":"Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty.","gas":"18/68","fift":"ENDS","fift_examples":[],"opcode":"D1","stack":"s - "},"bytecode":{"tlb":"#D1","prefix":"D1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDI","since_version":0,"doc":{"category":"cell_parse","description":"Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s\'`.","gas":"26","fift":"[cc+1] LDI","fift_examples":[],"opcode":"D2cc","stack":"s - x s\'"},"bytecode":{"tlb":"#D2 cc:uint8","prefix":"D2","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDU","since_version":0,"doc":{"category":"cell_parse","description":"Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`.","gas":"26","fift":"[cc+1] LDU","fift_examples":[],"opcode":"D3cc","stack":"s - x s\'"},"bytecode":{"tlb":"#D3 cc:uint8","prefix":"D3","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDREF","since_version":0,"doc":{"category":"cell_parse","description":"Loads a cell reference `c` from `s`.","gas":"18","fift":"LDREF","fift_examples":[],"opcode":"D4","stack":"s - c s\'"},"bytecode":{"tlb":"#D4","prefix":"D4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDREFRTOS","since_version":0,"doc":{"category":"cell_parse","description":"Equivalent to `LDREF` `SWAP` `CTOS`.","gas":"118/43","fift":"LDREFRTOS","fift_examples":[],"opcode":"D5","stack":"s - s\' s\'\'"},"bytecode":{"tlb":"#D5","prefix":"D5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSLICE","since_version":0,"doc":{"category":"cell_parse","description":"Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s\'\'`.","gas":"26","fift":"[cc+1] LDSLICE","fift_examples":[],"opcode":"D6cc","stack":"s - s\'\' s\'"},"bytecode":{"tlb":"#D6 cc:uint8","prefix":"D6","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDIX","since_version":0,"doc":{"category":"cell_parse","description":"Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s\'`.","gas":"26","fift":"LDIX","fift_examples":[],"opcode":"D700","stack":"s l - x s\'"},"bytecode":{"tlb":"#D700","prefix":"D700","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDUX","since_version":0,"doc":{"category":"cell_parse","description":"Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`.","gas":"26","fift":"LDUX","fift_examples":[],"opcode":"D701","stack":"s l - x s\'"},"bytecode":{"tlb":"#D701","prefix":"D701","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDIX","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a signed `l`-bit integer from _Slice_ `s`, for `0 <= l <= 257`.","gas":"26","fift":"PLDIX","fift_examples":[],"opcode":"D702","stack":"s l - x"},"bytecode":{"tlb":"#D702","prefix":"D702","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDUX","since_version":0,"doc":{"category":"cell_parse","description":"Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`.","gas":"26","fift":"PLDUX","fift_examples":[],"opcode":"D703","stack":"s l - x"},"bytecode":{"tlb":"#D703","prefix":"D703","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDIXQ","since_version":0,"doc":{"category":"cell_parse","description":"Quiet version of `LDIX`: loads a signed `l`-bit integer from `s` similarly to `LDIX`, but returns a success flag, equal to `-1` on success or to `0` on failure (if `s` does not have `l` bits), instead of throwing a cell underflow exception.","gas":"26","fift":"LDIXQ","fift_examples":[],"opcode":"D704","stack":"s l - x s\' -1 or s 0"},"bytecode":{"tlb":"#D704","prefix":"D704","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDUXQ","since_version":0,"doc":{"category":"cell_parse","description":"Quiet version of `LDUX`.","gas":"26","fift":"LDUXQ","fift_examples":[],"opcode":"D705","stack":"s l - x s\' -1 or s 0"},"bytecode":{"tlb":"#D705","prefix":"D705","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDIXQ","since_version":0,"doc":{"category":"cell_parse","description":"Quiet version of `PLDIX`.","gas":"26","fift":"PLDIXQ","fift_examples":[],"opcode":"D706","stack":"s l - x -1 or 0"},"bytecode":{"tlb":"#D706","prefix":"D706","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDUXQ","since_version":0,"doc":{"category":"cell_parse","description":"Quiet version of `PLDUX`.","gas":"26","fift":"PLDUXQ","fift_examples":[],"opcode":"D707","stack":"s l - x -1 or 0"},"bytecode":{"tlb":"#D707","prefix":"D707","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDI_ALT","since_version":0,"doc":{"category":"cell_parse","description":"A longer encoding for `LDI`.","gas":"34","fift":"[cc+1] LDI_l","fift_examples":[],"opcode":"D708cc","stack":"s - x s\'"},"bytecode":{"tlb":"#D708 cc:uint8","prefix":"D708","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDU_ALT","since_version":0,"doc":{"category":"cell_parse","description":"A longer encoding for `LDU`.","gas":"34","fift":"[cc+1] LDU_l","fift_examples":[],"opcode":"D709cc","stack":"s - x s\'"},"bytecode":{"tlb":"#D709 cc:uint8","prefix":"D709","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDI","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a signed `cc+1`-bit integer from _Slice_ `s`.","gas":"34","fift":"[cc+1] PLDI","fift_examples":[],"opcode":"D70Acc","stack":"s - x"},"bytecode":{"tlb":"#D70A cc:uint8","prefix":"D70A","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDU","since_version":0,"doc":{"category":"cell_parse","description":"Preloads an unsigned `cc+1`-bit integer from `s`.","gas":"34","fift":"[cc+1] PLDU","fift_examples":[],"opcode":"D70Bcc","stack":"s - x"},"bytecode":{"tlb":"#D70B cc:uint8","prefix":"D70B","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDIQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `LDI`.","gas":"34","fift":"[cc+1] LDIQ","fift_examples":[],"opcode":"D70Ccc","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D70C cc:uint8","prefix":"D70C","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDUQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `LDU`.","gas":"34","fift":"[cc+1] LDUQ","fift_examples":[],"opcode":"D70Dcc","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D70D cc:uint8","prefix":"D70D","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDIQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `PLDI`.","gas":"34","fift":"[cc+1] PLDIQ","fift_examples":[],"opcode":"D70Ecc","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D70E cc:uint8","prefix":"D70E","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDUQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `PLDU`.","gas":"34","fift":"[cc+1] PLDUQ","fift_examples":[],"opcode":"D70Fcc","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D70F cc:uint8","prefix":"D70F","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDUZ","since_version":0,"doc":{"category":"cell_parse","description":"Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions.","gas":"26","fift":"[32(c+1)] PLDUZ","fift_examples":[],"opcode":"D714_c","stack":"s - s x"},"bytecode":{"tlb":"#D714_ c:uint3","prefix":"D714_","operands":[{"name":"c","type":"uint","size":3,"min_value":0,"max_value":7,"display_hints":[{"type":"plduz"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSLICEX","since_version":0,"doc":{"category":"cell_parse","description":"Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s\'\'`, returning the remainder of `s` as `s\'`.","gas":"26","fift":"LDSLICEX","fift_examples":[],"opcode":"D718","stack":"s l - s\'\' s\'"},"bytecode":{"tlb":"#D718","prefix":"D718","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDSLICEX","since_version":0,"doc":{"category":"cell_parse","description":"Returns the first `0 <= l <= 1023` bits of `s` as `s\'\'`.","gas":"26","fift":"PLDSLICEX","fift_examples":[],"opcode":"D719","stack":"s l - s\'\'"},"bytecode":{"tlb":"#D719","prefix":"D719","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSLICEXQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `LDSLICEX`.","gas":"26","fift":"LDSLICEXQ","fift_examples":[],"opcode":"D71A","stack":"s l - s\'\' s\' -1 or s 0"},"bytecode":{"tlb":"#D71A","prefix":"D71A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s3","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDSLICEXQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `LDSLICEXQ`.","gas":"26","fift":"PLDSLICEXQ","fift_examples":[],"opcode":"D71B","stack":"s l - s\' -1 or 0"},"bytecode":{"tlb":"#D71B","prefix":"D71B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSLICE_ALT","since_version":0,"doc":{"category":"cell_parse","description":"A longer encoding for `LDSLICE`.","gas":"34","fift":"[cc+1] LDSLICE_l","fift_examples":[],"opcode":"D71Ccc","stack":"s - s\'\' s\'"},"bytecode":{"tlb":"#D71C cc:uint8","prefix":"D71C","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDSLICE","since_version":0,"doc":{"category":"cell_parse","description":"Returns the first `0 < cc+1 <= 256` bits of `s` as `s\'\'`.","gas":"34","fift":"[cc+1] PLDSLICE","fift_examples":[],"opcode":"D71Dcc","stack":"s - s\'\'"},"bytecode":{"tlb":"#D71D cc:uint8","prefix":"D71D","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSLICEQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `LDSLICE`.","gas":"34","fift":"[cc+1] LDSLICEQ","fift_examples":[],"opcode":"D71Ecc","stack":"s - s\'\' s\' -1 or s 0"},"bytecode":{"tlb":"#D71E cc:uint8","prefix":"D71E","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s3","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDSLICEQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `PLDSLICE`.","gas":"34","fift":"[cc+1] PLDSLICEQ","fift_examples":[],"opcode":"D71Fcc","stack":"s - s\'\' -1 or 0"},"bytecode":{"tlb":"#D71F cc:uint8","prefix":"D71F","operands":[{"name":"c","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[{"type":"add","value":1}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCUTFIRST","since_version":0,"doc":{"category":"cell_parse","description":"Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`.","gas":"26","fift":"SDCUTFIRST","fift_examples":[],"opcode":"D720","stack":"s l - s\'"},"bytecode":{"tlb":"#D720","prefix":"D720","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDSKIPFIRST","since_version":0,"doc":{"category":"cell_parse","description":"Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`.","gas":"26","fift":"SDSKIPFIRST","fift_examples":[],"opcode":"D721","stack":"s l - s\'"},"bytecode":{"tlb":"#D721","prefix":"D721","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDCUTLAST","since_version":0,"doc":{"category":"cell_parse","description":"Returns the last `0 <= l <= 1023` bits of `s`.","gas":"26","fift":"SDCUTLAST","fift_examples":[],"opcode":"D722","stack":"s l - s\'"},"bytecode":{"tlb":"#D722","prefix":"D722","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDSKIPLAST","since_version":0,"doc":{"category":"cell_parse","description":"Returns all but the last `0 <= l <= 1023` bits of `s`.","gas":"26","fift":"SDSKIPLAST","fift_examples":[],"opcode":"D723","stack":"s l - s\'"},"bytecode":{"tlb":"#D723","prefix":"D723","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDSUBSTR","since_version":0,"doc":{"category":"cell_parse","description":"Returns `0 <= l\' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`.","gas":"26","fift":"SDSUBSTR","fift_examples":[],"opcode":"D724","stack":"s l l\' - s\'"},"bytecode":{"tlb":"#D724","prefix":"D724","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"l2","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDBEGINSX","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether `s` begins with (the data bits of) `s\'`, and removes `s\'` from `s` on success. On failure throws a cell deserialization exception. Primitive `SDPFXREV` can be considered a quiet version of `SDBEGINSX`.","gas":"26","fift":"SDBEGINSX","fift_examples":[],"opcode":"D726","stack":"s s\' - s\'\'"},"bytecode":{"tlb":"#D726","prefix":"D726","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDBEGINSXQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `SDBEGINSX`.","gas":"26","fift":"SDBEGINSXQ","fift_examples":[],"opcode":"D727","stack":"s s\' - s\'\' -1 or s 0"},"bytecode":{"tlb":"#D727","prefix":"D727","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDBEGINS","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success.","gas":"31","fift":"[slice] SDBEGINS","fift_examples":[],"opcode":"D72A_xsss","stack":"s - s\'\'"},"bytecode":{"tlb":"#D72A_ x:(## 7) sss:((8 * x + 3) * Bit)","prefix":"D72A_","operands":[{"name":"s","type":"subslice","bits_length_var_size":7,"bits_padding":3,"completion_tag":true,"max_bits":1018,"min_bits":0,"max_refs":0,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDBEGINSQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `SDBEGINS`.","gas":"31","fift":"[slice] SDBEGINSQ","fift_examples":[],"opcode":"D72E_xsss","stack":"s - s\'\' -1 or s 0"},"bytecode":{"tlb":"#D72E_ x:(## 7) sss:((8 * x + 3) * Bit)","prefix":"D72E_","operands":[{"name":"s","type":"subslice","bits_length_var_size":7,"bits_padding":3,"completion_tag":true,"max_bits":1018,"min_bits":0,"max_refs":0,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCUTFIRST","since_version":0,"doc":{"category":"cell_parse","description":"Returns the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references of `s`.","gas":"26","fift":"SCUTFIRST","fift_examples":[],"opcode":"D730","stack":"s l r - s\'"},"bytecode":{"tlb":"#D730","prefix":"D730","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SSKIPFIRST","since_version":0,"doc":{"category":"cell_parse","description":"Returns all but the first `l` bits of `s` and `r` references of `s`.","gas":"26","fift":"SSKIPFIRST","fift_examples":[],"opcode":"D731","stack":"s l r - s\'"},"bytecode":{"tlb":"#D731","prefix":"D731","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCUTLAST","since_version":0,"doc":{"category":"cell_parse","description":"Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`.","gas":"26","fift":"SCUTLAST","fift_examples":[],"opcode":"D732","stack":"s l r - s\'"},"bytecode":{"tlb":"#D732","prefix":"D732","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SSKIPLAST","since_version":0,"doc":{"category":"cell_parse","description":"Returns all but the last `l` bits of `s` and `r` references of `s`.","gas":"26","fift":"SSKIPLAST","fift_examples":[],"opcode":"D733","stack":"s l r - s\'"},"bytecode":{"tlb":"#D733","prefix":"D733","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBSLICE","since_version":0,"doc":{"category":"cell_parse","description":"Returns `0 <= l\' <= 1023` bits and `0 <= r\' <= 4` references from _Slice_ `s`, after skipping the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references.","gas":"26","fift":"SUBSLICE","fift_examples":[],"opcode":"D734","stack":"s l r l\' r\' - s\'"},"bytecode":{"tlb":"#D734","prefix":"D734","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]},{"type":"simple","name":"l2","value_types":["Integer"]},{"type":"simple","name":"r2","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SPLIT","since_version":0,"doc":{"category":"cell_parse","description":"Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s\'`, returning the remainder of `s` as `s\'\'`.","gas":"26","fift":"SPLIT","fift_examples":[],"opcode":"D736","stack":"s l r - s\' s\'\'"},"bytecode":{"tlb":"#D736","prefix":"D736","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SPLITQ","since_version":0,"doc":{"category":"cell_parse","description":"A quiet version of `SPLIT`.","gas":"26","fift":"SPLITQ","fift_examples":[],"opcode":"D737","stack":"s l r - s\' s\'\' -1 or s 0"},"bytecode":{"tlb":"#D737","prefix":"D737","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XCTOS","since_version":0,"doc":{"category":"cell_parse","description":"Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`.","gas":"","fift":"XCTOS","fift_examples":[],"opcode":"D739","stack":"c - s ?"},"bytecode":{"tlb":"#D739","prefix":"D739","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"flag","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XLOAD","since_version":0,"doc":{"category":"cell_parse","description":"Loads an exotic cell `c` and returns an ordinary cell `c\'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception.","gas":"","fift":"XLOAD","fift_examples":[],"opcode":"D73A","stack":"c - c\'"},"bytecode":{"tlb":"#D73A","prefix":"D73A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"XLOADQ","since_version":0,"doc":{"category":"cell_parse","description":"Loads an exotic cell `c` and returns an ordinary cell `c\'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, returns 0.","gas":"","fift":"XLOADQ","fift_examples":[],"opcode":"D73B","stack":"c - c\' -1 or c 0"},"bytecode":{"tlb":"#D73B","prefix":"D73B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"c","value_types":["Cell"]}]},{"value":-1,"stack":[{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKBITS","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `l` data bits in _Slice_ `s`. If this is not the case, throws a cell deserialisation (i.e., cell underflow) exception.","gas":"26/76","fift":"SCHKBITS","fift_examples":[],"opcode":"D741","stack":"s l - "},"bytecode":{"tlb":"#D741","prefix":"D741","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKREFS","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `r` references in _Slice_ `s`.","gas":"26/76","fift":"SCHKREFS","fift_examples":[],"opcode":"D742","stack":"s r - "},"bytecode":{"tlb":"#D742","prefix":"D742","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKBITREFS","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`.","gas":"26/76","fift":"SCHKBITREFS","fift_examples":[],"opcode":"D743","stack":"s l r - "},"bytecode":{"tlb":"#D743","prefix":"D743","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKBITSQ","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `l` data bits in _Slice_ `s`.","gas":"26","fift":"SCHKBITSQ","fift_examples":[],"opcode":"D745","stack":"s l - ?"},"bytecode":{"tlb":"#D745","prefix":"D745","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKREFSQ","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `r` references in _Slice_ `s`.","gas":"26","fift":"SCHKREFSQ","fift_examples":[],"opcode":"D746","stack":"s r - ?"},"bytecode":{"tlb":"#D746","prefix":"D746","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SCHKBITREFSQ","since_version":0,"doc":{"category":"cell_parse","description":"Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`.","gas":"26","fift":"SCHKBITREFSQ","fift_examples":[],"opcode":"D747","stack":"s l r - ?"},"bytecode":{"tlb":"#D747","prefix":"D747","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDREFVAR","since_version":0,"doc":{"category":"cell_parse","description":"Returns the `n`-th cell reference of _Slice_ `s` for `0 <= n <= 3`.","gas":"26","fift":"PLDREFVAR","fift_examples":[],"opcode":"D748","stack":"s n - c"},"bytecode":{"tlb":"#D748","prefix":"D748","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SBITS","since_version":0,"doc":{"category":"cell_parse","description":"Returns the number of data bits in _Slice_ `s`.","gas":"26","fift":"SBITS","fift_examples":[],"opcode":"D749","stack":"s - l"},"bytecode":{"tlb":"#D749","prefix":"D749","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"l","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SREFS","since_version":0,"doc":{"category":"cell_parse","description":"Returns the number of references in _Slice_ `s`.","gas":"26","fift":"SREFS","fift_examples":[],"opcode":"D74A","stack":"s - r"},"bytecode":{"tlb":"#D74A","prefix":"D74A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SBITREFS","since_version":0,"doc":{"category":"cell_parse","description":"Returns both the number of data bits and the number of references in `s`.","gas":"26","fift":"SBITREFS","fift_examples":[],"opcode":"D74B","stack":"s - l r"},"bytecode":{"tlb":"#D74B","prefix":"D74B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDREFIDX","since_version":0,"doc":{"category":"cell_parse","description":"Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`.","gas":"26","fift":"[n] PLDREFIDX","fift_examples":[],"opcode":"D74E_n","stack":"s - c"},"bytecode":{"tlb":"#D74E_ n:uint2","prefix":"D74E_","operands":[{"name":"n","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDILE4","since_version":0,"doc":{"category":"cell_parse","description":"Loads a little-endian signed 32-bit integer.","gas":"26","fift":"LDILE4","fift_examples":[],"opcode":"D750","stack":"s - x s\'"},"bytecode":{"tlb":"#D750","prefix":"D750","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDULE4","since_version":0,"doc":{"category":"cell_parse","description":"Loads a little-endian unsigned 32-bit integer.","gas":"26","fift":"LDULE4","fift_examples":[],"opcode":"D751","stack":"s - x s\'"},"bytecode":{"tlb":"#D751","prefix":"D751","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDILE8","since_version":0,"doc":{"category":"cell_parse","description":"Loads a little-endian signed 64-bit integer.","gas":"26","fift":"LDILE8","fift_examples":[],"opcode":"D752","stack":"s - x s\'"},"bytecode":{"tlb":"#D752","prefix":"D752","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDULE8","since_version":0,"doc":{"category":"cell_parse","description":"Loads a little-endian unsigned 64-bit integer.","gas":"26","fift":"LDULE8","fift_examples":[],"opcode":"D753","stack":"s - x s\'"},"bytecode":{"tlb":"#D753","prefix":"D753","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDILE4","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a little-endian signed 32-bit integer.","gas":"26","fift":"PLDILE4","fift_examples":[],"opcode":"D754","stack":"s - x"},"bytecode":{"tlb":"#D754","prefix":"D754","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDULE4","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a little-endian unsigned 32-bit integer.","gas":"26","fift":"PLDULE4","fift_examples":[],"opcode":"D755","stack":"s - x"},"bytecode":{"tlb":"#D755","prefix":"D755","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDILE8","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a little-endian signed 64-bit integer.","gas":"26","fift":"PLDILE8","fift_examples":[],"opcode":"D756","stack":"s - x"},"bytecode":{"tlb":"#D756","prefix":"D756","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDULE8","since_version":0,"doc":{"category":"cell_parse","description":"Preloads a little-endian unsigned 64-bit integer.","gas":"26","fift":"PLDULE8","fift_examples":[],"opcode":"D757","stack":"s - x"},"bytecode":{"tlb":"#D757","prefix":"D757","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDILE4Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly loads a little-endian signed 32-bit integer.","gas":"26","fift":"LDILE4Q","fift_examples":[],"opcode":"D758","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D758","prefix":"D758","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDULE4Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly loads a little-endian unsigned 32-bit integer.","gas":"26","fift":"LDULE4Q","fift_examples":[],"opcode":"D759","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D759","prefix":"D759","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDILE8Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly loads a little-endian signed 64-bit integer.","gas":"26","fift":"LDILE8Q","fift_examples":[],"opcode":"D75A","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D75A","prefix":"D75A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDULE8Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly loads a little-endian unsigned 64-bit integer.","gas":"26","fift":"LDULE8Q","fift_examples":[],"opcode":"D75B","stack":"s - x s\' -1 or s 0"},"bytecode":{"tlb":"#D75B","prefix":"D75B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDILE4Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly preloads a little-endian signed 32-bit integer.","gas":"26","fift":"PLDILE4Q","fift_examples":[],"opcode":"D75C","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D75C","prefix":"D75C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDULE4Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly preloads a little-endian unsigned 32-bit integer.","gas":"26","fift":"PLDULE4Q","fift_examples":[],"opcode":"D75D","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D75D","prefix":"D75D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDILE8Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly preloads a little-endian signed 64-bit integer.","gas":"26","fift":"PLDILE8Q","fift_examples":[],"opcode":"D75E","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D75E","prefix":"D75E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDULE8Q","since_version":0,"doc":{"category":"cell_parse","description":"Quietly preloads a little-endian unsigned 64-bit integer.","gas":"26","fift":"PLDULE8Q","fift_examples":[],"opcode":"D75F","stack":"s - x -1 or 0"},"bytecode":{"tlb":"#D75F","prefix":"D75F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDZEROES","since_version":0,"doc":{"category":"cell_parse","description":"Returns the count `n` of leading zero bits in `s`, and removes these bits from `s`.","gas":"26","fift":"LDZEROES","fift_examples":[],"opcode":"D760","stack":"s - n s\'"},"bytecode":{"tlb":"#D760","prefix":"D760","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDONES","since_version":0,"doc":{"category":"cell_parse","description":"Returns the count `n` of leading one bits in `s`, and removes these bits from `s`.","gas":"26","fift":"LDONES","fift_examples":[],"opcode":"D761","stack":"s - n s\'"},"bytecode":{"tlb":"#D761","prefix":"D761","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDSAME","since_version":0,"doc":{"category":"cell_parse","description":"Returns the count `n` of leading bits equal to `0 <= x <= 1` in `s`, and removes these bits from `s`.","gas":"26","fift":"LDSAME","fift_examples":[],"opcode":"D762","stack":"s x - n s\'"},"bytecode":{"tlb":"#D762","prefix":"D762","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDEPTH","since_version":0,"doc":{"category":"cell_parse","description":"Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`.","gas":"26","fift":"SDEPTH","fift_examples":[],"opcode":"D764","stack":"s - x"},"bytecode":{"tlb":"#D764","prefix":"D764","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CDEPTH","since_version":0,"doc":{"category":"cell_parse","description":"Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero.","gas":"26","fift":"CDEPTH","fift_examples":[],"opcode":"D765","stack":"c - x"},"bytecode":{"tlb":"#D765","prefix":"D765","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CLEVEL","since_version":6,"doc":{"category":"cell_parse","description":"Returns level of the cell.","gas":"26","fift":"CLEVEL","fift_examples":[],"opcode":"D766","stack":"cell - level"},"bytecode":{"tlb":"#D766","prefix":"D766","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"level","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CLEVELMASK","since_version":6,"doc":{"category":"cell_parse","description":"Returns level mask of the cell.","gas":"26","fift":"CLEVELMASK","fift_examples":[],"opcode":"D767","stack":"cell - level_mask"},"bytecode":{"tlb":"#D767","prefix":"D767","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"level_mask","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHASHI","since_version":6,"doc":{"category":"cell_parse","description":"Returns `i`th hash of the cell.","gas":"26","fift":"[i] CHASHI","fift_examples":[],"opcode":"D76A_","stack":"cell - hash"},"bytecode":{"tlb":"#D76A_ i:uint2","prefix":"D76A_","operands":[{"name":"n","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"hash","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CDEPTHI","since_version":6,"doc":{"category":"cell_parse","description":"Returns `i`th depth of the cell.","gas":"26","fift":"[i] CDEPTHI","fift_examples":[],"opcode":"D76E_","stack":"cell - depth"},"bytecode":{"tlb":"#D76E_ i:uint2","prefix":"D76E_","operands":[{"name":"n","type":"uint","size":2,"min_value":0,"max_value":3,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"depth","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHASHIX","since_version":6,"doc":{"category":"cell_parse","description":"Returns `i`th hash of the cell.","gas":"26","fift":"CHASHIX","fift_examples":[],"opcode":"D770","stack":"cell i - hash"},"bytecode":{"tlb":"#D770","prefix":"D770","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"hash","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CDEPTHIX","since_version":6,"doc":{"category":"cell_parse","description":"Returns `i`th depth of the cell.","gas":"26","fift":"CDEPTHIX","fift_examples":[],"opcode":"D771","stack":"cell i - depth"},"bytecode":{"tlb":"#D771","prefix":"D771","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cell","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"depth","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"EXECUTE","since_version":0,"doc":{"category":"cont_basic","description":"_Calls_, or _executes_, continuation `c`.","gas":"18","fift":"EXECUTE\\nCALLX","fift_examples":[],"opcode":"D8","stack":"c - "},"bytecode":{"tlb":"#D8","prefix":"D8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"JMPX","since_version":0,"doc":{"category":"cont_basic","description":"_Jumps_, or transfers control, to continuation `c`.\\nThe remainder of the previous current continuation `cc` is discarded.","gas":"18","fift":"JMPX","fift_examples":[],"opcode":"D9","stack":"c - "},"bytecode":{"tlb":"#D9","prefix":"D9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"CALLXARGS","since_version":0,"doc":{"category":"cont_basic","description":"_Calls_ continuation `c` with `p` parameters and expecting `r` return values\\n`0 <= p <= 15`, `0 <= r <= 15`","gas":"26","fift":"[p] [r] CALLXARGS","fift_examples":[],"opcode":"DApr","stack":"c - "},"bytecode":{"tlb":"#DA p:uint4 r:uint4","prefix":"DA","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"CALLXARGS_VAR","since_version":0,"doc":{"category":"cont_basic","description":"_Calls_ continuation `c` with `0 <= p <= 15` parameters, expecting an arbitrary number of return values.","gas":"26","fift":"[p] -1 CALLXARGS","fift_examples":[],"opcode":"DB0p","stack":"c - "},"bytecode":{"tlb":"#DB0 p:uint4","prefix":"DB0","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"JMPXARGS","since_version":0,"doc":{"category":"cont_basic","description":"_Jumps_ to continuation `c`, passing only the top `0 <= p <= 15` values from the current stack to it (the remainder of the current stack is discarded).","gas":"26","fift":"[p] JMPXARGS","fift_examples":[],"opcode":"DB1p","stack":"c - "},"bytecode":{"tlb":"#DB1 p:uint4","prefix":"DB1","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"RETARGS","since_version":0,"doc":{"category":"cont_basic","description":"_Returns_ to `c0`, with `0 <= r <= 15` return values taken from the current stack.","gas":"26","fift":"[r] RETARGS","fift_examples":[],"opcode":"DB2r","stack":""},"bytecode":{"tlb":"#DB2 r:uint4","prefix":"DB2","operands":[{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0}],"nobranch":false}},{"mnemonic":"RET","since_version":0,"doc":{"category":"cont_basic","description":"_Returns_ to the continuation at `c0`. The remainder of the current continuation `cc` is discarded.\\nApproximately equivalent to `c0 PUSHCTR` `JMPX`.","gas":"26","fift":"RET\\nRETTRUE","fift_examples":[],"opcode":"DB30","stack":""},"bytecode":{"tlb":"#DB30","prefix":"DB30","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0}],"nobranch":false}},{"mnemonic":"RETALT","since_version":0,"doc":{"category":"cont_basic","description":"_Returns_ to the continuation at `c1`.\\nApproximately equivalent to `c1 PUSHCTR` `JMPX`.","gas":"26","fift":"RETALT\\nRETFALSE","fift_examples":[],"opcode":"DB31","stack":""},"bytecode":{"tlb":"#DB31","prefix":"DB31","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":1}],"nobranch":false}},{"mnemonic":"BRANCH","since_version":0,"doc":{"category":"cont_basic","description":"Performs `RETTRUE` if integer `f!=0`, or `RETFALSE` if `f=0`.","gas":"26","fift":"BRANCH\\nRETBOOL","fift_examples":[],"opcode":"DB32","stack":"f - "},"bytecode":{"tlb":"#DB32","prefix":"DB32","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0},{"type":"register","index":1}],"nobranch":false}},{"mnemonic":"CALLCC","since_version":0,"doc":{"category":"cont_basic","description":"_Call with current continuation_, transfers control to `c`, pushing the old value of `cc` into `c`\'s stack (instead of discarding it or writing it into new `c0`).","gas":"26","fift":"CALLCC","fift_examples":[],"opcode":"DB34","stack":"c - "},"bytecode":{"tlb":"#DB34","prefix":"DB34","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"JMPXDATA","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`.","gas":"26","fift":"JMPXDATA","fift_examples":[],"opcode":"DB35","stack":"c - "},"bytecode":{"tlb":"#DB35","prefix":"DB35","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"CALLCCARGS","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `CALLXARGS`, but pushes the old value of `cc` (along with the top `0 <= p <= 15` values from the original stack) into the stack of newly-invoked continuation `c`, setting `cc.nargs` to `-1 <= r <= 14`.","gas":"34","fift":"[p] [r] CALLCCARGS","fift_examples":[],"opcode":"DB36pr","stack":"c - "},"bytecode":{"tlb":"#DB36 p:uint4 r:uint4","prefix":"DB36","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"optional_nargs"}]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"CALLXVARARGS","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `CALLXARGS`, but takes `-1 <= p,r <= 254` from the stack. The next three operations also take `p` and `r` from the stack, both in the range `-1...254`.","gas":"26","fift":"CALLXVARARGS","fift_examples":[],"opcode":"DB38","stack":"c p r - "},"bytecode":{"tlb":"#DB38","prefix":"DB38","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"p","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"RETVARARGS","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `RETARGS`.","gas":"26","fift":"RETVARARGS","fift_examples":[],"opcode":"DB39","stack":"p r - "},"bytecode":{"tlb":"#DB39","prefix":"DB39","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"p","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"JMPXVARARGS","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `JMPXARGS`.","gas":"26","fift":"JMPXVARARGS","fift_examples":[],"opcode":"DB3A","stack":"c p r - "},"bytecode":{"tlb":"#DB3A","prefix":"DB3A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"p","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"CALLCCVARARGS","since_version":0,"doc":{"category":"cont_basic","description":"Similar to `CALLCCARGS`.","gas":"26","fift":"CALLCCVARARGS","fift_examples":[],"opcode":"DB3B","stack":"c p r - "},"bytecode":{"tlb":"#DB3B","prefix":"DB3B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"p","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"p","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"CALLREF","since_version":0,"doc":{"category":"cont_basic","description":"Equivalent to `PUSHREFCONT` `CALLX`.","gas":"126/51","fift":"[ref] CALLREF","fift_examples":[],"opcode":"DB3C","stack":""},"bytecode":{"tlb":"#DB3C c:^Cell","prefix":"DB3C","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"JMPREF","since_version":0,"doc":{"category":"cont_basic","description":"Equivalent to `PUSHREFCONT` `JMPX`.","gas":"126/51","fift":"[ref] JMPREF","fift_examples":[],"opcode":"DB3D","stack":""},"bytecode":{"tlb":"#DB3D c:^Cell","prefix":"DB3D","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"JMPREFDATA","since_version":0,"doc":{"category":"cont_basic","description":"Equivalent to `PUSHREFCONT` `JMPXDATA`.","gas":"126/51","fift":"[ref] JMPREFDATA","fift_examples":[],"opcode":"DB3E","stack":""},"bytecode":{"tlb":"#DB3E c:^Cell","prefix":"DB3E","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"RETDATA","since_version":0,"doc":{"category":"cont_basic","description":"Equivalent to `c0 PUSHCTR` `JMPXDATA`. In this way, the remainder of the current continuation is converted into a _Slice_ and returned to the caller.","gas":"26","fift":"RETDATA","fift_examples":[],"opcode":"DB3F","stack":""},"bytecode":{"tlb":"#DB3F","prefix":"DB3F","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0}],"nobranch":false}},{"mnemonic":"RUNVM","since_version":4,"doc":{"category":"cont_basic","description":"Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x\'_1...x\'_m` and exitcode. Other arguments and return values are enabled by flags.","gas":"","fift":"flags RUNVM","fift_examples":[],"opcode":"DB4fff","stack":"x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x\'_1 ... x\'_m exitcode [data\'] [c4\'] [c5] [g_c]"},"bytecode":{"tlb":"#DB4 flags:(## 12)","prefix":"DB4","operands":[{"name":"flags","type":"uint","size":12,"min_value":0,"max_value":4095,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RUNVMX","since_version":4,"doc":{"category":"cont_basic","description":"Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x\'_1...x\'_m` and exitcode. Other arguments and return values are enabled by flags.","gas":"","fift":"RUNVMX","fift_examples":[],"opcode":"DB50","stack":"x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] flags - x\'_1 ... x\'_m exitcode [data\'] [c4\'] [c5] [g_c]"},"bytecode":{"tlb":"#DB50","prefix":"DB50","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"IFRET","since_version":0,"doc":{"category":"cont_conditional","description":"Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception.","gas":"18","fift":"IFRET\\nIFNOT:","fift_examples":[],"opcode":"DC","stack":"f - "},"bytecode":{"tlb":"#DC","prefix":"DC","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0}],"nobranch":true}},{"mnemonic":"IFNOTRET","since_version":0,"doc":{"category":"cont_conditional","description":"Performs a `RET`, but only if integer `f` is zero.","gas":"18","fift":"IFNOTRET\\nIF:","fift_examples":[],"opcode":"DD","stack":"f - "},"bytecode":{"tlb":"#DD","prefix":"DD","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":0}],"nobranch":true}},{"mnemonic":"IF","since_version":0,"doc":{"category":"cont_conditional","description":"Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values.","gas":"18","fift":"IF","fift_examples":[{"fift":"IF:<{ code }> <{ code }>IF","description":"Equivalent to `<{ code }> CONT` `IF`."}],"opcode":"DE","stack":"f c - "},"bytecode":{"tlb":"#DE","prefix":"DE","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":true}},{"mnemonic":"IFNOT","since_version":0,"doc":{"category":"cont_conditional","description":"Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values.","gas":"18","fift":"IFNOT","fift_examples":[{"fift":"IFNOT:<{ code }> <{ code }>IFNOT","description":"Equivalent to `<{ code }> CONT` `IFNOT`."}],"opcode":"DF","stack":"f c - "},"bytecode":{"tlb":"#DF","prefix":"DF","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":true}},{"mnemonic":"IFJMP","since_version":0,"doc":{"category":"cont_conditional","description":"Jumps to `c` (similarly to `JMPX`), but only if `f` is non-zero.","gas":"18","fift":"IFJMP","fift_examples":[{"fift":"IFJMP:<{ code }>","description":"Equivalent to `<{ code }> CONT` `IFJMP`."}],"opcode":"E0","stack":"f c - "},"bytecode":{"tlb":"#E0","prefix":"E0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":true}},{"mnemonic":"IFNOTJMP","since_version":0,"doc":{"category":"cont_conditional","description":"Jumps to `c` (similarly to `JMPX`), but only if `f` is zero.","gas":"18","fift":"IFNOTJMP","fift_examples":[{"fift":"IFNOTJMP:<{ code }>","description":"Equivalent to `<{ code }> CONT` `IFNOTJMP`."}],"opcode":"E1","stack":"f c - "},"bytecode":{"tlb":"#E1","prefix":"E1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":true}},{"mnemonic":"IFELSE","since_version":0,"doc":{"category":"cont_conditional","description":"If integer `f` is non-zero, executes `c`, otherwise executes `c\'`. Equivalent to `CONDSELCHK` `EXECUTE`.","gas":"18","fift":"IFELSE","fift_examples":[{"fift":"IF:<{ code1 }>ELSE<{ code2 }>","description":"Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `IFELSE`."}],"opcode":"E2","stack":"f c c\' - "},"bytecode":{"tlb":"#E2","prefix":"E2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}},{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"IFREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\\nSimilar remarks apply other primitives that accept a continuation as a reference.","gas":"26/126/51","fift":"[ref] IFREF","fift_examples":[],"opcode":"E300","stack":"f - "},"bytecode":{"tlb":"#E300 c:^Cell","prefix":"E300","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":true}},{"mnemonic":"IFNOTREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `IFNOT`.","gas":"26/126/51","fift":"[ref] IFNOTREF","fift_examples":[],"opcode":"E301","stack":"f - "},"bytecode":{"tlb":"#E301 c:^Cell","prefix":"E301","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":true}},{"mnemonic":"IFJMPREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `IFJMP`.","gas":"26/126/51","fift":"[ref] IFJMPREF","fift_examples":[],"opcode":"E302","stack":"f - "},"bytecode":{"tlb":"#E302 c:^Cell","prefix":"E302","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":true}},{"mnemonic":"IFNOTJMPREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `IFNOTJMP`.","gas":"26/126/51","fift":"[ref] IFNOTJMPREF","fift_examples":[],"opcode":"E303","stack":"f - "},"bytecode":{"tlb":"#E303 c:^Cell","prefix":"E303","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":true}},{"mnemonic":"CONDSEL","since_version":0,"doc":{"category":"cont_conditional","description":"If integer `f` is non-zero, returns `x`, otherwise returns `y`. Notice that no type checks are performed on `x` and `y`; as such, it is more like a conditional stack operation. Roughly equivalent to `ROT` `ISZERO` `INC` `ROLLX` `NIP`.","gas":"26","fift":"CONDSEL","fift_examples":[],"opcode":"E304","stack":"f x y - x or y"},"bytecode":{"tlb":"#E304","prefix":"E304","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"x"},{"type":"simple","name":"y"}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CONDSELCHK","since_version":0,"doc":{"category":"cont_conditional","description":"Same as `CONDSEL`, but first checks whether `x` and `y` have the same type.","gas":"26","fift":"CONDSELCHK","fift_examples":[],"opcode":"E305","stack":"f x y - x or y"},"bytecode":{"tlb":"#E305","prefix":"E305","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"x"},{"type":"simple","name":"y"}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"IFRETALT","since_version":0,"doc":{"category":"cont_conditional","description":"Performs `RETALT` if integer `f!=0`.","gas":"26","fift":"IFRETALT","fift_examples":[],"opcode":"E308","stack":"f -"},"bytecode":{"tlb":"#E308","prefix":"E308","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":1}],"nobranch":true}},{"mnemonic":"IFNOTRETALT","since_version":0,"doc":{"category":"cont_conditional","description":"Performs `RETALT` if integer `f=0`.","gas":"26","fift":"IFNOTRETALT","fift_examples":[],"opcode":"E309","stack":"f -"},"bytecode":{"tlb":"#E309","prefix":"E309","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":1}],"nobranch":true}},{"mnemonic":"IFREFELSE","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary.","gas":"26/126/51","fift":"[ref] IFREFELSE","fift_examples":[],"opcode":"E30D","stack":"f c -"},"bytecode":{"tlb":"#E30D c:^Cell","prefix":"E30D","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}},{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"IFELSEREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `IFELSE`.","gas":"26/126/51","fift":"[ref] IFELSEREF","fift_examples":[],"opcode":"E30E","stack":"f c -"},"bytecode":{"tlb":"#E30E c:^Cell","prefix":"E30E","operands":[{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}},{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"IFREFELSEREF","since_version":0,"doc":{"category":"cont_conditional","description":"Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`.","gas":"126/51","fift":"[ref] [ref] IFREFELSEREF","fift_examples":[],"opcode":"E30F","stack":"f -"},"bytecode":{"tlb":"#E30F c1:^Cell c2:^Cell","prefix":"E30F","operands":[{"name":"c1","type":"ref","display_hints":[{"type":"continuation"}]},{"name":"c2","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c1","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}},{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"IFBITJMP","since_version":0,"doc":{"category":"cont_conditional","description":"Checks whether bit `0 <= n <= 31` is set in integer `x`, and if so, performs `JMPX` to continuation `c`. Value `x` is left in the stack.","gas":"26","fift":"[n] IFBITJMP","fift_examples":[],"opcode":"E39_n","stack":"x c - x"},"bytecode":{"tlb":"#E39_ n:uint5","prefix":"E39_","operands":[{"name":"n","type":"uint","size":5,"min_value":0,"max_value":31,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"IFNBITJMP","since_version":0,"doc":{"category":"cont_conditional","description":"Jumps to `c` if bit `0 <= n <= 31` is not set in integer `x`.","gas":"26","fift":"[n] IFNBITJMP","fift_examples":[],"opcode":"E3B_n","stack":"x c - x"},"bytecode":{"tlb":"#E3B_ n:uint5","prefix":"E3B_","operands":[{"name":"n","type":"uint","size":5,"min_value":0,"max_value":31,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"IFBITJMPREF","since_version":0,"doc":{"category":"cont_conditional","description":"Performs a `JMPREF` if bit `0 <= n <= 31` is set in integer `x`.","gas":"126/51","fift":"[ref] [n] IFBITJMPREF","fift_examples":[],"opcode":"E3D_n","stack":"x - x"},"bytecode":{"tlb":"#E3D_ n:uint5 c:^Cell","prefix":"E3D_","operands":[{"name":"n","type":"uint","size":5,"min_value":0,"max_value":31,"display_hints":[]},{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"IFNBITJMPREF","since_version":0,"doc":{"category":"cont_conditional","description":"Performs a `JMPREF` if bit `0 <= n <= 31` is not set in integer `x`.","gas":"126/51","fift":"[ref] [n] IFNBITJMPREF","fift_examples":[],"opcode":"E3F_n","stack":"x - x"},"bytecode":{"tlb":"#E3F_ n:uint5 c:^Cell","prefix":"E3F_","operands":[{"name":"n","type":"uint","size":5,"min_value":0,"max_value":31,"display_hints":[]},{"name":"c","type":"ref","display_hints":[{"type":"continuation"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c"}],"nobranch":false}},{"mnemonic":"REPEAT","since_version":0,"doc":{"category":"cont_loops","description":"Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop.","gas":"18","fift":"REPEAT","fift_examples":[{"fift":"REPEAT:<{ code }> <{ code }>REPEAT","description":"Equivalent to `<{ code }> CONT` `REPEAT`."}],"opcode":"E4","stack":"n c - "},"bytecode":{"tlb":"#E4","prefix":"E4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"repeat","args":{"count":"n","body":{"type":"variable","var_name":"c"},"after":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":true}},{"mnemonic":"REPEATEND","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `REPEAT`, but it is applied to the current continuation `cc`.","gas":"18","fift":"REPEATEND\\nREPEAT:","fift_examples":[],"opcode":"E5","stack":"n - "},"bytecode":{"tlb":"#E5","prefix":"E5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"repeat","args":{"count":"n","body":{"type":"cc"},"after":{"type":"register","index":0}}}],"nobranch":true}},{"mnemonic":"UNTIL","since_version":0,"doc":{"category":"cont_loops","description":"Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations.","gas":"18","fift":"UNTIL","fift_examples":[{"fift":"UNTIL:<{ code }> <{ code }>UNTIL","description":"Equivalent to `<{ code }> CONT` `UNTIL`."}],"opcode":"E6","stack":"c - "},"bytecode":{"tlb":"#E6","prefix":"E6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"special","name":"until","args":{"body":{"type":"variable","var_name":"c"},"after":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}}}],"nobranch":false}},{"mnemonic":"UNTILEND","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `UNTIL`, but executes the current continuation `cc` in a loop. When the loop exit condition is satisfied, performs a `RET`.","gas":"18","fift":"UNTILEND\\nUNTIL:","fift_examples":[],"opcode":"E7","stack":"-"},"bytecode":{"tlb":"#E7","prefix":"E7","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"cc","save":{"c0":{"type":"special","name":"until","args":{"body":{"type":"cc"},"after":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"WHILE","since_version":0,"doc":{"category":"cont_loops","description":"Executes `c\'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration.","gas":"18","fift":"WHILE","fift_examples":[{"fift":"WHILE:<{ cond }>DO<{ code }>","description":"Equivalent to `<{ cond }> CONT` `<{ code }> CONT` `WHILE`."}],"opcode":"E8","stack":"c\' c - "},"bytecode":{"tlb":"#E8","prefix":"E8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c2","save":{"c0":{"type":"special","name":"while","args":{"cond":{"type":"variable","var_name":"c2"},"body":{"type":"variable","var_name":"c"},"after":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}}}],"nobranch":false}},{"mnemonic":"WHILEEND","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `WHILE`, but uses the current continuation `cc` as the loop body.","gas":"18","fift":"WHILEEND","fift_examples":[],"opcode":"E9","stack":"c\' - "},"bytecode":{"tlb":"#E9","prefix":"E9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c2","save":{"c0":{"type":"special","name":"while","args":{"cond":{"type":"variable","var_name":"c2"},"body":{"type":"cc"},"after":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"AGAIN","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `REPEAT`, but executes `c` infinitely many times. A `RET` only begins a new iteration of the infinite loop, which can be exited only by an exception, or a `RETALT` (or an explicit `JMPX`).","gas":"18","fift":"AGAIN","fift_examples":[{"fift":"AGAIN:<{ code }> <{ code }>AGAIN","description":"Equivalent to `<{ code }> CONT` `AGAIN`."}],"opcode":"EA","stack":"c - "},"bytecode":{"tlb":"#EA","prefix":"EA","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"again","args":{"body":{"type":"variable","var_name":"c"}}}],"nobranch":false}},{"mnemonic":"AGAINEND","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `AGAIN`, but performed with respect to the current continuation `cc`.","gas":"18","fift":"AGAINEND\\nAGAIN:","fift_examples":[],"opcode":"EB","stack":"-"},"bytecode":{"tlb":"#EB","prefix":"EB","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"again","args":{"body":{"type":"cc"}}}],"nobranch":false}},{"mnemonic":"REPEATBRK","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `REPEAT`, but also sets `c1` to the original `cc` after saving the old value of `c1` into the savelist of the original `cc`. In this way `RETALT` could be used to break out of the loop body.","gas":"26","fift":"REPEATBRK","fift_examples":[{"fift":"REPEATBRK:<{ code }> <{ code }>REPEATBRK","description":"Equivalent to `<{ code }> CONT` `REPEATBRK`."}],"opcode":"E314","stack":"n c -"},"bytecode":{"tlb":"#E314","prefix":"E314","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"repeat","args":{"count":"n","body":{"type":"variable","var_name":"c","save":{"c1":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}},"after":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}}],"nobranch":true}},{"mnemonic":"REPEATENDBRK","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `REPEATEND`, but also sets `c1` to the original `c0` after saving the old value of `c1` into the savelist of the original `c0`. Equivalent to `SAMEALTSAVE` `REPEATEND`.","gas":"26","fift":"REPEATENDBRK","fift_examples":[],"opcode":"E315","stack":"n -"},"bytecode":{"tlb":"#E315","prefix":"E315","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"special","name":"repeat","args":{"count":"n","body":{"type":"cc","save":{"c1":{"type":"register","index":0}}},"after":{"type":"register","index":0}}}],"nobranch":true}},{"mnemonic":"UNTILBRK","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `UNTIL`, but also modifies `c1` in the same way as `REPEATBRK`.","gas":"26","fift":"UNTILBRK","fift_examples":[{"fift":"UNTILBRK:<{ code }>","description":"Equivalent to `<{ code }> CONT` `UNTILBRK`."}],"opcode":"E316","stack":"c -"},"bytecode":{"tlb":"#E316","prefix":"E316","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"special","name":"until","args":{"body":{"type":"variable","var_name":"c","save":{"c1":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}},"after":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}},"c1":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}}],"nobranch":false}},{"mnemonic":"UNTILENDBRK","since_version":0,"doc":{"category":"cont_loops","description":"Equivalent to `SAMEALTSAVE` `UNTILEND`.","gas":"26","fift":"UNTILENDBRK\\nUNTILBRK:","fift_examples":[],"opcode":"E317","stack":"-"},"bytecode":{"tlb":"#E317","prefix":"E317","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"cc","save":{"c0":{"type":"special","name":"until","args":{"body":{"type":"cc","save":{"c1":{"type":"register","index":0}}},"after":{"type":"register","index":0}}},"c1":{"type":"register","index":0}}}],"nobranch":false}},{"mnemonic":"WHILEBRK","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `WHILE`, but also modifies `c1` in the same way as `REPEATBRK`.","gas":"26","fift":"WHILEBRK","fift_examples":[{"fift":"WHILEBRK:<{ cond }>DO<{ code }>","description":"Equivalent to `<{ cond }> CONT` `<{ code }> CONT` `WHILEBRK`."}],"opcode":"E318","stack":"c\' c -"},"bytecode":{"tlb":"#E318","prefix":"E318","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c2","save":{"c0":{"type":"special","name":"while","args":{"cond":{"type":"variable","var_name":"c2"},"body":{"type":"variable","var_name":"c"},"after":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}}}}}}],"nobranch":false}},{"mnemonic":"WHILEENDBRK","since_version":0,"doc":{"category":"cont_loops","description":"Equivalent to `SAMEALTSAVE` `WHILEEND`.","gas":"26","fift":"WHILEENDBRK","fift_examples":[],"opcode":"E319","stack":"c -"},"bytecode":{"tlb":"#E319","prefix":"E319","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"AGAINBRK","since_version":0,"doc":{"category":"cont_loops","description":"Similar to `AGAIN`, but also modifies `c1` in the same way as `REPEATBRK`.","gas":"26","fift":"AGAINBRK","fift_examples":[{"fift":"AGAINBRK:<{ code }>","description":"Equivalent to `<{ code }> CONT` `AGAINBRK`."}],"opcode":"E31A","stack":"c -"},"bytecode":{"tlb":"#E31A","prefix":"E31A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"AGAINENDBRK","since_version":0,"doc":{"category":"cont_loops","description":"Equivalent to `SAMEALTSAVE` `AGAINEND`.","gas":"26","fift":"AGAINENDBRK\\nAGAINBRK:","fift_examples":[],"opcode":"E31B","stack":"-"},"bytecode":{"tlb":"#E31B","prefix":"E31B","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCONTARGS_N","since_version":0,"doc":{"category":"cont_stack","description":"Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. When `n` is 15 (-1 in Fift notation), does nothing with `c.nargs`. For `0 <= n <= 14`, sets `c.nargs` to the final size of the stack of `c\'` plus `n`. In other words, transforms `c` into a _closure_ or a _partially applied function_, with `0 <= n <= 14` arguments missing.","gas":"26+s\'\'","fift":"[r] [n] SETCONTARGS","fift_examples":[],"opcode":"ECrn","stack":"x_1 x_2...x_r c - c\'"},"bytecode":{"tlb":"#EC r:uint4 n:uint4","prefix":"EC","operands":[{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"n","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"optional_nargs"}]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"r","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RETURNARGS","since_version":0,"doc":{"category":"cont_stack","description":"Leaves only the top `0 <= p <= 15` values in the current stack (somewhat similarly to `ONLYTOPX`), with all the unused bottom values not discarded, but saved into continuation `c0` in the same way as `SETCONTARGS` does.","gas":"26+s\'\'","fift":"[p] RETURNARGS","fift_examples":[],"opcode":"ED0p","stack":"-"},"bytecode":{"tlb":"#ED0 p:uint4","prefix":"ED0","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RETURNVARARGS","since_version":0,"doc":{"category":"cont_stack","description":"Similar to `RETURNARGS`, but with Integer `0 <= p <= 255` taken from the stack.","gas":"26+s\'\'","fift":"RETURNVARARGS","fift_examples":[],"opcode":"ED10","stack":"p -"},"bytecode":{"tlb":"#ED10","prefix":"ED10","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCONTVARARGS","since_version":0,"doc":{"category":"cont_stack","description":"Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack.","gas":"26+s\'\'","fift":"SETCONTVARARGS","fift_examples":[],"opcode":"ED11","stack":"x_1 x_2...x_r c r n - c\'"},"bytecode":{"tlb":"#ED11","prefix":"ED11","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"r","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"r","value_types":["Integer"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETNUMVARARGS","since_version":0,"doc":{"category":"cont_stack","description":"`-1 <= n <= 255`\\nIf `n=-1`, this operation does nothing (`c\'=c`).\\nOtherwise its action is similar to `[n] SETNUMARGS`, but with `n` taken from the stack.","gas":"26","fift":"SETNUMVARARGS","fift_examples":[],"opcode":"ED12","stack":"c n - c\'"},"bytecode":{"tlb":"#ED12","prefix":"ED12","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLESS","since_version":0,"doc":{"category":"cont_create","description":"Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist.","gas":"26","fift":"BLESS","fift_examples":[],"opcode":"ED1E","stack":"s - c"},"bytecode":{"tlb":"#ED1E","prefix":"ED1E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLESSVARARGS","since_version":0,"doc":{"category":"cont_create","description":"Equivalent to `ROT` `BLESS` `ROTREV` `SETCONTVARARGS`.","gas":"26+s\'\'","fift":"BLESSVARARGS","fift_examples":[],"opcode":"ED1F","stack":"x_1...x_r s r n - c"},"bytecode":{"tlb":"#ED1F","prefix":"ED1F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"r","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"r","value_types":["Integer"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLESSARGS","since_version":0,"doc":{"category":"cont_create","description":"`0 <= r <= 15`, `-1 <= n <= 14`\\nEquivalent to `BLESS` `[r] [n] SETCONTARGS`.\\nThe value of `n` is represented inside the instruction by the 4-bit integer `n mod 16`.","gas":"26","fift":"[r] [n] BLESSARGS","fift_examples":[],"opcode":"EErn","stack":"x_1...x_r s - c"},"bytecode":{"tlb":"#EE r:uint4 n:uint4","prefix":"EE","operands":[{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"n","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"optional_nargs"}]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"r","array_entry":[{"type":"simple","name":"x"}]},{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHCTR","since_version":0,"doc":{"category":"cont_registers","description":"Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.","gas":"26","fift":"c[i] PUSHCTR\\nc[i] PUSH","fift_examples":[],"opcode":"ED4i","stack":"- x"},"bytecode":{"tlb":"#ED4 i:uint4","prefix":"ED4","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"}]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POPCTR","since_version":0,"doc":{"category":"cont_registers","description":"Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.","gas":"26","fift":"c[i] POPCTR\\nc[i] POP","fift_examples":[],"opcode":"ED5i","stack":"x - "},"bytecode":{"tlb":"#ED5 i:uint4","prefix":"ED5","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]},"outputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCONTCTR","since_version":0,"doc":{"category":"cont_registers","description":"Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c\'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`.","gas":"26","fift":"c[i] SETCONT\\nc[i] SETCONTCTR","fift_examples":[],"opcode":"ED6i","stack":"x c - c\'"},"bytecode":{"tlb":"#ED6 i:uint4","prefix":"ED6","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETRETCTR","since_version":0,"doc":{"category":"cont_registers","description":"Equivalent to `c0 PUSHCTR` `c[i] SETCONTCTR` `c0 POPCTR`.","gas":"26","fift":"c[i] SETRETCTR","fift_examples":[],"opcode":"ED7i","stack":"x - "},"bytecode":{"tlb":"#ED7 i:uint4","prefix":"ED7","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[{"type":"constant","index":0}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETALTCTR","since_version":0,"doc":{"category":"cont_registers","description":"Equivalent to `c1 PUSHCTR` `c[i] SETCONTCTR` `c1 POPCTR`.","gas":"26","fift":"c[i] SETALTCTR","fift_examples":[],"opcode":"ED8i","stack":"x - "},"bytecode":{"tlb":"#ED8 i:uint4","prefix":"ED8","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POPSAVE","since_version":0,"doc":{"category":"cont_registers","description":"Similar to `c[i] POPCTR`, but also saves the old value of `c[i]` into continuation `c0`.\\nEquivalent (up to exceptions) to `c[i] SAVECTR` `c[i] POPCTR`.","gas":"26","fift":"c[i] POPSAVE\\nc[i] POPCTRSAVE","fift_examples":[],"opcode":"ED9i","stack":"x -"},"bytecode":{"tlb":"#ED9 i:uint4","prefix":"ED9","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[{"type":"variable","var_name":"i"},{"type":"constant","index":0}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SAVE","since_version":0,"doc":{"category":"cont_registers","description":"Saves the current value of `c(i)` into the savelist of continuation `c0`. If an entry for `c[i]` is already present in the savelist of `c0`, nothing is done. Equivalent to `c[i] PUSHCTR` `c[i] SETRETCTR`.","gas":"26","fift":"c[i] SAVE\\nc[i] SAVECTR","fift_examples":[],"opcode":"EDAi","stack":""},"bytecode":{"tlb":"#EDA i:uint4","prefix":"EDA","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"},{"type":"constant","index":0}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SAVEALT","since_version":0,"doc":{"category":"cont_registers","description":"Similar to `c[i] SAVE`, but saves the current value of `c[i]` into the savelist of `c1`, not `c0`.","gas":"26","fift":"c[i] SAVEALT\\nc[i] SAVEALTCTR","fift_examples":[],"opcode":"EDBi","stack":""},"bytecode":{"tlb":"#EDB i:uint4","prefix":"EDB","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"},{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SAVEBOTH","since_version":0,"doc":{"category":"cont_registers","description":"Equivalent to `c[i] SAVE` `c[i] SAVEALT`.","gas":"26","fift":"c[i] SAVEBOTH\\nc[i] SAVEBOTHCTR","fift_examples":[],"opcode":"EDCi","stack":""},"bytecode":{"tlb":"#EDC i:uint4","prefix":"EDC","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[{"type":"register"}]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"},{"type":"constant","index":0},{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PUSHCTRX","since_version":0,"doc":{"category":"cont_registers","description":"Similar to `c[i] PUSHCTR`, but with `i`, `0 <= i <= 255`, taken from the stack.\\nNotice that this primitive is one of the few \'\'exotic\'\' primitives, which are not polymorphic like stack manipulation primitives, and at the same time do not have well-defined types of parameters and return values, because the type of `x` depends on `i`.","gas":"26","fift":"PUSHCTRX","fift_examples":[],"opcode":"EDE0","stack":"i - x"},"bytecode":{"tlb":"#EDE0","prefix":"EDE0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[{"type":"variable","var_name":"i"}]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"POPCTRX","since_version":0,"doc":{"category":"cont_registers","description":"Similar to `c[i] POPCTR`, but with `0 <= i <= 255` from the stack.","gas":"26","fift":"POPCTRX","fift_examples":[],"opcode":"EDE1","stack":"x i - "},"bytecode":{"tlb":"#EDE1","prefix":"EDE1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[{"type":"variable","var_name":"i"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCONTCTRX","since_version":0,"doc":{"category":"cont_registers","description":"Similar to `c[i] SETCONTCTR`, but with `0 <= i <= 255` from the stack.","gas":"26","fift":"SETCONTCTRX","fift_examples":[],"opcode":"EDE2","stack":"x c i - c\'"},"bytecode":{"tlb":"#EDE2","prefix":"EDE2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"COMPOS","since_version":0,"doc":{"category":"cont_registers","description":"Computes the composition `compose0(c, c\')`, which has the meaning of \'\'perform `c`, and, if successful, perform `c\'`\'\' (if `c` is a boolean circuit) or simply \'\'perform `c`, then `c\'`\'\'. Equivalent to `SWAP` `c0 SETCONT`.","gas":"26","fift":"COMPOS\\nBOOLAND","fift_examples":[],"opcode":"EDF0","stack":"c c\' - c\'\'"},"bytecode":{"tlb":"#EDF0","prefix":"EDF0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c3","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"COMPOSALT","since_version":0,"doc":{"category":"cont_registers","description":"Computes the alternative composition `compose1(c, c\')`, which has the meaning of \'\'perform `c`, and, if not successful, perform `c\'`\'\' (if `c` is a boolean circuit). Equivalent to `SWAP` `c1 SETCONT`.","gas":"26","fift":"COMPOSALT\\nBOOLOR","fift_examples":[],"opcode":"EDF1","stack":"c c\' - c\'\'"},"bytecode":{"tlb":"#EDF1","prefix":"EDF1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c3","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"COMPOSBOTH","since_version":0,"doc":{"category":"cont_registers","description":"Computes composition `compose1(compose0(c, c\'), c\')`, which has the meaning of \'\'compute boolean circuit `c`, then compute `c\'`, regardless of the result of `c`\'\'.","gas":"26","fift":"COMPOSBOTH","fift_examples":[],"opcode":"EDF2","stack":"c c\' - c\'\'"},"bytecode":{"tlb":"#EDF2","prefix":"EDF2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c3","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ATEXIT","since_version":0,"doc":{"category":"cont_registers","description":"Sets `c0` to `compose0(c, c0)`. In other words, `c` will be executed before exiting current subroutine.","gas":"26","fift":"ATEXIT","fift_examples":[{"fift":"ATEXIT:<{ code }> <{ code }>ATEXIT","description":"Equivalent to `<{ code }> CONT` `ATEXIT`."}],"opcode":"EDF3","stack":"c - "},"bytecode":{"tlb":"#EDF3","prefix":"EDF3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[{"type":"constant","index":0}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ATEXITALT","since_version":0,"doc":{"category":"cont_registers","description":"Sets `c1` to `compose1(c, c1)`. In other words, `c` will be executed before exiting current subroutine by its alternative return path.","gas":"26","fift":"ATEXITALT","fift_examples":[{"fift":"ATEXITALT:<{ code }> <{ code }>ATEXITALT","description":"Equivalent to `<{ code }> CONT` `ATEXITALT`."}],"opcode":"EDF4","stack":"c - "},"bytecode":{"tlb":"#EDF4","prefix":"EDF4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETEXITALT","since_version":0,"doc":{"category":"cont_registers","description":"Sets `c1` to `compose1(compose0(c, c0), c1)`,\\nIn this way, a subsequent `RETALT` will first execute `c`, then transfer control to the original `c0`. This can be used, for instance, to exit from nested loops.","gas":"26","fift":"SETEXITALT","fift_examples":[],"opcode":"EDF5","stack":"c - "},"bytecode":{"tlb":"#EDF5","prefix":"EDF5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THENRET","since_version":0,"doc":{"category":"cont_registers","description":"Computes `compose0(c, c0)`.","gas":"26","fift":"THENRET","fift_examples":[],"opcode":"EDF6","stack":"c - c\'"},"bytecode":{"tlb":"#EDF6","prefix":"EDF6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[{"type":"constant","index":0}]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THENRETALT","since_version":0,"doc":{"category":"cont_registers","description":"Computes `compose0(c, c1)`","gas":"26","fift":"THENRETALT","fift_examples":[],"opcode":"EDF7","stack":"c - c\'"},"bytecode":{"tlb":"#EDF7","prefix":"EDF7","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[{"type":"constant","index":1}]},"outputs":{"stack":[{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"INVERT","since_version":0,"doc":{"category":"cont_registers","description":"Interchanges `c0` and `c1`.","gas":"26","fift":"INVERT","fift_examples":[],"opcode":"EDF8","stack":"-"},"bytecode":{"tlb":"#EDF8","prefix":"EDF8","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BOOLEVAL","since_version":0,"doc":{"category":"cont_registers","description":"Performs `cc:=compose1(compose0(c, compose0(-1 PUSHINT, cc)), compose0(0 PUSHINT, cc))`. If `c` represents a boolean circuit, the net effect is to evaluate it and push either `-1` or `0` into the stack before continuing.","gas":"26","fift":"BOOLEVAL","fift_examples":[],"opcode":"EDF9","stack":"c - ?"},"bytecode":{"tlb":"#EDF9","prefix":"EDF9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"special","name":"pushint","args":{"next":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}},"value":-1}},"c1":{"type":"special","name":"pushint","args":{"next":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1}}},"value":0}}}}],"nobranch":false}},{"mnemonic":"SAMEALT","since_version":0,"doc":{"category":"cont_registers","description":"Sets `c1` to `c0`. Equivalent to `c0 PUSHCTR` `c1 POPCTR`.","gas":"26","fift":"SAMEALT","fift_examples":[],"opcode":"EDFA","stack":"-"},"bytecode":{"tlb":"#EDFA","prefix":"EDFA","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":0}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SAMEALTSAVE","since_version":0,"doc":{"category":"cont_registers","description":"Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\\nEquivalent to `c1 SAVE` `SAMEALT`.","gas":"26","fift":"SAMEALTSAVE","fift_examples":[],"opcode":"EDFB","stack":"-"},"bytecode":{"tlb":"#EDFB","prefix":"EDFB","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":0},{"type":"constant","index":1}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CALLDICT","since_version":0,"doc":{"category":"cont_dict","description":"Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`.","gas":"","fift":"[nn] CALL\\n[nn] CALLDICT","fift_examples":[],"opcode":"F0nn","stack":"- nn"},"bytecode":{"tlb":"#F0 n:uint8","prefix":"F0","operands":[{"name":"n","type":"uint","size":8,"min_value":0,"max_value":255,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":3,"save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"CALLDICT_LONG","since_version":0,"doc":{"category":"cont_dict","description":"For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`.","gas":"","fift":"[n] CALL\\n[n] CALLDICT","fift_examples":[],"opcode":"F12_n","stack":"- n"},"bytecode":{"tlb":"#F12_ n:uint14","prefix":"F12_","operands":[{"name":"n","type":"uint","size":14,"min_value":0,"max_value":16383,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":3,"save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"JMPDICT","since_version":0,"doc":{"category":"cont_dict","description":"Jumps to the continuation in `c3`, pushing integer `0 <= n < 2^14` as its argument.\\nApproximately equivalent to `n PUSHINT` `c3 PUSHCTR` `JMPX`.","gas":"","fift":"[n] JMP","fift_examples":[],"opcode":"F16_n","stack":" - n"},"bytecode":{"tlb":"#F16_ n:uint14","prefix":"F16_","operands":[{"name":"n","type":"uint","size":14,"min_value":0,"max_value":16383,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[{"type":"register","index":3}],"nobranch":false}},{"mnemonic":"PREPAREDICT","since_version":0,"doc":{"category":"cont_dict","description":"Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here.","gas":"","fift":"[n] PREPARE\\n[n] PREPAREDICT","fift_examples":[],"opcode":"F1A_n","stack":" - n c"},"bytecode":{"tlb":"#F1A_ n:uint14","prefix":"F1A_","operands":[{"name":"n","type":"uint","size":14,"min_value":0,"max_value":16383,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":3}]},"outputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"c","value_types":["Continuation"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROW_SHORT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n <= 63` with parameter zero.\\nIn other words, it transfers control to the continuation in `c2`, pushing `0` and `n` into its stack, and discarding the old stack altogether.","gas":"76","fift":"[n] THROW","fift_examples":[],"opcode":"F22_n","stack":" - 0 n"},"bytecode":{"tlb":"#F22_ n:uint6","prefix":"F22_","operands":[{"name":"n","type":"uint","size":6,"min_value":0,"max_value":63,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":false}},{"mnemonic":"THROWIF_SHORT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n <= 63` with  parameter zero only if integer `f!=0`.","gas":"26/76","fift":"[n] THROWIF","fift_examples":[],"opcode":"F26_n","stack":"f - "},"bytecode":{"tlb":"#F26_ n:uint6","prefix":"F26_","operands":[{"name":"n","type":"uint","size":6,"min_value":0,"max_value":63,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWIFNOT_SHORT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n <= 63` with parameter zero only if integer `f=0`.","gas":"26/76","fift":"[n] THROWIFNOT","fift_examples":[],"opcode":"F2A_n","stack":"f - "},"bytecode":{"tlb":"#F2A_ n:uint6","prefix":"F2A_","operands":[{"name":"n","type":"uint","size":6,"min_value":0,"max_value":63,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROW","since_version":0,"doc":{"category":"exceptions","description":"For `0 <= n < 2^11`, an encoding of `[n] THROW` for larger values of `n`.","gas":"84","fift":"[n] THROW","fift_examples":[],"opcode":"F2C4_n","stack":"- 0 nn"},"bytecode":{"tlb":"#F2C4_ n:uint11","prefix":"F2C4_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":false}},{"mnemonic":"THROWARG","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n <  2^11` with parameter `x`, by copying `x` and `n` into the stack of `c2` and transferring control to `c2`.","gas":"84","fift":"[n] THROWARG","fift_examples":[],"opcode":"F2CC_n","stack":"x - x nn"},"bytecode":{"tlb":"#F2CC_ n:uint11","prefix":"F2CC_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":false}},{"mnemonic":"THROWIF","since_version":0,"doc":{"category":"exceptions","description":"For `0 <= n < 2^11`, an encoding of `[n] THROWIF` for larger values of `n`.","gas":"34/84","fift":"[n] THROWIF","fift_examples":[],"opcode":"F2D4_n","stack":"f - "},"bytecode":{"tlb":"#F2D4_ n:uint11","prefix":"F2D4_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWARGIF","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= nn < 2^11` with parameter `x` only if integer `f!=0`.","gas":"34/84","fift":"[n] THROWARGIF","fift_examples":[],"opcode":"F2DC_n","stack":"x f - "},"bytecode":{"tlb":"#F2DC_ n:uint11","prefix":"F2DC_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWIFNOT","since_version":0,"doc":{"category":"exceptions","description":"For `0 <= n < 2^11`, an encoding of `[n] THROWIFNOT` for larger values of `n`.","gas":"34/84","fift":"[n] THROWIFNOT","fift_examples":[],"opcode":"F2E4_n","stack":"f - "},"bytecode":{"tlb":"#F2E4_ n:uint11","prefix":"F2E4_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWARGIFNOT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n < 2^11` with parameter `x` only if integer `f=0`.","gas":"34/84","fift":"[n] THROWARGIFNOT","fift_examples":[],"opcode":"F2EC_n","stack":"x f - "},"bytecode":{"tlb":"#F2EC_ n:uint11","prefix":"F2EC_","operands":[{"name":"n","type":"uint","size":11,"min_value":0,"max_value":2047,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWANY","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n < 2^16` with parameter zero.\\nApproximately equivalent to `ZERO` `SWAP` `THROWARGANY`.","gas":"76","fift":"THROWANY","fift_examples":[],"opcode":"F2F0","stack":"n - 0 n"},"bytecode":{"tlb":"#F2F0","prefix":"F2F0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":false}},{"mnemonic":"THROWARGANY","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n < 2^16` with parameter `x`, transferring control to the continuation in `c2`.\\nApproximately equivalent to `c2 PUSHCTR` `2 JMPXARGS`.","gas":"76","fift":"THROWARGANY","fift_examples":[],"opcode":"F2F1","stack":"x n - x n"},"bytecode":{"tlb":"#F2F1","prefix":"F2F1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":false}},{"mnemonic":"THROWANYIF","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n < 2^16` with parameter zero only if `f!=0`.","gas":"26/76","fift":"THROWANYIF","fift_examples":[],"opcode":"F2F2","stack":"n f - "},"bytecode":{"tlb":"#F2F2","prefix":"F2F2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWARGANYIF","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n<2^16` with parameter `x` only if `f!=0`.","gas":"26/76","fift":"THROWARGANYIF","fift_examples":[],"opcode":"F2F3","stack":"x n f - "},"bytecode":{"tlb":"#F2F3","prefix":"F2F3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWANYIFNOT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n<2^16` with parameter zero only if `f=0`.","gas":"26/76","fift":"THROWANYIFNOT","fift_examples":[],"opcode":"F2F4","stack":"n f - "},"bytecode":{"tlb":"#F2F4","prefix":"F2F4","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"THROWARGANYIFNOT","since_version":0,"doc":{"category":"exceptions","description":"Throws exception `0 <= n<2^16` with parameter `x` only if `f=0`.","gas":"26/76","fift":"THROWARGANYIFNOT","fift_examples":[],"opcode":"F2F5","stack":"x n f - "},"bytecode":{"tlb":"#F2F5","prefix":"F2F5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"f","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"TRY","since_version":0,"doc":{"category":"exceptions","description":"Sets `c2` to `c\'`, first saving the old value of `c2` both into the savelist of `c\'` and into the savelist of the current continuation, which is stored into `c.c0` and `c\'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c\'`, but the original value of `c2` is restored in the process, so that `c\'` can re-throw the exception by `THROWANY` if it cannot handle it by itself.","gas":"26","fift":"TRY","fift_examples":[{"fift":"TRY:<{ code1 }>CATCH<{ code2 }>","description":"Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `TRY`."}],"opcode":"F2FF","stack":"c c\' - "},"bytecode":{"tlb":"#F2FF","prefix":"F2FF","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1},"c2":{"type":"register","index":2}}},"c2":{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1},"c2":{"type":"register","index":2}}},"c2":{"type":"register","index":2}}}}}],"nobranch":false}},{"mnemonic":"TRYARGS","since_version":0,"doc":{"category":"exceptions","description":"Similar to `TRY`, but with `[p] [r] CALLXARGS` internally used instead of `EXECUTE`.\\nIn this way, all but the top `0 <= p <= 15` stack elements will be saved into current continuation\'s stack, and then restored upon return from either `c` or `c\'`, with the top `0 <= r <= 15` values of the resulting stack of `c` or `c\'` copied as return values.","gas":"26","fift":"[p] [r] TRYARGS","fift_examples":[],"opcode":"F3pr","stack":"c c\' - "},"bytecode":{"tlb":"#F3 p:uint4 r:uint4","prefix":"F3","operands":[{"name":"p","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]},{"name":"r","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"args","length_var":"r","array_entry":[{"type":"simple","name":"arg"}]},{"type":"simple","name":"c","value_types":["Continuation"]},{"type":"simple","name":"c2","value_types":["Continuation"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"c","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1},"c2":{"type":"register","index":2}}},"c2":{"type":"variable","var_name":"c2","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0},"c1":{"type":"register","index":1},"c2":{"type":"register","index":2}}},"c2":{"type":"register","index":2}}}}}],"nobranch":false}},{"mnemonic":"STDICT","since_version":0,"doc":{"category":"dict_serial","description":"Stores dictionary `D` into _Builder_ `b`, returing the resulting _Builder_ `b\'`.\\nIn other words, if `D` is a cell, performs `STONE` and `STREF`; if `D` is _Null_, performs `NIP` and `STZERO`; otherwise throws a type checking exception.","gas":"26","fift":"STDICT\\nSTOPTREF","fift_examples":[],"opcode":"F400","stack":"D b - b\'"},"bytecode":{"tlb":"#F400","prefix":"F400","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"b","value_types":["Builder"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SKIPDICT","since_version":0,"doc":{"category":"dict_serial","description":"Equivalent to `LDDICT` `NIP`.","gas":"26","fift":"SKIPDICT\\nSKIPOPTREF","fift_examples":[],"opcode":"F401","stack":"s - s\'"},"bytecode":{"tlb":"#F401","prefix":"F401","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDDICTS","since_version":0,"doc":{"category":"dict_serial","description":"Loads (parses) a (_Slice_-represented) dictionary `s\'` from _Slice_ `s`, and returns the remainder of `s` as `s\'\'`.\\nThis is a \'\'split function\'\' for all `HashmapE(n,X)` dictionary types.","gas":"26","fift":"LDDICTS","fift_examples":[],"opcode":"F402","stack":"s - s\' s\'\'"},"bytecode":{"tlb":"#F402","prefix":"F402","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDDICTS","since_version":0,"doc":{"category":"dict_serial","description":"Preloads a (_Slice_-represented) dictionary `s\'` from _Slice_ `s`.\\nApproximately equivalent to `LDDICTS` `DROP`.","gas":"26","fift":"PLDDICTS","fift_examples":[],"opcode":"F403","stack":"s - s\'"},"bytecode":{"tlb":"#F403","prefix":"F403","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDDICT","since_version":0,"doc":{"category":"dict_serial","description":"Loads (parses) a dictionary `D` from _Slice_ `s`, and returns the remainder of `s` as `s\'`. May be applied to dictionaries or to values of arbitrary `(^Y)?` types.","gas":"26","fift":"LDDICT\\nLDOPTREF","fift_examples":[],"opcode":"F404","stack":"s - D s\'"},"bytecode":{"tlb":"#F404","prefix":"F404","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDDICT","since_version":0,"doc":{"category":"dict_serial","description":"Preloads a dictionary `D` from _Slice_ `s`.\\nApproximately equivalent to `LDDICT` `DROP`.","gas":"26","fift":"PLDDICT\\nPLDOPTREF","fift_examples":[],"opcode":"F405","stack":"s - D"},"bytecode":{"tlb":"#F405","prefix":"F405","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDDICTQ","since_version":0,"doc":{"category":"dict_serial","description":"A quiet version of `LDDICT`.","gas":"26","fift":"LDDICTQ","fift_examples":[],"opcode":"F406","stack":"s - D s\' -1 or s 0"},"bytecode":{"tlb":"#F406","prefix":"F406","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Integer"]}]},{"value":-1,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"s2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PLDDICTQ","since_version":0,"doc":{"category":"dict_serial","description":"A quiet version of `PLDDICT`.","gas":"26","fift":"PLDDICTQ","fift_examples":[],"opcode":"F407","stack":"s - D -1 or 0"},"bytecode":{"tlb":"#F407","prefix":"F407","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGET","since_version":0,"doc":{"category":"dict_get","description":"Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys.\\nOn success, returns the value found as a _Slice_ `x`.","gas":"","fift":"DICTGET","fift_examples":[],"opcode":"F40A","stack":"k D n - x -1 or 0"},"bytecode":{"tlb":"#F40A","prefix":"F40A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETREF","since_version":0,"doc":{"category":"dict_get","description":"Similar to `DICTGET`, but with a `LDREF` `ENDS` applied to `x` on success.\\nThis operation is useful for dictionaries of type `HashmapE(n,^Y)`.","gas":"","fift":"DICTGETREF","fift_examples":[],"opcode":"F40B","stack":"k D n - c -1 or 0"},"bytecode":{"tlb":"#F40B","prefix":"F40B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGET","since_version":0,"doc":{"category":"dict_get","description":"Similar to `DICTGET`, but with a signed (big-endian) `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, returns `0`. If `i` is a `NaN`, throws an integer overflow exception.","gas":"","fift":"DICTIGET","fift_examples":[],"opcode":"F40C","stack":"i D n - x -1 or 0"},"bytecode":{"tlb":"#F40C","prefix":"F40C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Cell","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETREF","since_version":0,"doc":{"category":"dict_get","description":"Combines `DICTIGET` with `DICTGETREF`: it uses signed `n`-bit _Integer_ `i` as a key and returns a _Cell_ instead of a _Slice_ on success.","gas":"","fift":"DICTIGETREF","fift_examples":[],"opcode":"F40D","stack":"i D n - c -1 or 0"},"bytecode":{"tlb":"#F40D","prefix":"F40D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Cell","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGET","since_version":0,"doc":{"category":"dict_get","description":"Similar to `DICTIGET`, but with _unsigned_ (big-endian) `n`-bit _Integer_ `i` used as a key.","gas":"","fift":"DICTUGET","fift_examples":[],"opcode":"F40E","stack":"i D n - x -1 or 0"},"bytecode":{"tlb":"#F40E","prefix":"F40E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Cell","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETREF","since_version":0,"doc":{"category":"dict_get","description":"Similar to `DICTIGETREF`, but with an unsigned `n`-bit _Integer_ key `i`.","gas":"","fift":"DICTUGETREF","fift_examples":[],"opcode":"F40F","stack":"i D n - c -1 or 0"},"bytecode":{"tlb":"#F40F","prefix":"F40F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Cell","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSET","since_version":0,"doc":{"category":"dict_set","description":"Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` (also represented by a _Slice_) to value `x` (again a _Slice_), and returns the resulting dictionary as `D\'`.","gas":"","fift":"DICTSET","fift_examples":[],"opcode":"F412","stack":"x k D n - D\'"},"bytecode":{"tlb":"#F412","prefix":"F412","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETREF","since_version":0,"doc":{"category":"dict_set","description":"Similar to `DICTSET`, but with the value set to a reference to _Cell_ `c`.","gas":"","fift":"DICTSETREF","fift_examples":[],"opcode":"F413","stack":"c k D n - D\'"},"bytecode":{"tlb":"#F413","prefix":"F413","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISET","since_version":0,"doc":{"category":"dict_set","description":"Similar to `DICTSET`, but with the key represented by a (big-endian) signed `n`-bit integer `i`. If `i` does not fit into `n` bits, a range check exception is generated.","gas":"","fift":"DICTISET","fift_examples":[],"opcode":"F414","stack":"x i D n - D\'"},"bytecode":{"tlb":"#F414","prefix":"F414","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETREF","since_version":0,"doc":{"category":"dict_set","description":"Similar to `DICTSETREF`, but with the key a signed `n`-bit integer as in `DICTISET`.","gas":"","fift":"DICTISETREF","fift_examples":[],"opcode":"F415","stack":"c i D n - D\'"},"bytecode":{"tlb":"#F415","prefix":"F415","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSET","since_version":0,"doc":{"category":"dict_set","description":"Similar to `DICTISET`, but with `i` an _unsigned_ `n`-bit integer.","gas":"","fift":"DICTUSET","fift_examples":[],"opcode":"F416","stack":"x i D n - D\'"},"bytecode":{"tlb":"#F416","prefix":"F416","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETREF","since_version":0,"doc":{"category":"dict_set","description":"Similar to `DICTISETREF`, but with `i` unsigned.","gas":"","fift":"DICTUSETREF","fift_examples":[],"opcode":"F417","stack":"c i D n - D\'"},"bytecode":{"tlb":"#F417","prefix":"F417","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETGET","since_version":0,"doc":{"category":"dict_set","description":"Combines `DICTSET` with `DICTGET`: it sets the value corresponding to key `k` to `x`, but also returns the old value `y` associated with the key in question, if present.","gas":"","fift":"DICTSETGET","fift_examples":[],"opcode":"F41A","stack":"x k D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F41A","prefix":"F41A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETGETREF","since_version":0,"doc":{"category":"dict_set","description":"Combines `DICTSETREF` with `DICTGETREF` similarly to `DICTSETGET`.","gas":"","fift":"DICTSETGETREF","fift_examples":[],"opcode":"F41B","stack":"c k D n - D\' c\' -1 or D\' 0"},"bytecode":{"tlb":"#F41B","prefix":"F41B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTISETGET`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTISETGET","fift_examples":[],"opcode":"F41C","stack":"x i D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F41C","prefix":"F41C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTISETGETREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTISETGETREF","fift_examples":[],"opcode":"F41D","stack":"c i D n - D\' c\' -1 or D\' 0"},"bytecode":{"tlb":"#F41D","prefix":"F41D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTISETGET`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUSETGET","fift_examples":[],"opcode":"F41E","stack":"x i D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F41E","prefix":"F41E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTISETGETREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUSETGETREF","fift_examples":[],"opcode":"F41F","stack":"c i D n - D\' c\' -1 or D\' 0"},"bytecode":{"tlb":"#F41F","prefix":"F41F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACE","since_version":0,"doc":{"category":"dict_set","description":"A _Replace_ operation, which is similar to `DICTSET`, but sets the value of key `k` in dictionary `D` to `x` only if the key `k` was already present in `D`.","gas":"","fift":"DICTREPLACE","fift_examples":[],"opcode":"F422","stack":"x k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F422","prefix":"F422","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACEREF","since_version":0,"doc":{"category":"dict_set","description":"A _Replace_ counterpart of `DICTSETREF`.","gas":"","fift":"DICTREPLACEREF","fift_examples":[],"opcode":"F423","stack":"c k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F423","prefix":"F423","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACE","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACE`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIREPLACE","fift_examples":[],"opcode":"F424","stack":"x i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F424","prefix":"F424","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACEREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIREPLACEREF","fift_examples":[],"opcode":"F425","stack":"c i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F425","prefix":"F425","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACE","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACE`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUREPLACE","fift_examples":[],"opcode":"F426","stack":"x i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F426","prefix":"F426","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACEREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUREPLACEREF","fift_examples":[],"opcode":"F427","stack":"c i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F427","prefix":"F427","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACEGET","since_version":0,"doc":{"category":"dict_set","description":"A _Replace_ counterpart of `DICTSETGET`: on success, also returns the old value associated with the key in question.","gas":"","fift":"DICTREPLACEGET","fift_examples":[],"opcode":"F42A","stack":"x k D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F42A","prefix":"F42A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACEGETREF","since_version":0,"doc":{"category":"dict_set","description":"A _Replace_ counterpart of `DICTSETGETREF`.","gas":"","fift":"DICTREPLACEGETREF","fift_examples":[],"opcode":"F42B","stack":"c k D n - D\' c\' -1 or D 0"},"bytecode":{"tlb":"#F42B","prefix":"F42B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACEGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEGET`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIREPLACEGET","fift_examples":[],"opcode":"F42C","stack":"x i D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F42C","prefix":"F42C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACEGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEGETREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIREPLACEGETREF","fift_examples":[],"opcode":"F42D","stack":"c i D n - D\' c\' -1 or D 0"},"bytecode":{"tlb":"#F42D","prefix":"F42D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACEGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEGET`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUREPLACEGET","fift_examples":[],"opcode":"F42E","stack":"x i D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F42E","prefix":"F42E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACEGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTREPLACEGETREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUREPLACEGETREF","fift_examples":[],"opcode":"F42F","stack":"c i D n - D\' c\' -1 or D 0"},"bytecode":{"tlb":"#F42F","prefix":"F42F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADD","since_version":0,"doc":{"category":"dict_set","description":"An _Add_ counterpart of `DICTSET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if it is not already present in `D`.","gas":"","fift":"DICTADD","fift_examples":[],"opcode":"F432","stack":"x k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F432","prefix":"F432","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADDREF","since_version":0,"doc":{"category":"dict_set","description":"An _Add_ counterpart of `DICTSETREF`.","gas":"","fift":"DICTADDREF","fift_examples":[],"opcode":"F433","stack":"c k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F433","prefix":"F433","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADD","since_version":0,"doc":{"category":"dict_set","description":"`DICTADD`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIADD","fift_examples":[],"opcode":"F434","stack":"x i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F434","prefix":"F434","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADDREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIADDREF","fift_examples":[],"opcode":"F435","stack":"c i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F435","prefix":"F435","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADD","since_version":0,"doc":{"category":"dict_set","description":"`DICTADD`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUADD","fift_examples":[],"opcode":"F436","stack":"x i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F436","prefix":"F436","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADDREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUADDREF","fift_examples":[],"opcode":"F437","stack":"c i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F437","prefix":"F437","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADDGET","since_version":0,"doc":{"category":"dict_set","description":"An _Add_ counterpart of `DICTSETGET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if key `k` is not already present in `D`. Otherwise, just returns the old value `y` without changing the dictionary.","gas":"","fift":"DICTADDGET","fift_examples":[],"opcode":"F43A","stack":"x k D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F43A","prefix":"F43A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADDGETREF","since_version":0,"doc":{"category":"dict_set","description":"An _Add_ counterpart of `DICTSETGETREF`.","gas":"","fift":"DICTADDGETREF","fift_examples":[],"opcode":"F43B","stack":"c k D n - D\' -1 or D c\' 0"},"bytecode":{"tlb":"#F43B","prefix":"F43B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADDGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDGET`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIADDGET","fift_examples":[],"opcode":"F43C","stack":"x i D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F43C","prefix":"F43C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADDGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDGETREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIADDGETREF","fift_examples":[],"opcode":"F43D","stack":"c i D n - D\' -1 or D c\' 0"},"bytecode":{"tlb":"#F43D","prefix":"F43D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADDGET","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDGET`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUADDGET","fift_examples":[],"opcode":"F43E","stack":"x i D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F43E","prefix":"F43E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADDGETREF","since_version":0,"doc":{"category":"dict_set","description":"`DICTADDGETREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUADDGETREF","fift_examples":[],"opcode":"F43F","stack":"c i D n - D\' -1 or D c\' 0"},"bytecode":{"tlb":"#F43F","prefix":"F43F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"c2","value_types":["Cell"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTSETB","fift_examples":[],"opcode":"F441","stack":"b k D n - D\'"},"bytecode":{"tlb":"#F441","prefix":"F441","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTISETB","fift_examples":[],"opcode":"F442","stack":"b i D n - D\'"},"bytecode":{"tlb":"#F442","prefix":"F442","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUSETB","fift_examples":[],"opcode":"F443","stack":"b i D n - D\'"},"bytecode":{"tlb":"#F443","prefix":"F443","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTSETGETB","fift_examples":[],"opcode":"F445","stack":"b k D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F445","prefix":"F445","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTISETGETB","fift_examples":[],"opcode":"F446","stack":"b i D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F446","prefix":"F446","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUSETGETB","fift_examples":[],"opcode":"F447","stack":"b i D n - D\' y -1 or D\' 0"},"bytecode":{"tlb":"#F447","prefix":"F447","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACEB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTREPLACEB","fift_examples":[],"opcode":"F449","stack":"b k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F449","prefix":"F449","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACEB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTIREPLACEB","fift_examples":[],"opcode":"F44A","stack":"b i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F44A","prefix":"F44A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACEB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUREPLACEB","fift_examples":[],"opcode":"F44B","stack":"b i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F44B","prefix":"F44B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREPLACEGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTREPLACEGETB","fift_examples":[],"opcode":"F44D","stack":"b k D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F44D","prefix":"F44D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREPLACEGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTIREPLACEGETB","fift_examples":[],"opcode":"F44E","stack":"b i D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F44E","prefix":"F44E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREPLACEGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUREPLACEGETB","fift_examples":[],"opcode":"F44F","stack":"b i D n - D\' y -1 or D 0"},"bytecode":{"tlb":"#F44F","prefix":"F44F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADDB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTADDB","fift_examples":[],"opcode":"F451","stack":"b k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F451","prefix":"F451","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADDB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTIADDB","fift_examples":[],"opcode":"F452","stack":"b i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F452","prefix":"F452","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADDB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUADDB","fift_examples":[],"opcode":"F453","stack":"b i D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F453","prefix":"F453","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTADDGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTADDGETB","fift_examples":[],"opcode":"F455","stack":"b k D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F455","prefix":"F455","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIADDGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTIADDGETB","fift_examples":[],"opcode":"F456","stack":"b i D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F456","prefix":"F456","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUADDGETB","since_version":0,"doc":{"category":"dict_set_builder","description":"","gas":"","fift":"DICTUADDGETB","fift_examples":[],"opcode":"F457","stack":"b i D n - D\' -1 or D y 0"},"bytecode":{"tlb":"#F457","prefix":"F457","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTDEL","since_version":0,"doc":{"category":"dict_delete","description":"Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D\'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.","gas":"","fift":"DICTDEL","fift_examples":[],"opcode":"F459","stack":"k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F459","prefix":"F459","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIDEL","since_version":0,"doc":{"category":"dict_delete","description":"A version of `DICTDEL` with the key represented by a signed `n`-bit _Integer_ `i`. If `i` does not fit into `n` bits, simply returns `D` `0` (\'\'key not found, dictionary unmodified\'\').","gas":"","fift":"DICTIDEL","fift_examples":[],"opcode":"F45A","stack":"i D n - D\' ?"},"bytecode":{"tlb":"#F45A","prefix":"F45A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUDEL","since_version":0,"doc":{"category":"dict_delete","description":"Similar to `DICTIDEL`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUDEL","fift_examples":[],"opcode":"F45B","stack":"i D n - D\' ?"},"bytecode":{"tlb":"#F45B","prefix":"F45B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTDELGET","since_version":0,"doc":{"category":"dict_delete","description":"Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D\'`, the original value `x` associated with the key `k` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.","gas":"","fift":"DICTDELGET","fift_examples":[],"opcode":"F462","stack":"k D n - D\' x -1 or D 0"},"bytecode":{"tlb":"#F462","prefix":"F462","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTDELGETREF","since_version":0,"doc":{"category":"dict_delete","description":"Similar to `DICTDELGET`, but with `LDREF` `ENDS` applied to `x` on success, so that the value returned `c` is a _Cell_.","gas":"","fift":"DICTDELGETREF","fift_examples":[],"opcode":"F463","stack":"k D n - D\' c -1 or D 0"},"bytecode":{"tlb":"#F463","prefix":"F463","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIDELGET","since_version":0,"doc":{"category":"dict_delete","description":"`DICTDELGET`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIDELGET","fift_examples":[],"opcode":"F464","stack":"i D n - D\' x -1 or D 0"},"bytecode":{"tlb":"#F464","prefix":"F464","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIDELGETREF","since_version":0,"doc":{"category":"dict_delete","description":"`DICTDELGETREF`, but with `i` a signed `n`-bit integer.","gas":"","fift":"DICTIDELGETREF","fift_examples":[],"opcode":"F465","stack":"i D n - D\' c -1 or D 0"},"bytecode":{"tlb":"#F465","prefix":"F465","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUDELGET","since_version":0,"doc":{"category":"dict_delete","description":"`DICTDELGET`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUDELGET","fift_examples":[],"opcode":"F466","stack":"i D n - D\' x -1 or D 0"},"bytecode":{"tlb":"#F466","prefix":"F466","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUDELGETREF","since_version":0,"doc":{"category":"dict_delete","description":"`DICTDELGETREF`, but with `i` an unsigned `n`-bit integer.","gas":"","fift":"DICTUDELGETREF","fift_examples":[],"opcode":"F467","stack":"i D n - D\' c -1 or D 0"},"bytecode":{"tlb":"#F467","prefix":"F467","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"A variant of `DICTGETREF` that returns _Null_ instead of the value `c^?` if the key `k` is absent from dictionary `D`.","gas":"","fift":"DICTGETOPTREF","fift_examples":[],"opcode":"F469","stack":"k D n - c^?"},"bytecode":{"tlb":"#F469","prefix":"F469","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"`DICTGETOPTREF`, but with `i` a signed `n`-bit integer. If the key `i` is out of range, also returns _Null_.","gas":"","fift":"DICTIGETOPTREF","fift_examples":[],"opcode":"F46A","stack":"i D n - c^?"},"bytecode":{"tlb":"#F46A","prefix":"F46A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"`DICTGETOPTREF`, but with `i` an unsigned `n`-bit integer. If the key `i` is out of range, also returns _Null_.","gas":"","fift":"DICTUGETOPTREF","fift_examples":[],"opcode":"F46B","stack":"i D n - c^?"},"bytecode":{"tlb":"#F46B","prefix":"F46B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTSETGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"A variant of both `DICTGETOPTREF` and `DICTSETGETREF` that sets the value corresponding to key `k` in dictionary `D` to `c^?` (if `c^?` is _Null_, then the key is deleted instead), and returns the old value `~c^?` (if the key `k` was absent before, returns _Null_ instead).","gas":"","fift":"DICTSETGETOPTREF","fift_examples":[],"opcode":"F46D","stack":"c^? k D n - D\' ~c^?"},"bytecode":{"tlb":"#F46D","prefix":"F46D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c2","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTISETGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"Similar to primitive `DICTSETGETOPTREF`, but using signed `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, throws a range checking exception.","gas":"","fift":"DICTISETGETOPTREF","fift_examples":[],"opcode":"F46E","stack":"c^? i D n - D\' ~c^?"},"bytecode":{"tlb":"#F46E","prefix":"F46E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c2","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUSETGETOPTREF","since_version":0,"doc":{"category":"dict_mayberef","description":"Similar to primitive `DICTSETGETOPTREF`, but using unsigned `n`-bit _Integer_ `i` as a key.","gas":"","fift":"DICTUSETGETOPTREF","fift_examples":[],"opcode":"F46F","stack":"c^? i D n - D\' ~c^?"},"bytecode":{"tlb":"#F46F","prefix":"F46F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]},{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c2","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTSET","since_version":0,"doc":{"category":"dict_prefix","description":"","gas":"","fift":"PFXDICTSET","fift_examples":[],"opcode":"F470","stack":"x k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F470","prefix":"F470","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTREPLACE","since_version":0,"doc":{"category":"dict_prefix","description":"","gas":"","fift":"PFXDICTREPLACE","fift_examples":[],"opcode":"F471","stack":"x k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F471","prefix":"F471","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTADD","since_version":0,"doc":{"category":"dict_prefix","description":"","gas":"","fift":"PFXDICTADD","fift_examples":[],"opcode":"F472","stack":"x k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F472","prefix":"F472","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTDEL","since_version":0,"doc":{"category":"dict_prefix","description":"","gas":"","fift":"PFXDICTDEL","fift_examples":[],"opcode":"F473","stack":"k D n - D\' -1 or D 0"},"bytecode":{"tlb":"#F473","prefix":"F473","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETNEXT","since_version":0,"doc":{"category":"dict_next","description":"Computes the minimal key `k\'` in dictionary `D` that is lexicographically greater than `k`, and returns `k\'` (represented by a _Slice_) along with associated value `x\'` (also represented by a _Slice_).","gas":"","fift":"DICTGETNEXT","fift_examples":[],"opcode":"F474","stack":"k D n - x\' k\' -1 or 0"},"bytecode":{"tlb":"#F474","prefix":"F474","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"k2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETNEXTEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXT`, but computes the minimal key `k\'` that is lexicographically greater than or equal to `k`.","gas":"","fift":"DICTGETNEXTEQ","fift_examples":[],"opcode":"F475","stack":"k D n - x\' k\' -1 or 0"},"bytecode":{"tlb":"#F475","prefix":"F475","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"k2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETPREV","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXT`, but computes the maximal key `k\'` lexicographically smaller than `k`.","gas":"","fift":"DICTGETPREV","fift_examples":[],"opcode":"F476","stack":"k D n - x\' k\' -1 or 0"},"bytecode":{"tlb":"#F476","prefix":"F476","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"k2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTGETPREVEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETPREV`, but computes the maximal key `k\'` lexicographically smaller than or equal to `k`.","gas":"","fift":"DICTGETPREVEQ","fift_examples":[],"opcode":"F477","stack":"k D n - x\' k\' -1 or 0"},"bytecode":{"tlb":"#F477","prefix":"F477","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"k2","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETNEXT","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, and computes the minimal key `i\'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits).","gas":"","fift":"DICTIGETNEXT","fift_examples":[],"opcode":"F478","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F478","prefix":"F478","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETNEXTEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXTEQ`, but interprets keys as signed `n`-bit integers.","gas":"","fift":"DICTIGETNEXTEQ","fift_examples":[],"opcode":"F479","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F479","prefix":"F479","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETPREV","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETPREV`, but interprets keys as signed `n`-bit integers.","gas":"","fift":"DICTIGETPREV","fift_examples":[],"opcode":"F47A","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47A","prefix":"F47A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETPREVEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETPREVEQ`, but interprets keys as signed `n`-bit integers.","gas":"","fift":"DICTIGETPREVEQ","fift_examples":[],"opcode":"F47B","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47B","prefix":"F47B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETNEXT","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, and computes the minimal key `i\'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative).","gas":"","fift":"DICTUGETNEXT","fift_examples":[],"opcode":"F47C","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47C","prefix":"F47C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETNEXTEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETNEXTEQ`, but interprets keys as unsigned `n`-bit integers.","gas":"","fift":"DICTUGETNEXTEQ","fift_examples":[],"opcode":"F47D","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47D","prefix":"F47D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETPREV","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETPREV`, but interprets keys as unsigned `n`-bit integers.","gas":"","fift":"DICTUGETPREV","fift_examples":[],"opcode":"F47E","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47E","prefix":"F47E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUGETPREVEQ","since_version":0,"doc":{"category":"dict_next","description":"Similar to `DICTGETPREVEQ`, but interprets keys a unsigned `n`-bit integers.","gas":"","fift":"DICTUGETPREVEQ","fift_examples":[],"opcode":"F47F","stack":"i D n - x\' i\' -1 or 0"},"bytecode":{"tlb":"#F47F","prefix":"F47F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x2","value_types":["Slice"]},{"type":"simple","name":"i2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTMIN","since_version":0,"doc":{"category":"dict_min","description":"Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.","gas":"","fift":"DICTMIN","fift_examples":[],"opcode":"F482","stack":"D n - x k -1 or 0"},"bytecode":{"tlb":"#F482","prefix":"F482","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMIN`, but returns the only reference in the value as a _Cell_ `c`.","gas":"","fift":"DICTMINREF","fift_examples":[],"opcode":"F483","stack":"D n - c k -1 or 0"},"bytecode":{"tlb":"#F483","prefix":"F483","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIMIN","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMIN` and `DICTUMIN`.","gas":"","fift":"DICTIMIN","fift_examples":[],"opcode":"F484","stack":"D n - x i -1 or 0"},"bytecode":{"tlb":"#F484","prefix":"F484","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTIMIN`, but returns the only reference in the value.","gas":"","fift":"DICTIMINREF","fift_examples":[],"opcode":"F485","stack":"D n - c i -1 or 0"},"bytecode":{"tlb":"#F485","prefix":"F485","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUMIN","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.","gas":"","fift":"DICTUMIN","fift_examples":[],"opcode":"F486","stack":"D n - x i -1 or 0"},"bytecode":{"tlb":"#F486","prefix":"F486","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTUMIN`, but returns the only reference in the value.","gas":"","fift":"DICTUMINREF","fift_examples":[],"opcode":"F487","stack":"D n - c i -1 or 0"},"bytecode":{"tlb":"#F487","prefix":"F487","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTMAX","since_version":0,"doc":{"category":"dict_min","description":"Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.","gas":"","fift":"DICTMAX","fift_examples":[],"opcode":"F48A","stack":"D n - x k -1 or 0"},"bytecode":{"tlb":"#F48A","prefix":"F48A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMAX`, but returns the only reference in the value.","gas":"","fift":"DICTMAXREF","fift_examples":[],"opcode":"F48B","stack":"D n - c k -1 or 0"},"bytecode":{"tlb":"#F48B","prefix":"F48B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIMAX","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMAX`, but computes the maximal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMAX` and `DICTUMAX`.","gas":"","fift":"DICTIMAX","fift_examples":[],"opcode":"F48C","stack":"D n - x i -1 or 0"},"bytecode":{"tlb":"#F48C","prefix":"F48C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTIMAX`, but returns the only reference in the value.","gas":"","fift":"DICTIMAXREF","fift_examples":[],"opcode":"F48D","stack":"D n - c i -1 or 0"},"bytecode":{"tlb":"#F48D","prefix":"F48D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUMAX","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`.","gas":"","fift":"DICTUMAX","fift_examples":[],"opcode":"F48E","stack":"D n - x i -1 or 0"},"bytecode":{"tlb":"#F48E","prefix":"F48E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTUMAX`, but returns the only reference in the value.","gas":"","fift":"DICTUMAXREF","fift_examples":[],"opcode":"F48F","stack":"D n - c i -1 or 0"},"bytecode":{"tlb":"#F48F","prefix":"F48F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREMMIN","since_version":0,"doc":{"category":"dict_min","description":"Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D\'`.","gas":"","fift":"DICTREMMIN","fift_examples":[],"opcode":"F492","stack":"D n - D\' x k -1 or D 0"},"bytecode":{"tlb":"#F492","prefix":"F492","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREMMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMIN`, but returns the only reference in the value as a _Cell_ `c`.","gas":"","fift":"DICTREMMINREF","fift_examples":[],"opcode":"F493","stack":"D n - D\' c k -1 or D 0"},"bytecode":{"tlb":"#F493","prefix":"F493","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREMMIN","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTREMMIN` and `DICTUREMMIN`.","gas":"","fift":"DICTIREMMIN","fift_examples":[],"opcode":"F494","stack":"D n - D\' x i -1 or D 0"},"bytecode":{"tlb":"#F494","prefix":"F494","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREMMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTIREMMIN`, but returns the only reference in the value.","gas":"","fift":"DICTIREMMINREF","fift_examples":[],"opcode":"F495","stack":"D n - D\' c i -1 or D 0"},"bytecode":{"tlb":"#F495","prefix":"F495","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREMMIN","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.","gas":"","fift":"DICTUREMMIN","fift_examples":[],"opcode":"F496","stack":"D n - D\' x i -1 or D 0"},"bytecode":{"tlb":"#F496","prefix":"F496","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREMMINREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTUREMMIN`, but returns the only reference in the value.","gas":"","fift":"DICTUREMMINREF","fift_examples":[],"opcode":"F497","stack":"D n - D\' c i -1 or D 0"},"bytecode":{"tlb":"#F497","prefix":"F497","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREMMAX","since_version":0,"doc":{"category":"dict_min","description":"Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D\'`.","gas":"","fift":"DICTREMMAX","fift_examples":[],"opcode":"F49A","stack":"D n - D\' x k -1 or D 0"},"bytecode":{"tlb":"#F49A","prefix":"F49A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTREMMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMAX`, but returns the only reference in the value as a _Cell_ `c`.","gas":"","fift":"DICTREMMAXREF","fift_examples":[],"opcode":"F49B","stack":"D n - D\' c k -1 or D 0"},"bytecode":{"tlb":"#F49B","prefix":"F49B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"k","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREMMAX","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMAX`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTREMMAX` and `DICTUREMMAX`.","gas":"","fift":"DICTIREMMAX","fift_examples":[],"opcode":"F49C","stack":"D n - D\' x i -1 or D 0"},"bytecode":{"tlb":"#F49C","prefix":"F49C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIREMMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTIREMMAX`, but returns the only reference in the value.","gas":"","fift":"DICTIREMMAXREF","fift_examples":[],"opcode":"F49D","stack":"D n - D\' c i -1 or D 0"},"bytecode":{"tlb":"#F49D","prefix":"F49D","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREMMAX","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTREMMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`.","gas":"","fift":"DICTUREMMAX","fift_examples":[],"opcode":"F49E","stack":"D n - D\' x i -1 or D 0"},"bytecode":{"tlb":"#F49E","prefix":"F49E","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTUREMMAXREF","since_version":0,"doc":{"category":"dict_min","description":"Similar to `DICTUREMMAX`, but returns the only reference in the value.","gas":"","fift":"DICTUREMMAXREF","fift_examples":[],"opcode":"F49F","stack":"D n - D\' c i -1 or D 0"},"bytecode":{"tlb":"#F49F","prefix":"F49F","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]}]},{"value":-1,"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]},{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"i","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DICTIGETJMP","since_version":0,"doc":{"category":"dict_special","description":"Similar to `DICTIGET`, but with `x` `BLESS`ed into a continuation with a subsequent `JMPX` to it on success. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.","gas":"","fift":"DICTIGETJMP","fift_examples":[],"opcode":"F4A0","stack":"i D n - "},"bytecode":{"tlb":"#F4A0","prefix":"F4A0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"DICTUGETJMP","since_version":0,"doc":{"category":"dict_special","description":"Similar to `DICTIGETJMP`, but performs `DICTUGET` instead of `DICTIGET`.","gas":"","fift":"DICTUGETJMP","fift_examples":[],"opcode":"F4A1","stack":"i D n - "},"bytecode":{"tlb":"#F4A1","prefix":"F4A1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"DICTIGETEXEC","since_version":0,"doc":{"category":"dict_special","description":"Similar to `DICTIGETJMP`, but with `EXECUTE` instead of `JMPX`.","gas":"","fift":"DICTIGETEXEC","fift_examples":[],"opcode":"F4A2","stack":"i D n - "},"bytecode":{"tlb":"#F4A2","prefix":"F4A2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"DICTUGETEXEC","since_version":0,"doc":{"category":"dict_special","description":"Similar to `DICTUGETJMP`, but with `EXECUTE` instead of `JMPX`.","gas":"","fift":"DICTUGETEXEC","fift_examples":[],"opcode":"F4A3","stack":"i D n - "},"bytecode":{"tlb":"#F4A3","prefix":"F4A3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"DICTPUSHCONST","since_version":0,"doc":{"category":"dict_special","description":"Pushes a non-empty constant dictionary `D` (as a `Cell^?`) along with its key length `0 <= n <= 1023`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete `DICTPUSHCONST` instruction can be obtained by first serializing `xF4A4_`, then the non-empty dictionary itself (one `1` bit and a cell reference), and then the unsigned 10-bit integer `n` (as if by a `STU 10` instruction). An empty dictionary can be pushed by a `NEWDICT` primitive instead.","gas":"34","fift":"[ref] [n] DICTPUSHCONST","fift_examples":[],"opcode":"F4A6_n","stack":" - D n"},"bytecode":{"tlb":"#F4A6_ d:^Cell n:uint10","prefix":"F4A6_","operands":[{"name":"d","type":"ref","display_hints":[{"type":"dictionary","size_var":"n"}]},{"name":"n","type":"uint","size":10,"min_value":0,"max_value":1023,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTGETQ","since_version":0,"doc":{"category":"dict_prefix","description":"Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s\'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s\'\'`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and a zero flag to indicate failure.","gas":"","fift":"PFXDICTGETQ","fift_examples":[],"opcode":"F4A8","stack":"s D n - s\' x s\'\' -1 or s 0"},"bytecode":{"tlb":"#F4A8","prefix":"F4A8","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTGET","since_version":0,"doc":{"category":"dict_prefix","description":"Similar to `PFXDICTGET`, but throws a cell deserialization failure exception on failure.","gas":"","fift":"PFXDICTGET","fift_examples":[],"opcode":"F4A9","stack":"s D n - s\' x s\'\'"},"bytecode":{"tlb":"#F4A9","prefix":"F4A9","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PFXDICTGETJMP","since_version":0,"doc":{"category":"dict_prefix","description":"Similar to `PFXDICTGETQ`, but on success `BLESS`es the value `x` into a _Continuation_ and transfers control to it as if by a `JMPX`. On failure, returns `s` unchanged and continues execution.","gas":"","fift":"PFXDICTGETJMP","fift_examples":[],"opcode":"F4AA","stack":"s D n - s\' s\'\' or s"},"bytecode":{"tlb":"#F4AA","prefix":"F4AA","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"PFXDICTGETEXEC","since_version":0,"doc":{"category":"dict_prefix","description":"Similar to `PFXDICTGETJMP`, but `EXEC`utes the continuation found instead of jumping to it. On failure, throws a cell deserialization exception.","gas":"","fift":"PFXDICTGETEXEC","fift_examples":[],"opcode":"F4AB","stack":"s D n - s\' s\'\'"},"bytecode":{"tlb":"#F4AB","prefix":"F4AB","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"PFXDICTCONSTGETJMP","since_version":0,"doc":{"category":"dict_prefix","description":"Combines `[n] DICTPUSHCONST` for `0 <= n <= 1023` with `PFXDICTGETJMP`.","gas":"","fift":"[ref] [n] PFXDICTCONSTGETJMP\\n[ref] [n] PFXDICTSWITCH","fift_examples":[],"opcode":"F4AE_n","stack":"s - s\' s\'\' or s"},"bytecode":{"tlb":"#F4AE_ d:^Cell n:uint10","prefix":"F4AE_","operands":[{"name":"d","type":"ref","display_hints":[{"type":"dictionary","size_var":"n"}]},{"name":"n","type":"uint","size":10,"min_value":0,"max_value":1023,"display_hints":[]}]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"DICTIGETJMPZ","since_version":0,"doc":{"category":"dict_special","description":"A variant of `DICTIGETJMP` that returns index `i` on failure.","gas":"","fift":"DICTIGETJMPZ","fift_examples":[],"opcode":"F4BC","stack":"i D n - i or nothing"},"bytecode":{"tlb":"#F4BC","prefix":"F4BC","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"DICTUGETJMPZ","since_version":0,"doc":{"category":"dict_special","description":"A variant of `DICTUGETJMP` that returns index `i` on failure.","gas":"","fift":"DICTUGETJMPZ","fift_examples":[],"opcode":"F4BD","stack":"i D n - i or nothing"},"bytecode":{"tlb":"#F4BD","prefix":"F4BD","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x"}],"nobranch":false}},{"mnemonic":"DICTIGETEXECZ","since_version":0,"doc":{"category":"dict_special","description":"A variant of `DICTIGETEXEC` that returns index `i` on failure.","gas":"","fift":"DICTIGETEXECZ","fift_examples":[],"opcode":"F4BE","stack":"i D n - i or nothing"},"bytecode":{"tlb":"#F4BE","prefix":"F4BE","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"DICTUGETEXECZ","since_version":0,"doc":{"category":"dict_special","description":"A variant of `DICTUGETEXEC` that returns index `i` on failure.","gas":"","fift":"DICTUGETEXECZ","fift_examples":[],"opcode":"F4BF","stack":"i D n - i or nothing"},"bytecode":{"tlb":"#F4BF","prefix":"F4BF","operands":[]},"value_flow":{"inputs":{"registers":[]},"outputs":{"registers":[]}},"control_flow":{"branches":[{"type":"variable","var_name":"x","save":{"c0":{"type":"cc","save":{"c0":{"type":"register","index":0}}}}}],"nobranch":false}},{"mnemonic":"SUBDICTGET","since_version":0,"doc":{"category":"dict_sub","description":"Constructs a subdictionary consisting of all keys beginning with prefix `k` (represented by a _Slice_, the first `0 <= l <= n <= 1023` data bits of which are used as a key) of length `l` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the new subdictionary of the same type `HashmapE(n,X)` as a _Slice_ `D\'`.","gas":"","fift":"SUBDICTGET","fift_examples":[],"opcode":"F4B1","stack":"k l D n - D\'"},"bytecode":{"tlb":"#F4B1","prefix":"F4B1","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBDICTIGET","since_version":0,"doc":{"category":"dict_sub","description":"Variant of `SUBDICTGET` with the prefix represented by a signed big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 257`.","gas":"","fift":"SUBDICTIGET","fift_examples":[],"opcode":"F4B2","stack":"x l D n - D\'"},"bytecode":{"tlb":"#F4B2","prefix":"F4B2","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBDICTUGET","since_version":0,"doc":{"category":"dict_sub","description":"Variant of `SUBDICTGET` with the prefix represented by an unsigned big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 256`.","gas":"","fift":"SUBDICTUGET","fift_examples":[],"opcode":"F4B3","stack":"x l D n - D\'"},"bytecode":{"tlb":"#F4B3","prefix":"F4B3","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBDICTRPGET","since_version":0,"doc":{"category":"dict_sub","description":"Similar to `SUBDICTGET`, but removes the common prefix `k` from all keys of the new dictionary `D\'`, which becomes of type `HashmapE(n-l,X)`.","gas":"","fift":"SUBDICTRPGET","fift_examples":[],"opcode":"F4B5","stack":"k l D n - D\'"},"bytecode":{"tlb":"#F4B5","prefix":"F4B5","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Slice"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBDICTIRPGET","since_version":0,"doc":{"category":"dict_sub","description":"Variant of `SUBDICTRPGET` with the prefix represented by a signed big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 257`.","gas":"","fift":"SUBDICTIRPGET","fift_examples":[],"opcode":"F4B6","stack":"x l D n - D\'"},"bytecode":{"tlb":"#F4B6","prefix":"F4B6","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SUBDICTURPGET","since_version":0,"doc":{"category":"dict_sub","description":"Variant of `SUBDICTRPGET` with the prefix represented by an unsigned big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 256`.","gas":"","fift":"SUBDICTURPGET","fift_examples":[],"opcode":"F4B7","stack":"x l D n - D\'"},"bytecode":{"tlb":"#F4B7","prefix":"F4B7","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"l","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Slice","Null"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"D2","value_types":["Slice","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ACCEPT","since_version":0,"doc":{"category":"app_gas","description":"Sets current gas limit `g_l` to its maximal allowed value `g_m`, and resets the gas credit `g_c` to zero, decreasing the value of `g_r` by `g_c` in the process.\\nIn other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.","gas":"26","fift":"ACCEPT","fift_examples":[],"opcode":"F800","stack":"-"},"bytecode":{"tlb":"#F800","prefix":"F800","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"special","name":"gas"}]},"outputs":{"stack":[],"registers":[{"type":"special","name":"gas"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETGASLIMIT","since_version":0,"doc":{"category":"app_gas","description":"Sets current gas limit `g_l` to the minimum of `g` and `g_m`, and resets the gas credit `g_c` to zero. If the gas consumed so far (including the present instruction) exceeds the resulting value of `g_l`, an (unhandled) out of gas exception is thrown before setting new gas limits. Notice that `SETGASLIMIT` with an argument `g >= 2^63-1` is equivalent to `ACCEPT`.","gas":"26","fift":"SETGASLIMIT","fift_examples":[],"opcode":"F801","stack":"g - "},"bytecode":{"tlb":"#F801","prefix":"F801","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"g","value_types":["Integer"]}],"registers":[{"type":"special","name":"gas"}]},"outputs":{"stack":[],"registers":[{"type":"special","name":"gas"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GASCONSUMED","since_version":4,"doc":{"category":"app_gas","description":"Returns gas consumed by VM so far (including this instruction).","gas":"26","fift":"GASCONSUMED","fift_examples":[],"opcode":"F807","stack":"- g_c"},"bytecode":{"tlb":"#F807","prefix":"F807","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"g_c","value_types":["Integer"]}],"registers":[{"type":"special","name":"gas"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"COMMIT","since_version":0,"doc":{"category":"app_gas","description":"Commits the current state of registers `c4` (\'\'persistent data\'\') and `c5` (\'\'actions\'\') so that the current execution is considered \'\'successful\'\' with the saved values even if an exception is thrown later.","gas":"26","fift":"COMMIT","fift_examples":[],"opcode":"F80F","stack":"-"},"bytecode":{"tlb":"#F80F","prefix":"F80F","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":4},{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"special","name":"cstate"}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RANDU256","since_version":0,"doc":{"category":"app_rnd","description":"Generates a new pseudo-random unsigned 256-bit _Integer_ `x`. The algorithm is as follows: if `r` is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its `sha512(r)` is computed; the first 32 bytes of this hash are stored as the new value `r\'` of the random seed, and the remaining 32 bytes are returned as the next random value `x`.","gas":"26+|c7|+|c1_1|","fift":"RANDU256","fift_examples":[],"opcode":"F810","stack":"- x"},"bytecode":{"tlb":"#F810","prefix":"F810","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RAND","since_version":0,"doc":{"category":"app_rnd","description":"Generates a new pseudo-random integer `z` in the range `0...y-1` (or `y...-1`, if `y<0`). More precisely, an unsigned random value `x` is generated as in `RAND256U`; then `z:=floor(x*y/2^256)` is computed.\\nEquivalent to `RANDU256` `256 MULRSHIFT`.","gas":"26+|c7|+|c1_1|","fift":"RAND","fift_examples":[],"opcode":"F811","stack":"y - z"},"bytecode":{"tlb":"#F811","prefix":"F811","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETRAND","since_version":0,"doc":{"category":"app_rnd","description":"Sets the random seed to unsigned 256-bit _Integer_ `x`.","gas":"26+|c7|+|c1_1|","fift":"SETRAND","fift_examples":[],"opcode":"F814","stack":"x - "},"bytecode":{"tlb":"#F814","prefix":"F814","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ADDRAND","since_version":0,"doc":{"category":"app_rnd","description":"Mixes unsigned 256-bit _Integer_ `x` into the random seed `r` by setting the random seed to `Sha` of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed `r`, and the second with the big-endian representation of `x`.","gas":"26","fift":"ADDRAND\\nRANDOMIZE","fift_examples":[],"opcode":"F815","stack":"x - "},"bytecode":{"tlb":"#F815","prefix":"F815","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETPARAM","since_version":0,"doc":{"category":"app_config","description":"Returns the `i`-th parameter from the _Tuple_ provided at `c7` for `0 <= i <= 15`. Equivalent to `c7 PUSHCTR` `FIRST` `[i] INDEX`.\\nIf one of these internal operations fails, throws an appropriate type checking or range checking exception.","gas":"26","fift":"[i] GETPARAM","fift_examples":[],"opcode":"F82i","stack":" - x"},"bytecode":{"tlb":"#F82 i:uint4","prefix":"F82","operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CONFIGDICT","since_version":0,"doc":{"category":"app_config","description":"Returns the global configuration dictionary along with its key length (32).\\nEquivalent to `CONFIGROOT` `32 PUSHINT`.","gas":"26","fift":"CONFIGDICT","fift_examples":[],"opcode":"F830","stack":" - D 32"},"bytecode":{"tlb":"#F830","prefix":"F830","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice","Null"]},{"type":"const","value":32,"value_type":"Integer"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CONFIGPARAM","since_version":0,"doc":{"category":"app_config","description":"Returns the value of the global configuration parameter with integer index `i` as a _Cell_ `c`, and a flag to indicate success.\\nEquivalent to `CONFIGDICT` `DICTIGETREF`.","gas":"","fift":"CONFIGPARAM","fift_examples":[],"opcode":"F832","stack":"i - c -1 or 0"},"bytecode":{"tlb":"#F832","prefix":"F832","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"c","value_types":["Cell"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CONFIGOPTPARAM","since_version":0,"doc":{"category":"app_config","description":"Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.\\nEquivalent to `CONFIGDICT` `DICTIGETOPTREF`.","gas":"","fift":"CONFIGOPTPARAM","fift_examples":[],"opcode":"F833","stack":"i - c^?"},"bytecode":{"tlb":"#F833","prefix":"F833","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell","Null"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PREVMCBLOCKS","since_version":4,"doc":{"category":"app_config","description":"Retrives `last_mc_blocks` part of PrevBlocksInfo from c7 (parameter 13).","gas":"","fift":"PREVMCBLOCKS","fift_examples":[],"opcode":"F83400","stack":"- t"},"bytecode":{"tlb":"#F83400","prefix":"F83400","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PREVKEYBLOCK","since_version":4,"doc":{"category":"app_config","description":"Retrives `prev_key_block` part of PrevBlocksInfo from c7 (parameter 13).","gas":"","fift":"PREVKEYBLOCK","fift_examples":[],"opcode":"F83401","stack":"- t"},"bytecode":{"tlb":"#F83401","prefix":"F83401","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GLOBALID","since_version":4,"doc":{"category":"app_config","description":"Retrieves `global_id` from 19 network config.","gas":"","fift":"GLOBALID","fift_examples":[],"opcode":"F835","stack":"- i"},"bytecode":{"tlb":"#F835","prefix":"F835","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"i","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETGASFEE","since_version":6,"doc":{"category":"app_config","description":"Calculates gas fee","gas":"","fift":"GETGASFEE","fift_examples":[],"opcode":"F836","stack":"gas_used is_mc - price"},"bytecode":{"tlb":"#F836","prefix":"F836","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"gas_used","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"price","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETSTORAGEFEE","since_version":6,"doc":{"category":"app_config","description":"Calculates storage fees (only current StoragePrices entry is used).","gas":"","fift":"GETSTORAGEFEE","fift_examples":[],"opcode":"F837","stack":"cells bits seconds is_mc - price"},"bytecode":{"tlb":"#F837","prefix":"F837","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cells","value_types":["Integer"]},{"type":"simple","name":"bits","value_types":["Integer"]},{"type":"simple","name":"seconds","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"price","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETFORWARDFEE","since_version":6,"doc":{"category":"app_config","description":"Calculates forward fee.","gas":"","fift":"GETFORWARDFEE","fift_examples":[],"opcode":"F838","stack":"cells bits is_mc - price"},"bytecode":{"tlb":"#F838","prefix":"F838","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cells","value_types":["Integer"]},{"type":"simple","name":"bits","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"price","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETPRECOMPILEDGAS","since_version":6,"doc":{"category":"app_config","description":"Returns gas usage for the current contract if it is precompiled, `null` otherwise.","gas":"","fift":"GETPRECOMPILEDGAS","fift_examples":[],"opcode":"F839","stack":"- x"},"bytecode":{"tlb":"#F839","prefix":"F839","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETORIGINALFWDFEE","since_version":6,"doc":{"category":"app_config","description":"Calculate `fwd_fee * 2^16 / first_frac`. Can be used to get the original `fwd_fee` of the message.","gas":"","fift":"GETORIGINALFWDFEE","fift_examples":[],"opcode":"F83A","stack":"fwd_fee is_mc - orig_fwd_fee"},"bytecode":{"tlb":"#F83A","prefix":"F83A","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"fwd_fee","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"orig_fwd_fee","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETGASFEESIMPLE","since_version":6,"doc":{"category":"app_config","description":"Same as `GETGASFEE`, but without flat price (just `(gas_used * price) / 2^16)`.","gas":"","fift":"GETGASFEESIMPLE","fift_examples":[],"opcode":"F83B","stack":"gas_used is_mc - price"},"bytecode":{"tlb":"#F83B","prefix":"F83B","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"gas_used","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"price","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETFORWARDFEESIMPLE","since_version":6,"doc":{"category":"app_config","description":"Same as `GETFORWARDFEE`, but without lump price (just (`bits*bit_price + cells*cell_price) / 2^16`).","gas":"","fift":"GETFORWARDFEESIMPLE","fift_examples":[],"opcode":"F83C","stack":"cells bits is_mc - price"},"bytecode":{"tlb":"#F83C","prefix":"F83C","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"cells","value_types":["Integer"]},{"type":"simple","name":"bits","value_types":["Integer"]},{"type":"simple","name":"is_mc","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"price","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETGLOBVAR","since_version":0,"doc":{"category":"app_global","description":"Returns the `k`-th global variable for `0 <= k < 255`.\\nEquivalent to `c7 PUSHCTR` `SWAP` `INDEXVARQ`.","gas":"26","fift":"GETGLOBVAR","fift_examples":[],"opcode":"F840","stack":"k - x"},"bytecode":{"tlb":"#F840","prefix":"F840","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"GETGLOB","since_version":0,"doc":{"category":"app_global","description":"Returns the `k`-th global variable for `1 <= k <= 31`.\\nEquivalent to `c7 PUSHCTR` `[k] INDEXQ`.","gas":"26","fift":"[k] GETGLOB","fift_examples":[],"opcode":"F85_k","stack":" - x"},"bytecode":{"tlb":"#F85_ k:(## 5) {1 <= k}","prefix":"F85_","operands_range_check":{"length":5,"from":1,"to":31},"operands":[{"name":"k","type":"uint","size":5,"min_value":1,"max_value":31,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[{"type":"simple","name":"x"}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETGLOBVAR","since_version":0,"doc":{"category":"app_global","description":"Assigns `x` to the `k`-th global variable for `0 <= k < 255`.\\nEquivalent to `c7 PUSHCTR` `ROTREV` `SETINDEXVARQ` `c7 POPCTR`.","gas":"26+|c7\'|","fift":"SETGLOBVAR","fift_examples":[],"opcode":"F860","stack":"x k - "},"bytecode":{"tlb":"#F860","prefix":"F860","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETGLOB","since_version":0,"doc":{"category":"app_global","description":"Assigns `x` to the `k`-th global variable for `1 <= k <= 31`.\\nEquivalent to `c7 PUSHCTR` `SWAP` `k SETINDEXQ` `c7 POPCTR`.","gas":"26+|c7\'|","fift":"[k] SETGLOB","fift_examples":[],"opcode":"F87_k","stack":"x - "},"bytecode":{"tlb":"#F87_ k:(## 5) {1 <= k}","prefix":"F87_","operands_range_check":{"length":5,"from":1,"to":31},"operands":[{"name":"k","type":"uint","size":5,"min_value":1,"max_value":31,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x"}],"registers":[{"type":"constant","index":7}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":7}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHCU","since_version":0,"doc":{"category":"app_crypto","description":"Computes the representation hash of a _Cell_ `c` and returns it as a 256-bit unsigned integer `x`. Useful for signing and checking signatures of arbitrary entities represented by a tree of cells.","gas":"26","fift":"HASHCU","fift_examples":[],"opcode":"F900","stack":"c - x"},"bytecode":{"tlb":"#F900","prefix":"F900","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHSU","since_version":0,"doc":{"category":"app_crypto","description":"Computes the hash of a _Slice_ `s` and returns it as a 256-bit unsigned integer `x`. The result is the same as if an ordinary cell containing only data and references from `s` had been created and its hash computed by `HASHCU`.","gas":"526","fift":"HASHSU","fift_examples":[],"opcode":"F901","stack":"s - x"},"bytecode":{"tlb":"#F901","prefix":"F901","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SHA256U","since_version":0,"doc":{"category":"app_crypto","description":"Computes `Sha` of the data bits of _Slice_ `s`. If the bit length of `s` is not divisible by eight, throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.","gas":"26","fift":"SHA256U","fift_examples":[],"opcode":"F902","stack":"s - x"},"bytecode":{"tlb":"#F902","prefix":"F902","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXT_SHA256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/33 gas per byte","fift":"HASHEXT_SHA256","fift_examples":[],"opcode":"F90400","stack":"s_1 ... s_n n - h"},"bytecode":{"tlb":"#F90400","prefix":"F90400","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXT_SHA512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/16 gas per byte","fift":"HASHEXT_SHA512","fift_examples":[],"opcode":"F90401","stack":"s_1 ... s_n n - h1 h2"},"bytecode":{"tlb":"#F90401","prefix":"F90401","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXT_BLAKE2B","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/19 gas per byte","fift":"HASHEXT_BLAKE2B","fift_examples":[],"opcode":"F90402","stack":"s_1 ... s_n n - h1 h2"},"bytecode":{"tlb":"#F90402","prefix":"F90402","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXT_KECCAK256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/11 gas per byte","fift":"HASHEXT_KECCAK256","fift_examples":[],"opcode":"F90403","stack":"s_1 ... s_n n - h"},"bytecode":{"tlb":"#F90403","prefix":"F90403","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXT_KECCAK512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/19 gas per byte","fift":"HASHEXT_KECCAK512","fift_examples":[],"opcode":"F90404","stack":"s_1 ... s_n n - h1 h2"},"bytecode":{"tlb":"#F90404","prefix":"F90404","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTR_SHA256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/33 gas per byte","fift":"HASHEXTR_SHA256","fift_examples":[],"opcode":"F90500","stack":"s_n ... s_1 n - h"},"bytecode":{"tlb":"#F90500","prefix":"F90500","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTR_SHA512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/16 gas per byte","fift":"HASHEXTR_SHA512","fift_examples":[],"opcode":"F90501","stack":"s_n ... s_1 n - h1 h2"},"bytecode":{"tlb":"#F90501","prefix":"F90501","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTR_BLAKE2B","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/19 gas per byte","fift":"HASHEXTR_BLAKE2B","fift_examples":[],"opcode":"F90502","stack":"s_n ... s_1 n - h1 h2"},"bytecode":{"tlb":"#F90502","prefix":"F90502","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTR_KECCAK256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/11 gas per byte","fift":"HASHEXTR_KECCAK256","fift_examples":[],"opcode":"F90503","stack":"s_n ... s_1 n - h"},"bytecode":{"tlb":"#F90503","prefix":"F90503","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTR_KECCAK512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`.","gas":"1/19 gas per byte","fift":"HASHEXTR_KECCAK512","fift_examples":[],"opcode":"F90504","stack":"s_n ... s_1 n - h1 h2"},"bytecode":{"tlb":"#F90504","prefix":"F90504","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTA_SHA256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/33 gas per byte","fift":"HASHEXTA_SHA256","fift_examples":[],"opcode":"F90600","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90600","prefix":"F90600","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTA_SHA512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/16 gas per byte","fift":"HASHEXTA_SHA512","fift_examples":[],"opcode":"F90601","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90601","prefix":"F90601","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTA_BLAKE2B","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/19 gas per byte","fift":"HASHEXTA_BLAKE2B","fift_examples":[],"opcode":"F90602","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90602","prefix":"F90602","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTA_KECCAK256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/11 gas per byte","fift":"HASHEXTA_KECCAK256","fift_examples":[],"opcode":"F90603","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90603","prefix":"F90603","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTA_KECCAK512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/6 gas per byte","fift":"HASHEXTA_KECCAK512","fift_examples":[],"opcode":"F90604","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90604","prefix":"F90604","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTAR_SHA256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/33 gas per byte","fift":"HASHEXTAR_SHA256","fift_examples":[],"opcode":"F90700","stack":"b s_1 ... s_n n - b\'"},"bytecode":{"tlb":"#F90700","prefix":"F90700","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTAR_SHA512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/16 gas per byte","fift":"HASHEXTAR_SHA512","fift_examples":[],"opcode":"F90701","stack":"b s_n ... s_1 n - b\'"},"bytecode":{"tlb":"#F90701","prefix":"F90701","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTAR_BLAKE2B","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/19 gas per byte","fift":"HASHEXTAR_BLAKE2B","fift_examples":[],"opcode":"F90702","stack":"b s_n ... s_1 n - b\'"},"bytecode":{"tlb":"#F90702","prefix":"F90702","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTAR_KECCAK256","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/11 gas per byte","fift":"HASHEXTAR_KECCAK256","fift_examples":[],"opcode":"F90703","stack":"b s_n ... s_1 n - b\'"},"bytecode":{"tlb":"#F90703","prefix":"F90703","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"HASHEXTAR_KECCAK512","since_version":4,"doc":{"category":"app_crypto","description":"Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`.","gas":"1/6 gas per byte","fift":"HASHEXTAR_KECCAK512","fift_examples":[],"opcode":"F90704","stack":"b s_n ... s_1 n - b\'"},"bytecode":{"tlb":"#F90704","prefix":"F90704","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"array","name":"input_parts","length_var":"n","array_entry":[{"type":"simple","name":"s","value_types":["Slice","Builder"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHKSIGNU","since_version":0,"doc":{"category":"app_crypto","description":"Checks the Ed25519-signature `s` of a hash `h` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key `k` (also represented by a 256-bit unsigned integer).\\nThe signature `s` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is `-1` if the signature is valid, `0` otherwise.\\nNotice that `CHKSIGNU` is equivalent to `ROT` `NEWC` `256 STU` `ENDC` `ROTREV` `CHKSIGNS`, i.e., to `CHKSIGNS` with the first argument `d` set to 256-bit _Slice_ containing `h`. Therefore, if `h` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside `CHKSIGNS`.","gas":"26","fift":"CHKSIGNU","fift_examples":[],"opcode":"F910","stack":"h s k - ?"},"bytecode":{"tlb":"#F910","prefix":"F910","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]},{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHKSIGNS","since_version":0,"doc":{"category":"app_crypto","description":"Checks whether `s` is a valid Ed25519-signature of the data portion of _Slice_ `d` using public key `k`, similarly to `CHKSIGNU`. If the bit length of _Slice_ `d` is not divisible by eight, throws a cell underflow exception. The verification of Ed25519 signatures is the standard one, with `Sha` used to reduce `d` to the 256-bit number that is actually signed.","gas":"26","fift":"CHKSIGNS","fift_examples":[],"opcode":"F911","stack":"d s k - ?"},"bytecode":{"tlb":"#F911","prefix":"F911","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"d","value_types":["Slice"]},{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"ECRECOVER","since_version":4,"doc":{"category":"app_crypto","description":"Recovers public key from signature, identical to Bitcoin/Ethereum operations. Takes 32-byte hash as uint256 `hash`; 65-byte signature as uint8 `v` and uint256 `r`, `s`. Returns `0` on failure, public key and `-1` on success. 65-byte public key is returned as uint8 `h`, uint256 `x1`, `x2`.","gas":"1526","fift":"ECRECOVER","fift_examples":[],"opcode":"F912","stack":"hash v r s - 0 or h x1 x2 -1"},"bytecode":{"tlb":"#F912","prefix":"F912","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"hash","value_types":["Integer"]},{"type":"simple","name":"v","value_types":["Integer"]},{"type":"simple","name":"r","value_types":["Integer"]},{"type":"simple","name":"s","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"h","value_types":["Integer"]},{"type":"simple","name":"x1","value_types":["Integer"]},{"type":"simple","name":"x2","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"P256_CHKSIGNU","since_version":4,"doc":{"category":"app_crypto","description":"Checks seck256r1-signature `sig` of a number `h` (a 256-bit unsigned integer, usually computed as the hash of some data) and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`).","gas":"3526","fift":"P256_CHKSIGNU","fift_examples":[],"opcode":"F914","stack":"h sig k - ?"},"bytecode":{"tlb":"#F914","prefix":"F914","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"d","value_types":["Slice"]},{"type":"simple","name":"sig","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"P256_CHKSIGNS","since_version":4,"doc":{"category":"app_crypto","description":"Checks seck256r1-signature `sig` of data portion of slice `d` and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`).","gas":"3526","fift":"P256_CHKSIGNS","fift_examples":[],"opcode":"F915","stack":"d sig k - ?"},"bytecode":{"tlb":"#F915","prefix":"F915","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"d","value_types":["Slice"]},{"type":"simple","name":"sig","value_types":["Slice"]},{"type":"simple","name":"k","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_FROMHASH","since_version":4,"doc":{"category":"app_crypto","description":"Deterministically generates a valid point `x` from a 512-bit hash (given as two 256-bit integers).","gas":"626","fift":"RIST255_FROMHASH","fift_examples":[],"opcode":"F920","stack":"h1 h2 - x"},"bytecode":{"tlb":"#F920","prefix":"F920","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"h1","value_types":["Integer"]},{"type":"simple","name":"h2","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_VALIDATE","since_version":4,"doc":{"category":"app_crypto","description":"Checks that integer `x` is a valid representation of some curve point. Throws range_chk on error.","gas":"226","fift":"RIST255_VALIDATE","fift_examples":[],"opcode":"F921","stack":"x -"},"bytecode":{"tlb":"#F921","prefix":"F921","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_ADD","since_version":4,"doc":{"category":"app_crypto","description":"Addition of two points on a curve.","gas":"626","fift":"RIST255_ADD","fift_examples":[],"opcode":"F922","stack":"x y - x+y"},"bytecode":{"tlb":"#F922","prefix":"F922","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_SUB","since_version":4,"doc":{"category":"app_crypto","description":"Subtraction of two points on curve.","gas":"626","fift":"RIST255_SUB","fift_examples":[],"opcode":"F923","stack":"x y - x-y"},"bytecode":{"tlb":"#F923","prefix":"F923","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_MUL","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative.","gas":"2026","fift":"RIST255_MUL","fift_examples":[],"opcode":"F924","stack":"x n - x*n"},"bytecode":{"tlb":"#F924","prefix":"F924","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_MULBASE","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative.","gas":"776","fift":"RIST255_MULBASE","fift_examples":[],"opcode":"F925","stack":"n - g*n"},"bytecode":{"tlb":"#F925","prefix":"F925","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_PUSHL","since_version":4,"doc":{"category":"app_crypto","description":"Pushes integer l=2^252+27742317777372353535851937790883648493, which is the order of the group.","gas":"26","fift":"RIST255_PUSHL","fift_examples":[],"opcode":"F926","stack":"- l"},"bytecode":{"tlb":"#F926","prefix":"F926","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_QVALIDATE","since_version":4,"doc":{"category":"app_crypto","description":"Checks that integer `x` is a valid representation of some curve point. Returns -1 on success and 0 on failure.","gas":"234","fift":"RIST255_QVALIDATE","fift_examples":[],"opcode":"B7F921","stack":"x - 0 or -1"},"bytecode":{"tlb":"#B7F921","prefix":"B7F921","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_QADD","since_version":4,"doc":{"category":"app_crypto","description":"Addition of two points on a curve. Returns -1 on success and 0 on failure.","gas":"634","fift":"RIST255_QADD","fift_examples":[],"opcode":"B7F922","stack":"x y - 0 or x+y -1"},"bytecode":{"tlb":"#B7F922","prefix":"B7F922","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"result","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_QSUB","since_version":4,"doc":{"category":"app_crypto","description":"Subtraction of two points on curve. Returns -1 on success and 0 on failure.","gas":"634","fift":"RIST255_QSUB","fift_examples":[],"opcode":"B7F923","stack":"x y - 0 or x-y -1"},"bytecode":{"tlb":"#B7F923","prefix":"B7F923","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"result","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_QMUL","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative. Returns -1 on success and 0 on failure.","gas":"2034","fift":"RIST255_QMUL","fift_examples":[],"opcode":"B7F924","stack":"x n - 0 or x*n -1"},"bytecode":{"tlb":"#B7F924","prefix":"B7F924","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"result","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RIST255_QMULBASE","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative.","gas":"784","fift":"RIST255_QMULBASE","fift_examples":[],"opcode":"B7F925","stack":"n - 0 or g*n -1"},"bytecode":{"tlb":"#B7F925","prefix":"B7F925","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"result","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_VERIFY","since_version":4,"doc":{"category":"app_crypto","description":"Checks BLS signature, return true on success, false otherwise.","gas":"61034","fift":"BLS_VERIFY","fift_examples":[],"opcode":"F93000","stack":"pk msg sgn - bool"},"bytecode":{"tlb":"#F93000","prefix":"F93000","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"pk","value_types":["Slice"]},{"type":"simple","name":"msg","value_types":["Slice"]},{"type":"simple","name":"sgn","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_AGGREGATE","since_version":4,"doc":{"category":"app_crypto","description":"Aggregates signatures. `n>0`. Throw exception if `n=0` or if some `sig_i` is not a valid signature.","gas":"n*4350-2616","fift":"BLS_AGGREGATE","fift_examples":[],"opcode":"F93001","stack":"sig_1 ... sig_n n - sig"},"bytecode":{"tlb":"#F93001","prefix":"F93001","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"signatures","length_var":"n","array_entry":[{"type":"simple","name":"sig","value_types":["Slice"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_FASTAGGREGATEVERIFY","since_version":4,"doc":{"category":"app_crypto","description":"Checks aggregated BLS signature for keys `pk_1...pk_n` and message `msg`. Return true on success, false otherwise. Return false if `n=0`.","gas":"58034+n*3000","fift":"BLS_FASTAGGREGATEVERIFY","fift_examples":[],"opcode":"F93002","stack":"pk_1 ... pk_n n msg sig - bool"},"bytecode":{"tlb":"#F93002","prefix":"F93002","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"public_keys","length_var":"n","array_entry":[{"type":"simple","name":"pk","value_types":["Slice"]}]},{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"msg","value_types":["Slice"]},{"type":"simple","name":"sig","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_AGGREGATEVERIFY","since_version":4,"doc":{"category":"app_crypto","description":"Checks aggregated BLS signature for key-message pairs `pk_1 msg_1...pk_n msg_n`. Return true on success, false otherwise. Return false if `n=0`.","gas":"38534+n*22500","fift":"BLS_AGGREGATEVERIFY","fift_examples":[],"opcode":"F93003","stack":"pk_1 msg_1 ... pk_n msg_n n sgn - bool"},"bytecode":{"tlb":"#F93003","prefix":"F93003","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"key_message_pairs","length_var":"n","array_entry":[{"type":"simple","name":"pk","value_types":["Slice"]},{"type":"simple","name":"msg","value_types":["Slice"]}]},{"type":"simple","name":"n","value_types":["Integer"]},{"type":"simple","name":"sgn","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_ADD","since_version":4,"doc":{"category":"app_crypto","description":"Addition on G1.","gas":"3934","fift":"BLS_G1_ADD","fift_examples":[],"opcode":"F93010","stack":"x y - x+y"},"bytecode":{"tlb":"#F93010","prefix":"F93010","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_SUB","since_version":4,"doc":{"category":"app_crypto","description":"Subtraction on G1.","gas":"3934","fift":"BLS_G1_SUB","fift_examples":[],"opcode":"F93011","stack":"x y - x-y"},"bytecode":{"tlb":"#F93011","prefix":"F93011","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_NEG","since_version":4,"doc":{"category":"app_crypto","description":"Negation on G1.","gas":"784","fift":"BLS_G1_NEG","fift_examples":[],"opcode":"F93012","stack":"x - -x"},"bytecode":{"tlb":"#F93012","prefix":"F93012","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_MUL","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies G1 point `x` by scalar `s`. Any `s` is valid, including negative.","gas":"5234","fift":"BLS_G1_MUL","fift_examples":[],"opcode":"F93013","stack":"x s - x*s"},"bytecode":{"tlb":"#F93013","prefix":"F93013","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_MULTIEXP","since_version":4,"doc":{"category":"app_crypto","description":"Calculates `x_1*s_1+...+x_n*s_n` for G1 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative.","gas":"11409+n*630+n/floor(max(log2(n),4))*8820","fift":"BLS_G1_MULTIEXP","fift_examples":[],"opcode":"F93014","stack":"x_1 s_1 ... x_n s_n n - x_1*s_1+...+x_n*s_n"},"bytecode":{"tlb":"#F93014","prefix":"F93014","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"components","length_var":"n","array_entry":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s","value_types":["Integer"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_ZERO","since_version":4,"doc":{"category":"app_crypto","description":"Pushes zero point in G1.","gas":"34","fift":"BLS_G1_ZERO","fift_examples":[],"opcode":"F93015","stack":"- zero"},"bytecode":{"tlb":"#F93015","prefix":"F93015","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"zero","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_MAP_TO_G1","since_version":4,"doc":{"category":"app_crypto","description":"Converts FP element `f` to a G1 point.","gas":"2384","fift":"BLS_MAP_TO_G1","fift_examples":[],"opcode":"F93016","stack":"f - x"},"bytecode":{"tlb":"#F93016","prefix":"F93016","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_INGROUP","since_version":4,"doc":{"category":"app_crypto","description":"Checks that slice `x` represents a valid element of G1.","gas":"2984","fift":"BLS_G1_INGROUP","fift_examples":[],"opcode":"F93017","stack":"x - bool"},"bytecode":{"tlb":"#F93017","prefix":"F93017","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G1_ISZERO","since_version":4,"doc":{"category":"app_crypto","description":"Checks that G1 point `x` is equal to zero.","gas":"34","fift":"BLS_G1_ISZERO","fift_examples":[],"opcode":"F93018","stack":"x - bool"},"bytecode":{"tlb":"#F93018","prefix":"F93018","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_ADD","since_version":4,"doc":{"category":"app_crypto","description":"Addition on G2.","gas":"6134","fift":"BLS_G2_ADD","fift_examples":[],"opcode":"F93020","stack":"x y - x+y"},"bytecode":{"tlb":"#F93020","prefix":"F93020","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_SUB","since_version":4,"doc":{"category":"app_crypto","description":"Subtraction on G2.","gas":"6134","fift":"BLS_G2_SUB","fift_examples":[],"opcode":"F93021","stack":"x y - x-y"},"bytecode":{"tlb":"#F93021","prefix":"F93021","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_NEG","since_version":4,"doc":{"category":"app_crypto","description":"Negation on G2.","gas":"1584","fift":"BLS_G2_NEG","fift_examples":[],"opcode":"F93022","stack":"x - -x"},"bytecode":{"tlb":"#F93022","prefix":"F93022","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_MUL","since_version":4,"doc":{"category":"app_crypto","description":"Multiplies G2 point `x` by scalar `s`. Any `s` is valid, including negative.","gas":"10584","fift":"BLS_G2_MUL","fift_examples":[],"opcode":"F93023","stack":"x s - x*s"},"bytecode":{"tlb":"#F93023","prefix":"F93023","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_MULTIEXP","since_version":4,"doc":{"category":"app_crypto","description":"Calculates `x_1*s_1+...+x_n*s_n` for G2 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative.","gas":"30422+n*1280+n/floor(max(log2(n),4))*22840","fift":"BLS_G2_MULTIEXP","fift_examples":[],"opcode":"F93024","stack":"x_1 s_1 ... x_n s_n n - x_1*s_1+...+x_n*s_n"},"bytecode":{"tlb":"#F93024","prefix":"F93024","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"components","length_var":"n","array_entry":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"s","value_types":["Integer"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_ZERO","since_version":4,"doc":{"category":"app_crypto","description":"Pushes zero point in G2.","gas":"34","fift":"BLS_G2_ZERO","fift_examples":[],"opcode":"F93025","stack":"- zero"},"bytecode":{"tlb":"#F93025","prefix":"F93025","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"zero","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_MAP_TO_G2","since_version":4,"doc":{"category":"app_crypto","description":"Converts FP2 element `f` to a G2 point.","gas":"7984","fift":"BLS_MAP_TO_G2","fift_examples":[],"opcode":"F93026","stack":"f - x"},"bytecode":{"tlb":"#F93026","prefix":"F93026","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"f","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_INGROUP","since_version":4,"doc":{"category":"app_crypto","description":"Checks that slice `x` represents a valid element of G2.","gas":"4284","fift":"BLS_G2_INGROUP","fift_examples":[],"opcode":"F93027","stack":"x - bool"},"bytecode":{"tlb":"#F93027","prefix":"F93027","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_G2_ISZERO","since_version":4,"doc":{"category":"app_crypto","description":"Checks that G2 point `x` is equal to zero.","gas":"34","fift":"BLS_G2_ISZERO","fift_examples":[],"opcode":"F93028","stack":"x - bool"},"bytecode":{"tlb":"#F93028","prefix":"F93028","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_PAIRING","since_version":4,"doc":{"category":"app_crypto","description":"Given G1 points `x_i` and G2 points `y_i`, calculates and multiply pairings of `x_i,y_i`. Returns true if the result is the multiplicative identity in FP12, false otherwise. Returns false if `n=0`.","gas":"20034+n*11800","fift":"BLS_PAIRING","fift_examples":[],"opcode":"F93030","stack":"x_1 y_1 ... x_n y_n n - bool"},"bytecode":{"tlb":"#F93030","prefix":"F93030","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"array","name":"components","length_var":"n","array_entry":[{"type":"simple","name":"x","value_types":["Slice"]},{"type":"simple","name":"y","value_types":["Slice"]}]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"BLS_PUSHR","since_version":4,"doc":{"category":"app_crypto","description":"Pushes the order of G1 and G2 (approx. `2^255`).","gas":"34","fift":"BLS_PUSHR","fift_examples":[],"opcode":"F93031","stack":"- r"},"bytecode":{"tlb":"#F93031","prefix":"F93031","operands":[]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"result","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CDATASIZEQ","since_version":0,"doc":{"category":"app_misc","description":"Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z` in the dag rooted at _Cell_ `c`, effectively returning the total storage used by this dag taking into account the identification of equal cells. The values of `x`, `y`, and `z` are computed by a depth-first traversal of this dag, with a hash table of visited cell hashes used to prevent visits of already-visited cells. The total count of visited cells `x` cannot exceed non-negative _Integer_ `n`; otherwise the computation is aborted before visiting the `(n+1)`-st cell and a zero is returned to indicate failure. If `c` is _Null_, returns `x=y=z=0`.","gas":"","fift":"CDATASIZEQ","fift_examples":[],"opcode":"F940","stack":"c n - x y z -1 or 0"},"bytecode":{"tlb":"#F940","prefix":"F940","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CDATASIZE","since_version":0,"doc":{"category":"app_misc","description":"A non-quiet version of `CDATASIZEQ` that throws a cell overflow exception (8) on failure.","gas":"","fift":"CDATASIZE","fift_examples":[],"opcode":"F941","stack":"c n - x y z"},"bytecode":{"tlb":"#F941","prefix":"F941","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDATASIZEQ","since_version":0,"doc":{"category":"app_misc","description":"Similar to `CDATASIZEQ`, but accepting a _Slice_ `s` instead of a _Cell_. The returned value of `x` does not take into account the cell that contains the slice `s` itself; however, the data bits and the cell references of `s` are accounted for in `y` and `z`.","gas":"","fift":"SDATASIZEQ","fift_examples":[],"opcode":"F942","stack":"s n - x y z -1 or 0"},"bytecode":{"tlb":"#F942","prefix":"F942","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SDATASIZE","since_version":0,"doc":{"category":"app_misc","description":"A non-quiet version of `SDATASIZEQ` that throws a cell overflow exception (8) on failure.","gas":"","fift":"SDATASIZE","fift_examples":[],"opcode":"F943","stack":"s n - x y z"},"bytecode":{"tlb":"#F943","prefix":"F943","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]},{"type":"simple","name":"n","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]},{"type":"simple","name":"z","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDGRAMS","since_version":0,"doc":{"category":"app_currency","description":"Loads (deserializes) a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s\'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`.","gas":"26","fift":"LDGRAMS\\nLDVARUINT16","fift_examples":[],"opcode":"FA00","stack":"s - x s\'"},"bytecode":{"tlb":"#FA00","prefix":"FA00","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDVARINT16","since_version":0,"doc":{"category":"app_currency","description":"Similar to `LDVARUINT16`, but loads a _signed_ _Integer_ `x`.\\nApproximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDIX`.","gas":"26","fift":"LDVARINT16","fift_examples":[],"opcode":"FA01","stack":"s - x s\'"},"bytecode":{"tlb":"#FA01","prefix":"FA01","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STGRAMS","since_version":0,"doc":{"category":"app_currency","description":"Stores (serializes) an _Integer_ `x` in the range `0...2^120-1` into _Builder_ `b`, and returns the resulting _Builder_ `b\'`. The serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown.","gas":"26","fift":"STGRAMS\\nSTVARUINT16","fift_examples":[],"opcode":"FA02","stack":"b x - b\'"},"bytecode":{"tlb":"#FA02","prefix":"FA02","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STVARINT16","since_version":0,"doc":{"category":"app_currency","description":"Similar to `STVARUINT16`, but serializes a _signed_ _Integer_ `x` in the range `-2^119...2^119-1`.","gas":"26","fift":"STVARINT16","fift_examples":[],"opcode":"FA03","stack":"b x - b\'"},"bytecode":{"tlb":"#FA03","prefix":"FA03","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDVARUINT32","since_version":0,"doc":{"category":"app_currency","description":"Loads (deserializes) a `VarUInteger 32` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s\'` of `s`. The expected serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`.","gas":"26","fift":"LDVARUINT32","fift_examples":[],"opcode":"FA04","stack":"s - x s\'"},"bytecode":{"tlb":"#FA04","prefix":"FA04","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDVARINT32","since_version":0,"doc":{"category":"app_currency","description":"Similar to `LDVARUINT32`, but loads a _signed_ _Integer_ `x`.\\nApproximately equivalent to `5 LDU` `SWAP` `3 LSHIFT#` `LDIX`.","gas":"26","fift":"LDVARINT32","fift_examples":[],"opcode":"FA05","stack":"s - x s\'"},"bytecode":{"tlb":"#FA05","prefix":"FA05","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STVARUINT32","since_version":0,"doc":{"category":"app_currency","description":"Stores (serializes) an _Integer_ `x` in the range `0...2^248-1` into _Builder_ `b`, and returns the resulting _Builder_ `b\'`. The serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown.","gas":"26","fift":"STVARUINT32","fift_examples":[],"opcode":"FA06","stack":"b x - b\'"},"bytecode":{"tlb":"#FA06","prefix":"FA06","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"STVARINT32","since_version":0,"doc":{"category":"app_currency","description":"Similar to `STVARUINT32`, but serializes a _signed_ _Integer_ `x` in the range `-2^247...2^247-1`.","gas":"26","fift":"STVARINT32","fift_examples":[],"opcode":"FA07","stack":"b x - b\'"},"bytecode":{"tlb":"#FA07","prefix":"FA07","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"b","value_types":["Builder"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"b2","value_types":["Builder"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDMSGADDR","since_version":0,"doc":{"category":"app_addr","description":"Loads from _Slice_ `s` the only prefix that is a valid `MsgAddress`, and returns both this prefix `s\'` and the remainder `s\'\'` of `s` as slices.","gas":"26","fift":"LDMSGADDR","fift_examples":[],"opcode":"FA40","stack":"s - s\' s\'\'"},"bytecode":{"tlb":"#FA40","prefix":"FA40","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"LDMSGADDRQ","since_version":0,"doc":{"category":"app_addr","description":"A quiet version of `LDMSGADDR`: on success, pushes an extra `-1`; on failure, pushes the original `s` and a zero.","gas":"26","fift":"LDMSGADDRQ","fift_examples":[],"opcode":"FA41","stack":"s - s\' s\'\' -1 or s 0"},"bytecode":{"tlb":"#FA41","prefix":"FA41","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[{"type":"simple","name":"s","value_types":["Slice"]}]},{"value":-1,"stack":[{"type":"simple","name":"s2","value_types":["Slice"]},{"type":"simple","name":"s3","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PARSEMSGADDR","since_version":0,"doc":{"category":"app_addr","description":"Decomposes _Slice_ `s` containing a valid `MsgAddress` into a _Tuple_ `t` with separate fields of this `MsgAddress`. If `s` is not a valid `MsgAddress`, a cell deserialization exception is thrown.","gas":"26","fift":"PARSEMSGADDR","fift_examples":[],"opcode":"FA42","stack":"s - t"},"bytecode":{"tlb":"#FA42","prefix":"FA42","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"PARSEMSGADDRQ","since_version":0,"doc":{"category":"app_addr","description":"A quiet version of `PARSEMSGADDR`: returns a zero on error instead of throwing an exception.","gas":"26","fift":"PARSEMSGADDRQ","fift_examples":[],"opcode":"FA43","stack":"s - t -1 or 0"},"bytecode":{"tlb":"#FA43","prefix":"FA43","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"t","value_types":["Tuple"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REWRITESTDADDR","since_version":0,"doc":{"category":"app_addr","description":"Parses _Slice_ `s` containing a valid `MsgAddressInt` (usually a `msg_addr_std`), applies rewriting from the `anycast` (if present) to the same-length prefix of the address, and returns both the workchain `x` and the 256-bit address `y` as integers. If the address is not 256-bit, or if `s` is not a valid serialization of `MsgAddressInt`, throws a cell deserialization exception.","gas":"26","fift":"REWRITESTDADDR","fift_examples":[],"opcode":"FA44","stack":"s - x y"},"bytecode":{"tlb":"#FA44","prefix":"FA44","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REWRITESTDADDRQ","since_version":0,"doc":{"category":"app_addr","description":"A quiet version of primitive `REWRITESTDADDR`.","gas":"26","fift":"REWRITESTDADDRQ","fift_examples":[],"opcode":"FA45","stack":"s - x y -1 or 0"},"bytecode":{"tlb":"#FA45","prefix":"FA45","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REWRITEVARADDR","since_version":0,"doc":{"category":"app_addr","description":"A variant of `REWRITESTDADDR` that returns the (rewritten) address as a _Slice_ `s`, even if it is not exactly 256 bit long (represented by a `msg_addr_var`).","gas":"26","fift":"REWRITEVARADDR","fift_examples":[],"opcode":"FA46","stack":"s - x s\'"},"bytecode":{"tlb":"#FA46","prefix":"FA46","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s2","value_types":["Slice"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"REWRITEVARADDRQ","since_version":0,"doc":{"category":"app_addr","description":"A quiet version of primitive `REWRITEVARADDR`.","gas":"26","fift":"REWRITEVARADDRQ","fift_examples":[],"opcode":"FA47","stack":"s - x s\' -1 or 0"},"bytecode":{"tlb":"#FA47","prefix":"FA47","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"s","value_types":["Slice"]}],"registers":[]},"outputs":{"stack":[{"type":"conditional","name":"status","match":[{"value":0,"stack":[]},{"value":-1,"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"s\'","value_types":["Slice"]}]}]},{"type":"simple","name":"status","value_types":["Integer"]}],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SENDRAWMSG","since_version":0,"doc":{"category":"app_actions","description":"Sends a raw message contained in _Cell `c`_, which should contain a correctly serialized object `Message X`, with the only exception that the source address is allowed to have dummy value `addr_none` (to be automatically replaced with the current smart-contract address), and `ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter `x` contains the flags. Currently `x=0` is used for ordinary messages; `x=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); `x=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); `x\'=x+1` means that the sender wants to pay transfer fees separately; `x\'=x+2` means that any errors arising while processing this message during the action phase should be ignored. Finally, `x\'=x+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`.","gas":"526","fift":"SENDRAWMSG","fift_examples":[],"opcode":"FB00","stack":"c x - "},"bytecode":{"tlb":"#FB00","prefix":"FB00","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RAWRESERVE","since_version":0,"doc":{"category":"app_actions","description":"Creates an output action which would reserve exactly `x` nanograms (if `y=0`), at most `x` nanograms (if `y=2`), or all but `x` nanograms (if `y=1` or `y=3`), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying `x` nanograms (or `b-x` nanograms, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit `+2` in `y` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit `+8` in `y` means `x:=-x` before performing any further actions. Bit `+4` in `y` means that `x` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently `x` must be a non-negative integer, and `y` must be in the range `0...15`.","gas":"526","fift":"RAWRESERVE","fift_examples":[],"opcode":"FB02","stack":"x y - "},"bytecode":{"tlb":"#FB02","prefix":"FB02","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"RAWRESERVEX","since_version":0,"doc":{"category":"app_actions","description":"Similar to `RAWRESERVE`, but also accepts a dictionary `D` (represented by a _Cell_ or _Null_) with extra currencies. In this way currencies other than Grams can be reserved.","gas":"526","fift":"RAWRESERVEX","fift_examples":[],"opcode":"FB03","stack":"x D y - "},"bytecode":{"tlb":"#FB03","prefix":"FB03","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"x","value_types":["Integer"]},{"type":"simple","name":"D","value_types":["Cell","Null"]},{"type":"simple","name":"y","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCODE","since_version":0,"doc":{"category":"app_actions","description":"Creates an output action that would change this smart contract code to that given by _Cell_ `c`. Notice that this change will take effect only after the successful termination of the current run of the smart contract.","gas":"526","fift":"SETCODE","fift_examples":[],"opcode":"FB04","stack":"c - "},"bytecode":{"tlb":"#FB04","prefix":"FB04","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETLIBCODE","since_version":0,"doc":{"category":"app_actions","description":"Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `c`. If `x=0`, the library is actually removed if it was previously present in the collection (if not, this action does nothing). If `x=1`, the library is added as a private library, and if `x=2`, the library is added as a public library (and becomes available to all smart contracts if the current smart contract resides in the masterchain); if the library was present in the collection before, its public/private status is changed according to `x`. Values of `x` other than `0...2` are invalid.","gas":"526","fift":"SETLIBCODE","fift_examples":[],"opcode":"FB06","stack":"c x - "},"bytecode":{"tlb":"#FB06","prefix":"FB06","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"CHANGELIB","since_version":0,"doc":{"category":"app_actions","description":"Creates an output action similarly to `SETLIBCODE`, but instead of the library code accepts its hash as an unsigned 256-bit integer `h`. If `x!=0` and the library with hash `h` is absent from the library collection of this smart contract, this output action will fail.","gas":"526","fift":"CHANGELIB","fift_examples":[],"opcode":"FB07","stack":"h x - "},"bytecode":{"tlb":"#FB07","prefix":"FB07","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"h","value_types":["Integer"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SENDMSG","since_version":4,"doc":{"category":"app_actions","description":"Creates an output action and returns a fee for creating a message. Mode has the same effect as in the case of `SENDRAWMSG`. Additionally `+1024` means - do not create an action, only estimate fee. Other modes affect the fee calculation as follows: `+64` substitutes the entire balance of the incoming message as an outcoming value (slightly inaccurate, gas expenses that cannot be estimated before the computation is completed are not taken into account), `+128` substitutes the value of the entire balance of the contract before the start of the computation phase (slightly inaccurate, since gas expenses that cannot be estimated before the completion of the computation phase are not taken into account).","gas":"526","fift":"SENDMSG","fift_examples":[],"opcode":"FB08","stack":"c x - fee"},"bytecode":{"tlb":"#FB08","prefix":"FB08","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Cell"]},{"type":"simple","name":"x","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]},"outputs":{"stack":[{"type":"simple","name":"fee","value_types":["Integer"]}],"registers":[{"type":"constant","index":5}]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DEBUG","since_version":0,"doc":{"category":"debug","description":"","gas":"26","fift":"{i*16+j} DEBUG","fift_examples":[],"opcode":"FEij","stack":"-"},"bytecode":{"tlb":"#FE i:(#<= 14) j:(## 4)","prefix":"FE","operands_range_check":{"length":4,"from":0,"to":14},"operands":[{"name":"i","type":"uint","size":4,"min_value":0,"max_value":14,"display_hints":[]},{"name":"j","type":"uint","size":4,"min_value":0,"max_value":15,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"DEBUGSTR","since_version":0,"doc":{"category":"debug","description":"`0 <= n < 16`. Length of `ssss` is `n+1` bytes.\\n`{string}` is a [string literal](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-29-string-literals).\\n`DEBUGSTR`: `ssss` is the given string.\\n`DEBUGSTRI`: `ssss` is one-byte integer `0 <= x <= 255` followed by the given string.","gas":"26","fift":"{string} DEBUGSTR\\n{string} {x} DEBUGSTRI","fift_examples":[],"opcode":"FEFnssss","stack":"-"},"bytecode":{"tlb":"#FEF n:(## 4) ssss:((n * 8 + 8) * Bit)","prefix":"FEF","operands":[{"name":"s","type":"subslice","bits_length_var_size":4,"bits_padding":8,"completion_tag":false,"max_bits":128,"min_bits":8,"max_refs":0,"min_refs":0,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCP","since_version":0,"doc":{"category":"codepage","description":"Selects TVM codepage `0 <= nn < 240`. If the codepage is not supported, throws an invalid opcode exception.","gas":"26","fift":"[nn] SETCP","fift_examples":[],"opcode":"FFnn","stack":"-"},"bytecode":{"tlb":"#FF nn:(#<= 239)","prefix":"FF","operands_range_check":{"length":8,"from":0,"to":239},"operands":[{"name":"n","type":"uint","size":8,"min_value":0,"max_value":239,"display_hints":[]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCP_SPECIAL","since_version":0,"doc":{"category":"codepage","description":"Selects TVM codepage `z-16` for `1 <= z <= 15`. Negative codepages `-13...-1` are reserved for restricted versions of TVM needed to validate runs of TVM in other codepages. Negative codepage `-14` is reserved for experimental codepages, not necessarily compatible between different TVM implementations, and should be disabled in the production versions of TVM.","gas":"26","fift":"[z-16] SETCP","fift_examples":[],"opcode":"FFFz","stack":"-"},"bytecode":{"tlb":"#FFF z:(## 4) {1 <= z}","prefix":"FFF","operands_range_check":{"length":4,"from":1,"to":15},"operands":[{"name":"z","type":"uint","size":4,"min_value":1,"max_value":15,"display_hints":[{"type":"add","value":-16}]}]},"value_flow":{"inputs":{"stack":[],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}},{"mnemonic":"SETCPX","since_version":0,"doc":{"category":"codepage","description":"Selects codepage `c` with `-2^15 <= c < 2^15` passed in the top of the stack.","gas":"26","fift":"SETCPX","fift_examples":[],"opcode":"FFF0","stack":"c - "},"bytecode":{"tlb":"#FFF0","prefix":"FFF0","operands":[]},"value_flow":{"inputs":{"stack":[{"type":"simple","name":"c","value_types":["Integer"]}],"registers":[]},"outputs":{"stack":[],"registers":[]}},"control_flow":{"branches":[],"nobranch":true}}],"aliases":[{"mnemonic":"SWAP","alias_of":"XCHG_0I","doc_fift":"SWAP","doc_stack":"x y - y x","description":"Same as `s1 XCHG0`.","operands":{"i":1}},{"mnemonic":"DUP","alias_of":"PUSH","doc_fift":"DUP","doc_stack":"x - x x","description":"Same as `s0 PUSH`.","operands":{"i":0}},{"mnemonic":"OVER","alias_of":"PUSH","doc_fift":"OVER","doc_stack":"x y - x y x","description":"Same as `s1 PUSH`.","operands":{"i":1}},{"mnemonic":"DROP","alias_of":"POP","doc_fift":"DROP","doc_stack":"x -","description":"Same as `s0 POP`, discards the top-of-stack value.","operands":{"i":0}},{"mnemonic":"NIP","alias_of":"POP","doc_fift":"NIP","doc_stack":"x y - y","description":"Same as `s1 POP`.","operands":{"i":1}},{"mnemonic":"ROT2","alias_of":"BLKSWAP","doc_fift":"ROT2\\n2ROT","doc_stack":"a b c d e f - c d e f a b","description":"Rotates the three topmost pairs of stack entries.","operands":{"i":1,"j":3}},{"mnemonic":"ROLL","alias_of":"BLKSWAP","doc_fift":"[i+1] ROLL","doc_stack":"","description":"Rotates the top `i+1` stack entries.\\nEquivalent to `1 [i+1] BLKSWAP`.","operands":{"i":0}},{"mnemonic":"ROLLREV","alias_of":"BLKSWAP","doc_fift":"[i+1] -ROLL\\n[i+1] ROLLREV","doc_stack":"","description":"Rotates the top `i+1` stack entries in the other direction.\\nEquivalent to `[i+1] 1 BLKSWAP`.","operands":{"j":0}},{"mnemonic":"NIL","alias_of":"TUPLE","doc_fift":"NIL","doc_stack":"- t","description":"Pushes the only _Tuple_ `t=()` of length zero.","operands":{"n":0}},{"mnemonic":"SINGLE","alias_of":"TUPLE","doc_fift":"SINGLE","doc_stack":"x - t","description":"Creates a singleton `t:=(x)`, i.e., a _Tuple_ of length one.","operands":{"n":1}},{"mnemonic":"PAIR","alias_of":"TUPLE","doc_fift":"PAIR\\nCONS","doc_stack":"x y - t","description":"Creates pair `t:=(x,y)`.","operands":{"n":2}},{"mnemonic":"TRIPLE","alias_of":"TUPLE","doc_fift":"TRIPLE","doc_stack":"x y z - t","description":"Creates triple `t:=(x,y,z)`.","operands":{"n":3}},{"mnemonic":"FIRST","alias_of":"INDEX","doc_fift":"FIRST\\nCAR","doc_stack":"t - x","description":"Returns the first element of a _Tuple_.","operands":{"k":0}},{"mnemonic":"SECOND","alias_of":"INDEX","doc_fift":"SECOND\\nCDR","doc_stack":"t - y","description":"Returns the second element of a _Tuple_.","operands":{"k":1}},{"mnemonic":"THIRD","alias_of":"INDEX","doc_fift":"THIRD","doc_stack":"t - z","description":"Returns the third element of a _Tuple_.","operands":{"k":2}},{"mnemonic":"UNSINGLE","alias_of":"UNTUPLE","doc_fift":"UNSINGLE","doc_stack":"t - x","description":"Unpacks a singleton `t=(x)`.","operands":{"n":1}},{"mnemonic":"UNPAIR","alias_of":"UNTUPLE","doc_fift":"UNPAIR\\nUNCONS","doc_stack":"t - x y","description":"Unpacks a pair `t=(x,y)`.","operands":{"n":2}},{"mnemonic":"UNTRIPLE","alias_of":"UNTUPLE","doc_fift":"UNTRIPLE","doc_stack":"t - x y z","description":"Unpacks a triple `t=(x,y,z)`.","operands":{"n":3}},{"mnemonic":"CHKTUPLE","alias_of":"UNPACKFIRST","doc_fift":"CHKTUPLE","doc_stack":"t -","description":"Checks whether `t` is a _Tuple_. If not, throws a type check exception.","operands":{"k":0}},{"mnemonic":"SETFIRST","alias_of":"SETINDEX","doc_fift":"SETFIRST","doc_stack":"t x - t\'","description":"Sets the first component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":0}},{"mnemonic":"SETSECOND","alias_of":"SETINDEX","doc_fift":"SETSECOND","doc_stack":"t x - t\'","description":"Sets the second component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":1}},{"mnemonic":"SETTHIRD","alias_of":"SETINDEX","doc_fift":"SETTHIRD","doc_stack":"t x - t\'","description":"Sets the third component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":2}},{"mnemonic":"FIRSTQ","alias_of":"INDEXQ","doc_fift":"FIRSTQ\\nCARQ","doc_stack":"t - x","description":"Returns the first element of a _Tuple_.","operands":{"k":0}},{"mnemonic":"SECONDQ","alias_of":"INDEXQ","doc_fift":"SECONDQ\\nCDRQ","doc_stack":"t - y","description":"Returns the second element of a _Tuple_.","operands":{"k":1}},{"mnemonic":"THIRDQ","alias_of":"INDEXQ","doc_fift":"THIRDQ","doc_stack":"t - z","description":"Returns the third element of a _Tuple_.","operands":{"k":2}},{"mnemonic":"SETFIRSTQ","alias_of":"SETINDEXQ","doc_fift":"SETFIRSTQ","doc_stack":"t x - t\'","description":"Sets the first component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":0}},{"mnemonic":"SETSECONDQ","alias_of":"SETINDEXQ","doc_fift":"SETSECONDQ","doc_stack":"t x - t\'","description":"Sets the second component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":1}},{"mnemonic":"SETTHIRDQ","alias_of":"SETINDEXQ","doc_fift":"SETTHIRDQ","doc_stack":"t x - t\'","description":"Sets the third component of _Tuple_ `t` to `x` and returns the resulting _Tuple_ `t\'`.","operands":{"k":2}},{"mnemonic":"CADR","alias_of":"INDEX2","doc_fift":"CADR","doc_stack":"t - x","description":"Recovers `x=(t_2)_1`.","operands":{"i":1,"j":0}},{"mnemonic":"CDDR","alias_of":"INDEX2","doc_fift":"CDDR","doc_stack":"t - x","description":"Recovers `x=(t_2)_2`.","operands":{"i":1,"j":1}},{"mnemonic":"CADDR","alias_of":"INDEX3","doc_fift":"CADDR","doc_stack":"t - x","description":"Recovers `x=t_2_2_1`.","operands":{"i":1,"j":1,"k":0}},{"mnemonic":"CDDDR","alias_of":"INDEX3","doc_fift":"CDDDR","doc_stack":"t - x","description":"Recovers `x=t_2_2_2`.","operands":{"i":1,"j":1,"k":1}},{"mnemonic":"ZERO","alias_of":"PUSHINT_4","doc_fift":"ZERO\\nFALSE","doc_stack":"- 0","description":"","operands":{"i":0}},{"mnemonic":"ONE","alias_of":"PUSHINT_4","doc_fift":"ONE","doc_stack":"- 1","description":"","operands":{"i":1}},{"mnemonic":"TWO","alias_of":"PUSHINT_4","doc_fift":"TWO","doc_stack":"- 2","description":"","operands":{"i":2}},{"mnemonic":"TEN","alias_of":"PUSHINT_4","doc_fift":"TEN","doc_stack":"- 10","description":"","operands":{"i":10}},{"mnemonic":"TRUE","alias_of":"PUSHINT_4","doc_fift":"TRUE","doc_stack":"- -1","description":"","operands":{"i":15}},{"mnemonic":"CHKBOOL","alias_of":"FITS","doc_fift":"CHKBOOL","doc_stack":"x - x","description":"Checks whether `x` is a \'\'boolean value\'\' (i.e., either 0 or -1).","operands":{"c":0}},{"mnemonic":"CHKBIT","alias_of":"UFITS","doc_fift":"CHKBIT","doc_stack":"x - x","description":"Checks whether `x` is a binary digit (i.e., zero or one).","operands":{"c":0}},{"mnemonic":"ISZERO","alias_of":"EQINT","doc_fift":"ISZERO","doc_stack":"x - x=0","description":"Checks whether an integer is zero. Corresponds to Forth\'s `0=`.","operands":{"y":0}},{"mnemonic":"ISNEG","alias_of":"LESSINT","doc_fift":"ISNEG","doc_stack":"x - x<0","description":"Checks whether an integer is negative. Corresponds to Forth\'s `0<`.","operands":{"y":0}},{"mnemonic":"ISNPOS","alias_of":"LESSINT","doc_fift":"ISNPOS","doc_stack":"x - x<=0","description":"Checks whether an integer is non-positive.","operands":{"y":1}},{"mnemonic":"ISPOS","alias_of":"GTINT","doc_fift":"ISPOS","doc_stack":"x - x>0","description":"Checks whether an integer is positive. Corresponds to Forth\'s `0>`.","operands":{"y":0}},{"mnemonic":"ISNNEG","alias_of":"GTINT","doc_fift":"ISNNEG","doc_stack":"x - x >=0","description":"Checks whether an integer is non-negative.","operands":{"y":-1}},{"mnemonic":"STZERO","alias_of":"STSLICECONST","doc_fift":"STZERO","doc_stack":"b - b\'","description":"Stores one binary zero.","operands":{"x":0,"y":0,"sss":"0"}},{"mnemonic":"STONE","alias_of":"STSLICECONST","doc_fift":"STONE","doc_stack":"b - b\'","description":"Stores one binary one.","operands":{"x":0,"y":0,"sss":"1"}},{"mnemonic":"PLDREF","alias_of":"PLDREFIDX","doc_fift":"PLDREF","doc_stack":"s - c","description":"Preloads the first cell reference of a _Slice_.","operands":{"n":0}},{"mnemonic":"SETNUMARGS","alias_of":"SETCONTARGS_N","doc_fift":"[n] SETNUMARGS","doc_stack":"c - c\'","description":"Sets `c.nargs` to `n` plus the current depth of `c`\'s stack, where `0 <= n <= 14`. If `c.nargs` is already set to a non-negative value, does nothing.","operands":{"r":0}},{"mnemonic":"SETCONTARGS","alias_of":"SETCONTARGS_N","doc_fift":"[r] -1 SETCONTARGS","doc_stack":"x_1 x_2...x_r c - c\'","description":"Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. If the final depth of `c`\'s stack turns out to be greater than `c.nargs`, a stack overflow exception is generated.","operands":{"n":-1}},{"mnemonic":"BLESSNUMARGS","alias_of":"BLESSARGS","doc_fift":"[n] BLESSNUMARGS","doc_stack":"s - c","description":"Also transforms a _Slice_ `s` into a _Continuation_ `c`, but sets `c.nargs` to `0 <= n <= 14`.","operands":{"r":0}},{"mnemonic":"PUSHROOT","alias_of":"PUSHCTR","doc_fift":"c4 PUSHCTR\\nc4 PUSH","doc_stack":"- x","description":"Pushes the \'\'global data root\'\' cell reference, thus enabling access to persistent smart-contract data.","operands":{"i":4}},{"mnemonic":"POPROOT","alias_of":"POPCTR","doc_fift":"c4 POPCTR\\nc4 POP","doc_stack":"x -","description":"Sets the \'\'global data root\'\' cell reference, thus allowing modification of persistent smart-contract data.","operands":{"i":4}},{"mnemonic":"NEWDICT","alias_of":"NULL","doc_fift":"NEWDICT","doc_stack":" - D","description":"Returns a new empty dictionary.\\nIt is an alternative mnemonics for `PUSHNULL`.","operands":{}},{"mnemonic":"DICTEMPTY","alias_of":"ISNULL","doc_fift":"DICTEMPTY","doc_stack":"D - ?","description":"Checks whether dictionary `D` is empty, and returns `-1` or `0` accordingly.\\nIt is an alternative mnemonics for `ISNULL`.","operands":{}},{"mnemonic":"STDICTS","alias_of":"STSLICE","doc_fift":"STDICTS\\n","doc_stack":"s b - b\'","description":"Stores a _Slice_-represented dictionary `s` into _Builder_ `b`.\\nIt is actually a synonym for `STSLICE`.","operands":{}},{"mnemonic":"NOW","alias_of":"GETPARAM","doc_fift":"NOW","doc_stack":" - x","description":"Returns the current Unix time as an _Integer_. If it is impossible to recover the requested value starting from `c7`, throws a type checking or range checking exception as appropriate.\\nEquivalent to `3 GETPARAM`.","operands":{"i":3}},{"mnemonic":"BLOCKLT","alias_of":"GETPARAM","doc_fift":"BLOCKLT","doc_stack":" - x","description":"Returns the starting logical time of the current block.\\nEquivalent to `4 GETPARAM`.","operands":{"i":4}},{"mnemonic":"LTIME","alias_of":"GETPARAM","doc_fift":"LTIME","doc_stack":" - x","description":"Returns the logical time of the current transaction.\\nEquivalent to `5 GETPARAM`.","operands":{"i":5}},{"mnemonic":"RANDSEED","alias_of":"GETPARAM","doc_fift":"RANDSEED","doc_stack":" - x","description":"Returns the current random seed as an unsigned 256-bit _Integer_.\\nEquivalent to `6 GETPARAM`.","operands":{"i":6}},{"mnemonic":"BALANCE","alias_of":"GETPARAM","doc_fift":"BALANCE","doc_stack":" - t","description":"Returns the remaining balance of the smart contract as a _Tuple_ consisting of an _Integer_ (the remaining Gram balance in nanograms) and a _Maybe Cell_ (a dictionary with 32-bit keys representing the balance of \'\'extra currencies\'\').\\nEquivalent to `7 GETPARAM`.\\nNote that `RAW` primitives such as `SENDRAWMSG` do not update this field.","operands":{"i":7}},{"mnemonic":"MYADDR","alias_of":"GETPARAM","doc_fift":"MYADDR","doc_stack":" - s","description":"Returns the internal address of the current smart contract as a _Slice_ with a `MsgAddressInt`. If necessary, it can be parsed further using primitives such as `PARSEMSGADDR` or `REWRITESTDADDR`.\\nEquivalent to `8 GETPARAM`.","operands":{"i":8}},{"mnemonic":"CONFIGROOT","alias_of":"GETPARAM","doc_fift":"CONFIGROOT","doc_stack":" - D","description":"Returns the _Maybe Cell_ `D` with the current global configuration dictionary. Equivalent to `9 GETPARAM `.","operands":{"i":9}},{"mnemonic":"MYCODE","alias_of":"GETPARAM","doc_fift":"MYCODE","doc_stack":" - c","description":"Retrieves code of smart-contract from c7. Equivalent to `10 GETPARAM `.","operands":{"i":10}},{"mnemonic":"INCOMINGVALUE","alias_of":"GETPARAM","doc_fift":"INCOMINGVALUE","doc_stack":" - t","description":"Retrieves value of incoming message from c7. Equivalent to `11 GETPARAM `.","operands":{"i":11}},{"mnemonic":"STORAGEFEES","alias_of":"GETPARAM","doc_fift":"STORAGEFEES","doc_stack":" - i","description":"Retrieves value of storage phase fees from c7. Equivalent to `12 GETPARAM `.","operands":{"i":12}},{"mnemonic":"PREVBLOCKSINFOTUPLE","alias_of":"GETPARAM","doc_fift":"PREVBLOCKSINFOTUPLE","doc_stack":" - t","description":"Retrives PrevBlocksInfo: `[last_mc_blocks, prev_key_block]` from c7. Equivalent to `13 GETPARAM `.","operands":{"i":13}},{"mnemonic":"DUMPSTK","alias_of":"DEBUG","doc_fift":"DUMPSTK","doc_stack":"-","description":"Dumps the stack (at most the top 255 values) and shows the total stack depth. Does nothing on production versions of TVM.","operands":{"i":0,"j":0}},{"mnemonic":"STRDUMP","alias_of":"DEBUG","doc_fift":"STRDUMP","doc_stack":"-","description":"Dumps slice with length divisible by 8 from top of stack as a string. Does nothing on production versions of TVM.","operands":{"i":0,"j":0}},{"mnemonic":"DUMP","alias_of":"DEBUG","doc_fift":"s[j] DUMP","doc_stack":"-","description":"Dumps slice with length divisible by 8 from top of stack as a string. Does nothing on production versions of TVM.","operands":{"i":2}},{"mnemonic":"SETCP0","alias_of":"SETCP","doc_fift":"SETCP0","doc_stack":"-","description":"Selects TVM (test) codepage zero as described in this document.","operands":{"n":0}}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!*********************************!*\
  !*** ./client/src/extension.ts ***!
  \*********************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.activate = activate;
exports.deactivate = deactivate;
exports.startServer = startServer;
const vscode = __webpack_require__(/*! vscode */ "vscode");
const vscode_1 = __webpack_require__(/*! vscode */ "vscode");
const vscode_uri_1 = __webpack_require__(/*! vscode-uri */ "./node_modules/vscode-uri/lib/umd/index.js");
const client_log_1 = __webpack_require__(/*! ./client-log */ "./client/src/client-log.ts");
const client_config_1 = __webpack_require__(/*! ./client-config */ "./client/src/client-config.ts");
const shared_msgtypes_1 = __webpack_require__(/*! @shared/shared-msgtypes */ "./shared/src/shared-msgtypes.ts");
const build_system_1 = __webpack_require__(/*! ./build-system */ "./client/src/build-system.ts");
const openBocCommand_1 = __webpack_require__(/*! ./commands/openBocCommand */ "./client/src/commands/openBocCommand.ts");
const BocEditorProvider_1 = __webpack_require__(/*! ./providers/BocEditorProvider */ "./client/src/providers/BocEditorProvider.ts");
const BocFileSystemProvider_1 = __webpack_require__(/*! ./providers/BocFileSystemProvider */ "./client/src/providers/BocFileSystemProvider.ts");
const BocDecompilerProvider_1 = __webpack_require__(/*! ./providers/BocDecompilerProvider */ "./client/src/providers/BocDecompilerProvider.ts");
const saveBocDecompiledCommand_1 = __webpack_require__(/*! ./commands/saveBocDecompiledCommand */ "./client/src/commands/saveBocDecompiledCommand.ts");
const package_manager_1 = __webpack_require__(/*! ./utils/package-manager */ "./client/src/utils/package-manager.ts");
let client = null;
async function activate(context) {
    const params = {
        environment: typeof globalThis === "undefined" ? "node" : "browser"
    };
    startServer(context, params).catch(client_log_1.consoleError);
    await (0, build_system_1.registerBuildTasks)(context);
    (0, openBocCommand_1.registerOpenBocCommand)(context);
    (0, saveBocDecompiledCommand_1.registerSaveBocDecompiledCommand)(context);
    registerMistiCommand(context);
    const config = vscode.workspace.getConfiguration("tact");
    const openDecompiled = config.get("boc.openDecompiledOnOpen");
    if (openDecompiled) {
        BocEditorProvider_1.BocEditorProvider.register();
        const bocFsProvider = new BocFileSystemProvider_1.BocFileSystemProvider();
        context.subscriptions.push(vscode.workspace.registerFileSystemProvider("boc", bocFsProvider, {
            isCaseSensitive: true,
            isReadonly: false,
        }));
    }
    const bocDecompilerProvider = new BocDecompilerProvider_1.BocDecompilerProvider();
    context.subscriptions.push(vscode.workspace.registerTextDocumentContentProvider(BocDecompilerProvider_1.BocDecompilerProvider.scheme, bocDecompilerProvider));
}
function deactivate() {
    if (!client) {
        return undefined;
    }
    return client.stop();
}
async function startServer(context, _params) {
    const disposables = [];
    if (typeof globalThis === "undefined") {
        const lspNode = await Promise.resolve().then(() => __webpack_require__(/*! vscode-languageclient/node */ "./node_modules/vscode-languageclient/node.js"));
        const clientOptions = {
            outputChannel: (0, client_log_1.createClientLog)(),
            revealOutputChannelOn: lspNode.RevealOutputChannelOn.Never,
            documentSelector: [
                { scheme: "file", language: "tact" },
                { scheme: "file", language: "fift" },
                { scheme: "untitled", language: "tact" },
            ],
            synchronize: {
                configurationSection: "tact",
                fileEvents: vscode.workspace.createFileSystemWatcher("**/*.tact"),
            },
            initializationOptions: {
                clientConfig: (0, client_config_1.getClientConfiguration)(),
                treeSitterWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter.wasm")
                    .fsPath,
                tactLangWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter-tact.wasm").fsPath,
                fiftLangWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter-fift.wasm").fsPath,
            },
        };
        const serverModule = context.asAbsolutePath("dist/server.js");
        const serverOptions = {
            run: {
                module: serverModule,
                transport: lspNode.TransportKind.ipc,
            },
            debug: {
                module: serverModule,
                transport: lspNode.TransportKind.ipc,
                options: { execArgv: ["--nolazy", "--inspect=6009"] }, // same port as in .vscode/launch.json
            },
        };
        client = new lspNode.LanguageClient("tact-server", "Tact Language Server", serverOptions, clientOptions);
    }
    else {
        const lspBrowser = await Promise.resolve().then(() => __webpack_require__(/*! vscode-languageclient/browser */ "./node_modules/vscode-languageclient/browser.js"));
        const clientOptions = {
            outputChannel: (0, client_log_1.createClientLog)(),
            revealOutputChannelOn: lspBrowser.RevealOutputChannelOn.Never,
            documentSelector: [
                { scheme: "file", language: "tact" },
                { scheme: "file", language: "fift" },
                { scheme: "untitled", language: "tact" },
            ],
            synchronize: {
                configurationSection: "tact",
                fileEvents: vscode.workspace.createFileSystemWatcher("**/*.tact"),
            },
            initializationOptions: {
                clientConfig: (0, client_config_1.getClientConfiguration)(),
                treeSitterWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter.wasm")
                    .fsPath,
                tactLangWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter-tact.wasm").fsPath,
                fiftLangWasmUri: vscode_uri_1.Utils.joinPath(context.extensionUri, "./dist/tree-sitter-fift.wasm").fsPath,
            },
        };
        const worker = new Worker("dist/server.js");
        client = new lspBrowser.LanguageClient("tact-server", "Tact Language Server", clientOptions, worker);
    }
    await client.start();
    registerCommands(disposables);
    const langStatusBar = vscode.window.createStatusBarItem("Tact", vscode.StatusBarAlignment.Left, 60);
    langStatusBar.text = "Tact";
    client.onNotification(shared_msgtypes_1.SetToolchainVersionNotification, (version) => {
        const settings = vscode.workspace.getConfiguration("tact");
        const hash = settings.get("toolchain.showShortCommitInStatusBar") &&
            version.version.commit.length > 8
            ? ` (${version.version.commit.slice(-8)})`
            : "";
        langStatusBar.text = `Tact ${version.version.number}${hash}`;
        langStatusBar.show();
    });
    client.onRequest("tact.readFile", async (params) => {
        try {
            const data = await vscode.workspace.fs.readFile(vscode_1.Uri.parse(params.uri));
            return Buffer.from(data).toString("utf8");
        }
        catch { }
        // eslint-disable-next-line unicorn/no-useless-undefined
        return undefined;
    });
    return new vscode.Disposable(() => {
        disposables.forEach(d => void d.dispose());
    });
}
async function showReferencesImpl(client, uri, position) {
    if (!client)
        return;
    await vscode.commands.executeCommand("editor.action.showReferences", vscode.Uri.parse(uri), client.protocol2CodeConverter.asPosition(position), []);
}
function registerCommands(disposables) {
    disposables.push(vscode.commands.registerCommand("tact.showParent", async (uri, position) => {
        if (!client)
            return;
        await showReferencesImpl(client, uri, position);
    }), vscode.commands.registerCommand("tact.showReferences", async (uri, position, locations) => {
        if (!client)
            return;
        const thisClient = client;
        await vscode.commands.executeCommand("editor.action.showReferences", vscode.Uri.parse(uri), client.protocol2CodeConverter.asPosition(position), locations.map(element => thisClient.protocol2CodeConverter.asLocation(element)));
    }), vscode.commands.registerCommand(shared_msgtypes_1.GetTypeAtPositionRequest, async (params) => {
        if (!client) {
            return null;
        }
        const isFromEditor = !params;
        if (!params) {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                return null;
            }
            params = {
                textDocument: {
                    uri: editor.document.uri.toString(),
                },
                position: {
                    line: editor.selection.active.line,
                    character: editor.selection.active.character,
                },
            };
        }
        const result = await client.sendRequest(shared_msgtypes_1.GetTypeAtPositionRequest, params);
        if (isFromEditor && result.type) {
            const editor = vscode.window.activeTextEditor;
            if (editor && result.range) {
                const range = new vscode_1.Range(new vscode_1.Position(result.range.start.line, result.range.start.character), new vscode_1.Position(result.range.end.line, result.range.end.character));
                editor.selections = [new vscode.Selection(range.start, range.end)];
                editor.revealRange(range);
            }
            void vscode.window.showInformationMessage(`Type: ${result.type}`);
        }
        return result;
    }), vscode.commands.registerCommand(shared_msgtypes_1.GetDocumentationAtPositionRequest, async (params) => {
        if (!client || !params) {
            return null;
        }
        return client.sendRequest(shared_msgtypes_1.GetDocumentationAtPositionRequest, params);
    }));
}
function getInstallCommandForMisti(packageManager) {
    switch (packageManager) {
        case "bun": {
            return "bun add -d @nowarp/misti";
        }
        case "yarn": {
            return "yarn add -D @nowarp/misti";
        }
        case "pnpm": {
            return "pnpm add -D @nowarp/misti";
        }
        case "npm": {
            return "npm install --save-dev @nowarp/misti";
        }
        default: {
            return "";
        }
    }
}
async function projectUsesMisti() {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0)
        return false;
    const packageJsonPath = vscode.Uri.joinPath(workspaceFolders[0].uri, "package.json");
    try {
        const contentArray = await vscode.workspace.fs.readFile(packageJsonPath);
        const content = Buffer.from(contentArray).toString("utf8");
        const packageJson = JSON.parse(content);
        return (packageJson.dependencies?.["@nowarp/misti"] !== undefined ||
            packageJson.devDependencies?.["@nowarp/misti"] !== undefined);
    }
    catch {
        // ignore any errors
    }
    return false;
}
function registerMistiCommand(context) {
    context.subscriptions.push(vscode.commands.registerCommand("tact.runMisti", async () => {
        if (!(await projectUsesMisti())) {
            const packageManager = await (0, package_manager_1.detectPackageManager)();
            const installCommand = getInstallCommandForMisti(packageManager);
            const result = await vscode.window.showErrorMessage("Misti is not installed in your project. Would you like to install it?", "Install Misti", "Cancel");
            if (result === "Install Misti") {
                const terminal = vscode.window.createTerminal("Install Misti");
                terminal.show();
                terminal.sendText(installCommand);
            }
            return;
        }
        const settings = vscode.workspace.getConfiguration("tact");
        const mistiBinPath = settings.get("linters.misti.binPath") ?? "npx";
        // Handle a case when user specified "npx misti" command
        const [executable, ...args] = mistiBinPath.split(" ");
        const task = new vscode.Task({ type: "misti" }, vscode.TaskScope.Workspace, "Run Misti Analysis", "Misti", new vscode.ShellExecution(executable, [...args, "./tact.config.json"]));
        task.presentationOptions = {
            reveal: vscode.TaskRevealKind.Always,
            panel: vscode.TaskPanelKind.Dedicated,
            focus: true,
        };
        const useProblemMatcher = settings.get("linters.useProblemMatcher") ?? false;
        if (useProblemMatcher) {
            task.problemMatchers = ["$tact"];
        }
        await vscode.tasks.executeTask(task);
    }));
}

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=client.js.map