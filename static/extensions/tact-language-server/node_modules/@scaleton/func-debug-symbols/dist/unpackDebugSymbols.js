"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unpackDebugSymbols = void 0;
const core_1 = require("@ton/core");
const constants_1 = require("./constants");
function unpackDebugSymbols(rootCell) {
    const root = rootCell.beginParse();
    if (root.loadUint(16) !== constants_1.DEBUG_MAGIC) {
        throw new Error('Debug symbols malformed.');
    }
    const proceduresDict = root
        .loadRef()
        .asSlice()
        .loadDictDirect(core_1.Dictionary.Keys.Int(32), {
        serialize: () => { },
        parse: (src) => ({
            cellHash: src.loadBuffer(32).toString('hex'),
            name: src.loadStringTail(),
        }),
    });
    const procedures = [...proceduresDict].map(([methodId, descriptor]) => ({
        methodId,
        ...descriptor,
    }));
    const globals = [];
    const globalsDictRef = root.loadMaybeRef();
    if (globalsDictRef) {
        const globalsDict = globalsDictRef
            .beginParse()
            .loadDictDirect(core_1.Dictionary.Keys.Uint(32), {
            serialize: () => { },
            parse: (src) => src.loadStringTail(),
        });
        for (const globalIndex of globalsDict.keys()) {
            const globalName = globalsDict.get(globalIndex);
            globals.push({ index: globalIndex, name: globalName });
        }
    }
    return {
        procedures,
        globals,
    };
}
exports.unpackDebugSymbols = unpackDebugSymbols;
